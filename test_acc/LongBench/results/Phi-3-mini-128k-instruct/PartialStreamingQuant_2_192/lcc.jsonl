{"pred": "\t\t\t{\n\t\t\t\tif ( dc.m_Registered( new DuelContext dc.Registered=true;\n\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( dc.ReadyCountDown( newG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(100, 0)\n        a.write_frames(np.zeros(100, dtype=np.float32))\n        a.seek(0, ", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    # Open the page\n    self.open_page(video_id)\n\n    # Get the video title\n    self.video_title = self.get_text_by_css(self._VIDEO_TITLE)\n\n    # Get the video description\n   ", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"value\", extent.getValue());\n\t\t\t}\n\t\t\t\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\t\n\t\t\t\tif (reader.", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def _handle_start(self):\n        pass\n    def _handle_stop(self):\n        pass\n    def _enable_start_event(self):\n        self.start_requested = True\n    def _enable_start_requested(self):\n        self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   Send(mob, new SR_Rune(mob.Account, mob.Location, mob.Map));\n                    break;\n                case 3:\n                    if (RuneAcc.ChildRune == null)\n                        RuneAcc.ChildRune = new", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       for (int i = 0; i++();\n        s.println(v);\n    }\n    }\n    }\n    }\n    @Override\n    public void\n    getCipherSuites\n    {\n    }\n    @Override\n    @Override\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static final class GCRef extends Persistent {\n        private static final", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tbtnEnergizeAll.setRect(0, btnEnergize1.bottom() + 1, width, BTN_HEIGHT);\n\t\t\t\t\tbtnEnergizeAll.icon(new ItemSprite(ItemSprite", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   return self.do_get(self, environ, None\n    def handle(environ, start_response):\n        self.send_response = self.dispatcher.dispatcher.handle_request(environ, handle_response)\n    def handle(self, environ, environ, start_response", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.statuses = [\n            {\n                'id': '1',\n                'username': 'test',\n                'text': 'test',\n                'created_at': '2015-01-01 00:00:00',\n               ", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n        }\n        }\n    def action_upload_file(self,\n            \"upload_file\":\n        }\n    def action_download_files(self,\n        return {\"error\": False,\n        \"status\": OperationStatus.STATUS_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b), \"Trusted+Untrusted\");\n\t\t}\n\t}\n\t\n\t[TestFixture]\n\tpublic class ZoneIdentityPermissionTest2\n\t{\n\t\t[Test]\n\t\tpublic void PermissionState", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            if trust_manager.getAcceptedIssuers() is not None:\n                return trust_manager.getAcceptedIssuers()\n        return None\n\ndef _get_trust_manager(tr", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n    }\n}\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   #@\n    def __data_stream_writer = down_stream_writer\n    def __get_writer(self)\n    def __init__(self)\n    def __init__(\n        raise NotImplemented\n    def get_writer() -> None:\n        raise NotIm", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\n\t\t\t\t\tif (option1) {\n\t\t\t\t\t\tjumpsReactive.Add(Util.ChangeDecimalSeparator(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n                unit.", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons = loadFromFile();\n\t\t\t}\n\t\t}\n\t\t}\n\t\t}, SERVERDATA(new ConfigFile<String, Object>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic String getSavePath()\n\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t// Add the nodes\n\t\taddField(new PreferenceNode(generalNode));\n\t\taddField(new PreferenceNode(playbackNode));\n\t\taddField(new PreferenceNode(shortcutsNode));\n\t\t\t(\t\t\t\t\tNAME(\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.SpellTarget = from;\n            }\n        }\n        public override void OnSphereCast()\n        {\n            Caster.SendAsciiMessage(\"Targeting...\");\n            Caster.SendAsciiMessage(\"Targeting...\");\n            Caster.Send", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.dispatch(self.query_result_or_mapper\n        self.query_cls\n        self.query_cls\n        and :meth:`get_bind_callable\n        \"\"\"\n        self.query_cls\n        \"\"\"\n        self.query_cls\n       ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t}\n\t\n\t */\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t}\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   # The request handler method\n    def wrapper:\n        return self.redirect(self.redirect(self.request.path)\n        return self.redirect(self.redirect_when_get_request.data_body\n        return self.redirect(self.head\n    return wrapper\n   ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tif (viewIndex != -1)\n\t\t\t\twriter.AddAttribute (\"style\", \"display:inline;\");\n\t\t\telse\n\t\t\t\twriter.AddAttribute (\"style\", \"display:none;\");\n\t\t\t\n\t\t\tforeach (View v", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wd = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wd.run()\n    wd.download()\n    wd.download()\n    wd", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 12)\n                if (m_Mod == 2)\n                {\n                if (mod == 12)\n                {\n                }\n                if (mod == 21)\n                {\n                }\n                else if (mod == 2", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(platforms)\n    else:\n        builds = android_builds(build, builds)\n    # Build the button html\n    if not simple:\n        # Add the privacy/systems/languages links\n        if not small:\n            # Add the priv", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t}\n\t\tif (stateBeansList!=null && !", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var argument = argument.ToSyntaxTree();\n                if ( argument.Type != null && argument.Type.ToString() == \"System.Object\" && argument.Name.Value.StringValue == \"ByRef\" ) {\n                   ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assert_children(self.split_test_usage_key, self.split_test_split_test_usage_key,\n        self.assert_children(self.split_test_update_url, self.split_test_update_url\n        self.assert_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfName(\"DSIG\"));\n            tmp.Add(new PdfName(\"Adobe\"));\n            tmp.Add(new PdfString(\"Adobe\"));\n            tmp.Add(new PdfName(\"IDENTITY\"));\n            tmp.Add(new", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tif (cells.get(cell).getNumUses() > 0) continue;\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n      }\n    }\n    @Override\n    public void run() {\n      try {\n        if (bitmapReference != null) {\n          bitmapReference.get().release();\n        }\n        bitmapReference = null;", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # less than ideal button duplication\n    self.save_button.click()\n    self.reset_button.click()\n    self.cancel_button.click()\n    # TODO: refactor to avoid duplication\n    @property\n    def is_displayed(self):\n       ", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles, sequences);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n        }\n        #endregion\n    }\n}\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tinventory.get(0).setItemEnchantments(compound.getCompound(\"Enchantments\"));\n\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound getTagCompound()\n\t{\n\t\tNBTTagCompound compound", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        return super.toString() + \" (probability=\" + probability + \")\";", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i)", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(name=\"owner\")\n        o = Organization.objects.get(name=\"company\")\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.name, \"company\")\n        self.assertEqual", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self._plot_line(x=x, y=None, z=None, z=None, ind=None, z_name=None, sel_dim=None, z_name=None, z_value=None, z_name=None, sel_dim=None, z", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.Contains(rootFolder.RootPath.CleanFilePathBasic()))\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Any())\n            {\n                _commandQueueManager.Enqueue(new Command<Root", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('comcyninviewvalue')\n        if self.request.has_key('comcyninviewvalue):\n            value\n        if self.request.has_key\n        if self.request.has_key\n        if self.request", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t}\n\t}\n\t\tpublic static Tile[][] GetStaticTiles = new TileLists[8][];\n\t\t\t\n\t\t{\n\t\t\t\tm_TileList.AddRange( GetStaticTiles = GetStatic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // - get the parcel info\nanswers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Edit(this,PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the column headings\n        # Determine the averaging period\n        # Determine the averaging\n        # Determine the averaging/integrating period\n        # Determine the averaging period.\n        # Determine the averaging period\n        # Det", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group or organization')}\n    return {'success': True}\ndef group_member_create(context, data_dict):\n    user = context['user']\n    if not", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChild(predictionAttribute.getMapping().get(example.get(predictionAttribute))).getPartitionId();\n\t\t\t\t// setting outcomes\n\t\t\t\toutcomes[parentIndex] = childIndex;\n\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResult() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           @Override\n      @Override\n      @Override\n      }\n      int minLength() {\n      }\n   }\n      @Override\n      boolean[]\n      @Override\n      boolean[] firstSet(boolean[] firstSet(boolean firstSet() {\n      }\n      @Override\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired && !StringUtil.isBlank(studyFormName) && !AccessionNumberUtil.matchStudyFormName(accessionNumber, studyFormName)) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        return", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Dropping client {0} because {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tnewConn", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[i].buildVo());\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    pass\n#-------------------\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = ind2sub(A,seqindex); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</param>\n        ///", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot data\n  if not 'granularity' in pD:\n    return S_ERROR( \"Missing granularity!\" )\n  granular", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot);\n\t\t}\n\t\tvoid BaseBuilderQueueManager.Tick(IBot bot)\n\t\t{\n\t\t\tif (IsTraitDisabled)\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       m_currentPlan = plan;\n        return plan;\n    }\n    public void compile(String sql, int paramCount, boolean singlePartition, boolean inferSP, boolean lockInSP, DeterminismMode detMode) {\n        compile(sql, paramCount, singlePartition", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.ComboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.StopBits = (StopBits)bits;", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_promote_demote_user_test_edit_test_view(self.get_page(self.get_data(self.get_edit_test_view(self.user)\n        self.check_promote_user_test_edit_view_", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, remaining_argv = parser.parse_known_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    if len(remaining_argv) > 0:\n        print", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.APList = self.getAPList(self.newAPList,\n\t\tself.list = List(self.list,\n\t\t\tself.newAPList = self.buildAPList = self.buildEntry(self.list,\n\t\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               if (generateChecksum && checksumText)\n                    fCode += \" \" + GetChecksum(code);\n                if (text != null)\n                    fCode += \" \" + text;\n                if (startStopText)\n                    fCode += \"*\";\n                if", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.copyOf(results, results.length, String.class);\n  }\n  \n  /**\n   * Load a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   *\n   * @param key The key to the list", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-89.99, 89.99, 18.9876)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        x_points = x_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (!_newStyleLogViewer)\n            {\n                toolStripButton", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # get_mf\n    # get_timbre_pitches_pitches_loudness_file\n    mfcc_dir\n    mfcc_file_dirs\n    song_dirs_dir\n    # get_mfcc_dir\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns a read-only snapshot of the current collection.\n        /// </summary>\n        /// <returns> A read-only snapshot of the current collection.</returns>\n        /// <exception cref=\"NotSupportedException\">\n        /// Thrown when the", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.Sus\n            this.SuspendImage\n            this.Name = \"\";\n            treeNode22.Name = \"\";\n            treeNode26.Name = \"\";\n            treeNode2.Text = \"\";\n            treeNode2.Text = \"\";\n            treeNode22", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, name, dll, resultType, argTypes, doc, argNames, extension, deprecated ):\n        \"\"\"Create a null function for the given name\"\"\"\n        func = self.nullFunction\n        return func(\n            name, dll,\n            resultType,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.getEndID(NID.End);\n    }\n    }\n    private static void writeUint64(final DataOutput header) throws IOException {\n        writeUint64(header, NID.End);\n    }", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                if (rampDelay > 0)\n                    Thread.sleep(rampDelay);\n                else\n                    break;\n                if (rampUp)\n                    alphaLevel += 1.0 / rampDelay;\n                else\n                    alphaLevel -= 1", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Should().\n        }\n        }\n        }\n        [Test]\n        public void GetItems()\n        {\n            var item = Subject.GetItems();\n        }\n    }\n    }\n        [Test]\n        public", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       SersicMain(SersicMain_n\n        Sersic(1)\n        Sersic(Main)\n        f.writelines(['A) ', str(imagefile, ' ', str(image) , ' ', str(mag) ,\\n')\n        f.", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x04) << 2);\n                    i += ((b & 0x02) << 5);\n                    i &= 0xFF;\n                    break;\n                    i &= 0xFF;\n                    i", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key.make_usage_key('course', self._course_key)\n    def _upload_assets(self):\n        \"\"\"\n        Upload course assets to Studio.\n        \"\"\"\n        if not self._assets:\n            return\n        for asset in self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\treturn (int) (Math.random() * chance);\n\t}\n\t\n\tpublic void fulfillSafari(Player player) {\n\t\tString currentS", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            os.makedirs(config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.\n\n        }\n        }\n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.ui_log_log.info(\"\")\n        self.archive.set_archive(self.get_archive.set_debug(\"\")\n        self.setup_directive(\"%s_exit_handler()\n        self.ui_log.info(\"\")\n        self.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionBasicFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session Resource List \"\"\"\n    getAllMaterialList.result = {\"MaKaC.conference.Link\": ILinkMinimalFossil, \"MaKaC", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       result = MessageImportResult.FAILURE;\n                    }\n                };\n                result = importFromServer(fileTextField.getText().trim(), result);\n            } else {\n                result = importFromLocal(fileTextField.getText().trim(), result);\n            }\n            if", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\tif (value instanceof SortObject) {\n\t\t\t\t\tlayer = ((SortObject)value).getSortOrder();\n\t\t\t\t}\n\t\t    \t}\n\t\t}\n\t\treturn layer;\n\t}\n    }\n    \n    protected String", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequestDelegate() {\n            @Override\n            public void onCompleted(GraphResponse response) {\n                if (response.getError() != null) {\n                    // An error occurred, and we should not attempt to", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.strength /= sum;\n\t}\n\tpublic void tryInform() {\n\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at': constants.SPLITED_AT_FINISHED,\n            'started_at':\n            'stage': {\n            'finished_at': constants.SPLITED_AT,\n            'started_at': constants.SP", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        if ZoneLetter < 'N':\n            phi1 = phi1 + 90\n        else:\n            phi1 = phi1 - 90\n    else:\n        if ZoneLetter < 'S':\n           ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report sent successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[request.user.", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    @property\n    @property\n    def _validate_license_info\n    @property\n    @property\n    def _license_info\n    @property\n    @property\n    @property\n    def _license_info\n    def _license_", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.LeftToRight = LeftToRight.No;\n\t\t\t}\n\t\t}\n\t\tpublic void ApplyTo(Form form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public String getIdentifier()\n    {\n        return identifier;\n    }\n    /**\n     * @param identifier\n     */\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           for tag in constants.supported_tags[constants.length_tag_type]:\n                if re.match(tag, regex):\n                    new_positional_tags_list.append(TagRegex(tag, regex))\n            return new_positional_tags_list\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n            }\n        }\n    }\n}\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\nclass OBD_PID20(OBD_Packet):\n    name = \"PID_20_EngineLoad\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 100., unit=\"%\")\n   ", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\tself.add_alias(self.set_alias(self.name, 'default')\n\t\t\tself.label, content_type=content_type):\n\t\t\tself.type,\n\t\t\tself.type,\n\t\t\tself.confirm, self.", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           {\n                AddSpell( typeof(Reg.Garlic, Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot, Reg.Garlic, Reg.SpidersSilk, Reg.MandrakeRoot, Reg.SulfurousAsh,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if exc is not None:\n            exc = reraise(exc.__class__, exc, exc.__traceback__)\n        self.app.do_teardown_request()\n        self.app.teardown_request(self.request, exc)\n        self", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return PubSubConsumer.sub_consumer_id, PubSubConsumer.id.label('pubsub_consumer_id, PubSubConsumer.max_depth, PubSubConsumer.max_depth.label('max_depth)\n@query_wrapper\ndef pubsub", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getResourcesByRelease(Collection<ResourceEntity> resources, ReleaseEntity release) {\n        Set", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        rot_dir_norm = np.linalg.norm(rot_dir)\n        rot_dir = rot_dir / rot_dir_norm\n        # Compute theta and ph", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.proxy = ProviderProxy(self.NZIP)\n        return self.url\n    \"\"\"\n        if self.proxy.enabled\n        \"\"\"\n        if self.proxy\n        \"\"\"\n        if self.proxy\n    def _buildURL(self, url):\n        \"\"\"", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"FontUnit {0}\", font_size_names [type]);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s, IFormatProvider provider)\n\t\t{\n\t\t\treturn new FontUnit (s, provider", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for decryption.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t//", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].ToString(), Is.EqualTo(\"must be an object or array\"));\n\t\tAssert.That(obj.Properties[0].Value[\"In this test\"].ToString(), Is.EqualTo(\"It is an object.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic t = getVertexTopic(vertex, topicmap, optionsValues);\n                edges.add(new T2(\"http://www.w3.org/1999/02/20-rdf-syntax-ns#type\", \"http://wandora.", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_volume_scale(1)\n    assert np.allclose(data[-1], 1.618e+1.08e+0.08e+1.084e+02)\n    assert np.allclose", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.compareGraphs(db1, db2);\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.102200',\n                    u'AvailabilityZone': 'us-east-1a'}]\n        assert not alert.lowest_spot_price(history, 'g2.2xlarge', 'Windows', '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Performs the installation.\n\t * \n\t * @return\n\t */\n\tprivate String performInstallation() {\n\t\tString jarFile = getJarFile", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteFramebuffers(1, ref window.Surface.Width);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteTextures(1, ref window.Texture);\n\t\t\tOpenGL.CheckGLError", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._data_cov_mat_cov_mat\n        \"\"\"\n        return self.data_cov_mat\n        \"\"\"\n        :rtype: numpy.ndarray\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_error_cov_mat", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       ReflectionToStringBuilder reflectionToStringBuilder = new ReflectionToStringBuilder(this, ToStringStyle.STYLE_SHORT_PREFIX_PRIMITIVE);\n        m_toStringRepr = reflectionToStringBuilder.toString();\n        return new CmsLink(m_structureId, m_", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               osgBucket.getBucket.getBucket.getBucket.getBucket(osgBucket.getBucket.setObjectStorageClass.setObjectInfo.getBucket.getBucket.getBucket.getB", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           set { _selectedFolderChanged = value; }\n        }\n        public event EventHandler SelectedFolderChanged\n        {\n            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #endregion\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplateDao dao = mock(VmTemplateDao.class);\n\n        VmTemplate vmTemplate = new VmTemplate();\n        vmTemplate.setName(name);\n        VmTemplate vt = new VmTemplate();\n        vt.setName(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment = new global::Gtk.Adjustment (1D, 1D, 120D, 1D, 1D);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetIn", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.logger.debug(\n        self.logger.debug(\n        )\n        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_1);\n\t\t\t//ilgen.Emit(", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   }\n    public static SendInvitation(\n    pb::ICodedOutputStream.MessageReader<SendInvitation> {\n      return new pb::ICodedStream.ReadMessage(data.get;\n    }\n    public bool Rejoin {\n      get {\n        return result;", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertices(getQuadIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code>.\n     * \n     * @param i\n     *            The index of", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(PROPERTY_COL_FOLDER, \"docs.column.categoryDateModified,docs.column.id,docs.language,\n    \n    *\n    * @Override\n    * @return the list of the sortable columns\n    * @return\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tanimDeltaTime = Time.realtimeSinceStartup - animStartTime;\n\t\t\t\tif (animDeltaTime <= animationDuration)\n\t\t\t\t{\n\t\t\t\t\tif (inputField.text.Length > 0)\n\t\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    #endregion\n    #endregion\n  }\n}\n}\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (!lastUser.IsNull())\n            {\n                Users.Add(lastUser);\n            }\n            foreach (string user in Users)\n            {\n                SendEmailForUser(user, AErrors);\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // VerificationResult = VerificationResult;\n            if (VerificationResult == null)\n            {\n                return;\n            }\n            }\n            foreach (PcConferenceOptionRow row in FMainDS.PcConferenceOptionRow.GetValue(row, PcCon", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Appending file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        return \"PayloadRequirements(reqs=%s)\" % (self.reqs,)\n\n    TypeError: 'PayloadRequirements' object is not iterable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t{\n\t\t\t\tCopyRangeCustomEnabled\n\t\t\t\tCopyRangeStart\n\t\t\t\treturn\n\t\t\t\t{\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t}\n\t}\n\t\t\t\tNotifyPropertyChanged(\"Copy", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\tget {\n\t\t\treturn dataDir;\n\t\t}\n\t\tset {\n\t\t\tdataDir = value;\n\t\t}\n\t}\n\t\n\tpublic string ConfigDirectory {\nNext line of code:\n\t\tget {\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: BugAnnotation has no source line\");\n            }\n        }\n    }\n    /**\n     * @return\n     *         the reportHistory\n     */\n    public boolean get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t[Constructable]\n\tpublic CookieSlice(int amount, int amount )\n\t{\n\t\t}\n\t}\n\t}\n\t}\n\tpublic override void\n\tpublic override void Serialize( GenericWriter )\n\t{\n\t}\n\tpublic override void", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n                    if (Menu.GetBool(\"LaneClearR\")\n                    laneClearMenu.AddItem(\n                    laneClearMenu.AddItem(\n                    new MenuItem(\"LaneClearR\", \"LaneClearR\"));\n                    }\n        }\n       ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n}\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        fb = fb.splitlines()\n        fb = [line for line in fb if line.count('<') == 1]\n        fb = [re.sub(r\"<[^>]+>\",", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.resolve_models(\n                ['test_base', 'test_model'], 'testsuite')['fields'],\n            field_def['fields'])\n        clean_", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var stmtTextCreate =\n                    \"create window MyInfraWidening\",\n            {\n                var stmtTextCreate =\n                    \"create window MyInfraWidening\n                {\n                    MyInfraWidening\n                    \"create table MyInfra", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   # TODO:\n    # Addition of a particle\n    # of the particle\n       \n    # Particle\n       \n    def\n        if self._simulation.add_to_particle.\n        if isinstance(self._simulation.x\n       \n        if isinstance", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    return super(view, self).save(cr, uid, res_id, value, xpath, context)\n\n**Error**:\n\n    TypeError: 'NoneType' object is not iterable\n\n**Traceback**:\n\n    Traceback (most recent call last):", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.putClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n    }\n    /**\n     * The factory for creating the basic html renderer.\n     */\n    private static final", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, content=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\tpublic void Cache(ICacheMapper cacheMapper)\n\t\t{\n\t\t\tif (cacheMapper == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNull", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   pushInvocation(MethodInvocation methodInvocation = new InlineInfo(graphQueue.peek());\n        }\n        return invocation.callee().\n        }\n        methodInvocation.callee().\n        info\n        if (methodInvocation.callee().\n        getInlineInfo(method", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n    def handle_pr(self.check_appliance):\n        if self.args['pr']:\n            self.check_arg('pr')\n        self.check_arg('pr', False)\n        if self.args['pr']:\n            print(\"You must specify a", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(states.get(0), key.getValue(), stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(states.get(0), stamp);\n                    }", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(MSG_SET_CALLBACK, this);\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public void onSetPauseImage(String uri) {\n        if (mCallback != null) {\n           ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from, Map.TerMur, 0));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Ser", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   db.create_all(models)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set(user, data)\n        self.module.set('all_users', users)\n        self.module.set('all_sessions', all_sessions)\n\n    def get_random_password(self):\n        return ''.join(self.", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.mofile {\n    _MOFile.__init__ = MOFile\n    _BaseFile(self, fuzml, _BaseFile.wrapwidth, self.encoding = self.magic_number\n    _MOFile(self, fpath, wrapwidth)\n    _", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine problematics for transformation %s\" % transID )\n      return S_ERROR( \"Failed to determine problematics for transformation %s\" % transID )\n    if not res['Value']:\n", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\treturn null;\n\t}\n\t}\n\t}\n\t\n\t// Plugin-specific form processing\n\tif(action.startsWith(\"/plugins/\") {\n\t\treturn null;\n\t}\n\t\n\tif(action.startsWith(\"/plugins/\")) {\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(str(buildset), \"buildset.98.complete\")\n        self.assertEqual(buildset, self.TEST_BUILDER_SET)\n        self.assertEqual(builds[0], self.TEST_BUILDER)\n       ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.scheme = 'http://schemas.google.com/g/2005#document-category'\n    self.category.label = 'Document Category'\n    self.assert_(self.category.scheme == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       AnnotatedTypeMirror\n        return p;\n    }\n    }\n    @Override\n    public Void visit(AnnotatedTypeMirror\n    @IMMUTABLE\n    @Override\n    @Override\n    public Void visitDeclared(AnnotatedType", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       col.prop(mat.light_type = 'SURFACE\n    draw_type = 'WIRE\n    col.prop(mat, \"use_shader = \"Shader\"\n    col.prop(mat, \"use_transparency = \"transparency\"\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.MapNo = _engine.Map4\n            }\n            if (_engine.Memory.Mapper4\n            _engine.Map.\n            mapper4 = _prg_\n            mapper4_IRQEnabled = mapper4_IRQEnabled\n            mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(new JMenuItem(new AbstractAction(\"Open Document\") {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    m_oInspector.getInspectorPaneByIndex(m_jTabbedPane1", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Math.Max (min, Frame.H);\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   class AnnouncementTwitterPublication(models.Model):\n        # FIXME\n        pass\n    # Connect the model to the signal\n    #signal = django_signals.post_save(AnnouncementTwitterPublication, _redo_announcements_", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.by_name['php'].startstring = '<?php'\nlexers.by_name['php'].endchars = '?>'\n# Enable highlighting for PHP code not between <?php ... ?> by default\n#lexers.by_name['php'].startstring =", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   cursor.execute('''INSERT INTO flight_log (sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\n                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)''', (", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table('projects').get(project_id).update({'last_snapshot':timestamp})\n    # Close the connection\n    conn.close()\ndef db_get_last_snapshot(project_id):\n    conn = rethinkdb_connection()\n    v", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\t\n\t\t\t\t// Deian's house\n\t\t\t// I'm not sure what you're doing here.\n\t\t\tbreak;\n\t\t\t\n\t\t\tbreak;\n\t\t\t// Deian's\n\t\t\t//\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__\n        Response):\n        def __init__(self, cmd, restag, rescode, resstr, resstr, resstr, datalines):\n        \"\"\"\n\t\t\t\tattributes:\n\t\tdata:\n\t\tdata:\n\t", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, name, status, duration, uuid, result):\n        self.name = name\n        self.status = status\n        self.duration = duration\n        self.uuid =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\n}\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) == 0):\n        return\n    raise AssertionError(\"primary.xml contains additional metadata:\")\n    for key in primary.keys():\n        if (key not in [\"primary\", \"primary-md5\", \"primary-sha256\",", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       # -- Extension modules ---------------------------------------------\n        ext_inputs = self._mutate_outputs(self.distribution.get_ext_modules(),\n                                       'build_ext', 'build_lib',\n                                       self.build_dir)\n        inputs.extend", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tobject[] fields = new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       qstat = qstat.Qstat(db_connection=self.connection)\n        qstat.run_batch()\n        return qstat.get_jobs()\n\nclass Qstat:\n    def __init__(self, db_connection):\n        self.connection = db_", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0}{1}: {2}\", new string('-', indent * 3), menu.DisplayName, GetItemValueText(menu.Items.FirstOrDefault())));\n            }\n            return Builder.ToString();\n        }\n        Bu", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"download\", \"check\": \"check\"}, decode=True)\n\n\n        self.logDebug(\"Show download link response: %s\" % res)\n        if \"fail\" in res:\n            self.fail(_(\"Could", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\t// If no harvestable cell is found, search for the closest harvestable cell.\n\t\t\tif (harv.LastSearchFailed)\n\t\t\t{\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcp service failed\")\n                       return False\n                    self.logger.info(\"restarting dhcp service\")\n                    rc = utils.subprocess_call(self.logger, service_restart, shell=", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           if (_modelOrderFall)\n            {\n                if (_modelOrderFall()\n            {\n                _maximumContext.Statistics = state = _maximumContext.NumberStatistics = _maximumContext.NumberStatistics = _maximumContext.Statistics;\n                _", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQ VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true, true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\tstore.AddColumn(treeView.Columns.Columns = new Columns();\n\t\t\n\t\tstore.Columns.Add(treeView);\n\t\tstore.AddColumns(treeView);\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.assertEqual(insert_bytes(b\"abc\", b\"123456\")\n\n    def test_insert_before_middle(self):\n        self.failUnlessEqual(b\"abc\", b\"12345\")\n        self.failUn", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    ax.set_yscale('log')\n    ax.set_xscale('log')\n    plt.plot(crunched_results['combined'][app]['stats", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self.assertEqual(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(b", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef simulateClassifier(knn, patternDict):\n  \"\"\"Simulate a classifier on a dictionary of patterns\"\"\"\n  numWinnerFailures = 0\n  numInferenceFailures = 0\n", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, offset / elementSize(), value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n        if (value instanceof IntValue) {\n            mirror.", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(ProjectBase.GetProjectDirectory(project), relativePath);\n            if (File.Exists(assemblyFile)) {\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i15 = 1;\n        i14 = i5;\n        i15 = i - 1 + i14;\n        i15 = i - 1;\n        i6 = 1;\n        i5 = 1;\n        i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name + \"\\n\";\n\t\t\tstr += \"Current Transition: \" + _current_transition.ToString()", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                Slot = SpellSlot.R,\n                Type = SpellSlot.\n                Delay = 250,\n                    Range = 100,\n                    MissileSpeed = 1600,\n                    MissileSpeed", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE,\n                          close_f", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//call once before adding a constraint to a DataSet\n\t\t//will throw an exception if a rule is broken\n\t\tinternal virtual void FinishDataSetInit (DataSet dataSet)\n\t\t{\n\t\t\tFinishDataSetInit (dataSet);\n\t\t}\n\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.formLayout = QtWidgets.FormLayout(self.settings_kernels_groupBox.setLayout(self.settings_kernels_groupBox\n        self", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               mLastForecast = null;\n                mLastForecast = TafFragment.this.getForecast( mStationId );\n                showTaf( mLastForecast );\n            }\n            mLastForecast = TafFragment.this.getFore", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(\"from Locality\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(0, stats.QueryExecutionMaxCount, \"unexpected", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[(uiCRCITTSum & 0x00ff) ^ uiByteValue];\n            }\n            if (refin != 0)\n            {\n                uiCRC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule()\n\t}\n\t}\n\tpublic void setDisguiseModule(SentryModule module) {\n\t\treturn entityData.getDisguiseModule();\n\t}\n\t}\n\t/**\n\t * @return The disguise module\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, \n                            editor, \n                            getOrCreateSection(getSettings(), \n                            \"hyperlink_popup_context_menu\")) };\n        }", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget\n        self.l.addWidget(self.connect(self.l.\n                                         self._slot)\n    def _lineEditSlot(self,\n    def _signal(self, *var):\n       ", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Send location\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Cancel\n\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (numStates)\n\t\t\t\tsb.append(mesquite.toString(sb).append(\"\\n\");\n\t\t}\n\t\t\n\t\tif (sb.toString().append(\"\\n\");\n\t}\n\t\tif (sb.toString(sb.", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                                //check that the order can be found that contains the problem\n                                if (orderIndex >= 0 && orderIndex < orderPurchaseESD.dataRecords.Length)\n                                {\n                                    //get the order line that could not be priced\n                                   ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.ToVector2 () * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.ToVector2 () * viewport.ScaleF", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key(XDREnum):\n    members = {\n        0: endpoint_key(vlan=0, mac_hi=0, mac_lo=0),\n        1: endpoint_key(vlan=1, mac_hi=0, mac_lo=", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tif (sending_client = sending_data_client_number = \n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tsending_data.Add(", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Steps:\n                    logDataSet(convertToStepDataSet(list));\n                    break;\n                case Activities:\n                    logDataSet(convertToActivityDataSet(list));\n                    break;\n                default:\n                    break;\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print textwrap.dedent(\"\"\"\\\n  {\n    %s%s%s* callback = new %s();\n    if (callback) {\n      callback->Run(%s);\n      delete callback;\n    }\n    return callback;\n  }\"\"\" % (parent", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    json_items = []\n    for item in items:\n       ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(whereClause);\n                whereClause.addChild(whereClause);\n                whereClause.addChild(whereClause", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super(UserDetailView, self).get_context_data(**kwargs)\n        context[\"set_is_active", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the assembly.\n    /// </summary>\n    public override Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetConvergenceLimit(1E-12);\n            _iterator.SetConvergenceLimit(1E-12);\n            _iterator.SetConvergenceLimit(1E-12);\n            _iterator.SetConvergenceLimit(1E-", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat median = median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           parent = np.zeros(ts.num_nodes = ts.num_nodes = ts.num_nodes\n        parent = np.ones(ts.num_nodes)\n        parent = np.zeros(ts.num_nodes, ts.num_nodes = ts.num_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result.update({'mapping': mapping_json})\n        return result\n    def _test_enrich_to_raw(self, sortinghat=False, projects=False):\n        \"\"\"Test whether enriched indexes are properly loaded to raw indexes\"\"\"\n        self.enrich_", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsEmpty)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (slot.Value.Locked)\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override object Clone()\n\t\t{\n\t\t\treturn new SmbException(this.Message", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       self.data = frame_payload[2:]\n        self.pad_low = 0\n        self.pad_high = 0\n        return frame_header + padding_bytes + self.data + padding_bytes\nclass FrameControlFrame(DataFrame):\n    frame_type = Frame", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.Rectangle != cluster.RectangularBoundary)\n                throw new InvalidOperationException(\"Cluster boundary and bounding box are inconsistent\");\n        }\n    }\n}\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double downVelocity = m_velocity = m_velocityTimeInterval = m_velocityTimeInterval = \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tNBTTagCompound nbttagcompound = nbttagcompound1.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tnbttagcompound.setInt(\"color", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, this, typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// init code expression\n\t\t\t_", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t\t\n\t\t\t// This test is needed to make sure that the trackbar is not resized when the orientation is changed.\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 2", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers(Matchers.any());\n\t\t\twhen(classType, is(classType));\n\t\twhen(classType.getSensorAssignment());\n\t\tverify(instrumentationApplier());", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit() && !isImplicit)\n\t\t\t\treturn false;\n\t}\n\t\n\tif (this.isImplicit()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           float bestIScore = Float.NEGATIVE_INFINITY;\n            if (Test.lengthNormalization) {\n              // find split that uses this rule to make the best *length normalized* score\n              int min = min1;\n              int max = min1;\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync_file_list_file_processor_list_file_invocation_list_file\n        ]\n        pipe.stdin.write.assert_called_once_with()\n        ]\n        pipe.stdin.assert_called_once_with_file_in", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tthreadContext.ThreadsChanged(Threads_ThreadsChanged);\n\t\t\t}\n\t\tvoid DbgManager_ThreadsChanged(object? e, bool isRunning) {\n\t\t\tif (isRunning) {\n\t\t\t\treturn;\n\t}\n", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"value\", String.valueOf( r, \"color\", \"sval\", String.valueOf( g, \"value\" );\n\t\twriter.attribute( null, \"value\" + String.valueOf( \"color\" );\n\t\twriter.endTag( null", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n# Read input file\n# Read input file\nparser = argparse.ArgumentParser(description='Run a multi-body simulation and save trajectory.')\nparser.add_argument('--input-file', dest='input_file', type=str, default='data.input', help='name", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # This is a useless_set[0]\n    if (node.inputs[1].ndim == 1:\n    if node.inputs[1].ndim == ndim_op\n    if node.inputs[0].ndim == ndim == ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].widget = forms.CheckboxSelectMultiple()\n    self.fields['groups'].help_text = \"\"\n    self.fields['groups'].required = False\n    self.fields['groups'].label = \"Select groups\"\n    self.fields['groups'].initial", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event.listen(target=query).base_listen(query)\n        def _listen(self, query.\n        def _init_query.\n        :param target: the :meth:`.Query.init_query\n        :param query\n        :param event_key, query", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   ConditionalDescriptor = type(\n        'ConditionalDescriptor',\n        (ConditionalModule,),\n        {'get_required_module_descriptors': ConditionalDescriptor.get_required_module_descriptors}\n    )\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(self.data, self.current_filter)\n        for change in data_model_changes:\n            if isinstance(change, ArrayValueChange):\n                self.update_filter(self.data, self.current_filter)\n                self.update_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t{\n\t\t\t\t[XmlType(\"sig,\n\t\t\t{\n\t\t\t}\n\t\t\t}\n\t}\n\t}\n\t[XmlType(\"ldarg_null :\n\tpublic sealed class Ldarg_null :", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(104, 20);\n\t\t\tthis.objYLabel.TabIndex = 2;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\tthis", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail/freshcvsmail.py\",", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n    }\n}\n</pre>\n\n</code>\n\n    }\n}\n</", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.hasTagCompound()) {\n\t\t\tItemStack drop = new ItemStack(Blocks.DIAMOND_ORE);\n\t\t\tdrop.set(true);\n\t\t\tdrops.add(drop);\n\t\t}\n\t\treturn", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   if not docformat in flags[flagname][version]:\n                        logger.info(\"ERROR: Document %s: Expected flag %s but not found\" % (docid, docformat))\n                        logger.info(\"ERROR: Document %s: Expected flag %s but found", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tresizeWidthRatio = this.resizeWidthRatio();\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(new ArrayList<Date>(exceptionDates));\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets the datable object corresponding to the specified date.\n   * @param date the date to convert to a datable object", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceComponent = sourceComponent;\n\t\tsourceEventBinding.SourceProperty = sourceProperty;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        }\n        // Derive the privilege = NodeConnector.getNodeConnectorName)\n        }\n        }\n        @ResponseBody\n        @RequestMethod(RequestMethod.GET)\n        @RequestParam(required = false) String containerName)\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpublic Core()\n\t\t{\n\t\t\t\tsuper.addForm(new Core(10000);\n\t\t\t\n\t\t}\n\t\t\tpublic void", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static void main(String[] args) {\n        OMEData data = new OMEData();\n        List l = data.getRandom(\"experimenter\");\n        System.out.println(l);\n    }", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\n    lam.make_hiearachy\n    .objects\\\n    .dere\n    .filter(subject_\n                 .filter(subject_uri=predicate_uri\n                 .object_uri=predicate.uri)\n    .", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           if (XFON\n        }\n            if (XF_CELL_OPTIONS\n                .get {\n                field_3_cell_options\n                {\n                    field_3_cell_options =\n                field_3_cell_options_cell_cell_options", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes[posn++] = (ch - 0xFF60) + 0xFFA0;\n\t\t\t} else {\n\t\t\t\t// Character is not in the", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, b, a)\ndef tricore_ld(obj.mnemonic=\"LD_H\")\n@ispec(\"32<[ ~off2(4) {00 00 b(4) ]\", mnemonic=\"LD", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\t\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\t\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tmap.init(properties);", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       public static WorldSettings.GameType getGameTypeById(int id)\n        {\n            return GameType.getGameTypeById(id);\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public int getID()\n        {\n            return", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (true, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (1, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (0, csd", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       except:\n            error = \"urllib error\"\n        finally:\n            if error:\n                print_w(\"[fingerprint] Lookup error: \" + error)\n        self.__idle(self.__process, results)\n    def __process(self, results):\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       ServerSettings.AppIdInfo = null;\n        if (PhotonEditor.Current.AppId = null;\n        if (PhotonEditor.Current.photonAddress = null;\n        if (PhotonEditor.Current.photonAddress = null;\n       ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       }\n    }\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n    }\n    @Override\n    public void onStart() {\n        super.onStart();\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cd = np.exp(2j * np.pi * self.ibzk_kc[k, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :, :", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       doCreateUtkastRequest.setPatientFornamn(anyString())\n    }\n    }\n    }\n    }\n    public Response createUtkast(String intygsTyp, String intygsTyp) {\n        Response response = utkastController.create", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\n\t\t\t\t// Find the lastLabel\n\t\t\t\tfor (int i = 0; i < block.Body.Count) {\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.isKinematic = rb.isKinematic = true;\n\t}\n\t    if (rb.isKinematic = true;\n\t    rb.isKinematic = false;\n\t}\n\t\n\t//\t\t\t\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   _not_serialized_attrs_ = ['layer_type', 'fracture_type']\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.f", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 4] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 3] = (byte)((num >>> 16) & 0xff);\n        out[outOff + 2] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Map<String, PatternNode> labelToNode;\n\t    private final Map<String, PatternNode> labelToProperty;\n\t", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'tail':\n        comments.append(value)\n    elif key == 'text':\n        comments.append(value)\n    else:\n        comments.append(value)\n    if comments:\n        slice_json", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n        public void mousePressed(MouseEvent e) {\n          if (frameToClose==null) {\n            btn.setSelected(true);\n            this.revalidate();\n            this.repaint", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\nfrom astropy.coordinates", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx)\n    {\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   expenses.update(Db.Table1.TABLE_NAME, Db.Table1.COLUMNS, Db.Table1.GROUP_NAME + \" = \" + newId, null);\n                    //Update budget items\n                    expenses.update(Db.Table4.TABLE", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid));\n                Marshal.FreeHGlobal(m_ptr);\n            }\n            m_ptr = IntPtr.Zero;\n            m_meth = AllocMethod.None;\n            m_ptr =", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL = '/accounts/login/\nLOGIN_SESSION_COOKIE_NAME = 'session_exceptions.\n####################\n# CORE #\n####################\n# MIDDLEWARE #\n####################\n#\n# Static media\n############\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName && !queue[0].Done)\n\t\t\t{\n\t\t\t\tplayerResources.GiveCash(queue[0].TotalCost - queue[0].RemainingCost);\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n        self.showCurrentDir\n\n    def doShowDir(self.showCurrentDir\n\n    def showCurrentFileOrigDir\n\n    def treeviewClicked(self, index):\n        self.treeView.clicked.\n        self.currentDir = self.currentDir", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4\n        if self.bld.always_run = self.bld.always_run = self.bld.post()\n        self.bld.posted = True\n        self.bld.post()\n        self.bld.post()", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        rospy.loginfo(\"Result: %s\" % result)\n        if result.success:\n            rospy.loginfo", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx - reactorExtent ]\n\t\t\t\t\t, hdiv0 );\n\t\t\t\t\tdelta[ 0 ][ idx ] = MULT( hdiv0, delta[ 0 ][ idx ] );\n\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"Invalid TIMESTAMP format\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampFormatFactory.get(timestampLocale)));\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@valor_autoincremento\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t{\n\t\t\treturn new MyCompositeType(new MyCompositeType(new HbmProperty(member.Column(cm => cm.Name(\"column1\");\n\t\t\t\tcm.Length(50);\n\t\t\t\tcm.NotNull(true", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.key_id\n        if self.authentication == 'enable':\n            if self.authentication == 'enable':\n            if self.authentication == 'disable':\n        \"\"\"\n        \"\"\"\n        if self.authentication == 'enable':\n            if self.authentication == 'disable'\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(self.store.update_item(self.user_id, self.user_id\n        )\n        self.assertTrue(self.store.get_item(self.store.get_item(self.store.subtree_edited_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) (TEXT_CODE & 0xff));\n\n        digest.update((byte) ((TEXT_CODE >> 24) & 0xff));\n        digest.update((byte) ((TEXT_CODE >> 16) & 0x", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkobjectspec(data):\n    return aetypes.ObjectSpec(data)\ndef mkobject(data, formodulename):\n    return aetypes.ObjectSpec(data, formodulename", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, formatters);\n        }\n        /// <summary>\n        /// Gets the type of the action parameter or return value.\n        /// </summary>\n        /// <param name=\"api\">The <", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, DateEntry):\n                value = entry.date_get()\n            else:\n                value = txt\n            if self.on_quit_cell(record, column.name, value):\n                if keyval in (gtk.keysyms.Return,", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.setPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanFactory.getBeanDefinition(LegacyConfigPostProcessor.BEAN_NAME_REPOSITORY_PROPERTIES).getPropertyValues();", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        except IOError:\n            module.fail_json(msg=\"Failed to read file %s\" % path)\n        else:\n            if any(line.strip() == \"\" for line in lines):\n                module.fail_json(msg=\"", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetStreamDescriptor(\n            [MarshalAs(UnmanagedType.Interface)] out IMFStreamDescriptor ppStreamDescriptor\n            );", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = UPDATE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void addPrincipalToPrincipal( @RequestBody", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        This verifies the tag of an element matches what is expected", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   # ProcessingInstructionNode\n    elif node.node_type = nodeType = node.nodeName\n    elif node.nodeType = Node.ELEMENT_NODE_NODE_NODE, doctype\n    elif node.nodeType,\n    elif node.nodeType", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\treturn EMSSceneSection#\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tScene\t\t\t\t\t\tScene\t\tPatient\t\t\t\t\t\t\t\tPatient\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\t\tencoder.writeTypeAndLength(encoder.getLength() = encoder.getLength()\n\t\t\t\t\tencoder.setName(name = new int[1][0]\n\t\t\t\tencoder.getLength() = decoder.getLength", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the player's HUD\n        display.updateHUD(ActiveWeapons, myWe", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setTeam( GameEngine.model().getGame() );\n        EbRegistration registration = GameEngine.model().getGame().getRegistrationByColor( color );\n        if( registration != null && registration.getTeam( GameEngine.model", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Bad response from server: %s\" % r.data.decode(\"utf-8\"))\n    else:\n        return r.data\n    return r.data\ndef download_file_toml(socket_path, url):\n    \"\"\"Download a TOML file\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.IsSuccess)\n\t\t\t\t\t{\n\t\t\t\t\t\tmergedOrder = response.DryRunMergedOrder;\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction's objective can only be a single reaction.\")\n    return [met.elements.get(\"C\", 0) for met in reaction.metabolites]\ndef _find_carbon", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return (\n            super(UnitManager, self).get_queryset().filter(\n                Q(store__path=pootle_path) |\n                Q(store__path__startswith=pootle_path + SEPARATOR)\n            ).select_related('store", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('img_map_area', models.TextField(null=True)),\n            ],\n            options={\n                'verbose_name': 'State',\n            },\n        ),\n        migrations.AddField(\n            model_name='singletraining',\n            name='academic", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Switch {} - ARP request: {}\".format(self.name, str(poxpkt)))\n                self.logger.debug(\"Switch {} - ARP request: {}\".format(self.name, str(poxpkt.payload)))\n                self.logger", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_MaxCount > 0)\n      m_RecentItems.subList(m_RecentItems.size() - m_MaxCount, m_RecentItems.size()).clear();\n    m_Recent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Race == Race.Elf && target.Race == Race.Human)\n                return false;\n            return true;\n        }\n        public static bool CanDetect(Mobile src, Item item)\n        {\n            if (item == null || item.", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   public void\n    @Override\n    public void onComplete() {\n        if (state != null)\n            onComplete();\n    }\n    }\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tif(mAltWriteMethod)\n\t\t\t\t\tmReadData(mReadDataReport.WriteData(mHandle.WriteData(mHandle.WriteReport(buff[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t@Override\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"Failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(NHibernate.Expression.Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueUnits2Units2Indx2B(i1);\n        }\n        }\n        }\n        private void SetNu2B()\n        {\n            _units2Units2Indx2B()\n        }\n        }\n        private int", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = self.create_view(navigator.get_class(self, 'AddComputeChargebackView'))\n        view.add_button.click()\n        return rate\n    def create_view(self, view_class, wait=0.5):\n        view =", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tif ( _scratchSize == length )\n\t\t\t\t{\n\t\t\t\t\tif ( _scratchOffset == 0 )\n\t\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.tuning_type.value = self.tuning_type.value = self.tuning_type.value = self.tuning_type.value = self.tuning_type.value = self.tun_type.value = self.scan_sat.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"TCP_ACCEPT_FILTER only accepts a String\");\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unsupported option \" + opt);\n        }\n    }\n    public void", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               obj = new PdfObject(new PdfDictionary(new PdfDictionary(new PdfDictionary(PdfEncodedStream.GetPredictor = 0;\n                if (bpc = bytesPerPixel = 0;\n                break;\n                if (currRow = new int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar'])\n        self.assertEqual", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        for index in xrange(len(self.get_options().get_options().get_options().get_degree_bounds()[0]\n        )\n        self.get_options().get_options().get_degree_bound()\n        )\n        for position in", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n            // This is a test\n            // This is a test\n            [\n            .ParseMessageSet()\n        }\n        public void\n        }\n        }\n        [Test]\n        public void\n        {\n        }\n        public void\n       ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object remove(Object key) {\n\t\treturn get( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\treturn map.keySet();\n\t}\n\t@", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t( m.Account as Server.Accounting.Account).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction\n\t\t/// </summary>\n\t\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client'}\n        #return {'type': 'ir.actions.act_window'}\n        #return {'type': 'ir.actions.client_list'}\n        #return {'type': 'ir.actions.client_sidebar'}\n        #", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow r = form.grdResults().getRows().get(orderInvestigationLiteVo.getSpecimenIndex());\n\t\tif (r == null)\n\t\t{\n\t\t\tr = form.grdResults().getRows().newRow();", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_tab(cwd, profile)\n        self.on_tab_new(widget, debugtab)\n        return(True)\n    def on_tab_new(self, widget, debugtab):\n        \"\"\"Handle a new tab being created\"\"\"\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               }\n                    }\n                    else {\n                    structPart = new StructTypeInfo( managedType = managedType.MakeType( managedType, managedType, arraySize, arraySizeFragmentsFragments.Length\n                    structPart = new StructTypeInfo = new StructType", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null;\n\t}\n\t\t}\n\t\tset {\n\t\t\t}\n\t}\n\t\t}\n\t}\n\t}\n\tpublic bool IsNotNullable {\n\t\tget {\n\t\t\treturn false;\n\t}", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key, null);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private void evidence_ModelLookup(object sender", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = _wrap_pyopenssl_context(\n            ssl.SSL.do_handshake_wrapper(\n                OpenSSL.SSL.Context.add_options,\n                _openssl_to_stdlib_verify[protocol],\n                self.connection.get_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox1\n\t\t\tthis.vbox1;\n\t\t\tthis.vbox1.Add (this.vbox4.Gtk.Gtk.Box.Box+BoxChild\n\t\t\tthis.vbox5 = new global::Gtk.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.connect_idleave()\n    # Connecting notebooks to notebooks\n    notebooks[\"board\"]\n    notebooks[\"board\"].connect(\"changed\", gtk.HBox.set_visible_hbox.pack_start_box.pack_start", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   QKeySequence(Qt.Key_Tab),\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_D),\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_R),\n    \"Go-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderClassName='\" + persistenceProviderClassName + '\\'' +\n\t\t\t\t\", transactionType=\" + transactionType", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void refreshVisuals()\n  {\n    if (isSelected)\n    {\n      setFocus(true);\n    }\n    else\n    {\n      setFocus(false);\n    }\n  }\n  \n  protected", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(882, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n/**\n * MarkedContent\n * \n * @author muzquiano\n */\npublic class MarkedContent\n{\n    private String contentId;\n    private String contentTitle;\n    private String formId;\n    \n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t}\n\t\t\tbyte[] data = new byte[] { 0x0b, 0x71, 0x7a, 0x03, 0x41, 0x41, 0x41, 0x41, ", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_align;\n\t    \n\t    sum += SerializerImpl.getI32Size(current_align);\n\t    \n\t    return sum;\n\t}\n\t\n\t/*\n\t * This method calculates the size of the serialized object.\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n      return javaHome + @\"\\bin\\java.exe\";\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n      {\n        if (File.Exists(resinHome + @\"\\", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if job:\n                    self.add_job(name, job)\n                return self.lines\n        # if we get here, we didn't find the job\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n           ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifierVERTEX_GROUP_VERTEX_GROUP\n        modifier_json['vertex_group_vertex_group_vertex_group_vertex_uv_group_vertex_vertex_group_vertex_group_vertex_group_ver", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                rankCounts[i] = rankCounts[i] > 0 ? rankCounts[i] / totalPositivesCount : minLikelihood;\n            }\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Vertex neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getKey());\n        }\n        assertEquals(Arrays.asList(1, 2, 3), neighbors);\n    }\n    @Test\n    @Display", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.parser(self.choice, cap=self.cap)\n            except (KeyboardInterrupt, EOFError):\n                print(self.blk)\n            except Exception as e:\n                print(self.fatal+\"[!] Error: \"+str(e)+self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),\n            'title': ('django.db.models.fields.CharField', [], {'max_length': '30', 'max_length': '100", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               throw SDOException.processImportedTypes(theImportOrInclude(theImportOrIncludeOrImportOrInclude);\n            }\n            }\n        }\n        returnImportedTypes(theImportOrImportOrIncludeOrIncludeOrImportOrInclude());\n        }\n    }\n        returnImport", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.onchange(uid, self.pool.get_resource_id, self.pool.get_can_holiday_id, self.browse(self.browse(cr, uid, [user_id, context=None),\n        '''\n        if self.pool", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           /// <param name=\"enabled\">\n        /// <param name=\"GridBaseManager.GridBaseManager.\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n       ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"MixerLine: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\t\n\t// CareContext\n\t\t\tif (null != null) \n\t\t\t{\n\t\t\t}\n\t\t}\n\t\t// CareContext\n\t\t}\n\t\tif ( null != null) \n\t\t{\n\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\", \"--release\"] + opts,\n                 env=env,\n                 verbose=verbose)\n        if release:\n            if android:\n                # Build the release APK\n                status = call(\n                    [\"cargo\", \"build\",", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t// Compute the best possible score for the optimistic rule\n\t\t\treturn rule.getOptimisticScore(p, n, p, n);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, gitStash.Revision, gitStash.Statuses);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            Stashes.Enabled = true;\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm1_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm2_index).out_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public class AddClient\n    {\n        public AddNumbers() {\n            this._certificate = null;\n            this.Initialize();\n            this.\n            {\n                _certList = new System.Windows.Forms.ListView\n                                                                ", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\ts += \", \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargenn", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.index_file is not None:\n        log.info('cryptostasis', 'Saving index to {}'.format(args.index_file))\n        archive_index.save(args.index_file", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putc(self.cmd_ss, self.cmd_es)\n        if self.cmd_ss, self.bit_ss, self.bit_ss, self.bit_ss, self.cmd_ss, self.bit_es = 0, 0, ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    // (, line 19\n    // (, line 106\n    // (, line 107\n    // (, line 10\n    // (, line 108\n    // (, line 11\n      // (, line ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception e) {\n                System.out.println(\"Exception: \"+e);\n            }\n            if (o != null) {\n                cd = channelList.get(row);\n                cd.last = o;\n               ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_all_extensions_by_name_or_critical_utils.get_ocsp_must_staple_critical_cert_must_staple_cert.OpenSSL.OpenSSL.ExtensionNotFound\n    def _get_subject_key_name_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i->second.find (i->second.begin(), s.end()) != s.end()) {\n\t\t\t\t\ti->first->invoke (i->second->begin(), i->second->end(), i->second->begin());\n\t\t\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #     return [interval_list]\n    #\n    #     interval_list = []\n    #     for interval in interval_list:\n    #         interval_list.append(interval)\n    #     return interval_list\n    return [Interval(X.begin, 0", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tGet();\n\t\t\t\twhile (la.kind == 29) {\n\t\t\t\t\tGet();\n\t\t\t\t}\n\t\t\t}\n\t\t\tExpect(2", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['__import_module'] = 'purchase'\n            edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_uom_id.id * line.product_u", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions.setAllowed(vf2,\n                vf2);\n            }\n        }\n        this.permissionService.setPermission(vf2,\n                                             user1,\n                     PermissionService.setCh\n                                     true);\n        }\n       ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(context.list_devices().match_subsystem('input')))\n\nIn this line, the 'match_subsystem' method is called with the argument 'input'. However, the test case does not specify what the expected behavior or outcome of this method call should be. It", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(token=deviceToken)\n    user = User(device, loginId, password)\n    user.mainmenu()\n    user.exploration().explore(1, \"1\")\n    user.exploration().explore(1, \"1\")\n    user.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    # We find the best fit\n    if (len(outlines[0])\n    print \"calibrator_array = configs[i]\n    print \"calibrator_array = \"\n    print \"calibrator_array = configs[0]\n    print \"", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           _ItemID = new uint();\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (TunerList\n        tunerList.addDevice(addDevice);\n        }\n        }\n        // DRS 2012\n        // DRS 2012\n        // DRS 2012\n        // DRS 201", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_KEY) {\n      jobs.put(Version.USER_KEY, new UserKeyMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_KEY_2) {\n      jobs.put(Version.USER", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file is malformed. Each line should have at least two columns, the regex and the type.\");\n      }\n      List<String> regex = new ArrayList<>();\n      for (String regex", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.PrintEnvironment()\n            #env.DumpEnvironments()\n            #env.DumpScannerEnvironments()\n            #env.DumpPathEnv()\n            #env.DumpPathEnvDict()\n            #env.DumpPathEnvMulti()\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, features):\n        return self.features(self)\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    def features(self, features -- a list of features,", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.ip = ApiParameters.ip\n        self.ip = ApiParameters.ip\n        self.ip.want.port = ApiParameters.ip\n        self.want.ip = ApiParameters.ip\n        self.want.want.port = ApiParameters.port\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.is_displayed and\n            self.title.text == 'Add Method' and\n            self.location.is_displayed and\n            self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className, null);\n    }\n    public IAction getActionObject(String className,", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   def test_update_thread_id_and_thread_id_not_title_thread_id\n    @patch.object.save_request_thread_id\n    def test_delete_thread_id(self, mock_request):\n    def test_update_thread_id", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Action.Action(embedManifestDllAction, None, env)\n        else:\n            raise SCons.Errors.StopError(\"Manifest file %s does not exist\" % manifestSrc)\n    else:\n        return 0\ndef windowsManifestCheck", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IWorkbenchActionRunner runner = new WorkspaceActionRunner(shell, this, new IWorkbenchProgressMonitor(shell, 1000));\n            runner.run(this, new IWorkbenchProgressMonitor() {\n                public void set(int minimum, int", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts[0]=1;\n\t\t\n\t\treturn super.init(smi, sdi) && checkAndSetSpecs(meta);\n\t}\n\t\n\tpublic boolean processRow(StepMetaInterface smi, StepDataInterface sdi)\n\t{", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regressions\n    # regressions\n    assert f('..', last) == (2014, 12:30, 12:31, 12,30, 12,31, 12,12,31", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int x = int.\n            {\n                int y = int;\n                int z = int;\n                int x = int;\n                int m_MinTime = m_MinTimeOverride = m_MinTimeOverride;\n                int m_MaxTimeOverride = m_MaxTime", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(suspend_start_cmd)\n\n    def verify_suspend_support(self, **args):\n        s, o = self._session_cmd_close(suspend_support_chk_cmd)\n       ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       final Future<Boolean> rc = service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        assertThat(rc.get(), is(true));\n    }\n}\nprivate static final int", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnRenegotiateSessionParameters(res, destination.getID(), r);\n            }\n            this.owner", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressed = value;\n\t\t\tvar compressedBytes = new byte[4];\n\t\t\tbyte.TryWriteCompressedUInt32(ref compressedBytes, ref compressed);\n\t\t\treturn BitConverter.ToUInt32(compressedBytes", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path\n        if self.fm.reload_dir.load_path\n        filelist = self.restore_path)\n        filelist = self.fm.thistab.get_selection\n        self.fm.get_selection()\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_NonCOMType ()\n\t\t{\n\t\t\tActivator.CreateInstance (\"MonoTests.System.ActivatorTestInternal.NonCOMTest\");\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (Argument", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       de = Locale.objects.create(code='de',\n                                    locale_name='German',\n                                    iso_code='de')\n        self.assertNotEqual(de.id, da.id)\n        self.assertNotEqual(de.id,", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending %s\", self.Log.debug\n            \n        self.Log.debug(\"receive_control_message\n        self.control_socket.set_control_message\n        self.set_loop_rate\n        self.loop_rate\n       ", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupUpdateEvent(group, player, PlayerGroupUpdateEvent.TYPE_LEADER));\n    }\n}\n\n/**\n * @param player\n *", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    class Tokenizer(object):\n        def __init__(self, toks):\n            self.toks = toks\n        def __iter__(self):\n            for t in self.toks:\n                yield t\n\n\n## Your task:Improve the `Tokenizer", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       tree_model = MappedTreeStore(None, [MachineTypeColumn(None, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    parent.release();\n\t} while (parent instanceof Tag);\n\treturn super.doStartTag();\n    }\n    /**\n     * set the value valuesdelimiter Character to use as a delimiter in the values and valuesdisplay\n     * attributes. Default is \",\" (comma).\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               XmlNodeList nl = element.SelectSingleNode(\"Inventory\").ChildNodes;\n                Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFrom", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// pb = pb = pb = pbExpc = pbS = pbS = pb = pb = 0x3C, 0xC = 0x3F, 0xC, 0x3C, 0xC", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (manaToGet <= manaToGet && (int) requestManaExact(stack, player, cost, remove) == cost);\n\t}\n\t/**\n\t * Returns the discount for tools.\n\t * @return The discount multiplier.\n\t */\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n\n\n# -----------------------------------------------------------------------------\n# Django settings for django_agfk project.\n#\n# For the full list of settings and their values, see\n# http://docs.djangoproject.com/en/", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t// Add the frame to the queue\n\t\t\t\t\tLayer newFrame = NextFrame;\n\t\t\t\t\t// Lock the queue", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.getUserErrorMessage() != null) && (other.getUserErrorMessage() != null)) {\n            if (!this.getUserErrorMessage().equals(other.getUserErrorMessage()))\n                return false;\n        }\n        if ((this.getActionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setDcause = responseInts(p);\n        }\n        }\n        }\n        if (ret) {\n            r = responseInts(p);\n        }\n        }\n        }\n        else {\n            riljLog(ret = ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.getLicenceType().equals(LicenceEnumType.COMMERCIAL_COMMON_CROSS_LICENCE)) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xPixelsPerTile + 0.5f] = newVertices[y * xPixelsPerTile + 0.5f] = new Vector3(x - 0.5f, 0.5f, 0.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[]{0};\n\t\t}\n\t\tpublic int getBlockSelectionStart()\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tpublic int getBlockSelectionEnd()\n\t\t{\n\t\t\treturn 0;\n\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeObject(new RemoteException(\"Object not found\"));\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n       ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           }\n            if (stati\n                    (dirty\n                    palette_offset, 0,\n                    stactics_scroll_ram_data_d[i]\n                    stactics_e[i]\n                    (stati\n                    stact", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            }\n            }\n            {\n                var minionPositions = position.To2\n                    {\n                    Vector2D\n                    ,\n                    {\n                        }\n                    List<Vector3", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isAdjacentTo(y, x)) {\n            return true;\n        }\n        if (graph.isAdjacentTo(x, y)) {\n            return true;\n        }\n        return false;\n    }\n    //=============================", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop.Children[i] is PlaceBase)\n                        plcs.Push(pop.Children[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentId == null) {\n            if (other.attachmentId != null) {\n                return false;\n            }\n        } else if (this.attachmentId != null) {\n            if (other.attachmentId == null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       mobiles[i].DoHarmful(m_Item.From);\n                    }\n                }\n            }\n        }\n    }\n}\n", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, params object[] args)\n\t\t{\n\t\t\tif (!CanSee(user", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   @Override\n    public String getComponentId(String sComponentName) {\n      return mock.getComponentId(sComponentName);\n    }\n    @Override\n    public String getComponentName(String sComponentId) {\n      return mock.getComponentName(sComponentId);", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        if (file.isDirectory()) {\n                            final DialogFragment dialog2 = ZipFilesDialog.instantiate(file);\n                            mode.finish();\n                            dialog2.", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.j.addShutdownHandler(new ChannelFutureListener() {\n        @Override\n        public void operationComplete(ChannelFuture future) throws Exception {\n            if (future.isSuccessful()) {\n                NetworkManager.g.debug(\"Successfully closed connection\");\n           ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_array = all_periods\n                z_periods.append(all_periods\n                t_dict[0]\n                z_periods_dict = all_periods.append(all_periods.append(z_array = [z_dict = all_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                                 recipients.stream()\n                                             .map(Recipient::getAddress)\n                                             .map(Address::getAddress)\n                                             .dist", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_lib + extra_path + env[\"PATH\"].split(\":\"))\n        env[\"CC\"] = \"ccache %s\" % self.config[\"build\"][\"ccache\"] if self.config[\"build\"][\"ccache\"] else \"cc", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    test = test_cls.from_json(test)\n                    if test.source_file.rel_path in source_files:\n                        raise ManifestError\n                    source", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       compiledScript = null;\n    }\n    private CompilerConfiguration createCompilerConfiguration() {\n        return new CompilerConfiguration();\n    }\n    private Binding createBindingForCompilation(Object script) {\n        return new Binding();\n    }\n    private Binding createBindingForExecution(Object", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n            WrappedClientDataAdapter _clientDataAdapter = new WrappedClientDataAdapter(this, \"Client\");\n            WrappedServerDataAdapter _serverDataAdapter = new WrappedServerDataAdapter(this, \"Server\");\n        }\n    }\n}\n\n\n#", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     grad_E = z[:,0]\n      grad_E = z[:,0] * self.y_stds[0] + self.y_stds[0] * z[:,0]\n      grad_E = z[:,0] * self.y_std", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tif(caseInsensitive)\n\t\t\t{", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        stacks[0].getTags().addAll(asList(\"search-tag1\",", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(\"depth\");\n        parameter.setValue(depth);\n        pf.addParameter(parameter);\n        crawlParameters.add(pf);\n        //EXCLUSION REGEXP\n        parameter = new Parameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNodeFactory.Match(candidate, pattern, out LNodeFactory.\n\t\t\t\t\t\n\t\t\t{\n\t\t\t\treturn true;\n\t\t}\n\t\t\tLNode\n\t\t\t\treturn true;\n\t\t}\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setControl(null);\n\t}\n\t\n\t}\n\tpublic void setControl(int, ims.framework.IFormBridgeBridge, ims.framework.ControlBridgeBridge, ims.framework.Control control, ims.framework.enumer", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output) is not None\n\n\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n       ", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r.subs.write({'value': 10})\n        )\n        self.assertEqual(r.subs.value, 10)\n    def test_o2m_readonly(self):\n        \"\"\" Tests that readonly modifiers work for o2m", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, y, (x, y, b, c, y, b, c, d)\n    assert Sum(x, x, y, b, c), y, d)\n    assert Sum(x, (x, y, b, c)\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._oldStartingIndex = startingIndex;\n            this.InitializeAdd(action, changedItems, startingIndex);\n        }\n        else\n        {\n            this.InitializeRemove(action, changedItems, startingIndex);", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           XMLStreamReaderReader reader = null;\n            }\n        }\n        }\n        }\n        }\n        }\n        try {\n            XMLDescriptor desc = null;\n        }\n        }\n        }\n        }\n        }\n        StringWriter outWriter = new StringWriter", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                break;\n            }\n            NextToken(TokenType.Comma);\n        }\n        private string ParamEnum(string s)\n        {\n            switch (s)\n            {\n                case \"name\":\n                   ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\tif (bitmap.Width;\n\t\t\t\t\tbitmap.Width;\n\t\t\t\t\n\t\t\t\tif (bitmap.Width;\n\t\t\t\tif (bitmap.Width;\n\t\t\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.addToSubroutine(id, id, nbSubroutines)\n            }\n    }\n    }\n    }\n    // ----------------------------------------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __intp, __mStack);\n            var result_of_this_method = (string)typeof(UnityEngine.Ray).CheckCLR", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t\t}\n\t\t\n\t\tprivate void setBlockOutline(LineStyle lineStyle) {\n\t\t\tif(lineStyle == null)\n\t\t\t\tsetBlockOutline(null);\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getFirstValue( \"Image\")\n        self._getCurrentValue( \"Image\")\n        self._getCurrentValue\n        # Check the image value\n        # Go to the first image\n        self._getFirstValue( driver, \"Image\")\n        self._getFirstValue( driver", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.kexgss_kexgss_continue\n        self.transport.kexgss_kex_continue\n        self.kexgss_continue = self.kexgss_continue = self.transport.send_kexgss_kexgss", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData, overallNodeName);\n            if (disableTreeSelection) {\n                node.putClientProperty(\"JTree.lineStyle\", \"Dashed\");\n            }\n            if (treeModel != null) {\n                treeModel", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code))\n                return result\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        class Contract(BrowsableObject):\n            def __init__(self, pool, cr, uid, employee_id", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = bias_mass_func(marr, rho_crit, z, omega_m0, cosmo_h, cosmo_h, cosmo_h\n    #OK\n    mfraction = bias_func(m, zmin, zmin, zmin", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getText().length() * font.getSize());\n        d.height = 1;\n        return d;\n    }\n    \n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.p0=np.array([0,0,0.5,0.5,0.5,1.0,0.5,1.0,0.5,1,1,1,0,0,0,1,1,0,0,0,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void _portfoliosWindow_PortfolioChanged(Portfolio portfolio)\n\t\t{\n\t\t\tShowOrHide(_portfoliosWindow);\n\t\t\t_portfoliosWindow.Portfolio = portfolio", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D, _Hist3D, _Hist3D, params[2])\n        if params[0]\n        _Hist(1, params[1], params[2])\n        if params[0]['bins', params[0]\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.updateContactItem(contact, query.getAllMessagesCount(), query.getAllMessages(), query.getPagingOrder());\n        }\n    }\n    private Query next(Query query) {\n        synchronized (queries) {\n            for (Query nextQuery :", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", (0.0734, 0.2992, 0.5870, 0.1141))\n                im1L = im1L.convert(\"L\", (0.0, ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   if self[\"block_type\"].value == 5:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data, unhandled\")\n\nclass AceFileDescriptor(ParserDescription):\n    def record(self):\n        for block in self", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method will return the current state of the engine.\n\t * \n\t * @return the current state", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       req = server.WSGIWrapper(environ, start_response)\n        for chunk in req(b''):\n            yield chunk\n            # Flush the response\n            yield b''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\t\n\t\t\t\n\n\ndef entropy( self , setfields , setfields ) :\n\t\tif fieldtypes[ field ] == LITERAL :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (CraftResources.GetChance(chance) == 0)\n                return;\n            if (CraftSystem.CanCraft(from, craftSystem, item, null, null, null, null, null", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new RDL type\n            # Create a new component\n            # Create a field\n            # Create a field\n            # Create a field\n            Create a vendor extension\n            Create a field\n            Create a bit\n            Create a register\n            Create a register\n            Create a register", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                MessageBox.Show(\"No modules found!\");\n            }\n        }\n    }\n}\n\n\n# Answer\n\nTo complete the code, you need to add the following method:\n\n```csharp\npublic void writeConfig()\n{\n    if (!File.Exists(CONFIG", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            return (string)this.SelectedItems.ToString();\n            }\n            set\n            {\n            }\n        }\n        }\n        }\n        }\n        }\n        [Meta]\n        [DefaultValue]\n        [Description]\n        public virtual string Text", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.textureArray[textureHash]\n                this.textureArray[textureHash]\n            }\n            }\n            }\n        }\n        return this;\n    }\n        if(this.vertexBuffer.length()\n        return this.texCo", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if var\n    # Inputs not provided, shape, area_extent, center, resolution, radius, center, upper_left_extent, center, radius, center, center, center, radius, center, upper_left_extent, center, radius, center, upper_left_", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WKROMP)\nQUEST.setInitialState(QUEST.STARTED)\nQUEST.addTalkId(20670)\nQUEST.addTalkId(20959)\n# End of added code\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tplayTimeTag\n\t\t{\n\t\t\ttry\n\t\t{\n\t\t\t\tstring\n\t\t\t{\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            VertexDataPointer = 0;\n            VertexDataOffset = 0;\n            VertexDataDivisor = 0;\n            VertexDataInputOffset = 0;\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self._reaction = None\n        self._metabolite = None\n        self._gene = None\n    def remove_metabolites(self, metabolite_list, delete=", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\t\n\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(x);\n\t\t\tif(vo != null)", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\tif(current.x,\n\t\t\t\t\t\t\t\t\t\t\tif(current.x,current.y,current.height,current.height,current.x,current.y,current.height,current.height,current.height,current.height", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setFillAfter(true);\n        mListView.setLayoutAnimation(set);\n    }\n    */\n\t\n\t@Override\n\tprotected void onSaveInstanceState(Bundle outState) {\n\t\tsuper.onSaveInstanceState(outState);\n\t}\n\t\n\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    if (PartnerInterestRow.FieldKey > HighestNumber)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }\n                }\n           ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classifier.classifyInstance(this.getInstance(protein, i));\n\t\t}\n\t\t\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
