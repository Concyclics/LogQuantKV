{"pred": "\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\t\tm_Registered = true;\n\t\t\t\tm_Registered = true;\n\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\tm_Registered = true;", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000)\n        a.write_frames(np.zeros(1000, dtype='int16'))\n        a.seek(0)\n        a.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_visible(self._ADD_SUBTITLES)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"name\", OLStyleValue.class.getName(), OLStyleValue.class);\n\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class.getName(), OLStyleValue.class);\n\t\t\t\twriter.addAttribute", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        _question_answer = _QuestionData()\n        _answer = _QAnswers()\n        _answers_del\n        _del\n        self._enable_start = _enable_requested\n        self.start_requested = False\n        _enable_requested\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map);\n                    SR_Utilities.Location newLoc = SR_Utilities.GetLocation(loc, mob.Map);\n                    mob.SendMessage(newLoc.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       // TODO:\n        // TODO:\n    }\n    }\n    }\n    }\n\n    /*\nanswers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       sp = new JESpace (name, path);\n        spaceRegistrar.put(name, sp);\n        return sp;\n    }\n        return sp;\n    }\n    public static <K,V> EntityCursor<GCRef> getGCCursor(JESpace<", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   return self.make_response(environ, self.wrappers.as_xml(self.dispatcher.dispatcher.wsdl = self.dispatcher.wsdl = self.dispatcher.wsdl()\n    def do_get(self, environ, _response):\n        self", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.mark_status_as_repeated(status_id)\n    def lock_status(self, status_id):\n        self.webview.lock_status(status_id)\n    def unlock_status(self, status_id):\n       ", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n    return {\n            \"status\": Operation.STATUS_SUCCESS\",\n            \"data\": None,\n            \"progress\": None,\n            \"pid\": None\n        }\n    return self.get_data\n    def action_remove_files(", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return None\n        for trust_manager in self.trust_managers:\n            accepted_issuers = trust_manager.getAcceptedIssuers()\n            if accepted_issuers:\n                return accepted_issuers\n        return None\n\ndef _get", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       Map<String, String> info = new HashMap<String, String>();\n        info.put(\"domain\", domain);\n        info.put(\"domainInfo\", manager.getDomainInfo(domain));\n        request.setAttribute(\"domainInfo\", info);\n    }\n}\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__datastream_protocol.encoder.get_datastream_protocol.\n\n    def __init__(self, *,\n        self.__datastream_protocol: DataStreamProtocol\n    def get_cmd_line = self.__cmd_line = self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\n\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\t\n\t\t\t\t\t//get new values\n\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n               \n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tDataManager.firms.put(Firm.getFirmId(this), this);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void save()\n\t\t\t{\n\t\t\t\tfor(Firm firm : this.getLoadedData", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\t// Add the nodes\n\t\t\tadd(shortcutsNode);\n\t\t\tadd(playbackNode);\n\t\t\tadd(generalNode);\n\t\t}\n\t\t@Override\n\t\tpublic void set(\tT(LOFALELI(String(", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               ArchProtectionSpell.RemoveEntry( from );\n            }\n        }\n        public static void RemoveEntry( Mobile m )\n        {\n            AddEntry( m, 0 );\n        }\n        public static void AddEntry( Mobile m, Int32 v )\n       ", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._assert_identity_keywords:\n        \"query_cls:\n        \"\n        \"\n        \"\"\"\n        @property\n        @property\n        @classmethod\n        def after_commit(self):\n        \"\"\"\n        @classmethod\n        def _connection_callable", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\treturn keyMap<IField.getSignature()\n\t\t\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   classmethod = stream_request_body=True\n        return wrapper\n    return wrapper\n    # This decorator is for the request.method=None\n    # this method\n    # decorator\n    def render_template\n    return self.render\n    return self._ui_module\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (ViewStateNode);\n\t\t\twriter.EndRaw ();\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wd = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wd.download()\n    wd.download()\n    wd.download()\n    wd", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 13)\n            }\n                {\n                if (mod == 13)\n                {\n                    if (i)\n                    }\n                {\n                    {\n                    if (mod == 13)\n                    {\n                   ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(platforms)\n    else:\n        builds = android_builds(build, builds)\n    # Build the button\n    if small:\n        if simple:\n            return jinja.generate_button(\n                'download-firefox',\n                'Free", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\t}\n\t\tif (stateBeansList!=null && !", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if ( argument.Type.ToString() == \"System.Object\" && argument.Value.IsNull()) {\n                    ArgumentSyntax newArgument = SyntaxFactory.ParameterProperty( SyntaxFactory.Identifier( argument.Name.Value.ToString()", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.split_test_usage_key, self.assert_equal_children, self.verify_children(self.verify_children.children, 'vertical_usage_key, self.assert_children(self.assert_children(\n            self.assert_children", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           Object[] metrics = new Object[0];\n            if (fontSpecific)\n                metrics = new Object[1];\n            metrics[0] = GetToUnicode(fontSpecific);\n            tmp.Add(metrics);\n            tmp.Add(new PdfString(\"C", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"Cell \" + cell.getName() + \" not", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = ListenableFutureTask.create(callable);\n      }\n    }\n    @Override\n    public void onSuccess(final Bitmap bitmap) {\n      Util.assertMainThread();\n      if (bitmap != null) {\n        task.onSuccessful(bitmap);", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: Add a way to select a policy\n    # TODO: Add a way to select a policy profile\n    # TODO: Add a way to select a policy profile\n    # TODO: Add a way to select a policy profile\n    # TODO: Add a way to select a policy\n   ", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n            if (Enabled)\n            {\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetClickEvent(this));\n            }\n            else\n            {\n                writer.AddAttribute(\"onmouseover\", Page.ClientScript.GetMouse", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.writeAllItems(compound, inventory);\n\t}\n\t\n\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" (\" + getProbability() + \" \" + getEffectType() + \")\";\n    }\n    /**\n     * Get the effect type.\n     *\n     * @return The effect type.\n     */\n    public final String getEffectType() {", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn'})\n    assert len(i) == 0\n    i = store.handle_indicators_search(t, {'itype': 'fqdn'})\n    i", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(name=\"owner\")\n        o = Organization.objects.get(name=\"company\")\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self.line(x=None, y=None, sel_dim_name_options=None,\n                    z_name=None,\n    if self._interactive:\n                if self._interactive:\n                    self.save(self, var.value.value)\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!_ignoredPaths.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Any())\n            {\n                _commandQueueManager.Enqueue(new ScanChangedRootFoldersCommand(", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreply'):\n            if inreply = self.request.getReplycountid = self.request.getReplyCount\n                   \n        commentscount = self.request.getReplyCount\n        if commentcount > 0", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset\n\t\t\t{\n\t\t\t\tif ( x < 0 || y < 0 )\n\t\t\t{\n\t\t\t\treturn null;\n\t\t}\n\t\t}\n\t\tpublic static Tile[] GetTile( int x, int y )", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = channel_uri = land_uri;\n                // - land.GetLandScene.GetLandChannelURI(scene.GetLandURI, channel_uri,\n                m_freeSwitchService.GetChannelURI(scene,\n                    channel_uri,\n                    channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEdit.PayPeriodCur = new PayPeriod(textDateStart.Text,textDateStop.Text,textDatePaycheck.Text);\n\t\t\tDialog", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       time_avg\n        # Read the time column headings\n        time_avg\n        time_column_headings = column_headings = column_headings\n        column_headings = [\n            'time', 'time',\n        # Read the lines\n        # Read", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_create', context, data_dict['group'])\n    # or\n    return authz.is_authorized('org_create', context, data_dict['org'])\ndef user_create(context, data_dict):\n    model", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble confidence = Math.pow(confidences[parentIndex], 1d / depth);\n\t\t\t\t// setting outcome\n\t\t\t\tnode.getChildren().get(predictionAttribute.getMapping().get(outcome)).setPartition(node.getPart", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[] { new SearchResult() };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param>\n        /// <param", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (ch, offset, strlen, int;\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      boolean[] firstSet() {\n         if (firstSet).firstSet() {\n         @Override\n         boolean[] firstSet;\n        ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired && !StringUtil.isBlank(studyFormName)) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.get", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Dropping client {0} because {1}\", newConn.PlayerIndex, message);\n\t\t\t\t\tnewConn.Socket.Blocking = false;\n\t\t\t\t\tnewConn.Socket.NoDelay =", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingE", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'views':\n    views()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    print \"Invalid parameter\"\n#-------------------", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot type\n  if not 'grouping' in pD:\n    return S_ERROR( \"Missing grouping!\" )\n  grouping = pD[ '", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot);\n\t\t}\n\t}\n\tclass BaseBuilderQueueManager\n\t{\n\t\tpublic BaseBuilderQueueManager(IPositionedBase self, string queueName, PlayerResources player", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setPlan(plan);\n        catalogStmt.setSqltext(sql);\n        catalogStmt.setOutput_columns(plan.getOutputColumns());\n        catalogStmt.setOutput_columns_count(plan.getOutputColumns().size());\n        catalogSt", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox1\n\t\t\t// \n\t\t\tthis.textBox1.Location = new System.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.fBinary = false;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_edit_profile(self.user.id)\n        self.assertEquals(response.context[0]['user_profile']['for_user']\n    def test_edit_profile(self.user.get_user.\n    def test_edit_user_view(", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, leftovers = parser.parse_known_args()\n    if '--help' in leftovers:\n        parser.print_help()\n        sys.exit(0)\n    if '--generate-configfile' in leftovers:\n        _", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\n\t\t\tself.updateAPList = self.newAPList = self.getAPList,\n\t\tself.newAPList = self.getAPList,\n\t\tself.cleanList = self.getAPList,\n\t\tself.updateStatus = self.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = (float)fontX * x;\n                float baseline = baseline - (float)font.GetFontDescriptor(BaseFont.DESCENT, size);\n                return new iTextSharp.text.Rectangle(0, 0, size, baseline);\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  }\n  \n  /**\n   * Load a comma-separated list of doubles.\n   *\n   * @param key The key to the list\n   * @return A list of doubles\n   */\n  public static List<Double", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-89.99, 89.99, 18.987)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        x_points = x_points", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # get_mf\n    # get_mfcc\n    # get_mfcc\n    mfcc_data = []\n    mfcc_data = []\n    for line in range(len(dirs)\n    new_mfcc_vect =", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns a string representation of the current set.\n        /// </summary>\n        /// <returns>string representation of the set</returns>\n        /// <remarks>\n        /// The string representation is in the form of a set of key-value pairs,", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n            this.ResumeLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.Controls.Add(treeNode1);\n        this.Controls.Add(treeNode26);\n        this.Controls", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   GLUT = self.wrapLogging( self.createBaseFunction( 'glutSolidCube', self.GLUT, resultType=ctypes.c_void_p, argTypes=(ctypes.c_void_p,), extension='GLUT' ) )\n    GL", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeFile(header, NZFileInfo);\n        }\n    }\n    private void writeFileInfo(final DataOutput() {\n        writeUint64(header.write(NID.FileInfo()\n    }\n    }\n    private void()\n    {\n       ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 * (1.0 - (System.currentTimeMillis() - start) / (long) (rampDelay * fps)));\n                if (alphaLevel == 0)\n                    inRamp = false;\n                rep", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n        }\n        }\n    }\n    }\n        }\n        }\n    }\n        [Test]\n        public void\n        [Test]\n        public\n        void\n        {\n            [Test]\n        public", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    await RecycleItems(session, cancellationToken, ultraPotionCount, ItemId.ItemUltraPotion);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       if c.lower(c.line):\n        c.write(Sersic(1)\n        if c.writeline(str(str(c.get(1, \n        f.writelines(['A) ', str(sex_func(1), '(1)',", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 4);\n                    i += ((b & 0x030) >> 1);\n                    i += ((b & 0", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key.make_usage_key('course_home', self._course_key).get_id()\n    def _install_course_updates(self):\n        \"\"\"\n        Install course updates.\n        \"\"\"\n        course_details = self._course_details", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\telse if(chance < 0) chance = 0;\n\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If we can't open the file it's not there, so we should download it\n        cert_files = ['key', 'cert']\n        for cert_file in cert_files:\n            if not os.path.exists('%s/%s.pem' % (", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.SuspendLayout();\n        this.SuspendLayout();\n        }\n        this.SuspendLayout();\n        this.SuspendLayout();\n        // \n        // \n        // \n        // \n        // \n        // \n       ", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.ui.info(\"No command line\n            self.archive.add_file(self.sos.log.info(\"\")\n            self.archive.archive = self.temp_file.clean()\n        self.ui.log.info(\"\")\n        self.log.info", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionBasicFossil):\n    def getSessionType(self):\n        \"\"\" Session Type \"\"\"\n    getSessionType.produce = lambda s: s.getType()\n    def getSessionType.produce = lambda s: s.getType()", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.out.println(\"ClientException: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), importServerRadio.isSelected(), result);\n            }", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tScriptable layer = (Scriptable)value;\n\t\t\t\t\t\tif (layer instanceof String) {\n\t\t\t\t\t\t\tlayer = (String)layer;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (layer !=", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession,\n                new GraphRequest.GraphHookCallback() {\n                    @Override\n                    public void onCompleted(GraphResponse response) {\n                        if (response.getError() != null) {\n                            // An", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tfor (int[] influence : emotion.influences) {\n\t\t\t\tinfluence[0] = CharacterFeatures.getFeatureIndex(influence[0]);\n\t\t\t\tinflu", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at': constants.SPLITED_AT_FINISHED,\n            'stage': {\n            'name': 'stage3',\n            'job': {\n                'duration': 10,\n            'finished_at': constants.SPL", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        if ZoneLetter < 'N':\n            return (0,0)\n    # Compute longitude\n    n = (eccSquared/eccPrimeSquared) * (phi1-eccPrimeSquared/", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[user.username]))", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action\n    @property\n    @property\n    @property\n    def _property_info\n    def _license_info\n        return license_info\n    def _license_info\n    @property\n    def _license_info\n    def _license_info", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the datatype as a string\n     */\n    public String toString()\n    {\n        return getClass().getName() + \"@\" + Long.toH", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           if flag == 'include':\n                new_positional_tags_list.append(TagRegex(regex, True))\n            elif flag == 'remove':\n                new_positional_tags_list.append(TagRegex(regex, False))\n            else:\n                raise", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new TypeGenericParameter[0];\n\n            }\n            public override bool Equals (object obj)\n            {\n                return false;\n            }\n            public override int GetHashCode ()\n            {\n                return 0;\n            }\n            public override bool ReferenceEquals", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer:\nfrom scapy.fields import ShortField, XByteField, XShortField, XIntField, X3BytesField, \\\n    XBytesField, StrFixedLenField, StrLenField, PacketField, IntField, \\\n    IntEnumField, StrLenField", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe\n\t\t\treturn dbus.gobject.uncreator.path, self.path)\n\t\t\treturn dbus.ObjectPath(self.path, dbus.ByteArray(self.keys)\n\tdef __init__(self, peer, keysize", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           {\n                AddSpell(typeof(Reg.Must(Reg.Nightshade, Reg.Garlic, Reg.MandrakeRoot, Reg.Garlic, MandrakeRoot, MandrakeRoot, Reg.Mandragol, Reg.Nightshade", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.pop(exc)\n        if self.preserved:\n            self.pop()\n        appcontext_stack = self.app_context_stack\n        if appcontext_stack is not None:\n            appcontext_stack.pop()\n        if self.preserved:", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return session.query.filter(session, cluster_id, needs_columns=False)\n    \"\"\"\n    return _pubsub_consumer(session, cluster_id, needs_columns=cluster_id, needs_columns=False)\ndef channel_id,\n        cluster_id", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByRelease(ResourceEntity resource, ReleaseEntity release) {\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       proj_dist = src_radius * np.sin(angles)\n    elif ndim == 3:\n        proj_dist = src_radius * np.sin(angles)\n    else:\n        raise ValueError('`ndim` should be 2 or 3", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.providerType = self.providerType\n    self.url = self.url\n    self.enabled = self.isEnabled()\n    def _doSearch(self, search_mode='search_season', self.url, self.option\n    def _buildURL(self, url", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic override string", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for Naccache-Stern cipher.\\n\");\n\t\t\t}\n\t\t\t// Add the two", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value.Properties.Count, Is.EqualTo(1));\n\t\tAssert.That(obj.Properties[0].Value.Properties[\"In this test\"\n\t\t: \"It is an object.\"].Value.Type, Is.Equal", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2(\"http://example.org/\", \"http://example.org/\"));\n                }\n            }\n            if (isToroid) {\n                edges.add(", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.Isoelastics(keys=keys,\n                  flow_rate_um=0.04,\n                  viscosity_um=1.5,\n                 lut_id=\"LE-2D-ana-2d\n    flow_rate", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.bulkExport(db);\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.104400',\n                    u'AvailabilityZone': 'us-east-1d'}]\n        assert not alert.lowest_spot_price(history, 'g2.2xlarge', 'us-east", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Performs the actual installation.\n\t * \n\t * @return the path to the jar file\n\t */\n\tprivate String performInstallation() {\n\t\tboolean", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, new uint[] { vao });\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteB", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       self._project_data_cov_mat_error\n        return self.y_model_cov_mat\n        return self._project_model.x_data_cov_mat\n        return self.y_data_model_error\n        return self._project_model_error\n   ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation\n     */\n    @Override\n    public String toString() {\n        return new ReflectionToStringBuilder(this, To", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (\n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                \n                ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged?.Invoke(this, new FolderExplorerComponentViewSelectedFolderChangedEventArgs(value.Sender, value.SenderParameter)); }\n            remove { _selectedFolderChanged.RemoveHandler(value.Sender, value.SenderParameter); }\n        }\n        #endregion", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       CanDoActionTestUtils.runAndAssertCanDoActionFailure(\n                new ImportVmTemplateCommand(createParameters()),\n                new EngineMessage(string100, \"Template name must be less than 100 characters long.\"));\n    }\n}\n}\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetSensitivity(1D);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetIncrement(1D);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetPage", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       # self.system.\n        # Enable\n        #\n        #\n        # Enable\n        # Post-Process\n        # Post-Process\n        #\n        #\n        # =-=-=-\n        #=-=-=-\n        #\n        #\n        #\n       ", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldnull);\n\t\t\t//ilgen.Emit(OpC", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder MergeFrom(byte[] data, pb::System.System.IO.BinaryReader;\n    {\n      return new SendInvitationRequest(channel_idl\n    }\n    }\n    from pb::System.IO.BinaryReader(pb::System.IO.", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = this.vertices.get(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the first vertex of quad <code>i</code>.\n     * \n     * @param i\n    ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(columnName, true, true, m_useAttachment, m_useAttachments, m_useLanguages, m_useTypes\n    }\n    }\n    public List<String> getColumns() {\n        List<String> m_columns = new", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tyield return new WaitForSeconds (0.25f);\n\t\t\t\tVector3 tempVec3 = activeLineRect.localScale;\n\t\t\t\ttempVec3.x = tempVec3.x;\n\t\t\t\ttempVec3.y =", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n   ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            Users.Add(lastUser);\n        }\n        private static void SendEmailsToUsers(DataTable AErrors)\n        {\n            foreach (string user in Users)\n            {\n                SendEmailForUser(", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X > Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y > Game.Renderer.Resolution.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Verify that the data\n            if (VerificationResult.ContainsRow.Contains(Row.Discounts, Discounts, VerificationResult);\n            }\n            // VerificationControls.VerificationControls\n            {\n                DiscountRow, VerificationResult, VerificationControlsData", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int)stream.Length);\n                // Adding file content as string.\n                args.Add (filename, buffer.Clone(), new Node (buffer.Clone ()));\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementsRequirement = namedtuple('PayloadRequirementRequirement', ['requirement', 'reason', 'strong'])\n\nclass PayloadRequirements(object):\n    \"\"\"A container for payload requirements.\n    \"\"\"\n    def __init__(self):", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t{\n\t\t\tget {\n\t\t\t\treturn Enabled && CopyRangeAtInterval > 0 && CopyRangeAtInterval > 0;\n\t\t}\n\t\t\t{\n\t\t\treturn;\n\t}\n\t\t\t}\n\t}\n\t\t_", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\tpublic string SessionClientId {\nNext line of code:\n\t\t\treturn startup_id;\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalArgumentException(\"BUG: \" + bugInstance.getMessage() + \" has no source line\");\n            }\n        }\n    }\n    /**\n     * @return\n     *         the analysis errors\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\tpublic override void GetContextMenuEntries( Mobile from )\n\t{\n\t\t{\n\t\t}\n\t}\n\tpublic override bool Hunger( int )\n\t{\n\t\tget {\n\t\treturn Food.CheckHunger;\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n        }\n        }\n        }\n        private void FarmHarass();\n        private void FarmClear()\n        {\n        {\n            if (Menu.GetSlider(\"JungleClearR\")\n        }\n        private void\n        {\n            if (Menu.GetBool", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn GridBagConstraints.createConstraints(x, y, width, height, anchor);\n\t}\n}\n\n\n## Your task:The code provided is a utility class for creating `GridBagConstraints` objects with sensible defaults and readable methods. However, the code is missing a method to create", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            root = xml.etree.ElementTree.fromstring(fb)\n            for child in root:\n                if child.tag == 'Ort':\n                    for grandchild in child:\n                       ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.resolve_models('testsuite')['test_model'],\n            Model_parser.resolve_models('testsuite')['test_model'])\n        clean_field", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               env.CompileDeploy(\"\n\n            :\n            :\n                var path = new RegressionPath();\n                var stmtTextCreate\n                var stmtTextCreate\n                :\n                var compiledWindow\n                :\n                :\n                var stmtTextCreate\n                :\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "  \n    def add_orbit\n       \n        \"\"\"\n        \"\"\"\n       \n        other :\n       \n        other = other\n       \n        if other is a Particle\n        if other is a Particle\n        if other is a Particle\n        if other is a number\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view_obj = self.browse(\n        cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.putClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            if (oldValue != null) {\n                c.putClientProperty(BasicHTML.propertyKey, oldValue);\n            }\n        }\n    }\n    /**\n     * The factory", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_worker", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmapping.SqlLoader.NamedQuery = namedQueryReference;\n\t\t}\n\t\t}\n\t\tpublic void Cache(ICacheMapper", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   private void pushGraph(MethodInvocation.\n    }\n    }\n    }\n    }\n    private void popGraph(MethodInvocation.\n    }\n    }\n    private void moveInlineInfo(MethodInvocation invocation,\n    ResolvedJavaType\n    }\n    List<", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        if self.args['pr']\n    self.create_log_path = self.args['log_path']\n        self.pytest_name = self.args['pytest_name']\n        self.pytest_bindings = self.args['pytest_bindings", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    states.get(0).readCache.put(entry.getKey(), states.get(0).readCache.get(entry.getKey()));\n                } else {\n                    states.get(0).readCache.put(entry.getKey", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.sendEmptyMessageDelayed(MSG_SET_CALLBACK, 100);\n    }\n    /** @see Connection.VideoProvider#onSetCamera */\n    public void onSetCamera(String cameraId) {\n        if (mCallback != null", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\n\t\t\t\tfrom.SendLocalizedMessage( 1019001, \"\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   db.Base.metadata.create_all(bind=db.engine)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.pop(user, None)\n        if self.module.get('all_users'):\n            self.module.get('all_users').discard(user)\n        self.module.pop('all_users', None)\n        self.module.pop('all", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrapwidth = _Base._wrapwidth\n    # _BaseFile {\n    def _Base.save_as_entry {\n    def _BaseFile {\n        return str(self, header, str)\n    _BaseFile {__init__str {__str__str =", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine integrity of transformation %s\" % transID )\n      return S_ERROR( \"Failed to determine integrity of transformation %s\" % transID )\n    if not res['Value']:\n      gLogger.", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(method.equals(\"POST\"))\n\t\t\treturn null;\n\t}\n\t\tif(method.equals(\"/\"))\n\t\t\treturn null;\n\t}\n\tif(method.equals(\"POST\")) {\n\t\treturn null;\n\t}\n\tif(", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            [w['message'] for w in self.flushWarnings()],\n            ['The Gerrit status callback is deprecated.'])\n        gsp.sendCodeReview.assert_called_once_with(self.TEST_PROJECT, self.TEST", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.scheme = 'http://schemas.google.com/mhs/2008/category'\n    self.category.term = 'education'\n    self.assert_(self.category.scheme == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: @I\n        // This is the case \n        // TODO: this is a placeholder\n        // type, but not yet resolved\n        // type, but the type, if (type.getTypeMutability\n        // type, if the type is a method receiver\n       ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = mat = context.material\n        if mat.use_shader and mat.use_shadeless and mat.use_diffuse = mat.diffuse_shadeless = mat.use_transparency = mat.use_transparency:\n        if base_mat", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            mapper64_chrAddress = _engine.Mapper4Address = _engine.Mapper4Address = _engine.PramAddress = _engine.Mapper4Address = _engine.Mapper4Address = mapper4Address = mapper4_", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(new JMenuItem(sTDocUrl, sTDocUrl));\n            m_jPopupMenu.addActionListener(oActionListener);\n        }\n        private void addMenuBar(JMenuBar _jMenuBar, JMenuBar _", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Math.Max (min, Frame.H);\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                            max_length=255,\n                            unique=True,\n                            db_index=True)\n    # FIXME AutoSlugField\n    sl", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['.php'] = PhpLexer(startinline=True,\n                          %(linenostart)s,\n                          %(filename)s)\n# Enable highlighting for PHP code between <?php ... ?>\nlexers['.php.txt'] = Ph", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   ''', (i,))\n    row = cursor.fetchone()\n    print \"Row is: \", row\n    if row:\n        sdate = row[0]\n        stime = row[1]\n        edate = row[2]\n        etime = row", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       r.db('smc-storage').table('projects').get(project_id).update({'last_snapshot':timestamp})\n    # Close the connection\n    conn.close()\ndef db_get_last_snapshot(project_id):\n    conn = rethink", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t// Deian's house\n\t\t\t// I'm not sure if I'm not sure if I'm not sure if I can do it?\n\t\t\t// I'm not sure if I can do it.\n\t\t\t// I can't remember", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__,\n        self.codestr = 'EID\n        self.codestr = 'EPI\n        self.codetail = 'EPI\n        self.coderep = ()\n        self.codetail = ()\n        self.cod", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, name, uuid, status, result):\n        self.name = name\n        self.uuid = uuid\n        self.status = status\n        self.result = result", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                if (uri != null) {\n                    context.startActivity(intent);\n                }\n            }\n        }\n    }\n}\n\n\n## Your task: \nExt", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) == 0):\n        raise AssertionError(\"primary.xml doesn't contain any packages\")\n    else:\n        raise AssertionError(\"primary.xml contains additional packages\")\n@behave.step(\"filelists in \\\"{path}\\\" has", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_outputs = self._bytecode_filenames(inputs)\n        inputs.extend(ext_outputs)\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -----------------------------------------------\n    # (called by outsiders)\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tList<string>\n\t\t{\n\t\t\tList<string>[] entityProperties = new LazyInitializationCallable = new LazyPropertyInitializer\n\t\t\t\tList<string[] lazyPropertyNames;\n\t\t\tList<string> lazyPropertyAlias;\n", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--output=' + log_name,\n        '--log', log_name,\n        '--qos', 'normal',\n        '--mem', request['job_max_vmem'],\n        '--qos', 'normal',\n        '--mem', request['job", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin,ListEventDelegate\")]\n        [RolesRequired(\"Admin,ListEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} : {1}\", GetItemValueText(item), item.Value));\n                    }\n                    else\n                    {\n                        Builder.AppendLine(string.Format(\"{0} : {1}\", GetItemValueText", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"show\", \"downloadLink\": \"show\"}, decode=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"service restart failed\")\n                       return False\n                    self.logger.info(\"service restarted\")\n                    return True\n                    #\n                    # if restart_dhcp == \"1\":\n                    #     restart_dhcp = \"1", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n    }\n}\nCode by @YamcsEventProducer\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                if (state.Frequency < 64\n            }\n        }\n        }\n        {\n            if (\n            state.Frequency > 0)\n            {\n                state.Frequency = (frequency;\n            }\n            else\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQ VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true, true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t//\n\t\t//fillTreeView(treeView, treeView tv;\n\t\t\n\t\n\t//\n\tprotected void on_row_doubleclicked (object o, object o, EventArgs args)\n\t{\n\t\t\n\t\tif(treeView.", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(b\"\\x00\"\n\n\n    self.assertRaises(BitReaderError, b\"\n    self.failUnlessEqual(Bit\n\n    def test_insert_bytes(self, b\"\n\n    self.file(self.", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?></td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32-", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95)\n    plt.plot(cr['combined'][app][VC]['stats']['durations'])\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self, self.assertEqual(self.assertEqual(self, 1, 2)\n    def test_runAsEffectiveUser(self, self.mockos, self.mockos = self.mockos = self.mockos = self.mockos =", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.fillRect(x, y, controlSize, controlSize);\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlBackground", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  failures = \"\"\n  LOGGER.info(msg)\n  for i in patternDict:\n    if knn.infer(patternDict", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, offset - lengthOffset, value);\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof OhmArrayLayout)) {\n           ", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           return relativePath;\n        }\n    }\n}\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % kwargs\n    raise TypeError('Unconvertible type: %s' % type(d1[k]))\nelse:\n    # Current value is not a dict or list, so just add it\n    result[k] = v1\n\ndef dict_merge(d1", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i17 = i6;\n        Dlasd(i, i1, i31, i31, i, i31, i3, i3, i4, i5, i3, i3, i5, i, i, i, i, i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name;\n\t\t\tstr += \"\\n\";\n\t\t\tstr += \"Transitions: \\n\";\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                {\n                    Slot = SpellSlot.R,\n                    Type = SpellSlot.\n                    Delay = SpellSlot.R,\n                    Radius = 100,\n                    MissileSpeed = 25", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE)\n    @testlib.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//call once after adding a constraint to a collection\n\t\t//will throw an exception if a rule is broken\n\t\tpublic override void AssertConstraint (DataRow row)\n\t\t{\n\t\t\t// The order is important.\n\t\t\t// If we call AssertConstraint on a", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.retranslateUi_ui.setWindowTitle(self.toolBar)\n        self.retranslateUi_groupBox.setTitleRoleRole)\n        self.retranslateUi_groupBox.setTitleRole(self.settings_kernels_groupBox.setTitle", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               mLastForecast = null;\n            }\n            mLastForecast = new Forecast();\n            mLastForecast.stationId = stationId;\n            mLastForecast.wxType = Forecast.TAF;\n            mLastForecast.time", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxRowCount, \"unexpected row count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxTime", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[(uiCRCITTSum & 0xff) ^ uiByteValue];\n            }\n            if (refin != 0)\n            {\n                uiCRCITTS", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t/**\n\t * @return the disguiseModule\n\t */\n\treturn getDisguiseModule();\n\t}\n\t/**\n\t * @return\n\t*\n\t* getAllowlistModule\n\t\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(controller),\n                new CeylonReferencesHyperlinkDetector(controller),\n                new CeylonSourceHover(editor, sourceViewer),\n                new CeylonOut", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(qt.QGroupBox, self.l.setAlignment(Qt.Qt.AlignHCenter)\n        self.l.addWidget(self.getDrawingMode(self.l.setAlignment(Qt.AlignCenter)\n        self.l.", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Send\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Property.GetValue( m_Object, null ) );\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int j=0; j<numStates &&j<numStates.length; j++){\n\t\t\t\tsb.append(sb.append(sb.append(sb,\"\\n\"));\n\t\t}\n\t\tsb.append(sb.append(sb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                                    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[lineIndex].productCode + \" a price could not be found\");\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, mockDatabase, mockDatabase, mockCurrentSubject);\n        // Next line of code\n        //ACL.getACECount\n        //ACL\n        //Next\n        //ACE_ACCESS_ACCESS", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 origin)\n\t\t{\n\t\t\treturn v.RelativeTo (viewport) - origin.RelativeTo", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t(XDREnum):\n    __members = {\n        'endpoint_key_vlan_0': endpoint_key(0, 0, 0),\n        'endpoint_key_vlan_1': endpoint_key(1, 0,", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (m_workerSocket = sending_workerSocket\n\t\t\t\t{\n\t\t\t\tm_workerSocket = null;\n\t\t\tm_clientSocket", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                return convertToActivityBucketList(list);\n            } else if(type == RequestType.Step) {\n                return convertToStepBucketList(list);\n            }\n        }\n        notifyListReceived(F", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " for i in xrange(bind_count):\n    print '    Arg%d%s' % (i, ', ' if i < bind_count - 1 else '')\n  print '};'\n  print ''\n  # The single use callback function\n  print textwrap.ded", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps([range_item_dict(item) for item in items]),\n        content_type=\"application/json\"\n    )\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([range_item_dict(item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(whereClause);\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(store.getValueFactory().", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n    def get_success_url(self):\n        return self.object.get_absolute_url()\n        # return reverse(\"shoop_admin:user.detail\", kwargs={\"pk", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetConvergenceLimit(1e-12);\n            // Solve the system\n            for (int k = 0; k < matrix.RowCount; k++)\n            {\n                // Get the k-th row of the matrix\n                var row = matrix.", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat median = median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if k < \n\n    # Compute the number of samples\n    # Compute the number of samples\n    # Compute the number of samples\n    left = np.array\n    # Compute the number of samples\n    # Compute the number of samples\n    # Compute the", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for c in csv_mapping.get_columns():\n            if c.name in mapping_json[self.enrich_index]['mappings']:\n                result[c.name] = True\n            else:\n                result[c.name] = False\n        return result\n   ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.Locked)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tslotsButton.IsDisabled = () => !orderManager.LobbyInfo.Slots.Any", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\t\treturn this.GetMessage();\n\t\t\t\t}\n\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set()\n    def __init__(self, settings, **kwargs):\n        self", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.BoundingBox.Left < cluster.ClusterBoundary.Left)\n                throw new MsaglException(\"Cluster boundary curve is to the left of the cluster boundary\");\n            if (cluster.BoundaryCurve.BoundingBox.Right", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKin,\n\t\t\tm_jumping = false;\n\t\tm_jumping = false;\n\tm_wasJump = false;\n\tm_jumping = false;\n}\nvoid btKinematicCharacterController::recoverFrom", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            // Checking if the initializer is @Unique\n            if (atypeFactory.getAnnotatedType(initializers.get(i)).\n                    hasAnnotation(Unique.class)) {", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tNBTTagCompound nbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTag", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(Context, this, typeAttribute.Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_returnType = null;\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t\t\n\t\t[Test]\n\t\tpublic void SizeTestVerticalTrackBar ()\n\t\t{\n\t\t\tIntPtr handle = new IntPtr();\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tresult = instrumentation.addInstrumentationPoints(agentConfiguration(agentConfiguration, Collections.singleton(Collections.singleton(instrumentationApplier));\n\t\t\t// must be(ClassType(searchNarrower(instrumentationApplier));\n\t\t\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicitlyCopied = true;\n\t\tif (this.isImplicitlyImplicit()\n\t\t\t\t&& cutFirstField()\n\t\t\t\t&&\n\t\tcutFirstField()\n\t\t)\n\t\t\t\t// TODO", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > narrowL) {\n              // can this left constituent stretch far enough to reach the right constituent?\n              continue;\n            }\n            if (min2 > wideL) {\n              // can this right constituent stretch far enough to reach the left constituent?", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           '--rsync'\n            stdout=PIPE,\n            stdout=PIPE,\n            stdin=PIPE,\n            pipe_stdin=PIPE\n        ]\n        pipe.stdin.assert_called_once_stdin.close_stdin_called\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar threads = new List<DbgThread>(new List<DbgThread>(process.Threads);\n\t\t\tInitializeAppDomainThreads_AppDomains_Threads_AllThreads;\n\t\tvoid DbgThreads_DbgThread(DbgThreads", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"value\", String.valueOf( \"color\", \"color\" );\n\twriter.startValue( \"s\", \"float\" );\n\t\twriter.endTag( null, \"color\" );\n\t\twriter.endTag( null, \"sval\",", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nif reject_wall + reject_jump > 0:\n  print(\"Total number of rejected timesteps : %s\" %reject_wall + reject_jump)\n  print(\"Total number of rejected timesteps wall : %s\" %reject_wall)\n ", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # We don't_inplace_or_AdvancedSubtensor1\n    if isinstance(node, T.op.idx_pattern, T.T.Op.idx_patterns, T.idx_patterns, T.Op.idx_patterns, T.Op.", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = False\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple()\ndef save(self):\n        \"\"\"Override save to add user and community to the instance\"\"\"\n        self.instance.user = self.user\n        self.", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event.listen(**kw)\n        query.\n        event.\n        \"\"\"\n        @event.before_compile(event.before_compile\n        def before_compile(self, query.\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        def before_compile(self, raw=", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(resource_fs)\n\nclass ConditionalModule(XModule):\n    \"\"\"\n    Conditional module.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(ConditionalModule,", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(self.data, self.current_filter)\n    # ===================== #\n    #      METHODS           #\n    # ===================== #\n    @classmethod\n    def prepare_data(cls, data):\n        \"\"\"Must be overrid", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t[XmlType(\"ldind_ref_i4\")]\n\t\t{\n\t\t\t{\n\t\t\tpublic sealed class Ldref : Instruction\n\t\t{\n\t\t\tpublic sealed class Ldind_ref : Instruction\n\t\t{\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(100, 20);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            this.data.put(row.get(ID_KEY), new ArrayList<>());\n            termData = this.data.get(row.get(ID_KEY));\n        }\n        for (Map.Entry<String, Collection<String", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos()))\n\t\t\treturn false;\n\t\tsupertile.getWorld().setBlockToAir(supertile.getPos());\n\t\tsupertile.getWorld().playBlock", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(n, component);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if not docid in minfo['flags']:\n                                logger.info(\"ERROR: Document %s: Expected flag %s but not found\" % (docid, str(flagname)))\n                            elif flags[flagname] != minfo['flags'][flagname]:", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t{\n\t\t\tupdateListViews.Columns.Clear();\n\t\t\t\n\t\t\t\n\t\t\tupdateListView.Columns.Columns.Clear();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tupdateListView.Columns.Clear();\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    ExDate exDate = new ExDate(exDateList);\n    return exDate;\n  }\n  /**\n   * Gets the start date of", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = SourceComponent;\n\t\tsourceEventBinding.SourceProperty = SourceProperty;\n\t\tsourceEventBinding.TargetEventName = TargetEventName;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\tif( targetEventBinding == null", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        @RequestParam(required = false)\n        @RequestParam(required = false)\n        @RequestParam(required = false)\n        @RequestMapping(value = RequestMethod.GET)\n        @RequestMapping(value = \"/spanPorts, @RequestMapping", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tpublic static class CoreForms;\n\t\t\tpublic static class CoreForms extends ims.framework.FormName\n\t\t{\n\t\t\tpublic static class Forms;\n\t\t\tpublic", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static void main(String[] args) {\n        OMEData omedata = new OMEData(new DataSource());\n        List<String> projects = omedata.getRandom(OMEData.class.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement.objects.filter(subject_type=None,\n        .filter(subject_type=None,\n        .save()\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        for pred in old_pred_man_obj = preds\n                    .excluding(", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\n            .Append(\" .cell_options_bitmap =\n                .Append(\"\\n\").Append(\"cell_options = \")\n                .SetShortOptions\n                \"\\n\")\n            {\n                field_3_cell_options_cell_options =\n                .Append", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes[byteIndex++] = (ch >> 8) & 0xFF;\n\t\t\t\tbytes[byteIndex++] = (ch & 0xFF) << 8;", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n\n\n\n    obj.operands = [dst, src1, src1, obj.operands.append(dst, src2, obj.operands.append(2)\n    obj.type = type_data_processing\n@ispec=\"32<[ ~off2(", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties props = new Properties();\n\t\t\tprops.load(new InputStreamReader(location.getInputStream(), \"UTF-8\"));\n\t\t\treturn new JRPropertiesMap(props);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name.equals(name);\n    }\n    /**\n     * Returns the ID of this game type\n     */\n    public int getID()\n    {\n        return this.id;\n    }\n}\n}\n\n\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (true, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (0, csd", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, *args, **kwargs)\n    def __idle(self, func, *args, **kwargs):\n        def delayed():\n            func(*args, **kwargs)\n        GLib.idle_add(delayed)\n    def __", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.CurrentSettings.cloudAppId = null;\n        if (PhotonEditor.Current.photonCloudAppId = null;\n        {\n            PhotonEditor.Current.cloudAppId = null;\n            PhotonEditor.Current.ServerSettings.ServerSettings", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_from_to = rootLayout.findViewById(R.id.full_from_to);\n        full_from_to.setText(message.echo);\n        full_from_to.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k] @ self.ibzk_kc[k, :, np.newaxis])\n            psit_G = psit_G * phase_cc\n        return np.eins", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       utkastService.createNewDraftRequest.getFullNamn = \"Tolvansson\";\n        when(utkService.createNewDraft(any(CreateNewDraftRequest.getRequest);\n        Response.Status.getStatusCode().\n        .getStatus", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\tforeach(ILNode body) {\n\t\t\t\tforeach (ILNode body in block.Body.ForEach(ILNode body) {\n\t\t\t\t\tforeach (ILNode body in block.Body) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.isKinematic = rb.rb.isKinematic = rb.isKinematic = rb.rb.position;\n\t    if (rb.IsKinematic = rb.position = SmoothPosition = SmoothRotation = Quatern", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   _not_serialized_attrs_ = ['fracture_type']\n    def __init__(self, config={}):\n        self.fracture_type = FractureType.normal\n        \"\"\"Fracture type\"\"\"\n        super().__init__(config)", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       System.arraycopy(ofbV, 0, ofbV, outOff, ofbV.length - outOff);\n        System.arraycopy(ofbV, outOff, ofbV, 0, outOff);\n        System.arraycopy(ofbV,", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    private final Map<String, String> labelToProperty;\n\t    private final Map", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['from'] = value\n    elif key == 'fin':\n        node_json['to'] = value\n    elif key == 'NODE':\n        for child_xml_json in", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n        public void mousePressed(MouseEvent e) {\n          if (frameToClose==null) {\n            btn.setSelected(false);\n            this.revalidate();\n            this.repaint", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.table import Table\nfrom astropy.io import fits\nimport sdss_access\nimport sdss_access.streams as streams\nimport sdss_access.sync as sync\nimport sdss_access", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx)\n    {\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   expensesAdapter.swapCursor(CursorAdapter.newCursor(app.getCursorAdapter(), app.getContentResolver(), Db.Table1.TABLE_NAME, Db.Table1.ID_GROUP + \" = \" + newId, null));\n                    //Update budget items\n                   ", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid));\n                Marshal.FreeHGlobal(m_ptr);\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        public void Dispose()\n        {\n            Dispose(false", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL_HANDLER_EXEMPLER_ALLOWED_USER_AGENTS = (\n    # List of middleware classes that will be applied in the middleware.\n# MIDDLEWARE_LOAD_MIDDLEWARE_LOAD_", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue.RemoveAll(q => q.Item == itemName);\n\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n        self.fileSystemModel.setFilters(self.fileSystemModel.setFilters([self.fileSystemModel.setFilters([self.fileSystemModel.nameFilters=[self.fileSystemModel.setNameFilters(self.fileSystemModel.nameFilters)\n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_task_gen_method\n        def meth_file\n        if self.bld.bld.always_run=True\n        # TODO\n        #.\n        def\n        return\n        #.\n    def post_rule_generator\n    def post_", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.wait_for_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        if result.success:\n            rospy.loginfo(\"Successfully executed the action plan!\")\n            break\n        else", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx - 1 ] - chemical[ 0 ][ idx - reactorExtent ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx - reactorExtent", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Direction = ParameterDirection.Output", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tpublic void SetPropertyValue(MyClass member = null, HbmProperty member, MyAccessorMapperType myAccessorMapper, HbmProperty mapping, MyPropertyMapper myAccessorMapper)\n\t\t{\n\t\t\tif", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.key_id\n        if self.authentication == 'enable':\n            if self.state == 'enable':\n            if self.state == 'present':\n                self.config_ntp_auth_keyid_keyid = self.key_id\n            self.authentication", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.collection, 'draft)\n        self.assertEqual(self.store.get_item_location(self.store.get_item_location)\n        # test_course, self.course_locn, course_key, self.user", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((ch[start] >> 24) & 0xff));\ndigest.update((byte) ((ch[start] >> 16) & 0xff));\ndigest.update((byte) ((ch[start] >> 8)", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['low'], dict['high'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['low'], dict['high'])\ndef mklogical(dict):\n    return aetypes.Logical(", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return typeof(object);\n        }\n        /// <summary>\n        /// Gets the default object factory.\n        /// </summary>\n        /// <returns>The default object factory.</returns>\n        public virtual Func<HelpPageSampleGenerator, Type, object> DefaultSampleObjectFactory", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, DateEntry):\n                value = entry.date_get()\n            else:\n                value = entry.get_active_text()\n            if self.on_quit_cell(record, column.name, value):\n                if self.screen.parent:", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.setPropertyValues(newLocations);\n        }\n        return beanFactory.getBeanDefinition(beanName).getPropertyValues();\n    }\n    /**\n     * Returns the current version of this class.\n     * \n     * @return the current version of this class", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f.readlines():\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e))\n    finally:\n        if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStruct)] ConstPropVariant pvValue,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ref int pfFlags\n            );\n        [PreserveS", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return spm.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = UPDATE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void addPrincipal", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies the tag of the element against the expected tag.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.node\n        node.parentNode = None\n        if node.nodeType == Node.ELEMENT_NODE_CLICK\n        if node.nodeType == Node.ELEMENT_NODE_NODE_NODE\n        node.", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\tvalidateEMSSc\n\t\t\t\t@Override\n\t\t\tvalidateEMSSceneSectionFirstUnitOnScene\n\t\t\t\t\tTest\n\t\t\t\t\t\tOnScenePatient\n\t\t\t\tPatientCount\n\t\t\t\t\t\t\tTest", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tencodeName(keyLocator.setName(name = decoder.\n\t\t\t\t\tencoder.getTypeAndLength(encoder.getTypeAndLength(encoder.getLength = decoder.getLength() = decoder.getOffset(encoder.getOffset", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the player's weapons\n        for(int i = 0; i < myWeapons", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getJoinDialog().hide();\n        GameEngine.model().getGame().getJoinDialog().hide();\n        GameEngine.model().getGame().getJoinDialog().hide();\n        GameEngine.model().get", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error getting file: %s\" % r.data.decode(\"utf-8\"))\n    if r.status != 200:\n        raise RuntimeError(\"Error getting file: %s\" % r.data.decode(\"utf-8\"))\n    filename = get", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tPlatform.GetService(\n\t\t\t\t\t\tdelegate", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reactions with multiple carbon sources are not supported.\")\n    return [met.formula_weight for met in reaction.metabolites]\ndef _find_carbon_sources(model: \"", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.filter(path__startswith=pootle_path)\n    @classmethod\n    def get_for_path(cls, pootle_path):\n        \"\"\"Returns a list of units that fall below the `pootle_path` umbrella.\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"ARP request: {}\".format(str(poxpkt)))\n                self.logger.debug(\"ARP request: {}\".format(str(poxpkt.payload)))\n                self.logger.debug(\"ARP request: {}\".format(str(po", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_MaxCount > 0)\n      m_RecentItems.subList(m_RecentItems.size() - m_MaxCount, m_RecentItems.size()).clear();\n    if (m_", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.IsFriend(src))\n                return true;\n            return false;\n        }\n    }\n}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   public void\n    public void\n    }\n    @Override\n    public void\n    void\n    @Override\n    public void\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tmReadData();\n\t\t\t\tmReadData();\n\t\t\t\tmWriteReportType(0)\n\t\t\t\tmWriteData();\n\t\t\t\tmReadData();\n\t\t\t\tmReadData();\n\t\t\t\tmReadData", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t\t\n\t\t\tif (direction == 1)\n\t\t\t{\n\t\t\t\tthis.direction = direction;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(NHibernate.Expression.Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.Add(NHibernate.Expression.Expression.Gt(\"Children", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueUnits2Units(i1);\n            _loNu = _loUnit = _loUnit = _heap[_loUnit2Units[i1];\n            GlueFreeBlocks();\n            _heap = _heap;\n            _units", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       navigate_to(rate.parent.parent.parent, 'Add')\n        navigate_to(rate.parent.parent.parent.parent, 'Edit')\n        navigate_to(rate.parent.parent.parent.parent, 'Delete')\n        raise NotImplementedError\n\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( _bufferId == 0 )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Cannot write to an index buffer that has not been created.\" );\n\t\t\t}\n\t\t\tif ( _bufferId == IntPtr.Zero )\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat.value = self.scan_sat.value = self.scan_sat.system.value = self.scan_sat.system\n\t\tself.retune(None)\n\tdef predefinedTerrTransponderEntry = self.scan_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAlive only accepts one of -1,0,1,2\");\n            }\n            return;\n        case ZMQ.ZMQ_RECV_DELAY_ON_DISCONNECT:\n            delayOnDis", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (((PdfNumber) {\n                    // DecodePredictor(dic.Set(dicParms);\n                    break;\n                    }\n                    else {\n                    break;\n                }\n            }\n        }\n        }\n        }\n        }", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        if not self.get_options().get_degree_bounds() == self.options.get_degree_bounds[0]\n        self.get_options().get_degree_bounds()\n        self.get_options().get_degree_bounds()\n        self", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n            {\n                Assert.AreEqual(\n                    \"repeated_int32: 1\\n\" +\n                        \"repeated_float: 1.5\\n\" +\n                                                                                                                                                                                ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object replace(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = get( key );\n\t\t\tif ( old != UNKNO", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t}\n\t/// <summary>\n\t/// Records the creation of a new auction\n\t/// </summary>\n\t/// <param name=\"au", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n\n    @api.onchange('user_id')\n    def _onchange_user_id(self):\n        if self.user_id:\n            self.barcode = self.barcode or self.user_id.barcode\n            self.", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow row = form.grdResults().getRows().get(orderInvestigationLiteVo.getSpecimenIndex());\n\t\tif (row == null)\n\t\t{\n\t\t\trow = parentRow.getRows().newRow();\n\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.Read();\n                pt.x = Math.Max(0, pt.x);\n                pt.y = Math.Max(0, pt.y);\n                c.Dispose();\n                return pt;\n            }\n        }\n       ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_new_tab(cwd, profile)\n        self.set_title(self.title.get_title())\n        self.set_title(self.title.get_title())\n        self.set_title(self.title.get_title", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo structTypeInfo = new TypeInfo(managedType, TypeInfo);\n                MarshalInfo marshalInfo = new MarshalInfo(\n                    GetMarshalInfo(\n                    returnMarshalInfo = GetMarshalInfo(\n                    MarshalInfo(\n                    {\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null;\n\t}\n\t\t}\n\t\tset {\n\t\t\t// No need to set\n\t}\n\t}\n\t}\n\tpublic bool IsFinal {\n\t\tget {\n\t\t\treturn false;\n\t}\n\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region event handlers\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self.context.set_options(\n            self.context.get_options() |\n            _openssl_to_openssl_verify[ssl.PROTOCOL_TLS_CLIENT", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox1 = new global::Gtk.VBox;\n\t\t\tthis.vbox1 = (global::Gtk.VBox.Box.Child;\n\t\tw1.Position = 0;\n\t\t\tw1.Position = 0;", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.vbox.pack_start(gtk.HBox.pack_start\", expand=True)\n    gtk.h.set_spacing(gtk.hbox.pack_start(gtk.HBox.show_all()\n    gtk.hbox.", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": \"Go-to-definition\",\n    \"Go-to-definition\": \"Go-to-definition\",\n    \"Go-to-next\": \"Navigate-next\",\n    \"Locate-on-this-file\": \"Locate-this", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + this.persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderClassName='\" + this.persistenceProviderClassName + '\\'' +\n\t\t\t\t\", transactionType=\" + this", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void setEditPolicies()\n  {\n    EditPartFactory factory = getFigureFactory().getEditPartFactory();\n    factory.setEditPolicies(new EditPolicies()\n    {\n      public EditPart get", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(182, 652);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n/**\n * Marker for content\n */\npublic class MarkedContent\n{\n    private String markerId;\n    private String contentId;\n    private String contentTitle;\n    private String formId;\n\n    public Mark", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t// (\n\t\t\t//\t0x91, 0x9F, 0x0A, 0x0B, 0x0B, 0x0E, 0x0F, 0xE4", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_sum;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // int type\n\t    current_sum = 4;\n\t    \n\t    sum += current_sum;\n\t    \n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l\n                return self.do_add_job(lines, comment, job)\n        # if we get here, we didn't find the job\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n            if l", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifierData_vertex_group_vertex_uv_group\nclass MeshModifierVERTEX_WEIGHT_PROX_TEXTURE(mesh, mesh, mesh, mesh_vertex_group\n\nclass MeshModifier_uv_texture_uv", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            likelihoods[0] = minLikelihood;\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] >", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       while (neighbors.isEmpty() == false) {\n            val neighbor = neighbors.remove(0);\n            assertTrue(vertex.contains(neighbor));\n        }\n    }\n    @Test\n    @DisplayName(\"getNeighbors() should return", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               else:\n                    self.parser(self.choice)\n            except ValueError:\n                print(self.fatal+\"[!] Please enter a number\"+self.blk)\n            except IndexError:\n                print(self.fatal+\"[!] Please enter a number", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'unique_t", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n            }\n            }\n            }\n        }\n        }\n        }\n        }\n        }\n        returnImportedTypes(nextImport(importedTypes(), true);\n        }\n    }\n    }\n    }\n    }\n    private void processImport", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.onchange.\n        if ids:\n            self.get_leave_type: self.onchange.resource_id:\n        if self.pool.get_resource_id:\n        self.message_view\n        \"\"\"\n        \"\"\"\n       ", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           this.GridBaseManager.Grid\n        /// <summary>\n        /// <param name=\"gridLoader\"\n        /// <param name=\"gridLoader\" />\n        /// <returns>Returns the gridLoader\n        ///\n        /// <c>\n        ///\n        /// <returns>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"MixerLine<{0}>\", mixerLine.szShortName);\n        }\n    }\n}\n\n}\n}\n\nCan someone help me to complete the code?\n\nA: I've completed the code. Here it is:\nusing", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tif ( domainObject\n\t\t{\n\t\t\tif ( value1 = null;\n\t\t}\n\t\t}\n\t\t}\n\tif ( value5 = null;\n\t}\n\t}\n\t}\n\t}\n\tif ( value5 = null;\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           status = call(\n                [\"cargo\", \"build\"] + opts + params,\n                env=env,\n                verbose=verbose)\n        if android:\n            # Build the APK\n            status = call(\n                [\"cargo\", \"build\", \"--release\", \"", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble optimisticScore = this.getOptimisticScore(rule, score);\n\t\t\treturn score;\n\t\t}\n\t\t\treturn score;\n\t}\n\t\t}\n\t\t\t\treturn this.getOptimisticScore(p, true);\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               StashMessage.Text = gitStash.Message;\n                StashMessage.Enabled = true;\n                StashMessage.SelectionStart = 0;\n                StashMessage.SelectionLength = gitStash.Message.Length;\n            }\n        }\n        private void LoadGit", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item_to_item_0_to_0.get_pointer_value()\n    assert lattice.cbuffer.get_object(bm0", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        AuthScope that = (AuthScope) o;\n        return match(that);\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public class AddNumbers : System.Web.WebServices.WebServices.AddServiceReference(\"AddNumbers\")]\n    {\n        [System.Diagnostics.MethodImplAttribute(\"AddInt\", \"int a\");\n        }\n    }\n    public AddNumbers()", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleString", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this, C", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.index_file is not None:\n        log.info('cryptostasis', 'Loading index from file')\n        archive_index = load_archive_index(args)\n    else:\n        archive_", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_es, self.cmd_ss, self.cmd_es = \n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n       ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n        // (, line 29\n        // [, line 30\n        // (, line 31\n        // (, line 32\n        // (, line 32\n        // (, line 32\n        // (, line 32\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.getDeclaredConstructor().newInstance();\n            } catch (Exception e) {\n                System.err.println(\"Error creating object: \"+e);\n            }\n            if (o != null) {\n                cd.viewer = o;\n                channelMap", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   self.cert.get_subject_key_usage_names = dict(self.cert.get_subject_key_usage_names_to_cryptography_extensions_critical_supports.\n    def _get_all_extensions_critical\n    def _get_oc", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (_slots.find (i->second) != _slots.end ()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   return [X]\n    #   #\n    #   #   The interval is contiguous.\n    #   #   The interval is either a single word or a range of two words.\n    #   #\n    #   #   In the latter case, the interval is", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tExpect(30);\n\t\t\t\tif (la.kind == 31) {\n\t\t\t\t\tGet();\n\t\t\t\t\tif (la.kind == 32", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom_id'] = line.product_uom_id.id\n            edi_doc['product_uom'] = line.product_uom_id", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions.add(virtualContentService.setPermissionService.set(vf2,\n                                                     PermissionService.CREATE_CHILDREN,\n                                     asTypedPermission.setService.getPermissionService.setUser1);\n        }\n        }\n        }", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(devices.match_parent(parent))\n\nThis line seems to be causing an issue. Can you explain what's wrong with it and how to fix it? It seems like there's a misunderstanding in the code. The `match_parent` method is not a method", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    data = device.check_inspection()\n    print(data)\n    data = device.notification_postDevicetoken(loginId, password)\n    print(data)\n    data = device.exploration.explore(areaId", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n# Find the best fit.\n    rd = { 'antennas': { 'antennas': [],\n                     'st': 'cal': { 'antennas': [],\n                 'stations': 'array': array_stations[i]\n                 'antennas':", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = ???;\n        }\n    }\n}\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (TunerManager.getTunerHdrHdhrTunerList = new TunerList;\n        }\n        if (addDevice) {\n            // If we are adding a device, we are not tuner.\n            if (addDevice)\n            return", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file \" + mapping + \" is malformed. Each line should have at least two columns.\");\n      }\n      // log.info(\"Reading line \" + lineCount + \" of \"", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.AppendENVPath('BIBINPUTS', os.path.join(source_dir, 'bibliographies'))\n            #env.AppendENVPath('BSTINPUTS', os.path.join(source_dir, 'bst'))\n            #env.AppendENV", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        return_list\n        self.features(self, query)\n    \"\"\"\n    def features()\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    def features(self, query -- a query\n    \"\"\"\n        \"\"\"\n        >>> from", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       super_classes = [\n            'ip',\n            'port',\n            'description',\n            'manual_resume',\n            'filter',\n            'base',\n            'parent',\n        ]\n        if self._values:\n        super_set = super(BigIP", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.read_all_buttons()\n    self.read_all_checkboxes()\n    self.read_all_dropdowns()\n    self.read_all_inputs()\n    self.read_all_selects()\n    self.read_all_text_", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"No action class found for \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        IAction result = null;\n        if (getConfig().getProperty(\"application.actions.\" + className + \".connection\") !=", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.assert_equal(self.course_id, self.course_id)\n\"\"\"\n\n    def test_delete_thread_id):\n        self.assert_equal\n    @patch.assert_comment_id):\n    @patch.assert_called\n    @patch", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Util.Check(embedManifestDllAction, target, source, env,\n                                    func = RegServerFunc,\n                                    funcargs = [embedManifestDllCheck, manifestSrc, manifestSrc, env])\n        else:\n            raise", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IStatus status = execute(getResources(shell), new SubProgressMonitor(shell, 100, getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(), getShell(),", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\tif (meta.getAggregateType()[0]==null)\n\t\t\treturn super.init(smi, sdi);\n\t\t\n\t\tif (meta.getAggregateType()[0].length != meta.getFieldName().length", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regressions\n    assert f(2014,1, 12,31, 12,31)\n    assert f(2014,1,31, 12,15,20, 15,15, ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int x = \n            {\n                if (m_MapOverride == mapanome)\n                    {\n                    if (m_MapOverride == mapanome)\n                    {\n                    }\n                    {\n                    if (m_MinTimeOverride == m", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest doesn't support suspend\")\n    @error_context.context_aware\n    def resume", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       final Future<Boolean> rc = service.submit(pub);\n        assertThat(rc.get(), is(true));\n        service.shutdown();\n    }\n}\n\n\n## Your task:\nIn the context of the provided Java code, which is part of a Zero", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                this.owner.getDecorator().onSendRequestAfter(r, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedValue = value;\n\t\t\tuint compressedBytes = 0;\n\t\t\tdo {\n\t\t\t\tcompressedBytes |= (uint)(compressedValue & 0xFF);\n\t\t\t\tcompressedValue >>= 8;\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.split(\".\".join(self.fm.thisdir.path.split()\n        self.fm.thisdir.stage_dir.execute(\"rm\", \"rm.thisdir.execute(self.fm.thisdir.thisfile.path\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringTypeName()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (\"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tAssert.IsInstanceOf", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.execute_control_message(self.control_message, type = \"userstate = PYMumble_message\n        \"\"\"\n        self.Log.debug(\"sending %s\", self.control_message)\n        ", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Send a message to all group members\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n\n# +\n# Highlight the code\n\nimport pygments\nfrom pygments import highlight\nfrom pygments.lexers import PythonLexer\nfrom pygments.formatters import Terminal256Formatter\n\ncode = \"\"\"\ndef foo():\n    print(\"Hello World!\")\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       self._assert_column_value(QuantitySelectionColumn, True,\n                                  \"22\")\n    def _create_store_map(self, row, col, row_count, col_count):\n        store = MappedTreeStore(None, row_count, col", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tgrid.setColumn(this);\n\t\tbreak;\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_START;\n    }\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = ReadElement(element, \"ImageIndex\");\n                GrayImageIndex = ReadElement(element, \"GrayImageIndex\");\n            }\n            catch (Exception ex) {\n                throw new Exception(\"Error loading creature data: \" + ex.Message, ex);\n            }\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t\tcoll.add(beans[i].buildVo());\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromBeanCollection(ims.", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Blake2b, 0x20, 0x3F, 0x3F, 0x8, 0x4C, 0x45, 0x1F, 0x5A, 0xA, 0x", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (boolean) dispatchManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.\n\t */\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# CSRF_COOKIE_HTTPONLY = True\n# CSRF_COOKIE_SECURE = True\n# CSRF_COOKIE_NAME = 'csrf_django'\n# CSRF_COOKIE_PATH = '/'\n# C", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but should be {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tLayer LayerToQueue = NextFrame;\n\t\t\t// Copy the layer to the output queue\n\t\t\tLayer LayerToQueue =", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.getUserErrorMessage() != null) && (other.getUserErrorMessage() != null)) {\n            if ((!this.getUserErrorMessage().equals(other.getUserErrorMessage())))\n                return false;\n        }\n        if ((this.getAction", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            if (dc.state == RIL_REQUEST_REQUEST_GET_PREFERRED_GET_PREFERRED_PREFERRED_PREFER_NETWORK_SELECT_TYPE: ret =  responseInts(p);", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isCommercial()) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO: add other metadata fields\n\t\t\t}", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = new Vector3(x, y, 1);\n            newVertices[y * xSizeP + x + 1] = new Vector3(x + 1, y, 1);\n            newVertices[x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\trawResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tif (rawResult.equals(testInt1))\n\t\t\t\t{\n\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionStart()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionEnd()\n\t\t\t{\n\t\t\t\treturn", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeObject(new RemoteRef(null, \"Not found\"));\n        }\n        else\n            out.writeObject(found.object);\n    }\n    /**\n     * Process a request for a class.\n     *\n     * @param cmd the request\n     *", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           if (stati", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n                                    {\n                    if (target.Distance(result.Distance(spell.From.To2D)\n                        {\n                            }\n                    {\n                    : Unit\n                    {\n                        case(position)\n                    {\n                    :\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isAdjacentTo(x, y)) {\n            return true;\n        }\n        return false;\n    }\n    private void doFinalOrientation(Graph dag, Graph graph) {\n        if (completeRuleSetUsed) {\n            if (verbose", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop.Children[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Called when the element is about to be disposed.\n        /// </summary>\n        /// <param name", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentId == null) {\n            if (other.attachmentId != null) {\n                return false;\n            }\n        } else if (other.attachmentId == null) {\n            return false;\n        } else if (!this.attachmentId", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       m_Item.OnAfterDelete(mobiles[i]);\n                    }\n                }\n            }\n        }\n        public override void Serialize(Serial serial)\n        {\n            serial.Write(m_End);\n            serial.Write(m_MinDam", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t{\n\t\t\tif (!", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<String> getComponentIdsForUser(String sUserId, String sCompoName) {\n    return mock.getComponentIdsForUser(s", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File file = (File) mListView.getItemAtPosition(key);\n                            final ArrayList<File> filesToZip = new ArrayList<File>();\n                            for (int j = 0; j < checkedItemSize; j++) {\n                                if (checkedItem[", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\nNetworkManager.this.channel.close();\n\nBut it's not working. What am I doing wrong?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               tipper_array = np.zeros_array\n                z_array = np.zeros\n                tipper = np.zeros\n                tipper_dict = np.array([t_list)\n                tipper_dict = {'tipper_dict = {'Z':[0", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              String.format(\"%1$s and %2$s\",\n                                            TextUtils.join(\", \", recipients.stream()\n                                                                      .map(", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env.update(os.environ)\n            env[\"PATH\"] = os.pathsep.join(extra_lib + extra_path + env.get(\"PATH\", \"\").split(os.pathsep))\n            return env\n    def get_build_dir(self, release=False", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                if path not in self._data:\n                    self._data[path] = set()\n                self._data[path].update(tests)\n        self._data.update(obj[\"items\"])\n        self._data", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       scriptClassLoader = null;\n    }\n    private Binding createBindingForCompilation(final PrintStream out) {\n        return new Binding() {{\n            // :fixme:\n            // This should be replaced with a more sophisticated\n            // binding that can handle all the types of", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n            _networkLayer.ServerSetTimeout(timeout);\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override setting a timeout for a", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     grad_E = grad.flatten()\n      grad_E = np.reshape(grad_E, (-1,3))\n      grad_E = grad_E * self.y_stds[0] + self.y_means[0]\n      grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t{\n\t\t\tif(obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t\t{\n\t\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\"));\n        assertEquals(found.get(2).getTags(), as", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(ParameterDataService.DEPTH);\n        parameter.setParameterValue(depth);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEXP\n        parameter = new ParameterImpl();\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\treturn true;\n\t\t\t\n\t\t\t\n\t\treturn false;\n\t}\n\t\t}\n\t\t/// <c>\n\t\t/// <c>\n\t/// A node\n\t\t/// <c>\n\t\t///\n\t\t/// <c>", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count == 0)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                if (extendedWillHit >= 2)\n                {", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t}\n\tprotected void setCollapse(boolean, ims.framework.ControlBridgeBridge.class, ims.framework.ComboBoxBridge, UI, UI, IAppForm, IAppForm, IAppForm, IAppForm, UIFactory, IAppForm, IApp", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return subprocess.check_output(\n        \"pip list --format=freeze\",\n        shell=True,\n        universal_newlines=True,\n    ).splitlines()\n\n    for line in freeze_output:\n        if re.search(pattern, line):\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs.value, 2)\n        self.assertEqual(r.subs.value, 2)\n        self.assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, 1, 1)) + Sum(x, (x, 1, 2), (x, 2), (x, x, 2), (x, 2, (x, 2, x), (", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tUnityEngine.WWW a2;", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._oldStartingIndex = -1;\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._oldItemList = null;\n        }\n        else", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToWrite(objectToWrite(objectToWrite);\n            }\n        }\n        }\n    }\n    }\n        }\n        XMLContext xmlContext = null;\n        if (null != XMLDescriptor.getSchema(desc);\n        }\n        objectToWrite(object", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus2:\n                    c.Campus2 = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//read the size of the icon\n\t\t\t\t\tbitmap.\n\t\t\t\ticonSize = iconSize;\n\t\t\t\tbitmap.\n\t\t\t\tbitmap.Width = iconSize = icon.Width;\n\t\t\tbitmap.", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.successor) {\n                l.addToSubroutine(block);\n            }\n        }\n    }\n    }\n    }\n    // ----------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __domain, __mStack);\n            var result_of_this_method = (UnityEngine.Ray)ptr_of_this_method->", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getPositionIndex(position));\n\t}\n\t\n\tprivate void setBlockOutline(LineStyle lineStyle) {\n\t\tif(lineStyle == null)\n\t\t\tsetBlockOutline(false);\n\t\telse\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self.driver, timeout, \n        driver, \"Test that the Channel Animator\n        self, timeout, \"Test that the Image Animator\n        self, \"Image\n        self, \"Animator\n        self, \"Channel\n        self.channelText, \"Channel\n        self.driver", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.gss_kexg = self.transport.gss_kexgss_continue\n        self.old_style = False\n        self.q =  = self.x = self.parse_kexgsex = self.gss_kex_g", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData);\n            if (treeModel != null) {\n                treeModel.insertNodeInto(node, null, treeModel.getRoot());\n            }\n        }\n    }\n}\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                   self.dict['worked_days'] = WorkedDays.dict(self, 'worked_days', from_date, to_date)\n                    self.dict['worked_hours'] = WorkedDays.dict(self, 'worked_hours', from", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = MfracToMfrac(MfracToMfrac, zmin, zmin, zmax, zspace, zspace, bias, dlnm, DL, dlnm, dlnz, omega_b0, dlnz, dlnm, dln", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getText().length() * font.getSize(getText()) + \n                (getText().length() - 1) * font.getSize(getText().substring(0, \n                        getText().length() - 1)) * 0.", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container.append(share_edge(self,theta_phi,phi,ref_point,ref_point,p2,0.5,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t\t//window.Show();\n\t\t}\n\t\tprivate void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)\n\t\t{\n\t\t\t// TODO: add code to save settings\n\t\t\t//", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D, _Hist3D)\n    def __init__(self, *args):\n        if index = index, index = None)\n        _Hist3D.__init__(self, index, index)\n        self.axis(3)\n   ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query);\n        }\n    }\n}\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2gray)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield self\n    if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    else:\n        yield None\n        yield None\n        yield None\n        yield None\n        yield None\n       ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionLost(Throwable cause) {\n\t\tlog.error(\"Connection lost: {}\", cause.getMessage());\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       return self.dispatch(environ, start_response)\n    def dispatch(self, environ, start_response):\n        path = environ.get('PATH_INFO')\n        if path is None:\n            return self.default_app(environ, start_response)\n        for prefix,", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\tmodel = Model( data = None )\n\n\n\ndef __init__(self, data ) :\n\t\tself.data = data\n\t\tself.initialize()\n\t\tself.initialize_scores()\n\t\tself.network = None\n\tself.data = None\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (CraftResources.GetChance(resType, chance) < chance)\n                res = EnhanceResult.Failure;\n        }\n        public static void Initialize()\n        {\n            _SpecialTable.Add", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a list of enumerated values\n            if '\n            if 'enumeratedValues\n            return self.assign_to_name\n            self.assign_enum_type\n            self.assign_field_value\n            if 'resets\n                if 'resets'\n               ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No modules found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"No modules found!\");\n            }\n        }\n        public void writeConfig()\n        {\n            if (!File.Exists(CONFIGPATH))\n           ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                return (obj == null) ? false : (bool)\n            }\n            }\n            {\n            set\n            {\n                obj = obj;\n            }\n        }\n        }\n        }\n        }\n        /// <summary>\n        {\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.vertexArray[textureHash].length;\n                if(this.vertexArray[textureHash].length;\n                if(this.trianglePoint >= 0)\n                    return this.trianglePoint = 0;\n                return this.trianglePoint = -", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n       ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if name in ['center', 'upper_left_extent', 'upper_left_extent, 'radius', 'radius', 'radius', 'center', 'upper_left_extent, radius, upper_right_extent, 'upper_left_extent, 'radius, '", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialQuestState('0')\nCREATED = State('created')\nSTARTED = State('started')\nSTARTING = State('starting')\nSTARTING2 = State('starting2')\n\nQUEST.setInitialState(CREATED)\nQUEST.addStartN", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = new PlayTime:\n\t\t\t\t\t{\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception exception)\n\t\t{\n\t\t\t\tplayTime\n\t\t\tplayTime", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(this, _sCurProgram);\n            VertexDataStride = 0;\n            VertexDataSize = 0;\n        }\n        public ShaderProgram(ShaderProgram shader)\n        {\n            _sCurProgram = shader", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.metabolites._reaction = set()\n        self.reactions._reaction = set()\n        self.genes._reaction = set()\n        self.metabolites", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\t\n\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(x);\n\t\t\tif(vo != null)", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tint top=left,\n\t\t\t\t\tint current.y = lines[i].y;\n\t\t\t\t\tif(current.y,\n\t\t\t\t}\n\t\t\tif(current.y,\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n    }\n\t\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\tif (resultCode == RESULT_CANCELED) {\n\t\t\tgetParent().fin", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (row.FieldKey == ARow.FieldKey)\n                {\n                    HighestNumber = Math.Max(HighestNumber, row.Level);\n                }\n            }\n            if (HighestNumber < ARow.LevelRangeHigh)\n            {\n                ARow", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(pssm, i);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
