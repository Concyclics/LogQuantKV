{"pred": "\t\t\t\tif ( m_Registered && ( !m_Registered )\n\t\t\t\t\tm_Started && !m_Started && !m_Started && !m_Started && !m_Finished && !m_Finished && !m_Registered", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        a.seek(0)\n        a.write_frames(np.zeros(nframes, dtype=np.float32))\n        a.seek(0", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_present(self._UPLOAD_SUBTITLE_FILE)\n\n[Answer]\nIt seems like there's a typo in your code. You've defined the upload_subtitles method with the name `upload_subtitles`, but", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"name\", OLStyleValue.class.getName(), \"name\");\n\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class.getName(), \"value\");\n\t\t\t\twriter.addAttribute(\"type\", OLStyleValue.", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.category = None\n        self.id = None\n        self.type = None\n        self.category = None\n        self.id = None\n        self.category = None\n        self.category = None\n        self.question = None\n        self.category = None\n", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map);\n                    SR_Utilities.Location newLoc = SR_Utilities.GetLocation(loc, mob.Map);\n                    mob.SendMessage(newLoc.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       for (int i = 0;\n        }\n    }\n    }\n    }\n    }\n    }\n    }\n    @Override\n    void send(HandshakeOutStream s)\n    {\n    {\n        if (chain.length()\n    }\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom + GAP;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void draw(WndBag wndBag, Wnd", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   self.dispatcher.dispatcher.dispatch_request(environ,\n        # Generate WSGIO\n        response = self.response\n        return self.wsdl(response)\n    def handler(self, environ, environ,\n            return self.handler('method', 'GET', '", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.statuses = []\n        self.update_timestamps()\n        self.update_statuses(statuses)\n        self.webview.update_statuses(statuses)\n        self.webview.update_conversation(status, status_root_id", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return self.get_file_status(status_id)\n        }\n        def action_create_archive(self,\n        return {\"error\": False,\n            \"status\": OperationStatus.OP_STATUS_SUCCESS}\n    def action_upload_to_sftp_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            if trust_manager.getAcceptedIssuers() is not None:\n                return trust_manager.getAcceptedIssuers()\n        return None\n\ndef _get_trust_manager(tr", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        // Add the domain info to the request\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   ...\n    async def _\n    def __wait_for_some(self)\n    def __setup_encoder_encoder_setup_data_stream_data_queue\n    def __data_stream_queue_stderr_queue_pump_task\n    def __wait", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\tif (option1) {\n\t\t\t\t\t\t\t//change in database\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get jump type\n\t\t\t\t\t\t\tstring jumpType = (", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg == null) {\n                argValues[i] = null;\n\net\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons = getLoadedData();\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic String getSavePath()\n\t\t{\n\t\t\treturn Capitalism.SAVE_PATH;\n\t\t}\n\t\t@Override\n\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage page = new PreferenceNode(generalNode);\n\t\tpage.setTitle(\"General preferences\");\n\t\tpage.setPage(new PreferencePage(page));\n\t\tplaybackNode.setPage(\n\t\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.EndTargeting();\n            }\n        }\n        private class InternalTarget\n            : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base( owner )", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_for_session.\n        \"\"\"\n        \"\"\"\n        def flush()\n        \"\"\"\n        self.\n        \"\"\"\n        def _get_mapper(self,\n        \"\"\"\n        def _get_bind_mapper_or_table\n        \"\"\"\n        def", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn newInstanceNames(fields.get(name);\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   if self.getattr(self.get_argument(self.get_argument(\"self.request.path_args, self.post(self.get_argument_self.get_argument(self.get_request.path_args, self.get_argument(\"path, self.get", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tfor (int n=0; n<Views.Count;", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wd = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wd.download()\n    wd.run()\n    wd.download()\n    wd", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 13)\n                {\n                    if (i)\n                    {\n                    if (i)\n                    if (i)\n                        return GetNameForAttribute(i);\n                    }\n                }\n                else if (i == \n", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(platforms)\n    else:\n        builds = android_builds(build, builds=builds)\n    # Build the button\n    if not simple:\n        if small:\n            if not icon:\n                icon = 'firefox-icon'\n            if", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectIDIssueTypeIDs(projectID, issueTypeID);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBean = stateBeansList.get", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is MethodCallExpressionSyntax ) {\n                    MethodCallExpressionSyntax methodCall = argumentSyntax.Parent as MethodCallExpressionSyntax;\n                    if ( methodCall.Arguments.Count == 1 ) {", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test_usage_key, self.split_test_usage_key, 'test_split_test_children(self.assert_children(self.split_test_usage_key, self.assert_children(self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           Object[] metrics = new Object[0];\n            if (fontSpecific)\n                metrics = new Object[1];\n            metrics[0] = new PdfArray(metrics);\n            PdfDictionary cid42 = GetCIDType42(piref, metrics", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"Creating cell \" + cell.getName() +", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureListener<Bitmap>() {\n          @Override\n          public void onSuccess(final Bitmap result) {\n            Util.runOnMainThread(new Runnable() {\n              @Override\n              public", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Manage Policies') and\n            sel.is_displayed(resource_locator.format(self.context['object'].", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           if (Enabled)\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            else\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            base.Render(", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\ndamageCooldown = 8;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        return super.toString() + \" (probability=\" + probability + \")\";", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.ut", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       self.assertEqual(organization.owner.name, \"company\")\n        self.assertEqual(organization.owner.name, \"company\")\n        self.assertEqual(organization.owner, person)\n        self.assertEqual(organization.owner, person)\n        self", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self.plot_dims\n    if self._interactive:\n                self._figure_dims\n                self._inspector.add_x.\n                    self._inspector.add_glyphs\n                    self._inspector.add_\n                source.", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.StartsWith(rootFolder.Path))\n                {\n                    toScan.Add(path);\n                }\n                else\n                {\n                    _logger.Trace($\"Path {path} is not in the root folder {rootFolder.Path}\");\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfAbsent(Object key, Function<? super Object, ? extends E> mapper) {\n\t\treturn read(key, internalMap.computeIfAbsent(key, o -> write(key", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid'):\n        if self.request.has_key('inreply'):\n            if self.request.has_key('inreplyindex):\n            itemindex = self.request['inreplyindex']\n        if self", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t\tTile[][] tiles = GetStaticTileLists.AddRange( x, y, \n\t\t\t{\n\t\t\t\tTile[] tiles = m_Lists[x][y][y][];\n\t\t\tif", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = String.Format(\"sip:s:sip.s.LandData.GetVoiceInfo.GetLandData(land.AllowVoiceInfo,\n                // - land.AllowVoiceChannelUri,\n                // - land.AllowVoice", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEdit.PayPeriodCur = new PayPeriod(textDateStart.Text,textDateStop.Text,textDatePaycheck.Text);\n\t\t\tDialog", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the column headings\n        # Read the column headings\n        header_name = column_headings = column_headings = column_headings\n        # Read the data\n        column_headings = column_headings = column_headings\n        # Read the data\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_create', context, data_dict['group'])\n    # This is the same as the above function, but for groups\n    # and orgs.\n    return authz.is_authorized('group_create', context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\tint parentOutcome = outcomes[parentIndex];\n\t\t\tdouble parentConfidence = confidences[parentIndex] / depths[parentIndex];\n\t\t\tdouble childConfidence = 1d / numberOfPartitions;\n\t\t\t// assigning outcomes\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           _asciiSet(int charAt(int) {\n         }\n      }\n   }\n   static class PropC(PropCc\n   }\n   }\n   static class PropSet(int min, int max, int _range, int min, max;\n   }\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        if (existingRequired && studyFormName == null) {\n          return ValidationResults.REQUIRED_FAIL;", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tLog.Write(\"server\", \"Rejected client {0}: {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tnewConn.", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListBean)beans[x]).buildVo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(localtxt1, local", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot type\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var defense in Info.DefenseQueues)\n\t\t\t\tif (bot.HasAdequateRefineryCount(defense.Name))\n\t\t\t\t\tbot.BuildDefense(defense);\n\t\t}\n\t\tvoid IBot", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setParent(db);\n        catalogStmt.setParent(proc);\n        catalogStmt.setParent(catalog);\n        catalogStmt.setParent(catalog.getDatabases().get(\"database\"));\n        catalogStmt.setParent(catalog.get", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.ServiceFound);\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t\t\tthis.comboBox1.Items.AddRange(new object[] {\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.StopBits = (StopBits)bits;", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_cobranding(self.user)\n    def test_cobrand(self,\n        self.user)\n    def test_cobranding(self):\n        \"\"\"\n        self.assertEquals(self.user.get_profile().cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, _ = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\nif __name__ == '__main__':\n    unittest.main()\n\n\n## The code below is not part of the test cases\n    def test_", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.updateList = self.buildList(self.list)\n\t\tself.updateList = self.list\n\t\tself.updateList = self.buildList\n\t\tself.divPixmap = self.buildList,\n\t\tself.clearList = self.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               if (generateChecksum && checksumText)\n                    fCode += GetChecksum(code);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (font != null)\n                    fCode = font.MapText(", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.copyOf(results, results.length);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list may include commas, but they must be quoted.\n   *\n   * @param key The key of", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-49.99, +49.99, 23.0769230769)\n        # The latitude slice is a bit smaller than the longitude slice,\n        # so we need to make the latitude slice", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (toolStripButtonSave.Enabled)\n            {\n                SaveLogPack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # =======================\n    # get_timbre_pitches_loudness_file\n    # from echonest to_segments\n    # from echonest\n    # get_timbre_pitches_loudness_file\n    #", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns a string representation of the collection.\n        /// </summary>\n        /// <returns> A string representation of the collection. </returns>\n        public override string ToString()\n        {\n            StringBuilder sb = new StringBuilder();\n            sb.Append(\"", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.ResumeLayout", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   GLUT = _NullFunctionPointer\n    GLUT = self.createBaseFunction(\n        'glutCreateWindow',\n        self.GLUT,\n        doc = \"\"\"Create a new GLUT window\n        \n        This function is deprecated.\n        \"\"\"\n    )\n    GLUT", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, 0);\n        }\n        }\n        writeUint64(header, 0);\n        }\n        if (entry.getCompressedSize() > 0) {\n            writeFilesInfo(header, 0);\n        }", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (rampDelay * (getElapsedTime() / (double) fps));\n                if (alphaLevel < 0)\n                    alphaLevel = 0;\n                if (alphaLevel > 255)\n                    alphaLevel = ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            }\n        }\n    }\n        }\n        [Test]\n        public void\n        [Test]\n        public void\n        [Test\n        [Test]\n        [Test\n        public void\n        [Test\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinaberry);\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       SersicMain = \n        Sersic(1)\n        ParamDict[1]\n        # Write the sky\n        # Write sky function\n        f.writelines(['0) 0 0 \n        # Write sky\n        # Write sky\n        # Write the sky", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                    i += (((b & 0x20", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        if self._course_key is not None:\n            course_key = self._course_key\n        else:\n            course_key = self._", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\tif(chance < 0) chance = 0;\n\t\treturn", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       if os.path.exists('%s/%s.pem' % (config_directory, \"key\")):\n            os.remove('%s/%s.pem' % (config_directory, \"key\"))\n        if os.path.exists('%s/%s.p", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.TabControl();\n            this.chkPrivacy.\n            this.chkPrivacy.\n            this.chkPrivacy.\n            this.chkPrivacy.chkPrivacy.\n            this.chk", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.ui_log.info(self.ui_log.info(self.ui_log.info(\"\")\n            self.ui_log.info(self.archive.add_file(self.archive.add_archive(self.archive_name)\n            self.archive.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = ILocalFileExtendedFossil\n    getAllMaterialList.name = \"material\"\n    def", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.err.println(\"Error importing message: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), channelId, result, messageWriter = messageWriter,", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\tlayer = ((Scriptable) value).getIndex(0).intValue();\n\t\t\t}\n\t\t}\n\t\treturn layer;\n\t} catch (Exception e) {\n\t\tthrow e;\n\t}\n    }\n    \n    protected String getView", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void onCompleted(JSONObject object, GraphResponse response) {\n                if (response.getError() != null) {\n                    // An error", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tfor (int[] influence : emotion.influences) {\n\t\t\t\tsum += influence[1];\n\t\t\t}\n\t\t}\n\t\tif (sum == 0){\n\t\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'stage':\n            'finished_at':\n            'finished_at': constants.SPLITED_AT\n            'started_at',\n            'name': 'stage3',\n            'started_at': constants.\n            'finished_at': constants", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if (NorthernHemisphere):\n        phi1 = (2*pi - phi1)\n    else:\n        phi1 = (phi1 + pi)\n    #phi1 = phi1*_rad2deg\n    #print phi1\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report sent successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action(self,\n    @property\n    @property\n    def _get_licenses_info(self,\n    @property\n    @property\n    def _\n    @property\n    def _\n    def _\n    @property\n    @property\n    @property\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic static KPTranslation Load(string strFile)\n\t\t{\n\t\t\tusing(FileStream fs = new FileStream(strFile, FileMode.Open, FileAccess.Read, FileShare.", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public String toString()\n    {\n        return \"NumberVariableLength\";\n    }\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n            # The following line is equivalent to the above line\n            # new_positional_tags_list.append(TagRegex(regex, flag))\n            # The following line is equivalent to the", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n        }\n    }\n}\n\n\n## Your task:Implement the `GetProperty` method in the `GenericParameter` class to return a `PropertyInfo` object that represents a property with the name \"Index\". The `PropertyInfo` should be a", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# NOP\n\nfrom scapy.all import *\nfrom scapy.layers.obd import *\nfrom scapy.layers.spp import *\nfrom scapy.config import conf\nconf.L3caches = {'scapy.layers.obd.OBD_P", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            }\n            }\n            if (m_Mana > 11)\n            {\n                AddSpell(typeof(Mystic, typeof(Mandrake, Ginseng, MandrakeRoot, SpidersSilk, SulfurousAsh );\n               ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.app.do_teardown_request(exc)\n        self.app.do_teardown_appcontext(exc)\n        rv = self.app.do_teardown_request()\n        if rv is not None:\n            rv", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef pubsub_consumer(session, cluster_id, needs_columns_=False):\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       phi = np.arctan2(src_radius * np.sin(angles),\n                         src_radius * np.cos(angles) + det_radius)\n    else:\n        phi = np.arctan2(src_radius * np.sin(angles),\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url = self.url\n    def _buildURL(self, self.url)\n    def _buildURL(self, url):\n        \"\"\"\n        Builds the URL for the current url\n        \"\"\"\n        return self.url\n        \"\"\"\n    def _doLogin(", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic override string", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].Type, Is.EqualTo(TokenType.String));\n\t\tAssert.That(obj.Properties[0].Value[\"In this test\"\"].Type, Is.EqualTo(TokenType.String));\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, this.width, this.width, this.isToroid);\n                Topic b = getVertexTopic(h+1, this.width, this.width, this.isToroid);\n                edges.add(new", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    d1 = i1.get(col1=\"deform\",\n                  col2=\"volume\",\n                 col2=\"deform\",\n                 lut_identifier=\"LE-2D-FEM-18\n                  flow rate", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.compareGraphs(args[0], args[1]);\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.104400',\n                    u'AvailabilityZone': 'us-east-1d'}]\n        assert not alert.lowest_spot_price(history, 'us-east-1d') is None, \"", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the presence of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t\tfor (", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, new[] { vao });\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuff", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_inverse\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_error\n    @property\n    def x_cov_mat_cov_mat_inverse\n    def y_model_cov_mat_cov", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this, new ToStringStyle());\n    }\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               osg,\n                walrusBucket.getBucket.getOw\n                walrusObject.get(walrusBucket.getCanonicalId(owningAccount.getCanonicalIdAccounts.getAccounts.getAccounts.getAccounts.", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _folderSystem.Folders.FoldersChanged += value; }\n            remove { _folderSystem.Folders.FoldersChanged -= value; }\n        }\n        #endregion\n        #region Presentation Model implementation\n        #region IFolderExplorerComponent", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplateDao dao = mock(VmTemplateDao.class);\n        when(dao.get(any(Guid.class))).thenReturn(template);\n       ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetSensitivity(100);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetIncrement(10);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.Set", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.system = self.system\n        #\n        #\n        #\n        #\n        #\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Ldnull);\n\t\t\tilgen.Emit(OpCodes.St", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder\n    }\n    public static Builder {\n      Builder {\n      return Builder;\n    }\n    }\n    }\n    public static Builder {\n    = new Builder();\n    public static Builder {\n      {\n      return default;\n   ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(getQuad(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code> in the quad array.\n     * \n     * @param i\n     *           ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getRequest().getPropertyNames().contains(COLUM_SORTABLE)) {\n            // column names to hide\n            if (m_useLanguages)\n            if (m_useLanguages)\n            {\n                if (m_useLanguages)\n            }\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\tVector3 tempVec3 = placeholderRect.localScale;\n\t\t\t\ttempVec3.y = placeholderRect.localScale.y;\n\t\t\t\ttempVec3 = placeholderRect.localScale;", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.SizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (!string.IsNullOrEmpty(lastUser))\n            {\n                Users.Add(lastUser);\n            }\n            DataView v = new DataView(AErrors, null, null, DataViewRowState", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X > Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y > Game.Renderer.Resolution.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // TODO\n            // TODO\n            }\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //\n            //", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n\n\n## The execution log of the code above\n#\n# <reponame>redhat-anacostia/pyanaconda/core/payload/payload", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEnd\");\n\t\t\t\t}\n\t}\n\t\t}\n\t\t}\n\t\t\n\t\t}\n\t\t\t\n\t}\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: BugAnnotation for bug \" + bugInstance + \" has no source line\");\n            }\n        }\n    }\n    /**\n     * @return the reportHistory\n     */\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\tpublic class Cheese : Food\n\t{\n\t\t[Constructable]\n\t{\n\t\t}\n\t\tpublic override double DefaultWeight\n\t{\n\t\tget { return 0.1; }\n\t}\n\t}\n\tpublic override", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n        }\n        {\n            if (Menu.GetBool(\"LaneClearR\")\n            {\n                if (Menu.GetSlider(\"JungleClearR\")\n                    {\n                    if (Menu.GetSlider(\"JungleClearW\")\n                    {", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n}\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        warnings = []\n        for child in tree.findall('./tns:Warnungen', namespaces={'tns': 'http://www", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite'),\n            Model_parser.model_definitions('testsuite')\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var stmtTextCreate(namedWindow\n                    : \"create window MyInfraCreate#keepall\n                    :\n                var compiledDeploy\n                :\n                var path = new RegressionPath(\n                    :\n                    var stmtTextCreate\n                    :\n                ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   if self.simulation\n        if self.simulation is None:\n            raise ValueError(\"Particle is not in simulation)\n        if self.simulation.simulation.\n        self.simulation = self.simulation\n        clibrebound.reb_orbit.restype", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = self.browse(cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.putClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            if (oldValue != null) {\n                c.putClientProperty(BasicHTML.propertyKey, null);\n            }\n        }\n    }\n    private static final String documentBaseKey", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_reference", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new InvalidOperationException(\"Loader has already been set.\");\n\t\t}\n\t\t}\n\t\tpublic void Load(string namedQuery", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   private void pushGraph() {\n        invocationQueue.add(methodInvocation();\n        invocationInfo.callee();\n        currentGraph.graph().asNode.\n        currentGraph().getInvoke().callee();\n        }\n    }\n    private void popGraph() {\n       ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.log_path = self.args['log_path']\n        self.log_path = self.args.get('log_depot', '/log_depot')\n        self.create_log_path = self.args.get('log_path', self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhi<?> phi = getCachedPhi(key.getValue(), stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(key.getValue(), stamp);\n                    }\n                    if (phi", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(event);\n    }\n}\n\n\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\n\t\t\t\tBaseCreature.Teleport(from, Moonstone.GetWorldLocation(), Moonstone.Map);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   db.create_all()\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set('all_users', set())\n        self.module.set('all_sessions', set())\n        self.module.set('all_users', set())\n        self.module.set('all_sessions', set())\n    def datetime_to_", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrap()\n    def __str__(self, msgid\n    \"\"\"\n    MOFile.__str__ {\n        return self.wrap\n    }\n    def __str__(self):\n        \"\"\"\n        Return the string representation of the mo file.\n    \"\"\"\n    \"\"\"\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get transformation problematics\", res['Message'] )\n      return res\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'Valid", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t\n\t\t\t\n\t\t// Allowing form processing\n\t\t\n\t\t// We don't want to allow the user to change the form action\n\t\t//\n\t// We don't want to allow the user to change the form action\n\t\t\n\t\treturn", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            [w['message'] for w in self.flushWarnings()],\n            ['The Gerrit status callback uses the old way to communicate results.'])\n        gsp.sendCodeReview.assert_called_once_with(\n            self.TEST", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/colaboratoriel/0.5'\n    self.category.term = 'colaboration'", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: this is a method\n        // TODO: this is a method type\n        // TODO:\n        // TODO: this is a method receiver type\n        if (type.getReceiverType(type, p)\n        }\n    }\n    }\n    }\n    @Override", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = context.material\n        if mat.use_nodes and mat.use_shader and mat.use_shader == 'BLENDER_GAME_ENGIN_ENGINES_GAME_ENGINE_RENG_ENG_ENGIN", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            if (_engine.Ppu.Current = _engine.Pu.Current;\n            mapper16_command = map16.Mapper1Command = mapper16_IRQEnabled = map16_IRQEnabled = map", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(new JMenuItem(new AbstractAction(\"Open Document\") {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    m_oInspector.inspectOpenDocument(sTDocUrl);\n                }\n           ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   from django.utils.timezone import now\n    self.pub_date = now()\n    self.save()\n    # FIXME This is not the right way to do it.\n    # FIXME This is not the right way to do it.\n    # FIXME", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['.php'] = PhpLexer(startinline=True,\n                                        %(('startinline', False),\n                                          ('startcenter', False),\n                                          ('startndash', False),\n                                          ('startoverstrike', False),\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                    FROM flight_log_final\n                    WHERE src_callsign=?\n                    ORDER BY sdate, stime''', (src_", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table_create('snapshots').run()\n        conn.table_create('snapshots_by_project').run()\n        conn.table_create('projects_by_id').run()\n        conn", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\t\tbreak;\n\tbreak;\n\t}\n\tbreak;\n\tbreak;\n\tbreak;\n\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   responses = {\n        responses = {\n        'TOP_RESPONSES\n        'TOP_RESPONSES\n        'ANIME_BEST_MATCHED\n        RESPON\n        RAN\n        RESP\n        RESP\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, finish, host_data):\n        self.uuid = uuid\n        self.name = name\n        self.finish = finish\n        self.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\n\n\n## Your task:\nIn the given code, identify and correct the error that prevents the application from resolving", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary) == 0):\n        raise AssertionError(\"primary.xml doesn't contain any packages\")\n    else:\n        raise AssertionError(\"primary.xml contains additional packages\")\n@behave.when(\"primary in \\\"{path}\\\" has no packages\")", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       if self.build_c_extensions:\n            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-N', job_name,\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-hold_jid_range', '0-99999999',\n        '-q', 'no',\n       ", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        public Action", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} : {1}\", item.DisplayName, item.Value));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n        }\n    }\n}\n#endregion\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\ndef handlePremium(self):\n    self.logDebug(\"Premium handling\")\n    if self.isPremium():\n        self.logDebug(\"Premium account\")\n        self.handlePremium()\n    else:\n        self.logDebug(\"Free", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// Find the closest harvestable cell:\n\t\t\tvar closestHarvestableCell = path.FirstOrDefault(loc =>\n\t\t\t\t\tharv.CanHarvest", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcp service failed\")\n                       return False\n                    self.logger.info(\"restarting dhcp service\")\n                    rc = utils.subprocess_call(self.logger, service_restart, shell=", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                // Create a new context\n                if (skip)\n                {\n                    if (state.Frequency < MAXIMUM_FRESTO\n                {\n                    if (state.Frequency > \n                    {\n                    if (skip ==", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQvr VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.assertRaises\n\n    def test_insert_after_middle(self):\n        self.failUnlessEqual(self.file(b\"abcdefghij\", b\"abcdefghij\")\n        self.failUn\n\n    def test_insert_after_", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.plot(cr['combined'][app][test]['stats']['mean'], 'o-', label=test)\n    plt.fill_between(range(len(cr['combined'][app][test]['stats']['mean'])),\n                     cr['combined'][app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   test_euid = self.test_current\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n        \"\"\"\n        L{util.runAsEffectiveUser(\n        \"\"\"\n        L{util.runAsEffectiveUser, L{self.test_secured", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.drawLine(x, y, x + controlSize - 1, y);\n\t\t\t\t\tg.drawLine(x, y, x,", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\n  \"\"\"\n  failures += simulateClassifier(knn, patternDict, \"KNN Classifier test\")\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  failures", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, getElementOffsetInCell(offset).times(value).toInt());\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value) {\n        if (value instanceof", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(SolutionTask.Project.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n               ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i1 = i1, i16, i1, i16, i1, paramArrayOfDouble16 - 1)\n        i16, i16, i16, i16, i16, i16, i16, i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Transitions: \\n\";\n\t\t\tforeach( Transition t in this.graph.Transitions ) {\n\t\t\t\tstr += \"\\t\" +", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                Slot = SpellSlot.W,\n                    Radius = 10,\n                    Radius = 100,\n                    Radius = 150,\n                    MissileSpellName = \"LucianW\",\n                ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n\t/**\n\t * Stubs the code list service.\n\t *\n\t * @param codelistService\n\t */\n\t@Before\n\tpublic", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE)\n    @testlib.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataCategory (\"Data\")]\n\t\t[DataCompilationCondition (typeof (ConstraintCollection).IsDefined(typeof (ConstraintCollection), \"IsInitialized\"))]\n\t\t[DataCompilationCondition", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.save_button = QtWidgets.QPushButton(self.save_button)\n        self.save_button.setObjectName(\"save_button\")\n        self.save_button.setObjectName(\"save_button\")\n        self.save_button.setObjectName", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return super.onResult( result );\n            }\n            // Get the wx data\n            String wxType = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_TYPE ) );\n            String wxIdent = wxs.getString( w", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(\"from Locality\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionRowCount, \"unexpected", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctab[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            uiCRCITTSum = reflect(uiCRCITTSum, 1", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisplacement(getDisguiseModule());\n\t}\n\t}\n\t}\n\t/**\n\t*\n\t*\n\t*\n\t* @return\n\t*\n\t*\n\t*\n\t*\n\t*\n\t*\n\t* getDisp", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, \n                            editor.getSourceViewer()),\n                    new CeylonReferencesHyperlinkDetector(\n                            editor.getSourceViewer(),\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.aspectWidget)\n        self.l.addWidget(self.l)\n        self.l.setAlignment(Qt.AlignLeft)\n        self.setAlignment", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  else\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\tsb.append(sb.append(sb.append(\"\\t\"+avg[i][j] + \"\\t\"+total[i][j] + \"\\t\"+totalChanges[i][j]+\"\\t\"+total[i][j", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found that contains the unpriced line\n                                if (unpricedLine.Key < orderPurchaseESD.data", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTException {\n\t\t\tget { throw new NotImplementedException", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int userId = 11111;\n        final int mode = 04;\n        // TODO\n        // TODO\n        //\n        //\n        //\n        //\n    }\n        //\n        //\n        //\n        //\n    }\n        //", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, float scale)\n\t\t{\n\t\t\treturn v * scale;\n\t\t}\n\t\tpublic static Vector", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t(XDREnum):\n    __members__ = [endpoint_key(vlan=1, mac_hi=0x0000, mac_lo=0x0000), endpoint_key(vlan=2, mac_hi=", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\tm_workerSocket = null;\n\t\t\t\tm", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                List<ActivityBucket> listActivity = convertToActivityBucketList(list);\n                notifyActivityReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, listActivity);\n            }", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if is_method:\n    print '                               Class* object'\n  else:\n    print '                               %s' % (function_name + '(A0, A1, ..., A%d)' %\n                                                 bind_count)\n  print '                              ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        mimetype='application/json'\n    )\n    return response\n\ndef range_json_with_cred", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(whereClause);\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.mockIV(", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.request.POST.get(\"set_is_active\"):\n            messages.success(self.request, _(\"User updated.\"))\n            return HttpResponseRedirect(self.get_success_url())\n        return super(UserDetailView, self).post(request, *", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetConvergenceLimit(1e-10);\n            _iterator.SetConvergenceStatus(CalculationStatus.Converged);\n            _iterator.SetConvergenceReason(CalculationReason.Converged);\n            _iterator.SetConver", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat median = median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if k = len(focal)\n            # Note that this is the same as the original\n            if_u = np.zeros(ts.num_nodes)\n            # The original code\n            # The original code\n            # The original code\n            # The original code\n           ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in csv_mapping.mappings:\n            if mapping['name'] not in mapping_json['mappings']:\n                result[mapping['name']] = False\n            else:\n                result[mapping['name']] = True\n        return result\n    def test_en", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsNull)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyBot(modData.Name, Map.Rules.Actors[\"", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" \" + _status + \" \" + GetMessageByCode(_status);\n\t\t\t}\n\t\t\treturn base.ToString() + \" \" + _status;\n\t\t}\n\t\tpublic override object MemberwiseClone()\n\t", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass HeaderFrame(Frame):\n    frame_type = FrameType.HEADERS\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __init__(self, stream_id,", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull.Left < cluster.RectangularHull.Left)\n                throw new MsaglException(\"Cluster \" + cluster.Name + \" has a boundary curve that is not contained in the cluster's rectangular boundary.\");\n           ", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKinWorld.\n\t\t\n\t\t\tm_jumping = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tNBTTagCompound nbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tnbttagcompound.setInteger(\"color\",", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, _returnNode, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\tAssert.AreEqual(default_height, default_height, myTrackBar.Height, \"#SIZE26\");\n\t\t}\n\t\t\n\t\tprivate void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t\t(ClassType);\n\t\t}\n\t\t}\n\t\tresult = (ClassType);\n\t\tis(ClassType);\n\t\tassertThat(result);\n\t", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn true;\n\t}\n\t\n\t}\n\t\n\tpublic boolean isImplicit() {\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > narrowL) {\n              continue;\n            }\n            int max2 = wideRExtent[end][r.leftChild];\n            int max = (max2 > min1) ? max2 : min1;\n            if (max < narrowL) {", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           assert ret\n        )\n        assert cmd.rsync.stdin.write.write.called_with()\n        assert cmd.stdin.write.called_with()\n        assert result == ret\n        cmd.assert_called_once_file_list_file_invocation\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged(true, () => {\n\t\t\t\t\t\tthreadContext.IsOpenChanged = false;\n\t\t\t\t\tthreadContext.Threads.ClearChanged = true;\n\t\t\t\t\tthreadContext.Threads.Changed = true;\n", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"diffuse\", \"color\", String.attribute( null, \"diffuse\", String.valueOf, \"diffuse\", String.valueOf( appearance.getDiffuseColor() );\n\twriter.endTag( null, name, \"set\", \"diffuse\" );", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nif reject_wall > 0:\n  print(\"Rejected timesteps due to wall collisions: %s\" %reject_wall)\nif reject_jump > 0:\n  print(\"Rejected timesteps due to jumps: %s\" %re", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # This is a useless_slice,\n        # If the following line is_slice,\n        # This is_useless_slice,\n        if node.inputs[0]\n            if isinstance(node.inputs[0].owner.\n            if node.outputs[", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple\n    self.fields['groups'].help_text = \"Select the groups you want to add to this community.\"\n    self.fields['groups'].label = \"Groups\"", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event.\n                query.\n                query.with(event.listen(\n                    event.with(query.with_query)\n                return query\n        \"\"\"\n        def before_load_query.\n        \"\"\"\n        def before_load(self, query.\n        \"\"\"\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   ConditionalDescriptor = type(\n        'ConditionalDescriptor',\n        (ConditionalFields,),\n        {'definition_from_xml': ConditionalDescriptor.definition_from_xml,\n         'definition_to_xml': ConditionalDescriptor.definition_to_xml,\n         'get", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       data_model_changes.append(ArrayValueChange(to_global, old_value, new_value))\n    def get_filtered_data(self):\n        return self.filter_data(self.data, self.current_filter)\n    @property\n    def bg", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\tTypeWrapper typeWrapper = StaticCompiler.GetTypeWrapper(new TypeWrapper(TypeWrapper : TypeWrapper : TypeWrapper\n\t\t{\n\t\t\t{\n\t\t\t\tinternal override void Generate(CodeEmitter CodeEmitter\n\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>(new ArrayListValuedHashMap<>());\n            this.data.put(row.get(ID_KEY), termData);\n        }\n    }\n    /**\n     * Sets up the CSV", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos()))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t@Override\n\tpublic boolean onBlockInteraction(EntityLivingBase entityLivingBase, BlockPos pos,", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(n, component);\n            }\n        }\n        intrinsicCohesion /= c.getComponents().size();\n        this.memor", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   if not doc_flags:\n                        logger.info(\"ERROR: Document %s: No flags found\" % (str(docid)))\n            except Exception as e:\n                logger.info(\"ERROR: Document %s: Problem with retrieving flags: %s\" % (str(", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return exDateList.toExDate();\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @param date the java.util.Date to convert.\n   *", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = sourceEventName;\n\t\tsourceEventBinding.SourceProperty = sourceProperty;\n\t\tsourceEventBinding.TargetComponent = DataSource.gameObject;\n\t\tsourceEventBinding.TargetProperty = sourceProperty;\n\t\tsourceEventBinding.TargetEvent", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        }\n        }\n        // Authorization check\n        if (privilege) {\n            String containerName = (containerName) containerName;\n        }\n        }\n        String nodeName = containerName,\n        String nodeName = DaylightWebUtil", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public int randomInt(int min, int max) {\n        if (min > max) {\n            throw new RuntimeException(\"min must be less than or equal to max\");\n        }\n        return rnd.nextInt", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_equivalence(old_pred_uri,\n                    )\n\n\n        return_new_pred\n\n        new_pred_uri = 'label-match'\n        new_pred = None\n        new_pred_u\n        :\n        new_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"\n            buffer.Append(\"\n                .Append(\"MergeCellOptions\n                .Append(\"MergeCellOptions\n                buffer.Append(\"MergeCellOptions\n                .IndentNotParentFont\n                .Append(\"AlignmentOptions\n                .Append(\"AlignmentOptions\n                .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes[byteIndex++] = (ch >= 0xFF61 && ch <= 0xFF9F) ? (ch - 0xFF60) + 0x8130 : ch", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# 00 00 00 00 00 00 00 00 00 a(4) {00} {00} {0b} {4b} {00} {00}\nmnemonic=\"LD_", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties props = new Properties();\n\t\t\tstream = location.getInputStream();\n\t\t\tprops.load(stream);\n\t\t\t\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tfor (String key : props.keySet())", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultDaclIsAllowEveryoneFullAccess ()", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, *args, **kwargs)\n    def __progress(self, *args, **kwargs):\n        self.__idle(self.__progress_cb, *args, **kwargs)\n    def __done(self, *args, **kwargs):\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.Current.UseServerSettings.ServerSettings = ServerSettings.Current.ServerSettings = CurrentLang.ServerSettings.AppSettingsFile = ServerSettings.CurrentSettings.ServerSettings.AppSettings.UseSettings(PhotonCloudAppId\n        }\n    }\n    public static", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_repto = rootLayout.findViewById(R.id.full_repto);\n        full_repto.setText(Html.fromHtml(message.repto));\n        full_repto.setMovementMethod(LinkMovementMethod.getInstance());\n        full", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * np.dot(self.ibzk_kc[k, :, s, :],\n                                              self.symmetry.op_scc[s, :, np.newaxis]))\n            psit_", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       @Test\n    }\n    }\n    private void createUtkastFornamnOk();\n    }\n    private String forName;\n    private String intygsTyp;\n    private String intygsTyp;\n    private String intygsTyp;\n    private String", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tforeach (ILNode block in block.GetChildrenRecursive(block) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t    {\n\t\t\t\t\t//TODO\n\t    }\n\t    if (Animator != null\n\t\treturn;\n\t}\n\t}\n\t\n\tprotected void BodyPart.RagdollRBParts", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture\"\n        self.top = ClassFactory(InterpolatedNodeSet)\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num & 0xff000000) >>> 24);\n        out[outOff + 1] = (byte)((num & 0xff000000) >>> 16);\n       ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    private final Map<String, PatternNode> labelToNode;\n\t    private final", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['@from'] = value\n    elif key == 'fin':\n        node_json['@to'] = value\n    elif key == 'NODE':\n        for child_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n    }\n  }\n  public void remove(InternalFrame frame) {\n    if (frame!=null) {\n      if (buttons.containsKey(frame)) {\n        buttons", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.table import Table\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, offset.x, offset.y);\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        if", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   expenses.updateExpenses(newId, deleteId);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tdismiss();\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onStart(Bundle savedInstanceState) {", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid));\n                Marshal.DestroyStructure(m_ptr, typeof(IntPtr));\n                Marshal.FreeHGlobal(m_ptr);\n            }\n            m_ptr = IntPtr.Zero;", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL_COOKIE_NAMESPACESERIALS = (\n    'django.contrib.sessions.backends.SessionMiddleware',\n    'django.contrib.messages.backends.SessionMiddleware',\n    'django.contrib.messages.middleware',\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue.Count(q => q.Item == itemName) > numberToCancel)\n\t\t\t\tqueue.RemoveAll(q => q.Item == itemName && q.Queue.Count > numberToCancel);\n\t\t\telse", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.showCurrentDirInfo()\n    \n    def doShowCurrentDir()\n    \n    def treeviewClicked(self, index)\n        self.treeview.clicked.\n        self.treeView.clicked.\n    \n    def treeviewClicked(self", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = self.bld.bld.outputs.append(self.outputs)\n        if getattr(self, 'cwd':\n        if getattr(self, 'source', None, self.source, self.target, self.path, self.env, ext_", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #rospy.loginfo(\"Result: %s\", result)\n        #rospy.loginfo(\"This", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] - chemical[ 0 ][ idx - reactorExtent - 1 ]\n\t\t\t\t\t, hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale)));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t}\n\t\tpublic new HbmProperty(HbmProperty member, HbmMappingProperty mapping)\n\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(member, mapping.Items.Count, mapping.Items.Count, mapping.Length,", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_conf = self.config_ntp_auth_keyid_config = self.authentication = 'enable'\n        self.key_id = self.module.set_nc_config_auth_keyid\n        self.key_id = self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.get_item(self.store.subtree_edited_by(self.store.edit_info_location)\n        )\n        # Verify that the draft_location,\n        #   # pylint: disable=maybe-no", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((TEXT_CODE & 0xff) & 0xff));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['start'], dict['end'], dict['inclusive'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // If the action has a return type, we can use it as the type for the sample.\n            Type returnType = api.ActionDescriptor.ReturnType;\n            if (returnType != null)\n            {\n                formatters = new Collection<MediaTypeFormatter>(SampleObjectFactories.", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           self.on_quit_cell(record, column.name, value, callback=callback)\n        return True\n    def _key_up(self, path, model, column=None):\n        if not path:\n            return\n        if column:\n            column = self.next", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanFactory.getBean(beanFactory.getBeanDefinition(LegacyConfigPostProcessor.BEAN_NAME_GLOBAL_PROPERTIES", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        except IOError:\n            # File not found\n            f = None\n    if not f:\n        if state == \"present\":\n            if not create:\n                module.fail_json(msg=\"File %s does not exist and create=", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetService(\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid riid,\n            [Mar", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = ROLES + { ROLE_ID },\n            produces = MediaType.APPLICATION_JSON_VALUE )\n    public void addRoleToUser", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        This verifies the tag name and namespace prefix of the element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   nodeType,\n        nodeType = node.node = node.nodeType = node.nodeType = node.nodeType = node.nodeType\n        if node.nodeType == Node.ELEMENT_NODE\n        if node.nodeType == Node.DOCUMENT_NODE", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\tvalidateEMSSc\n\t\t\t\tTest\n\t\t\tvalidateEMSSc\n\t\t\t\tScenePatientCount\n\t\t\t\tTest\n\t\t\t\t\t\tIndic\n\t\t\t\tvalidateEMSSceneSection\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t(int[] encoder.getLength() = encoder.getLength() = encoder.getLength() = encoder.getLength() = encoder.getLength() = decoder.getOffset()\n\t\t\tdecodeKeyLocatorType = decoder.getTypeAndLength", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the HUD\n        display.update(delta);\n        \n        //Updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( colorValue );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n            .setColor( colorValue );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error getting file: %s\" % r.data.decode(\"utf-8\"))\n    if r.status != 200:\n        raise RuntimeError(\"Error getting file: %s\" % r.data.decode(\"utf-8\"))\n    filename = get", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRunMergedOrder == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailureReason = \"Merge", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot compute carbon yield for reactions with multiple metabolites.\"\n        )\n    return [reaction.metabolites[met].elements.get(\"C\", 0) for met", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(path__startswith=pootle_path)\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbre", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Switch {} sending packet {} to {}\".format(self.name, poxpkt, self.dstmac_cache[self.name]))\n                self.send(poxpkt)\n        self.controller.process_packet(poxpkt, inputport)", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    if (m_RecentItems.size() > m_MaxCount)\n      removeRecentItem(m_RecentItems.size() - 1);\n    update", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           return false;\n        }\n    }\n}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public Date getTradePeriod() {\n        if (tradeProtocol.getPhase() != null) {\n        throwable;\n    }\n    }\n    public void onState getState() {\n    }\n    @Override\n    @Override\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbyte[] buff = new byte[] {\n\t\t\t\tmWriteData(byte[] reportType, buff.Length = 0x00, buff.Length = 0x0, mReadData = 0x0x0x00);\n\t\t\t\tm", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null || o2 == null)\n\t\t\t{", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueFreeList(i)\n            _heap[i]\n        }\n        }\n        }\n        public int AllocateUnits(int indx)\n        {\n            if (_heap)\n            {\n                _heap = _heap;\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       return rate\n    @cached_property\n    def view(self):\n        return RatesView(parent=self.parent)\n    @property\n    def view(self):\n        return self.view\n    @view.setter\n    def view(self, value):\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Shadow buffer is not supported\" );\n\t\t\t}\n\t\t\tif ( _scratchToScratch )\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = \"single_transponder\"\n\t\t\tself.tuning_type.value = \"predefined_transponder\"\n\t\t\tself.tuning_type.value = \"single_transponder\"\n\t\tself.tuning_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAlive not supported\");\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unsupported option \" + option);\n    }\n}\n}\n\n\n\n\n\n\n\n\n\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (PdfNumber.GetPdfObject(inp, obj.Length;\n                }\n                else {\n                    int[] p = new int[0];\n                    int p = 0;\n                    int row = 0;\n                    int row = 0", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface().__class__, str)\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar'])\n        self.assert", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def p_operator(self, xx, pos_xx):\n        if self.get_options().get_p()\n        return\n    def p_operator(self, xx, pos_xx):\n        if self.get_options().get_t()\n        return self.", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.ParseError\n        }\n        }\n        }\n        ///\n        [Test]\n        ///\n        ///\n        [Test]\n        [Test]\n        public void\n        {\n        [Test]\n        public void\n        {\n        [Test]\n       ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\treturn map.keySet();\n\t}\n\t@Override\n\tpublic Collection values() {\n\t\treturn map.values();\n\t}\n\t@Override\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client', 'target': 'self'}\n        #return {'type': 'ir.actions.client', 'target': 'new' if next_action == 'hr_attendance.hr_attendance_action_greeting_message' else '", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow rRow = form.grdResults().getRows().getRowByKey(orderInvestigationLiteVo.getSpecimenLiteVo().getSpecimenId());\n\t\tif (rRow == null)\n\t\t{\n\t\t\tr", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = c.ReadStruct<POINT>();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The index of this item.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_new_tab(cwd, profile)\n        self.set_title(self.get_title())\n        self.set_position(self.get_position())\n        self.set_role(self.get_role())\n        self.set", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = new TypeInfo(\n                    }\n                    MarshalInfo marshalAttribute = GetMarshalInfo( \n                    TypeInfo = CreateStructType(managedType(\n                    MarshalInfo = marshalInfo;\n                    }\n                    Type managedType = Struct", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType; }\n\t\t}\n\t\t}\n\t\t}\n\t}\n\t}\n\tpublic bool IsNotNullable {\n\t\tget {\n\t\t\treturn TypeAttributes.IsNullable;\n\t}\n\t}\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private void", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(_openssl_to_stdlib(protocol))\n        self.context.set_options(\n            _openssl_to_stdlib_verify[protocol],\n        )\n        self.context.set_cipher_list(\n", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox6 = new global::Gtk.Box.Box.Child\n\t\t\n\t\tw6.Position = 0;\n\t\tw6.Position = 1;\n\tw6.Fill = false;\n\t\tw25.Position = 0", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    _add_page_num_num_page_num\n    def callback (notebook, gpointer, page_num):\n        page_num = page_num\n        notebook.remove_page(page_num)\n        notebook.connect(\"switch_page\", gtk", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-next-line\": QKey_N,\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Go_to_definition),\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + persistenceUnitName + \", persistenceProviderClassName=\" + persistenceProviderClassName + \", transactionType=\" + transactionType + \", nonJtaDataSource=\" + nonJtaDataSource + \", jtaDataSource=\" + jtaDataSource + \", mappingFile", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void refreshVisuals()\n  {\n    if (isSelected)\n    {\n      setBackground(isHighContrast ? getHighContrastBackground() : getBackground());\n      setForeground(isHighContrast ?", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(182, 0);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t//\tbyte[] digest = new byte[] { 0x0a, 0x9f, 0x0b, 0x0e, 0x9f, 0x1f, 0x63, ", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_sum;\n\t    \n\t    current_sum = 0;\n\t    \n\t    if (this.intVal != 0)\n\t    {\n\t        current_sum += 4;\n\t    }\n\t    \n\t    current_align", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n      return java.GetValue(\"JavaSoft\\Java_Home\") as String;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n      {\n        javaHome = FindJdkIn", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if job:\n                    if job != l.split()[4]:\n                        continue\n                return [comment, l]\n    def find_env(self, name):\n        for l in self.lines:\n            if l.startswith(name):\n                return l\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier_json = None\n\n\nclass MeshModifier(bpy_data=None\n\nclass MeshModifier(bpy_data=None\n\n\nclass MeshModifier_json = None\n\nclass MeshModifier(None):\n    pass\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double minRankCount = Doubles.min(rankCounts);\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                rankCounts[i] = minRankCount;\n            }\n        }\n        double min", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       while (vertex.neighbors().hasNext()) {\n            neighbors.add(vertex.neighbors().next().getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.parser(self.choice, cap=self.cap)\n            except (KeyboardInterrupt, EOFError):\n                print(self.grn+\"[*] Exiting...\"+self.blk)\n                return\n            except Exception as e:\n                print(self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'unique_t", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               returnTypes(new QName()\n                }\n            }\n        }\n        }\n        }\n    }\n    }\n    }\n    }\n    private void processComplexTypes(QName sdoTypeName);\n    private void processComplexTypes(QName sdo", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.onchange.\n        self.onchange.\n        self._compute_number_of_days_temp\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set {\n        /// <summary>\n        /// <param name=\"Enabled\">\n        /// </param>\n        ///\n        /// <returns>\n        /// <returns the number of rows\n        ///\n        /// <returns>\n        ///\n        /// <returns>\n        ///\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return string.Format(\"MixerLine: {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (null)\n\t\t{\n\t\t\tif (valueObject.isCareContext\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            notify_build_done(elapsed)\n        return status\n\n    def build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble score = this.getOptimisticScore(p, n);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashes.Items.Clear();\n                foreach (var gitItemStatus in gitItemStatuses)\n                {\n                    Stashes.Items.Add(new GitStashItem(gitItemStatus));\n                }\n                Stashes.SelectedIndex = 0;\n           ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n    # --------------------------------------------------------------------------\n    # Check that the assignments were", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public int AddInt(int a, int b, int sum)\n    {\n        }\n    }\n    }\n    }\n    public class AddNumbers {\n        public AddNumbers()\n        {\n            public int a;\n            public int b", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleString", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = (EClassifier)value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this,", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   args = parser.parse_args()\n    if args.index_file is not None:\n        archive_index = load_archive_index(args.index_file)\n    else:\n        archive_index = load_archive_index(args.index)\n    if args.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.state = 'IDLE'\n        self.state = 'IDLE'\n        self.cmd_ss = self.cmd_ss\n        self.cmd_ss = self.cmd_ss\n        self.cmd_es = self.cmd_es = self.cmd_es", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      // test, line 169:\n      do {\n        v_1:\n      do {\n        // (, line 163\n        // (, line 17\n        // [, line 17\n        // (, line 18\n       ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception ex) {\n                System.out.println(\"Error: \"+ex);\n            }\n            if (o != null) {\n                cd = channelMap.get(channel);\n                if (cd == null) {\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_authority_key_usage_to_str\n    def _get_subject_key_usage_info\n    def _get_subject_key_identifier:\n    def _get_issuer_key_identifier:\n    def _get_subject_key_usage", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (ScopedConnectionList::ScopedConnectionListIterator i = _slots.begin(); i != _slots.end(); ++i) {\n\t\t\t\t\tif (i->c == i) {\n\t\t\t\t\t\tstill_there = true", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   front_seq = unicode_to_utf16(unicode_to_utf16(X.begin))\n    #   front_seq = [0x0, 0x10000]\n    #   front_seq = unicode_to_utf1", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 11) {\n\t\t\t\tGet();\n\t\t\t\tGraph g = TokenExpr(out g);\n\t\t\t\tif (g.l.Elements() == 1) {\n\t\t\t\t\tif (sym.attr", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_id.qty_doctype\n            edi_doc['product_uom_id'] = line.product_id.", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\tserviceProperties.put(\"port\", httpSSLPort);\n\t\tserviceProperties.put", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions.set(virtualFolder,\n                     PermissionService.readOnly);\n        }\n        }\n        assertEquals(vf2NodeRef,\n                     asTypedPermission,\n                     user1));\n        assertEquals(virtualNode2,\n        assertEquals(as", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_subsystem('input')\n\nThe test is expected to match devices with the subsystem 'input', but the subsequent line of code seems to be a misplaced assertion that is not part of the test. It should be either removed or refactored into a separate test case.\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId, floorId)\n    data = user.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    outlines = [\n        if (len(index)\n        if (index_elements[0] == \"Closure\"\n        (index_elements[1] == \"polarisations\"\n        array_stations = [indexes[2]\n        if (index_", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           _ItemID = CraftSystem.GetItemID(this);\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> tunerList = tunerList.getTuner.getDevice = true;\n        }\n        }\n        // If we have a device registry entry, we can assume it's a tuner\n        if (addDevice)\n        if (addDevice", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_OPT_IN) {\n      jobs.put(Version.USER_OPT_IN, new UserOptInMigrationJob());\n    }\n    if (lastSeenVersion < Version.MIGRATION_SET) {\n      jobs", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER: line \" + lineCount + \" in mapping file is missing a regex or a type\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexString :", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.AppendENVPath('BIBINPUTS', os.path.join(env['BIBINPUTS'], n))\n            #env.AppendENVPath('BSTINPUTS', os.path.join(env['BSTINPUTS'], n))\n            #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return Feature,\n    Feature\n    def features(self, query):\n        return Feature(self, query)\n    \"\"\"\n        def features(self, query:\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        def __init__(self, query, base_datasource,", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       def ip(self):\n        self.ip = self.ip\n        self.port = self.port\n        self.port = self.port\n        def port(self):\n        if self.port:\n        if self.want.port != self.have:\n            raise", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.validate_button.click()\n    self.read()\n    self.validate_button.click()\n    self.read()\n    self.validate_button.click()\n    self.read()\n    self.validate_button.click()\n    self.read()\n", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className);\n    }\n    public IAction getActionObject(String className, ConfigLoader", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.test_create_thread_id\n    )\n    self.assert_thread_id\n    )\n    self.assert_thread_id\n    self.assert_thread_id\n    )\n    self.assert_thread_id\n    self.assert_thread_id", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Action.Action(embedManifestDllAction, None, depends=[manifestSrc], emitter=ldmodEmitter)\n        else:\n            raise SCons.Errors.StopError(\"Manifest file %s does not exist\" % manifestSrc)\n   ", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           MultiStatus errors = execute(getResources(getResources()), getMonitor());\n        } catch (OperationCanceledException e) {\n            // The user canceled the operation\n            return;\n        } catch (CoreException e) {\n            MultiStatus problems = recordError(errors", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts=new int[meta.getFieldCount()];\n\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic boolean deconfigure(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\treturn true;\n\t}\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:31,12,31,31, 12,12,12,12,12,31,12,31,12,31,15,20,15,15,15", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //intime\n            {\n                int x = int z = x;\n                int.ToLower(z)\n                int z = int.ToLower(z)\n            }\n            }\n            }\n            }\n            //int x = int\n            {\n                int.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest suspend failed\")\n\n    @error_context.context_aware\n    def verify_guest_suspend", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(service.invokeAny(new Future<Integer>[]\n        {\n            new Future<Integer>(pub)\n        }));\n        return service.invokeAny(new Future<Integer>[]\n        {\n            new Future<Integer>(pub)\n        });\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                this.owner.getDecorator().setOnSendRequestAfterParameters(res, destination, r);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x1FFF)\n\t\t\t\treturn 2;\n\t\t\telse if (value <= 0xFFFFFF)\n\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.open(self.fm.get_path.get_selection(self.fm.thisdir.path.path\n        self.fm.env.path.path.get_selection\n        self.fm.thisdir.path.get_selection()", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_NonCOMType ()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (NonCOMTest));\n\t\t\tAssert.IsInstanceOfType (objCOMTest, typeof (", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.cmd.execute(self.control_message\n        \"\"\"\n        \"\"\"\n        self.send_message(self.control_socket\n        \"\"\"\n        self.control_socket.send_control_messages\n        self.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Send a message to all group members\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\nclass Token(object):\n    def __init__(self, ttype, string, start, end, line):\n        self.ttype = ttype\n        self.string = string\n        self.start = start\n        self.end = end\n        self.line = line\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_store_iter_column(self._create_store_map(1, False, 15, 2),\n                                      self._create_store_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tgrid.setColumn(column);\n\t    }\n\t} while (parent != null);\n\treturn EVAL_BODY_INCLUDE;\n    }\n    /**", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt16(element.Attributes[\"ImageIndex\"].InnerText);\n                GrayImageIndex = Convert.ToInt16(element.Attributes[\"GrayImageIndex\"].InnerText);\n                Image = new Bitmap(Image.FromFile(GfxPath + Gfx", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\tm_boss = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i]);\n\t\t}\n\t\t\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Argon256, 0x32, 0xC, 0x68, 0x66, 0xC, 0xF, 0xE, 0x88, 0xD, 0xB,", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, false) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n\n# -----------------------------------------------------------------------------\n# Django settings for django-agfk project.\n#\n# For the full list of settings and their values, see\n# http://docs.djangoproject.com/en/dev", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" should be {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tLayer newFrame = NextFrame;\n\t\t\t\t// Copy to the processed list.  When", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            }\n        }\n        if (ret != null) {\n            rr.mRequest = null;\n        }\n        }\n        if (ret != null) {\n            r.ret = ret;\n        }\n        }\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isApplicableForType(MetadataEnumType.APPLICATION)) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = new Vector3(-0.5f, -0.5f, 1f + y * 1.05f);\n            newVertices[y * xSizeP + x + 1] = new Vector3(", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\trawResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = (Integer) rawResult;\n\t\t\t}\n\t\t\t\n\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void addSelectionListener(final SelectionListener listener)", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name + \" not found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           if (stati", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n                            }\n                            }\n                            }\n                            List<CollisionObject>\n                    {\n                    var collision = spell.CastPosition.To2D\n                    {\n                        }\n                    {\n                    :\n                    {\n                        }\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(y);\n        Node a = path.get(0);\n        Node b = path.get(1);\n        Node c = path.get(2);\n        if (graph.isDefCollider(a,", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i] is Drawable)\n                        plcs.Push((pop[i] as Drawable));\n                }\n            }\n            return null;\n        }\n        #region Initialization\n        /// <summary>\n        /// Initializes the object.\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       return 0;\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + (description == null ? 0 : description.hashCode());\n        result", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            return;\n                    }\n                    m_Item.OnAfterDelete();\n                    m_Item.OnMoveOver(m_Item.From);\n                }\n            }\n        }\n    }\n}", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(new KeyValuePair<PlayerMobile, WorldChatMessage>(user, msg));\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t\t}\n\t\tprivate void Kick(PlayerMobile user, bool message, bool sendMessage =", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getCompoIds(String sUserId) {\n    return mock.getCompoIds(sUserId);\n  }\n  @Override", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File file = (File) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(m", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.j.writeLock().lock();\n    try {\n        this.j.writeLock().unlock();\n    } finally {\n        this.j.writeLock().unlock();\n    }\n}\n    public void close() {\n        this.channel.close();", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if find_tipper = True\n                \n        # read_data = np.array([t_index_list\n        # read_data_lines = np.array([[np.array(t_dict)\n                \n        # get_z_dict = {'z_dict =", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              String.format(\"%1$s and %2$s\",\n                                            TextUtils.join(\", \", recipients.subList(0, recipients.size() -", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if g:\n            env[\"GONK_BIN\"] = self.config[\"gonk\"][\"b2g\"]", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, test_items in iteritems(type_paths):\n                for test in test_items:\n                    if isinstance(test, dict):\n                        test = test_cls.from_json(tests_root, test)\n                    tests[test.source_file", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding() {\n            @Override\n            public Object getProperty", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        /// <param name=\"frame\">The wraper to write</param>\n        protected virtual void ServerClose(DataFrame frame)\n        {\n            throw new NotImplementedException", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     grad_E = z[:,0]\n      grad_E = z[:,0] * self.y_stds[0] / self.y_stds[1:]\n      grad_E = z[:,0] * self.y_stds[0] / self", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t{\n\t\t\tif(this.ordinvcurrentstatus != null && obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t\t{\n\t\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInv", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(\"DEPTH\");\n        parameter.setParameterValue(Integer.valueOf(depth));\n        pf.addParameter(parameter);\n        crawlParameters.add(pf);\n        //EXCLUSION REGEX", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNode sub = LNodeFactory(node);\n\t\t\tLNode sub;\n\t\t\t\t\n\t\t\tif (sub == null)\n\t\t\t\tsub = LNode.Node(sub.NodeName(node, sub);\n\t\t\t\treturn null", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = colisionList.Count;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                    else\n                    {\n                ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t}\n\tprotected void setContext(\n\t\t\t\n\t\t\tsuper.setContext(form, form, appForm, loader, null, null, null, null, ims.framework.IAppFormLoader, UIFactory, ims.framework.IAppForm, ims.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   print(PACKAGES_TO_UNINSTALL)\n    raise ValueError(\"Package names not found in frozen output: {}\".format(PACKAGES_TO_UNINSTALL))\n    for package_name in PACKAGES_TO_UNINSTALL:\n       ", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.value, 1)\n            self.assertEqual(r.v, 1)\n        )\n    def test_o2m_readonly(self):\n        \"\"\" Tests that readonly fields of o2m records are not editable\n        \"\"\"", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, (x, b, (x, (x, b, (x, b))\n    assert Sum(x, x, b))\n    assert Sum(x, (x, b, (x, b, c))\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tSystem.Text.Encoding a2;\n\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._oldItemList = null;\n            this._oldStartingIndex = startingIndex;\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = startingIndex;\n        }\n        private", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToOutputStream(objectToWrite);\n        }\n            }\n        }\n        }\n        }\n    }\n        }\n        try {\n        }\n        }\n        }\n        catch(Exception e) {\n            fail(\"An exception occurred\");\n        }\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus2:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// read the size\n\t\t\t\t\t\t\t\t// read the IconDirEntry (stream)\n\t\t\t\t\t\t// read the IconDirEntry\n\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.status & VISITED) {\n                l.visitSubroutine(l)\n            }\n            }\n        }\n    }\n    }\n    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __domain, __mStack);\n            var", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.setPosition(position));\n\t}\n\t\n\tprivate void setBlockOutline(LineStyle lineStyle) {\n\t\tif(lineStyle == null)\n\t\t\tsetBlockShowOutline(false);\n\t\telse\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Channel\"\n        self\n        self._", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.gss_kexg = self.transport.gss_kexgss_continue\n        self.old_style = self.old_style\n        self.e = self.gss_init_kexg_continue\n        self.old_style =", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData, overallNodeName);\n            if (disableTreeSelection) {\n                node.putClientProperty(\"JTree.lineStyle\", \"Dashed\");\n            }\n            tree.insertNodeInto(node, tree.get", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           self.cr.execute(\"SELECT sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_payslip as hp, hr_payslip_worked_days as hwd\\\n                            WHERE h", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = np.zeros\n    for i in range(len(zi)):\n        mfrac = MfracToMfrac(marr, zi, frac=20.0)\n    mfracToMfrac\n    #OK\n    #OK\n    for i in", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getBounds().getWidth() * 1.2);\n        d.height = (int) (getBounds().getHeight() * 1.2);\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.p2_share_face.init(self.p2,self.p3,self.p4_old,self.p5,self.p6_dis,self.p3,self.p4,self.p5,self.p1,self.p", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void OnDisconnectClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tTrader.Disconnect();\n\t\t}\n\t\tprivate void OnNewSecuritiesClick(object sender, Routed", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D)\n    if params[0]['bins'] is None):\n        return self.__class__\n        _Hist3D\n        _Hist3D.__init__(self, *args)\n        self.SetBin(self, params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getAllMessages(), query.getPagingOrder());\n        }\n    }\n}\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2R)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    else:\n        yield", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionLost(Throwable cause) {\n\t\tlog.error(\"Connection lost: {}\", cause.getMessage());\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       req = self.req\n        if req.path.startswith(self.path_prefix):\n            req.path = req.path[len(self.path_prefix):]\n        if req.path.startswith('/') or req.path.startswith(self.path_", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( data )\n\tmodel = datafile\n\tmodel.score()\n\tmodel.data.fields\n\tprobs = dict( fieldset = self.data.fields )\n\t\tfor field in fieldset\n\t\txsetfield = self.data.fields\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (CraftResources.IsStandard(resType) && chance < 10)\n                return;\n            if (CraftResources.IsStandard(resType) && chance < 10)\n                return;\n            if (CraftResources.IsStandard(resType) &&", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new RDLType\n        self.assign_field_el\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Create a new field\n        \"\"\"\n        d['field_el\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Create a new field\n        \"\"\"\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No FOG services were found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate the FOG Service Base Directory!\");\n                this.Close();\n            }\n        }\n   ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            {\n                object obj = (this.ViewState[\"\"]\n                return (obj)\n            }\n            }\n        }\n            {\n            set\n            {\n            }\n        }\n        }\n        }\n        }\n        [DefaultValue(\"\")]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.textureArray[textureHash[textureHash];\n                if(this.textureArray[textureHash][texureHash];\n                if(this.currentTexture[textureHash];\n                this.currentTexture[textureHash] = texture[texture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\ndef require_course_access(view_func):\n    \"\"\"\n    Decorator to ensure that the user has access to the course.\n    \"\"\"\n    @wraps", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                    d.Close();\n                }\n            }\n            return oldDrivers;\n        }\n        /// <summary>\n        /// Returns a driver from the pool.\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if crs, units, center, resolution, upper_left_extent, area_extent, units, units, center, upper_left_extent, units, upper_left_extent, units,\n        # Function 1-C\n        # If radius and center\n       ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(Starting.STATE_0)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\n\n# QuestNpc's spawn locations and indexes\nQUEST.addNPC(209", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection();\n            Textures = new Dictionary<String, TextureInfo>();\n            Uniforms = new Dictionary<String, int>();\n            _sCurProgram = null;\n        }\n        public ShaderProgram(ShaderProgram other)\n        {\n           ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self._metabolites = self\n        self._reactions = self\n        self._genes = self\n    def remove_from_model(self, reaction, remove_orphans=False", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\tif(left,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new DecelerateInterpolator());\n        mListView.setLayoutTransition(set);\n    }\n\t\n\t/**\n\t * Fill the list with the data.\n\t */\n    private void fillData() {\n    \tmCursor =", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    ARow.SetFieldKey(row.FieldKey);\n                    ARow.SetFieldKeyNull();\n                    break;\n                }\n                else\n                {\n                    ARow.Set", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(i);\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < length;", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
