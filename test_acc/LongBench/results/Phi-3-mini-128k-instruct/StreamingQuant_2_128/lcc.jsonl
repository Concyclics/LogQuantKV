{"pred": "\t\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\t\tif ( new DuelContext( new DuelContext( new DuelContext( new DuelContext( m_Initiator, new DuelContext( initiator.Player.DuelContext.Registered", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000)\n        buff = a.read_frames(100)\n        a.seek(-100, 1)\n        buff2 = a.read_", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_present(self._EMBED_CODE)\n\n[\n    {\n        \"id\": \"id_subtitle_file_field\",\n        \"name\": \"subtitle-file-field\",\n        \"type\": \"input\",\n       ", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tWriter writer = context.createWriter(new OutputStreamWriter(context.getWriter(Writer.class), \"UTF-8\"));\n\t\t\t\tWriterStyleConverter converter = new WriterStyleConverter(writer, context);\n\t\t\t\tconverter.marshal(value,", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.id = _QuestionData(self)\n       \n       \n        pass\n    def _handle_answer(self, self.is_correct(self)\n        return True\n    def _enable_start(self):\n        pass\n    def _enable_start(self):", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map);\n                    SR_Utilities.Location loc2 = SR_Utilities.GetLocation(loc, mob.Map);\n                    SR_Utilities.Location loc3", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n        }\n        }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    @Override\n    void send(HandshakeOutStream s);\n    @Override\n    public byte[] getEncodedCertificates();", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n        return (JESpace) spaceRegistrar.get", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void draw(WndBag wndBag, WndDrawContext ctx) {\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   self.dispatcher.dispatcher\n        response = self.response(self.path, self.pretty_help(self.path, self.dispatcher.wsdl\n        return self.handler.handler(environ, self.path,\n        return self.handler(environ, self.", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.execute_javascript(\"setRepeated('%s')\" % status_id)\n    def lock_status(self, status_id):\n        self.webview.execute_javascript(\"lockStatus('%s')\" % status_id)\n    def un", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return self.get_file_status(status_id=status_id.decode('UTF-8'))\n        def action_create_archive(self,\n        return {\"status\": OperationStatus.load(status_id.decode('UTF-8'))\n        def action_remove_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Equals\");\n\t\t}\n\t}\n}\n#endif // NET_2_0\n}\n}\n#endif // !NET_2_0\n#endif // NET_2", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            return trust_manager.getAcceptedIssuers()\n        raise CertificateException(\"None of the TrustManagers have accepted issuers\")\n    def getAcceptedIssuers(self, alias):\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        // How to get the domain info?\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__encoder = self.__encoder\n\nclass Mp3Encoder(self.__datastream_stream.get_writer()\n    def __encoder = None\n    def __get_cmdline()\n    async def get_writer() -> None:\n        raise NotIm", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (iter == null) {\n\t\t\t\t\t//do something\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//do something\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg == null) {\n                argValues[i] = null;\n  null ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(UUID.fromString(stringId), DataManager.getLoadedData().get(UUID.fromString(stringId)));\n\t\t\t}\n\t\t},\n\t\tFIRM(UUID.fromString(stringId), Firm.", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage page = new PreferencePreferencePage(mgr, \"General preferences\");\n\t\tpage.setType(PreferenceNode.TYPE_GENERAL);\n\t\tpage.setTitle(\"General preferences\");\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.SpellTarget = from;\n            }\n        }\n        public override void OnCast()\n        {\n            if (m_Owner.SpellTarget == null)\n            {\n                m_Owner.SendAsciiMessage(\"Select target...\");\n            }\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._autofl\n        \"\"\"\n        @property\n        \"\"\"\n        def _session.\n        @classmethod\n        def _get_mapper\n        \"\"\"\n        def _class_mapper\n        def _query_cls\n        def __init__\n        def __init", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\n\t\treturn getInstanceNames(IField);\n\t\t\n\t\t\n\t\treturn instNames(IField);\n\t}\n\t\t\n\t}\n\t\n\t\treturn map(String name = \"name\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   return_value = getattr(self, *args, **kwargs)\n    return method\n    @as_path=True\n    return method\n    return method\n    return_value=None\n    def remove_path=None\n    return method\n    return method\n    return_value", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"runat\", \"server\");\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.WriteFullBeginTag(\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View v in Views", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    user = args.user\n    password = args.password\n    coordfile = args.coordfile\n    outpath = args.outpath\n    wigle_downloader = WigleDownloader( user, password, coordfile,", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i.SkillBonuses.GetSkillName = i.SkillBonuses.GetSkill(i)\n                if (i.Skills.HitFireArmor)\n            }\n            }\n            if (i)\n            {\n                if (", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(build, builds=platforms))\n    else:\n        builds = platforms\n    # Build the button\n    if not simple:\n        if small:\n            if not icon:\n                icon = 'firefox-icon'\n            if not force", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectTypeIssueTypeIDs(projectID, issueTypeID, null);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBean = stateBeansList", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (var argumentSyntax in argumentSyntaxs) {\n                var argument = argumentSyntax.Parent as StatementSyntax;\n                if ( argument is VariableDeclarationStatementSyntax ) {\n                    var variable = argument as VariableDeclarationStatementSyntax;\n                    if ( variable.Declaration.Count", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test.children[0]\n        self.assertEqual(self.get_item_from_modulestore.get_item_from_modulestore(self.get_item_usage_key, self.assert", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfString(fontName + \"-\" + encoding));\n            tmp.Add(new PdfString(\"Type1\"));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(fontName));\n            tmp.Add", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tif (cell.getNumUsagesIn() > 0) continue;\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override public void on", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: Add a table for policy profiles\n    # TODO: Add a table for policy profiles\n    # TODO: Add a table for policy profiles\n    # TODO: Add a table for policy profiles\n    # TODO: Add a table for policy profiles\n    # TODO: Add a table for policy", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           if (Enabled)\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            else\n                writer.AddAttribute(\"onmouseover\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            base.Render", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\ndamageCooldown = 8;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n}\n\n/**\n * @see FreeColGameObjectType\n */\npublic class Scope extends FreeColGameObjectType {\n    /**\n     * Deliberately empty constructor.\n     */", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.first()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0],", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self.line(x=x, y=y,\n                    if self.\n                    z_name=dim_names, y_value,\n                    z_name\n                    value\n                    = None\n                    if self._interactive\n                    = False\n                ", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.StartsWith(ignoredPath))\n                {\n                    _tempIgnoredPaths.Remove(path);\n                }\n                else\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Length >", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfAbsent(K key,\n\t\t\t\t\t\t\t  Function<? super K, ? extends E> mapper,\n\t\t\t\t\t\t\t  BiFunction<? super E,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request['inreply_id = self.request['inreplyid'] = self.request['inreplyid']\n        self.request['viewtype'] = self.request['viewtype']\n        self.request['viewtype'] = self.request['viewtype", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset\n\t\t\t{\n\t\t\t\tif ( x < 0 )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t}\n\t\t}\n\t}\n\t\tpublic Tile GetTile\n\t\t{\n\t\t\tget", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_freeSwitchVoiceInfo.\n                    // - get the parcel\n                    // - check if we have a parcel\n                    // - if not, return\n                    // - and send the channel_uri\n                string channel_uri = String.Empty;", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEdit.PayPeriodEdit(textDateStart.Text,textDateStop.Text,textDatePaycheck.Text);\n\t\t\tDialogResult=DialogResult", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the time\n        # Read the column headings\n        # Read the column headings\n        # Read the data\n        # Read the data\n        # Read the data\n        # Skip the blank line\n        # Read the data\n        # Read the column headings\n        #", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return {'success': False}\n    #sysadmins_only = authz.check_config_permission(\n    #    'group_create_rest_api', context)\n    #if not sysadmins_only:\n    #    return {'success': False, '", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChildren().get(example.getLabel()).getPartitionId();\n\t\t\t\tdepths[parentIndex] = depth;\n\t\t\t\tdepths[resultIndex] = depth;\n\t\t\t\toutcomes[parentIndex]", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (strlen < strlen) {\n         }\n      }\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = getSampleDAO();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        String existingStudyFormName = sample.getStudyFormName();\n        if (existingStudyFormName ==", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", \"The password is incorrect or missing\");\n\t\t\t\t\tnewConn.Socket.Blocking = false;\n\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tcoll.add(new CatsReferralPendingEmergencyNonEDAdmissionListVoBean(beans[0].getBo()));\n\t\tfor(int i = 1; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'advertising':\n    xbmc.executebuiltin(\"Notification(3", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get report type\n  if not 'reportType' in pD:\n    return S_ERROR( \"Missing report type!\" )\n  reportType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var defense in Info.DefenseTypes)\n\t\t\t\tif (bot.HasAdequateRefineryCount(defense))\n\t\t\t\t\tbot.SetRallyPoint(defense, bot.Owner, bot.Owner.Location, bot.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t//", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = 8;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.StopBits = (StopBits)bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_permissions(self.admin)\n    def test_cobranding(self.check_cobranding(self.user)\n    def test_user_with_cobranding(self.user)\n    def test_user_with_cob", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   parser.add_argument('--help', action='help')\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    unittest.main(testRunner=None)\nif __name__ == '__main__':\n    main", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\t\n\t\t\tself.updateAPList = self.buildEntryList,\n\t\t\tself.updateAPList = self.buildList(self.newAPList = self.WlanList,\n\t\t\tself.WlanList = self.WlanList,\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               fCode = altText != null ? altText : fCode;\n                fCode = fCode.Replace(\" \", \"\");\n                fCode = fCode.Replace(\"%\", \"\");\n                fCode = fCode.Replace(\"$\", \"\");\n                fCode = fCode.Replace", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  \n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list may include commas, which are not escaped.\n   *\n   * @param key The key of the property", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 15)\n        # Test points are on a regular global grid, with unrelated steps + offsets\n        x_points = [\n            -185.23,\n            -112.", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetDataObject(currPacket.ClonePacket());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(SavePacket));", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # =======================\n    #\n    # get the data\n    # print data\n    #\n    # =======================\n    #\n    # print_data_to_data\n    # print_data_to_data\n    # print_data\n    #\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Gets the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public int GetRefCount(T", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.ResumeLayout += \n        }\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _NullFunction = _NullFunctionPointer(\n        resultType = ctypes.c_int,\n        argTypes = (ctypes.c_void_p,),\n        doc = 'Null function pointer',\n    )\n    _NullFunction.argNames = ('DLL',)", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.getEmptyStreams);\n        }\n        }\n        }\n        }\n    }\n    private boolean hasEmptyStreams(final DataOutputStream header) throws IOException {\n        if (\n            if (\n        }\n        }\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 * (getFps() - fps) + rampUp ? 255 : 0);\n                repaint();\n                try {\n                    Thread.sleep(rampDelay);\n                } catch (InterruptedException", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.Should().Be(false);\n        }\n    }\n    }\n        }\n        [Test]\n        public void\n        {\n            var item = Subject.Should().Be(false);\n        }\n        }\n        [Test]\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\nawait RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n            }\n        }\n    }\n}\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       SersicMain = \n        Sersic(1)\n        ParamDict[1]\n        # Write Sersic function for the bulge and disk\n        ParamDict[1]\n        ParamDict[1]\n        ParamDict[2]\n        ParamDict[1]", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) >> 2);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        if self._course_key is not None:\n            course_key = self._course_key\n        else:\n            course_key = self._", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\tif(chance < 0) chance = 0;\n\t\treturn", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            os.makedirs(config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.\n\n            this.chkPrivacy.AutoSizeMode = new System.Windows.Forms.Size(new System.Drawing.Size(new System.Drawing.Size(new Size(\n            this.chkPrivacy.Size.\n            this.chk", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive_name\n        self.archive.archive_name()\n            self.archive.add_archive_path(self.archive.add_archive_name(self.archive_name = self.archive.archive_name = self.archive_name = self.archive.archive.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionAbstractFossil(ISessionBasicFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = ILocalFileExtendedFossil\n    getAllMaterialList.name = \"resources\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing messages.\");\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), subfoldersCheckbox.isSelected(), messageWriter);\n            }", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tif (value instanceof SortObject) {\n\t\t\t\t\t\tlayer = ((SortObject)value).getLayer();\n\t\t\t\t\t}\n\t\t    \t}\n\t\t}\n\t\treturn layer;\n\t} catch (Exception e) {\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void willBeExecuted(GraphObject object) {\n                GraphUser user = (GraphUser) object.\n\n\n## Your task: \n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tif (sum == 0) return;\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.strength = (int) (em", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'stage':\n\n\n\n            'job':\n            'duration': \n            'finished_at': constants.\n            '\n            'started_at': constants.\n            'duration': \n            'started_at': constants.\n            '\n            'job", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi1 = atan(phi1*tan(phi1)*eccPrimeSquared*eccPrimeSquared*eccSquared*eccSquared*eccSquared*eccSquared*eccSquared*ecc", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[request.user.username]))\n   ", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property_info\n    @property_info\n    @property_info\n    @property\n    @property_info\n    @property_info\n    @property_info\n    @property_info\n    @property_info\n    @property_info\n    @property\n    @", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic KPTranslation(string strFileExtension)\n\t\t{\n\t\t\tProperties = new KPTranslationProperties(strFileExtension);\n\t\t}\n\t\tpublic KPTranslation(KP", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public byte[] getByteArray()\n    {\n        return writeByteArray();\n    }\n    /**\n     * @return\n    ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n    def compile_tags(tags):\n        '''\n        Post-processors are used to set the default build_dir and\n        test_threads.\n        '''\n        if not tags:\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n        }\n    }\n}\n\n\n## Your task:Implement the `GetProperty` method in the `MethodGenericParameter` class to return a `MethodInfo` object representing the property of the generic parameter. The method should take into account the `Binding", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer \nfrom scapy.fields import *\nfrom scapy.layers.obd import OBD_PID00, OBD_PID01, OBD_PID02, OBD_PID03, OBD_PID04, OBD", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\"org.freedesktop.Secret.Item.path, \"org.freedesktop.Secret.Collection.lock,\n\t\t\t\t\"org.freedesktop.Secret", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            {\n                AddSpell(typeof(IncarnateScroll, 1044350, 1044.5, 1044350.5, 10435.5, 104420.", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.session.commit()\n        self.session.remove()\n        self.session = None\n        if self.request.view_args:\n            self.request.view_args.clear()\n        if self.request.form:\n            self.request.form = {}\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return session.query(session, cluster_id, needs_columns=False)\ndef _pubsub_topic_id=None\ndef_cluster_id, needs_columns=False,\n    def_id=cluster_id,\n    def_name=None,\n    def_", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesForRelease(ResourceEntity resource, ReleaseEntity release) {\n       ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        dx = rot_dir[0] * np.cos(rot_dir[1]) + rot_dir[1] * np.sin(rot_dir[0])\n        dy = -", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url = self.url\n    def _buildURL(self, self.url, url)\n        \"\"\" Builds a list of URLs to search for the URL\n        \"\"\"\n        self.url\n        \"\"\"\n        if self.url:\n        \"\"\"\n        \"\"\"\n        return", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic override string", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value.Properties.Count, Is.EqualTo(2));\n\t\tAssert.That(obj.Properties[0].Value[\"The outer value\"].ToString(), Is.EqualTo(\"The outer value\"));\n\t\tAssert.That(obj.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, \"square-vertex-\"+h);\n                Topic b = getVertexTopic(h+1, \"square-vertex-\"+h, topicmap, optionsValues);\n                edges.add(new T2(a, b", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    # test_volume_scale=1.0\n    # test_r\n    # test_scale\n    #\n    # test_scale\n    # test_scale\n    # test_scale\n    # test_\n    #", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       AbstractTripleStore expected = new LocalTripleStore(args[0],\n                \"http://example.org/expected.ttl\",\n                \"http://example.org/expected.ttl\",\n                \"http://example.org/expected.ttl\",\n                \"http://", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 31, 6,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u'", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the presence of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t\tfor (", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.glDeleteVertexArrays(1, vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, vertexBuffer);\n\t\t\tOpenGL.Check", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._data_cov_mat_error\n    @property\n    def _data_cov_mat_inverse(self):\n        return self._data_cov_mat_inverse\n    @property\n    def x_data_cov_mat_inverse(self):\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = owningAccount.getCanonicalId) {\n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedTreeNode.SelectedFolderChanged += value; }\n            remove { _selectedTreeNode.SelectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Private Methods\n        /// <summary>\n        /// Initializes the folder system and the folder tree", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplate importedTemplate = new VmTemplate();\n        importedTemplate.setName(name);\n        VmTemplateCommand importCommand = new VmTemplateImportCommand(\n                createParameters(),", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Numeric.NegativeButtonPress.Connect (this.spinbuttonCheckPeriod.NegativeButtonPress);\n\t\t\tthis.spinbuttonCheckPeriod.NegativeButtonPress.Connect (this.spinbuttonCheckPeriod.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.system['NZBOLD_FILE_\n        #\n        #\n        #\n        # self.system\n        # self.system\n        #\n        #\n        # self.system\n        # self.system\n        # self.system\n        # self.system", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb, CallingConventions.HasThis, MethodAttributes.Public | MethodAttributes.NonPublic, MethodAttributes.RTSpecialName | MethodAttributes.SpecialName);\n\t\t}\n\t\tpublic ConstructorBuilder GetConstructor(MethodAttributes attributes)", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder {\n    return new Builder {\n      return this;\n    }\n    }\n    }\n    Builder {\n      Builder {\n      return this;\n    }\n    Builder MergeFrom(\n      Builder {\n      Builder {\n      Bu", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = quads[getVertIndex(i, x)];\n            }\n        }\n    }\n    /**\n     * Returns the index of the first vertex of quad <code>i</code>.\n     * \n     * @param i\n     *            the index", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(PROPERTY_COLUMN_ID,\n            // hide the column names\n        if (m_useAttachments()\n        String[] hiddenColumns = new String[] {\n            COLUMNS_COLUM_FOLDER\n        }\n        String[] sort", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n\t\t\t}\n\t\t\tyield return new WaitForSeconds (animation", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = (int)GetSmallTextSize().Width;\n        base.Height = (int)GetSmallTextSize().Height;\n      }\n      Invalidate();\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n   ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (lastUser.Length > 0)\n            {\n                Users.Add(lastUser);\n            }\n            else\n            {\n                Users.Add(r[\"ModifiedBy\"].ToString());\n            }", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tif (keyboardDirections.Includes(ScrollDirection.Right))\n\t\t\t\t\tdirections |= keyboardDirections;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerThreshold", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (VerificationTable.GetColumn.Row.GetDiscountCriteriaCode = 0,\n                    }\n                }\n                }\n                if (VerificationTable.GetValueInt3, VerificationTable.GetDiscount = Convert.ToInt32, VerificationTable.", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as string.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    if not self.packages:\n        return True\n\n\n## The execution log of this code is:\n#\n# python setup.py egg_info\n#     Traceback (most recent call last):\n#       File \"setup.py\", line 22, in <module>\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t\t\t\tCopyRangeCustom = value;\n\t\t\t\treturn false;\n\t\t}\n\t\t}\n\t}\n\t\t}\n\t\t\n\t\t}\n\t\tprivate bool CopyRangeStart\n\t\t{\n\t\t\treturn false;", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalArgumentException(\"BUG: bugInstance has a bug annotation with a null source line\");\n            }\n        }\n    }\n    /**\n     * @see edu.umd.cs.findbug", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\t{\n\t\t}\n\tpublic override void Serialize( GenericWriter )\n\t{\n\t\t}\n\tpublic override void Deserialize( GenericReader )\n\t{\n\t}\n\tpublic override void Deserialize( GenericReader\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n    }\n        {\n            if (Menu.GetBool(\"LaneClearQ\")\n            {\n                if (Menu.GetSlider(\"JungleClearR\")\n            }\n        }\n        }\n        }\n        private void\n        {\n            if", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn GridBagConstraints.get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints\n\t * @param x\n\t * @param y\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        warnings = self.parse_logic(tree)\n        return warnings\n    def parse_logic(self, tree):\n        warnings = []\n       ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.field_definitions('testsuite'),\n            Model_parser.field_definitions('testsuite')\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var stmtTextCreate(namedWindow\n                :\n                var result = env.CompileDeploy(\n                var stmtTextCreate\n                var fields = new []\n                {\n                    \"\n                    :\n                    :\n                    \"\n                    :\n                   ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   orbits\n        or\n        self.m\n        or\n        other\n        if other\n        self.x, self.y, self.m\n        return self\n        self.m = other\n        self.m\n        if other == c.m\n        self.m =", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    def get_field_value(self, cr, uid, view_id, field_name, context=None):\n        \"\"\" Return the value of a field on a view.\n        :param int view_id:\n        :param str field_name:\n        :return:", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        if (oldValue != null) {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert items == [(\"test\", filename)]\ndef test", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new InvalidOperationException(\"Loader has already been set.\");\n\t\t}\n\t\t}\n\t\tpublic void Cache(ICacheMapper", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n        pushGraph(invocationQueue.addInlineInfo.getInliningContext.getReplacements.add(invocationGraph.getCallsiteHolder(methodInvocation.getInliningContext()\n    }\n    }\n    private void moveForward() {\n       ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.create_log_path\n        self.log_path = self.args['log_path']\n        self.pytest_name = self.args['pytest_name']\n        self.pytest_bindings = self.args['pytest_bindings']\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(virtual, stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(virtual, stamp);\n                    }\n                    if (phi == null) {\n                ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCameraCapabilities */\n    public void handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1156701, \"\", 0x22 ); // You are too far away to use the map.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.metadata.create_all(bind=db.engine)\nfor model in models:\n    model.metadata.create_all(bind=db.engine)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set('all_users', set(self.module.keys()))\n    def __repr__(self):\n        return '<DummyBackend: %s>' % self.module.keys()\n    def datetime_to_timestamp(self, dt):\n        return int", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.header = self.header\n    _BaseFile.header = _BaseFile.save_header = self.header = self.header\n    _BaseFile.__init__ = MOFile {\n    _BaseFile {__init__, MOFile {\n    _BaseFile.__init__", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      return res\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(method.equals(\"/\") {\n\t\t\t//\n\t\t}\n\t\t// FIXME\n\t\t// FIXME\n\t\t// FIXME\n\t\t// FIXME\n\t\t// FIXME\n\t\t// FIXME\n\t\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(str({'name': u'Builder0', 'result': buildResult}),\n                         (GERRIT_LABEL_VERIFIED, verifiedScore))\n    @defer.inlineCallbacks\n    def test_single_build_succeeded_", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/2008/04/analytics'\n    self.category.term = 'organic", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotatedTypeMirror\n        AnnotatedTypeMirror\n        AnnotatedTypeMirror\n        typeMirror\n        AnnotatedTypeMirror\n        AnnotatedTypeMirror\n        ImmutableTypeMirror\n       ", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       if mat.use_transparency_ramp = sub = mat.use_transparency = mat.use_shader = mat.diffuse_shader = mat.use_transparency = mat.diffuse_shader = mat.diffuse_mat.use_sh", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            mapper16_IRQEnabled = _mapper16_IRQEnabled;\n            mapper16_latch2_data1 = mapper16_latch2data2 = mapper16_latch2data2 = mapper16\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMenuBar.add(m_jPopupMenu);\n            m_jMenuBar.add(m_jPopupMenu);\n            m_jMenuBar.addSeparator();\n            m_jMenuBar.add(jMnuOptions);\n            m_j", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                          max_length=255,\n                          unique=True,\n                          db_index=True)\n    # FIXME AutoSlugField\n    sl", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(False)\n# Enable highlighting for PHP code between <?php ... ?> by default\nlexers['php'] = PhpLexer()\n# Enable highlighting for Python code\napp.add_library(\"sphinx.ext", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   '''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                    FROM flight_log\n                    WHERE registration IN (SELECT registration FROM flight_log_final\n                                            WHERE flight_log_final.reg", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table_create('snapshots').run()\n        conn.table_create('snapshots_active').run()\n        conn.table_create('snapshots_inactive').run()\n        conn", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t\tbreak;\n\t\t}\n\t\tcase \"farmland_headman\":\n\t\t\tbreak;\n\t\tbreak;\n\t\tcase \"farmer\":\n\t\tbreak;\n\t\tcase \"case \"\n\t\tcase \"", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__\n        self.codehead\n        self.codetail\n        self.coderep = ()\n        self.codetail = ()\n        self.coderep = ()\n        self.codetail = ()\n        self.coderep = ()\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, finish, result):\n        self.uuid = uuid\n        self.name = name\n        self.finish = finish\n        self.result =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(context, CrappaLinks.class);\n                intent.putExtra(\"uri\", uri);\n                startActivity(intent);\n            }\n        }\n    }\n}\n\n}\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if primary:\n        raise AssertionError(\"primary in \\\"{}\\\" contains packages\".format(path))\n@behave.when(u\"primary in \\\"{path}\\\" doesn't have any packages\")\ndef step_impl(context, path):\n    filepath = os.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       build_ext = self.get_finalized_command('build_ext')\n        inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -------------------------------------------------\n    # (called by outs", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tlazyPropertyAlias = lazyPropertyAlias = lazyPropertyAlias = lazyPropertyAlias = null;\n\t\t\tlazyPropertyLazyClosure = false;\n\t\t\t\tlazyPropertyLazyClosure = false;\n\t\t\tlazy", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name=' + job_name,\n        '--output=' + log_name,\n        '--log', log_name,\n        '--qos=normal',\n        '--mem=1024',\n        '--time=24:00", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (child) Delegate (parent)\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} : {1}\", item.DisplayName, GetItemValueText(item)));\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex);\n    }\n    Builder.", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\ndef handlePremium(self):\n    self.logDebug(\"Premium handling\")\n    if self.premium:\n        self.logDebug(\"Premium account\")\n        self.logDebug(\"Checking premium status\")\n        res = self.load(self", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Length == 0)\n\t\t\t\treturn null;\n\t\t\t// Find the closest harvestable cell:\n\t\t\tvar closestHarvestablePos = path.FirstOrDefault(loc => claimLayer.CanClaimCell(self, loc)", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcp service failed\")\n                       return False\n                    self.logger.info(\"restarting dhcp service\")\n                    rc = utils.subprocess_call(self.logger, service_name, shell=True", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                state = state.Frequency = state.Frequency;\n                state.Successor = state.Symbol\n                state.\n            }\n            {\n                state.Frequency = (byte)((state.Frequency + 1);\n                state.\n           ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        });\n        /// <summary>\n        /// The Sorted Lexicographic Text VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\",", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   def test_insert_middle(self):\n        self.failUnlessEqual(self.read(b\"abcdefgh\")\n\n\n    self.failUnlessEqual(b\"abcdefgh\")\n        self.failUnlessEqual(self.file(b\"abcdefgh", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Windows 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylabel('Mean (ms)')\n    plt.ylim(csi_95[0], csi_95[1])\n    plt.show()\n    fig.savefig('%s.png' % app)\n    plt.close(fig)", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(\n        self.assertEqual(1, 2)\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Test that L{util.runAsEffectiveUser(\n        \"\"\"\n        \"\"\"\n        test_uidGID,test_UIDGIDSwitch", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(bDrawCross ? Color.GRAY : Color.LIGHT_GRAY);\n\t\t\t\t\tg.drawLine(x, y, x + controlSize - 1, y);\n\t\t\t\t\tg.drawLine", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\n  \"\"\"\n  failures += \"Test failed with k=3\\n\"\n  return failures\ndef simulateClassifier(knn, patternDict):\n  \"\"\"Simulate a classifier test\"\"\"\n ", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = offset - headerSize();\n        final Value value = value.asValue(elementKind());\n        if (value instanceof IntValue) {\n            final int length = ((IntValue) value).asInt();\n            ArrayAccess.writeLength(length, array);\n        }", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            return FileUtils.CombinePaths(ProjectBase.ProjectDirectory, relativePath);\n        }\n        /// <summary>\n        /// Resolves an assembly reference.\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.replace('{', '{{').replace('}', '}}')\n    string = string.replace('{{', '{').replace('}}', '}')\n    return string.format(*args, **kwargs)\ndef str_format_list(string, *args, **", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i1, i17, i26, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, paramArrayOfDouble12,", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name;\n\t\t\tstr += \"\\n\";\n\t\t\tstr += \"Transition: \" + _current", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               new SpellData,\n                    Radius = 120,\n                    Radius = 120,\n                    Radius = 100,\n                    MissileSpeed = 160,\n                    AddHitbox = true,\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n\t/**\n\t * Stubs the code list service.\n\t *\n\t * @param codelistServiceStub\n\t */\n\t@Before\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE)\n    @testlib.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataCategory (\"Data\")]\n\t\t[DataCompilationCondition (typeof (ConstraintIndex).IsAssignableFrom (typeof (Index)))]\n\t\t[EditorBrowsable (EditorBrows", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout.setLayout(self, QtWidgets.setObjectName(\"title_label\")\n        QtWidgets.setObjectName(\"title_label\")\n        self.verticalLayout.addItem(QtWidgets.setObjectName(\"title_label\")\n        self.vertical", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return;\n            }\n            // We have the station with TAF\n            String wxText = \"\";\n            String wxType = \"\";\n            String wxIdent = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_IDENT ) );", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxCount, \"unexpected max count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxTime,", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITS = (ulong)(((ulong)uiCRCITS ^ (ulong)(uiByteValue >> 8)) & 0x00ff) ^ (ulong)(((ulong)(uiByteValue & 0xff) << (8 -", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t}\n\treturn null;\n\t}\n\t}\n\t}\n\t}\n\t/**\n\t *\n\t * @return the module\n\t */\n\treturn getDisp\n\t}\n\tgetDis", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller) };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller),\n                new Ceylon", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(qt.QGroupBox)\n        self.l.setLayout(self)\n        self.connect(self.button)\n        self.l.setLayout(self)\n        self.mainLayout.set\n        self.button.\n        Qwt", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\ttoSet = new Point2D( m_Property.X.ToString(), m_Property.", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object choice : valueChoices)\n                     {\n                        if (choice.equals(value))\n                        {\n                           chosenObj = choice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null)\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t}\n\t\t\n\t}\n\t}\n\t}\n\t}\n\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found that contains the unpriced line\n                                if (unpricedLine.Key < orderPurchaseESD.data", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t// FIXME: this is not thread-safe\n\t\t\t// FIXME: this is not implemented\n\t\t\t// FIXME: this is not implemented\n\t\t\t// FIXME: this is not implemented\n\t\t\t// FIXME: this is", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 origin, Vector2 scale)\n\t\t{\n\t\t\treturn v - origin + scale;\n\t\t}\n\t\tpublic", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key:\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n        self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t    \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tm_client_", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if (type == RequestType.Activity) {\n                return convertToActivityBucketList(list);\n            }\n            if (type == RequestType.Step) {\n                return convertToStepBucketList(list);\n            }\n        }\n        notifyActivityReceived(", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               ReturnType%s%s%s)' %\n                (optional_class, ptr_name, optional_class))\n  PrintLongLine('%s(%s) {' % (function_name, signature))\n  if exec_count:\n    PrintLongLine", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items],\n            indent=4,\n            sort_keys=True\n        ),\n        content_type=\"application/json\"\n    )\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n            }\n            final JoinGroupNode serviceClause = new JoinGroupNode();\n            serviceClause.addChild(serviceGraphPattern);\n            serviceClause.", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.object.is_active:\n            return HttpResponseRedirect(self.get_success_url())\n        return self.get(self.request)\n    def get(self, request, *args, **kwargs):\n        if self.object.is_active:\n           ", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Solve the system\n            _result = Solve(matrix, input, result);\n            // Set the result\n            _result = result;\n        }\n        /// <summary>\n        /// Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat temp;\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           # Build the parent_counts and sample_counts\n    # Note that this is a bitmasked\n    # Build the tree sequence\n    # Build the tree_sequence\n    # Note that this is_index_array\n    # Build the tree sequence\n    # Build the tree_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       self.assertEqual(mapping_json[self.enrich_index]['mappings']['properties']['id']['type'], 'keyword')\n        self.assertEqual(mapping_json[self.enrich_index]['mappings']['properties']['uuid']['type'], 'keyword')\n        self.assert", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsNull)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyBot(orderManager.LobbyInfo.Client, slot.Key", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" (\" + _rootCause.ToString() + \")\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override string ToString(bool includeStackTrace)\n\t\t{\n\t\t\tif (", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + self.data + padding_bytes\nclass HeaderFrame(Frame):\n    frame_type = FrameType.HEADERS\n    defined_flags = FrameFlag.create_flag_set('END_HEADERS')\n    def __init__(self, stream_id, headers", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.ClusteredNodes.Count != cluster.ClusteredNodes.Distinct().Count())\n                throw new InvalidOperationException(\"Clustered nodes are not consistent\");\n            foreach (var node in cluster.ClusteredNodes)\n                if (node.Cluster != cluster", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double step(\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\tnbttagcompound.put(\"color\", color);\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(Context, CommentXmlNode, _returnNode, true);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Loads the return", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Ori", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t(agentConfiguration(agentConfiguration);\n\t\t\t(ClassType)\n\t\tresult = instrumentation.getSensorAssignment();\n\t\tverify(instrumentationApplier());\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t\n\t\t\t\n\t}\n\t}\n\t\n\tpublic Abstraction deriveNewAbstraction(Abstraction(Abstraction)\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           //      if (spillGuts) System.out.println(\"Min \" + start + \" to \" + end + \" with rule \" + r.leftChild + \" to \" + r.rightChild + \" for \" + r.score);\n            if (iPossibleL) {", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           '--custom_file_name\n        )\n        pipe.stdin.write.called_value = ret,\n        pipe.stdin.write.return_value = 'custom_file\n        )\n        pipe.stdin.write.return_value = 'custom_file\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvoid DbgThreadsThreadsChanged(object, eventArgs e) {\n\t\t\t\t\t\t\t\t\t\t\tThreadsVM.ThreadsChanged;\n\t\t}\n\t\tvoid DbgProcessesThreadsChanged(object, int threadChanged) {\n\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", \"r\", String.valueOf, \"sval\", \"rgb\", \"g\", \"sval\", String.valueOf, \"color\", \"b\", String.valueOf( r, \"color\", \"specularcolor\", String.valueOf( \"a\", \"", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nif (reject_wall + reject_jump) > 0:\n  print('Rejected trajectory.')\n  sys.exit()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # We need to check_dims_op.\n    if not isinstance(node.op, node.op.setype.\n    if (not isinstance(node.op, None\n    if all(node.op.idx_or_op.ndim_op.nd", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n    self.fields['groups'].label = \"Select the groups you want to add to this community:\"\n    self.fields['groups'].help_text = \"Select the groups you want to add to this community:\"\n    self.fields['groups'].", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event_key = event.query_key._listen(\n                    def wrap(self, event_key.dispatch_target, event_key.dispatch_target = None\n        def before_compile(self.query_event.before_compile(retval=True)\n        def wrap", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(resource_fs)\n\n\ndef load_xblock_module_class(module_path):\n    \"\"\"\n    Load a module class from a given path.\n    \"\"\"\n    module_path = resource_string(__", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(axis, indices)\n        self.update_filtered_data()\n        # return the new filter\n        return self.current_filter\n    def get_filter(self):\n        return self.current_filter\n    def set_filter(self, data", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\t{\n\t\t\t\tDebug.Assert(Type, XmlType(\"type\")]\n\t\t\tpublic sealed", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            this.data.put(row.get(ID_KEY), new ArrayList<>());\n            termData = this.data.get(row.get(ID_KEY));\n        }\n        for (Map.Entry<String, Collection<String", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.hasItemMeta())\n\t\t\twand.removeItemMetaIncludingSubItems();\n\t\tsuper.onWanded(player, wand);\n\t\tif(isPassiveFlower())\n\t\t\tpassiveDecayTicks = 0;\n", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           THashSet<Node> neighborsInC = new THashSet<Node>(component.getNeighbors());\n            neighborsInC.retainAll(c.getComponents());\n            for (Node n : neighborsInC) {\n                intrinsicCohesion", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   if not flagname in flags[flagname]:\n                        logger.info(\"ERROR: Document %s: Expected flag %s but can not find it\" % (docid, flagname))\n            except Exception as e:\n                logger.info(\"ERROR: Document %s: Problem", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return exDateList;\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @param date the java.util.Date to convert.\n   * @return a Dat", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceComponent = sourceEventBinding.SourceComponent;\n\t\tsourceEventBinding.SourcePropertyName = sourceProperty.Name;\n\t\tsourceEventBinding.TargetEventName = TargetEventName;\n\t", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       // Authorization check\n        }\n        // Authorization check\n        userName = userName = (userName)\n        switchManager.getSpanPortsSpanPorts spanPortsName = (String spanPortsName = spanPortName.get()\n        // Authorization check\n       ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tpublic static class LocalFormName\n\t\t\t{\n\t\t\tpublic static final class Forms\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public int randomInt(int min, int max) {\n        if (min > max) {\n            throw new IllegalArgumentException(\"min must be less than or equal to max\");\n        }\n        return rnd.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_equivalence(old_pred)\n\n        # make_equiv_uri = 'http://opencontext.vocabular\n        #\n        #                    .filter(object_uri=object_uri)\n        # make_uri = 'http://open", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\"indent_options =\n                {\n                buffer.Append(\");\n            }\n            buffer.Append(\"alignment_options = \")\n                .Append(\");\n            buffer.Append(\"indent_options=", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes[byteIndex] = (byte)ch;\n\t\t\t\tbyteIndex++;\n\t\t\t\tif (byteIndex > byteCount)\n\t\t\t\t\tbreak;\n\t\t\t\tposn", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# 00 00 00 00 00 00 00 00 00 00 0 00 00 0 00 00 00 00 00 00 00 a", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t\tpropertiesMap = new Properties();\n\t\t\t\tstream = location.getInputStream();\n\t\t\t\tpropertiesMap.load(stream);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name.equals(nameIn);\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public static int getID(GameType gameType)\n        {\n            return gameType.getID();\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void AceFlagsAndAceFlagsAreSetToNone", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, result_data)\n    def __process(self, result_data):\n        result = self.__result_data\n        result.song = result_data[\"song\"]\n        result.fingerprint = result_data[\"fingerprint\"]\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.Current.HostingOption = ServerSettings.ServerSettings.HostingOption.Value;\n        PhotonEditor.ServerSettings.photonAddress = (PhotonEditor.Current.photonAddress = (PhotonEditor.ServerSettings.ServerSettings.phot", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_msgid = rootLayout.findViewById(R.id.full_msgid);\n        full_msgid.setText(message.id);\n        full_msgid.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis] *\n                              self.ibzk_kc[k, :, np.newaxis, :].T)\n            psit_G = ps", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       String.repeat(\"a\", 255, \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\", \"luse\",", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    //TODO\n\t    }\n\t    }\n\t}\n\t\n\t//TODO\n\t//TODO\n\t//\n\tinternal\n\tinternal void SetRagdoll\n\tpublic void SetBodyPart(BodyPart part, BodyPart part, out BodyPart part\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.layer_type = LayerType.fracture\n        self.name = \"\"\n        self.top = ClassFactory(InterpolatedNodeSet)\n        self.mesh_step = 0.0\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)((num >>> 16) & 0xff);\n        out[outOff + 2] = (byte)", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.source = source;\n            this.valueGetter = new SimpleRegexValueGetter( this.match, this.source,\n                this.objectVariables );\n        }\n\t    private PatternMatch match;\n\t    private Iterable<PatternMatch> source;\n\t", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['@from'] = value\n    elif key == 'fin':\n        node_json['@to'] = value\n    elif key == 'NODE':\n        for child_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n      btn.addMouseListener(this);\n    }\n    x = x-len;\n    return;\n  }\n  private void remove(InternalFrame frame) {\n    if", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    writeRasterCode(p, out);\n    move(out, Util.px2mm(offset.x+toolDiameterInP", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME + \" = \" + Db.Table1.TABLE_NAME + \" AND \" + Db.Table1.ID_GROUP + \" = \" + newId, null, null, null);\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid).GUID);\n                Marshal.FreeHGlobal(m_ptr);\n            }\n        }\n        private void ReleaseUnmanagedPointer(Guid guid, bool disposing)\n        {\n            if (", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URLS\n####################\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue.Count(q => q.Item == itemName) > numberToCancel)\n\t\t\t{\n\t\t\t\tvar item = queue.First(q => q.Item == itemName);\n\t\t\t\tif (item", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    if self.activeTreeview==0:\n        self.fileSystemModels[self.activeTreeview]\n        self.fileSystemModel.setFilter(self.filter)\n        self.filterTxtLine.setText(self.currentDirTxtLine.setText(self.current", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       self.outputs.source.set_outputs.\n        self.outputs.append(self.outputs)\n        self.rule = self.rule\n        if getattr(self.outputs.append(self.outputs.append(self.outputs)\n        self", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #rospy.loginfo(\"Result: %s\", result.success)\n        #if result.success:\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + 1 ]\n\t\t\t\t\t\t\t\t\t+ MULT( hdiv0 * ( chemical[ 0 ][ idx - reactorExtent ] - chemical[ 0 ][ idx ] )\n", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                // timestamp format is required\n                if (timestampFormatFactory.getTimestampFormat(pattern) == null) {\n                    throw JsonException.$(0", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\tParam = qs.NewParameter();\n\t\tParam.DbType = DbType.Int32;\n\t\tParam.ParameterName = \"@obj_id\";\n\t\tParam.Size = 4;\n\t\tParam.Value = 0;\n\t\tqs.", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t}\n\t\tpublic object\n\t{\n\t\tget {\n\t\t\t\t}\n\t\tset(object)\n\t\t{\n\t\t\t\tnew object\n\t\t}\n\t\t}\n\t\tpublic bool IsLazy()\n\t{\n\t\tset", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_keyid = self.key_id\n        if self.key_id\n        if self.authentication == 'enable'\n        if self.authentication == self.authentication == 'enable'\n        if self.authentication == self.authentication\n        if self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(component.edit_info_after_update(after_create, after_update_info_after_update)\n            )\n            self.assertEqual(component.edit_info.update_location, self.assertEqual(component.edit_info_after, self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) 0);\n\n    }\n    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n        addToCharBuff(ch, start, length);\n        updateWithCharBuff();\n    }", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['low'], dict['high'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['low'], dict['high'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['low'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // If the action has a return type, we can stop here.\n            if (api.ReturnParameter != null)\n            {\n                return api.ReturnParameter.ParameterType;\n            }\n            // If the action has a return type, we can stop here.\n            if (api", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           self.on_keyup(entry, keyval, callback=callback)\n            return True\n\n    def on_keyup(self, entry, keyval, callback=None):\n        if keyval in (gtk.keysyms.Tab, gtk.keysyms.", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegAL_PROPERTY_LOCATIONS, newLocations);\n        }\n        return beanProperties;\n    }\n    /**\n     * @author dward\n     */\n    @Override\n    public int compareTo(Object o)\n   ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f.readlines():\n                if line.strip():\n                    raise ValueError(\"Found non-blank line in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e))\n    changed = False\n   ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetMediaSink(\n            [MarshalAs(UnmanagedType.Interface)] out IMFMediaSinkAlt ppMediaS", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return authorizations.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = ROLES + ADD,\n            produces = MediaType.APPLICATION_JSON_VALUE", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if child.tag not in self.expected_data:\n                self.verify_element(child)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies the tag of", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   nodeType,\n        nodeType = node.node = node.node = node.nodeType = node.nodeType = node.nodeType\n        node = node.nodeType = node.nodeType\n        node.ownerDocument = node.nodeName = node.nodeName = node.node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tvalidateEMSSc\n\t\t\t\t(EMSSceneSection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t(TlvEncoder.decodeName(TlvEncoder.getLength(TlvEncoder.getTypeAndLength(TlvEncoder.get(TlvTypeCodes.get\n\t\t  (int type = TlvEncoder.getTypeAndLength(Tlv", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update();\n        }\n        \n        //Updates the player's HUD\n        display.update(", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( colorValue );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n            .addPlayer( action );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error %d: %s\" % (r.status, r.data.decode(\"utf-8\")))\n    else:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"Cannot get filename from Content-Dis", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tPlatform.LogError(e);\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction contains more than one metabolite.\")\n    return [reaction.metabolites.get_by_id(met).formula_weight for met, coeff in reaction.metabol", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return super(UnitManager, self).get_queryset().filter(\n            store__in=get_editor_filter(user),\n        )\n    def get_for_path(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `po", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               else:\n                    self.logger.warn(\"Unexpected ARP opcode {}\".format(arp.opcode))\n                    return\n                if arp.protosrc in self.dstmac_cache:\n                    self.dstmac_cache[arp.prot", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    m_RecentItems.trimToSize();\n    m_RecentItems.ensureCapacity(m_MaxCount);\n    m_RecentItems.removeAll(m_RecentItems.subList(m_MaxCount", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Skills[SkillName.Hiding].Value > src.Skills[SkillName.DetectHidden].Value)\n                return false;\n            return true;\n        }\n    }\n}\n\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public Date getMaxTradePeriodDate() {\n    }\n    public void setDepositTx() {\n    }\n    public void\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t// ComputeFirst(BitArray)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\t\tmStream.ReadData = 0;\n\t\t\t\t\t\tmWriteReadReport.WriteReport(mStream.ReadData = 0x0);\n\t\t\t\tmWriteData.ReadData();\n\t\t\t\tmWriteData(mWi", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order, caseInsensitive);\n\t\t}\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif (o1 == null || o2 == null)\n\t\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           //UPGRADED\n        }\n        }\n        }\n        }\n        }\n        }\n    }\n        //UPGRADED\n        public int AllocUnits(int units)\n        {\n            if (Units2Units2Units2", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       return rate\n        # Add a new rate\n        add_view = navigate_to(self, 'Add')\n        add_view.description.text = description\n        add_view.currency.value = currency\n        for name, value in fields.items():\n            add_view.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Cannot write to shadow buffer.\" );\n\t\t\t}\n\t\t\tif ( _scratchToScratch )\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = \"single_transponder\"\n\t\t\t\tself.sat.value = self.scan_sat.system.system.value = self.scan_sat.system.value = self.scan_sat.frequency.value", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                tcpAcceptFilters.add(filterStr);\n            }\n            return;\n        default:\n            throw new IllegalArgumentException(\"unsupported option \" + optval);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               int p = new byte[0];\n                if (p = (byte)0;\n                if (pixel = 0;\n                break;\n                if (p = p;\n                break;\n                break;\n            }\n                if (p = \n                break;", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar'])\n        self.assertEqual", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        if not self.get_options().get_options().get_degree_dual_flag():\n        if self.get_options().get_options().get_degree_flag():\n        if not self.get_options().get_degree_flag():\n        if", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           // This is a test.\n            //\n            [\n            Assert.AreEqual(\n            {\n            Assert.AreEqual(\n            //\n            .\n            {\n            Assert.\n            //\n            //\n            //\n            [\n            .\n            //\n            .", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\treturn map.keySet();\n\t}\n\t@Override\n\tpublic Collection values() {\n\t\treturn map.values();\n\t}\n\t@Override\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"} Ending auction {0}\", auction.ID.ToString() );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the end of the auction\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return self.env['ir.actions.client']._for_api() \\\n                                                 .with_context(\n                                                     'default_res_id': self.id,\n                                                     'default_composition_sudo': action_message,\n                                                ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow rRow = form.grdResults().getRows().getRowByTestName(orderInvestigationLiteVo.getSpecimen().getSpecimenId());\n\t\tif (rRow == null)\n\t\t{\n\t\t\trRow = form", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(pt.x, pt.y);\n            }\n            Dispose()\n            {\n                if (c != null) c.Dispose();\n            }\n        }\n        /// <summary>\n        /// The index of this item\n        /// </summary>\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       terminal = maker.create_terminal(self, cwd, profile, debug=debug)\n        terminal.on_window_focus_in()\n        terminal.set_title(self.get_title())\n        terminal.set_position(self.get_position())\n       ", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = new StructTypeInfo(\n                    }\n                   \n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    arraySize\n                   ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType; }\n\t}\n\t\t}\n\t\t}\n\t\tset {\n\t\t\t}\n\t}\n\t}\n\t}\n\t}\n\t#region\n\t\tTypeAttributes\n\t\t{\n\t\tget {", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private void", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self.context.set_options(\n            OpenSSL.SSL.OP_NO_SSLv2 |\n            OpenSSL.SSL.OP_NO_SSLv3 |\n            OpenSSL.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox6 = new global::Gtk.Box.Box.BoxChild\n\t\tw6.Position = 0;\n\t\tw6.Position = 0;\n\t\tw6.Position = 0;\n\t\t\tw24.Position = ", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    # Connect the notebooks to the page_num\n    #\n    # Connect the statusbar to the page_num\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_C,\n    \"Go-to-definition\": QKeySequence(Qt.Key_D),\n    \"Go-to-definition", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderClassName='\" + persistenceProviderPackageName + '\\'' +\n\t\t\t\t\", transactionType=\" + transactionType", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileEditable()\n  {\n    return true;\n  }\n  \n  protected boolean isFileNew()\n  {\n    return false;\n  }\n  \n  protected boolean isFileVisible()\n  {\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(10, 683);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(88, ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (enc != null)\n        {\n            if (sb == null)\n            {\n                sb = new StringBuffer(1);\n            }\n            sb.append(enc);\n            if (sb.length() > i + 1)\n            {\n                sb.", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t//\t\t// TODO, 0x0b, 0x0f, 0x0a, 0x0b, 0x0b, 0x0x0b, 0x0b, 0x0", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\tEnumSwitcher.class.getSimpleName().getBytes().length + \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n      return null;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n        return null;\n      if (File.Exists(javaHome + @\"\\bin\\java.exe\"))\n     ", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if re.match(r'%s' % job, l):\n                    comment = re.match(r'%s' % self.ansible, l).group(0)\n                    return [comment, l]\n        # No match found\n        return None\n    def", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier_json = bpy_data_vertex_group = modifier_json['mask_tex_vertex_uv_texture = modifier_texture_map_tex_map_tex_use_channel = modifier_tex_uv_vertex_group", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double emptyRankLikelihood = minLikelihoodForEmptyRank(peptideLength, minLikelihood);\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                rankCounts[i] = emptyRank", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2,", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               elif self.choice.isdigit():\n                    self.packet_number = int(self.choice)\n                    self.packet = self.cap[self.packet_number-1]\n                    self.parser = self.inspect_packet(self.pack", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.fields.Meta', [], {'ordering': 'DESC'}),\n            'object_name': 'django.db.models.fields.CharField', [], {'max_length': '100', 'unique': 'True',", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n            }\n            }\n        }\n        }\n        }\n        }\n        }\n    }\n    }\n    }\n    private void processTypes(QName, SDOType);\n    }\n    private void processTypes(Source xsdSource, boolean return", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.message_ids\n        self.message_ids.\n        if ids:\n        self.get_user_leave_id\n        self.get_user_id,\n        self.\n        self.get_number_of_holidays_", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           this.Enabled\n        }\n        }\n        }\n        /// <summary>\n        ///\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name;\n        }\n    }\n}\n\n}\n}\n\nCan anyone help me to complete the code?\n\nA: I've added the missing code.\n\nA: I've added the missing code.\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            if release:\n                build_path = dev_path\n            else:\n               ", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t//\treturn this.getScore(rule, score, true, predictPositives);\n\t\t\t\t\t\t// Return the score for the best possible score\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashes.Items.Clear();\n                Stashes.Items.AddRange(gitItemStatuses.Select(gitItemStatus => new GitItemStatus(gitItemStatus.Staged, gitItemStatus.Unstaged, gitItemStatus.Modified, gitItemStatus.Deleted", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm1_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm2_index).out_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public class AddIntWebServicesClient;\n        {\n        public AddInt(int a, int b)\n        {\n            //\n            //\n            }\n        }\n    }\n    }\n    }\n    }\n    }\n    //", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eType\" : \n\t\t\t\t\t_eGenericType = (E", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   args.index_file = args.index_file\n    if args.index_file is not None:\n        args.index_file = os.path.abspath(args.index_file)\n    archive_index = load_archive_index(args)\n    args.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.bit_ss, self.bit_ss, self.bit_ss, self.bit_ss, self.bit", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      lab1:\n      do {\n        // (, line 1\n      lab1:\n      do {\n        // (, line 1:\n          // (, line 1:\n          do {\n          if (!(out_grouping(cursor, 1, line", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null) {\n                    o = cls.getDeclaredConstructor().newInstance();\n                    o.setName(channel);\n                    o.setFingerprint(fingerprint);\n                    o.setLastMsg(dins.readObject());", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   # TODO:\n    # self.cert.get_subject_key_usage_ext_name = self.cert.get_extension_name_key_usage(self.crypto_utils.OpenSSL_S\n    def _get_authority_cert_issuer_ordered_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tScopedConnection c = i->second;\n\t\t\t\tif (c.is_valid()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!still_there) {\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   front_seq = unicode_to_utf16(unicode_to_utf16(X.begin)[0], 1)\n    front_seq = unicode_to_utf16(X.begin)\n    #   back_seq = unicode_to_utf", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tGet();\n\t\t\t\tif (la.kind == 30) {\n\t\t\t\t\tGet();\n\t\t\t\t\tif (la.kind == 31) {\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_uom_id.id\n            edi_doc['product_uom'] = line.product_uom_id.id", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions:\n\n        {\n        }\n        {\n            vf1\n        }\n        }\n        }\n        {\n        vf1\n        }\n        }\n        @Suppressed\n        @Override\n        protected void testReadOnly\n        {\n        List", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_property('ID_INPUT_KEY', 1))\n\nThe error message is:\n\n    TypeError: 'bool' object is not callable\n\nThe problem is that the `match_property` method is being called with a boolean value instead of a function. This seems", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId, floorId)\n    data = user.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    array_stations = [\n    'stokes = \"i\"\n        \"stokes = \"i\"\n    \"array_stations = array_stations = [\n        stations = [\n        'W%s\n        'stokes = \"i\"\n        'st", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011;\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String deviceName : devices){\n            TunerList.addTuner.getDevice = true;\n            TunerManager.getTunerList(device);\n        }\n        }\n        }\n        \n        }\n        \n        // DRS 201", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_OPT_IN) {\n      jobs.put(Version.USER_OPT_IN, new UserOptInMigrationJob());\n    }\n    if (lastSeenVersion < Version.MUTE_SYNC) {\n      jobs.", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file is malformed. Lines must have at least two columns.\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[1].", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #return [n for n in self._latex_names(include) if n in source_dir]\n            #return [n for n in self._latex_names(include) if os.path.isfile(os.path.join(source_dir,n)) and n in source", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return Feature,\n    return Feature(cls, feature,\n    def make_it(self,\n        return make_it\n        def make_it(self,\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.port = port\n        self.port = self.port\n        self.port.setter = None\n        self.port = None\n        self.port = None\n        self.port = None\n        self.port = self.port\n        if self.port:\n       ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Action class not found: \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return this.getActionObject(className);\n    }\n    public IAction getActionObject(String className, String dbName", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.assert_kwargs_id,  # pylint: disable=no-name-argument-defined-attribute-in-instance-method-called-with-user-name-defined-argument-called-return-called-data-in-instance-data-id-thread-id", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllCheck(target, source, env)\n        else:\n            raise SCons.Errors.InstallError(\"Manifest file %s does not exist.\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestDllCheck(target,", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           MultiStatus errors = execute(getSelection(), new SubProgressMonitor(getShell(), 100));\n        } catch (CoreException e) {\n            errorStatus[0] = e.getStatus();\n        } finally {\n            if (errorStatus[0] != null)", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic boolean deconfigure(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\treturn true;\n\t}\n\t\n\tpublic String getPrompt()\n\t{\n\t\treturn BaseMeta.", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   #\n    assert f(2014,12,31, 12,30, 12,12,12,30)\n    assert f(2014,1,12,12,12,12,31", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int x\n            {\n            }\n            int z = z;\n            int nmap = m_map;\n            int m_MinTime = m_MinTimeOverride = dmintA = dmintA;\n            }\n            int m_MaxTime = m_", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = session.sendline(suspend_start_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest suspend failed\")\n        else:\n            logging.info(\"Guest suspend succeeded\")\n    def verify_guest_suspend", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(service.invokeAny(new Future<Integer>[] {\n            new Future<Integer>(pub),\n            new Future<Integer>(sub)\n        }));\n        assertThat(rc.get(), is(1));\n        service.shutdown();\n       ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           this.owner.getDecorator().setOnSendRequestAfterParameters(res, destination, r);\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            throw new Pro", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\telse if (value <= 0x7F * 2)\n\t\t\t\treturn (uint)(value & 0xFF);\n\t\t\telse\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.reload_file(self.fm.thisdir.path.get_path.replace(self.fm.thisdir.path\n        self.fm.thisdir.path.path.load_content()\n        self.fm.thisdir.path.get_directory\n", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_NonCOMTest ()\n\t\t{\n\t\t\t// TODO: Implement\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (MissingMethodException))]\n\t\tpublic void CreateInstance_Non", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        self.assertEqual(\n            _actions4appversion", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.send_control_messages(self.control_messages(self.control_messages(self.control_socket.recv_control_messages(self.control_messages(self.control_messages(self.control_messages(self.control_messages(self.control_", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Show specific brand on top of player\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    class Token(object):\n        pass\n\n\n## The execution log ##\n<class 'amoco.vltable'>: class definition\n<class 'amoco.vltable'>: class definition\n<class 'amoco.vltable'>: class definition\n<class '", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       tree_model = ga_Gtk.ListStore(int, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tgrid.setColumn(this);\n\t\treturn ESCAPE_OK;\n\t    }\n\t} while ((parent = parent.getParent()) != null);\n\treturn E", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry[] Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    InventoryEntry invEntry = new InventoryEntry();\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t// Argon2k\n\t\t\t//[0x00, 0x00, 0x2F, 0x38, 0x88, 0xF8, 0x3F, 0xF4, 0", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t// Copy the frame to the queue\n\t\t\t\t\tLayer NextFrameClone = NextFrame.Clone ();\n\t\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           if (num == 0) {\n            if (RIL_REQUEST_GET_LAST_CALL_LIST_CALL_LIST_SIZE) {\n            dc = new ArrayList<DriverCall>();\n            } else {\n            if (num == 0) {\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\t\tif (licence.getName().equals(\n\t\t\t\t\t\t\t\t\t\"CC-BY-SA\")) {\n\t\t\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t\t}", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * ySizeP + x] = newVertices[y * xSizeP + x];\n            newNormals[y * ySizeP + x] = newNormals[y * xSizeP + x];\n            newUV[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\t// Call the API method \"add\" with the parameters \"testInt1\" and \"testInt2\"\n\t\t\t\n\t\t\tObject result = client.call(\"add\", new Object[]{testInt1, testInt2});\n\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionStart()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getBlockSelectionEnd()\n\t\t\t{", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"No object found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0,\n                pixel_y = 0,\n                pixel_x = 0,\n                stactics_videoram[stactics_videbr_d[offset, offset, 0,\n                stactics_e_e,", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n                            }\n                            }\n                            }\n                            }\n                            foreach (\n                            {\n                            }\n                            {\n                            }\n                            {\n                            }\n                    :\n                    {\n                            }\n                    }\n                   ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> allNodes = graph.getNodes();\n        List<Node> measured = new ArrayList<>();\n        for (Node node : allNodes) {\n            if (node.getNodeType() == NodeType.MEASURED) {\n                measured.add(node);\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop.Children[i]);\n                }\n            }\n            return null;\n        }\n        #region Methods\n        /// <summary>\n        /// Find an element with a specified name in the element's children.\n        /// </summary>\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       mobiles[i].DoHarmful(mobiles[i]);\n                    }\n                }\n            }\n            public override void OnAfterDelete()\n            {\n                base.OnAfterDelete();\n                m_Timer.Stop();\n            }\n        }\n   ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(new KeyValuePair<PlayerMobile, WorldChatMessage>(user, msg));\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sUserId, String sComponentName) {\n    return mock.getAvailCompoIds(sUser", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        if (file.isDirectory()) {\n                            final File[] filesInDir = file.listFiles();\n                            if (filesInDir != null && filesInDir.length > 0", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.j.getFutureListener(GenericFutureListener.IMPLEMENTATION);\n\nI'm getting the error:\n\n    java.lang.IllegalStateException: FutureListener already registered\n\nI'm not sure how to get the GenericFutureListener to be registered with", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               num_per = np.zeros_array_t = np.zeros_array = np.zeros\n                \n        # get_periods_list = [t_dict['periods]\n        # get_periods_list = [periods\n        # get_period", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              DatabaseFactory.getIdentityDatabase(context).getUnverifiedRecipientCount(recipients));\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK_BUILD\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                if path not in source_files:\n                    source_file = SourceFile.from_json(tests_root, path, tests, self._path_hash)\n                    source_files[path] = source_file", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private BindingContext createBindingContext() {\n        return new BindingContext(new ImportCustomizer(), new ModuleNode(new Module", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <returns>The timeout in milliseconds</returns>\n        protected virtual int GetTimeout()\n        {\n            throw new NotImplementedException();\n        }", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     transformed_grad = grad[:,0]\n      transformed_grad = transformed_grad * self.y_stds[0] / self.y_means[0] + grad[:,1:] * self.y_stds[0] / self.y_means[0", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (obj == null)\n\t\t\treturn 0;\n\t\tif (this.ordinvcurrentstatus == null)\n\t\t{\n\t\t\tif (obj == null)\n\t\t\t\treturn 0;\n\t\t\tif (this.ordinvcurrent", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        parameter.setParameterCode(\"depth\");\n        parameter.setParameterValue(depth);\n        crawlParameters.add(parameter);\n\n        //EXCLUSION REGE", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (candidate.Calls(sub)\n\t\t\t\t\n\t\t\t(sub, node.NodeNamed(sub)\n\t\t\t)\n\t\t\t{\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = colisionList.Count;\n                        extendedFarmLocation = colisionList.First().To2D();\n                        break;\n                    }\n                }\n               ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t}\n\tprotected void setContext(form, ims.pci.vo.GpContracts.getFormFields(), UI, ims.framework.controls.ComboBox, UI, ims.framework.controls.ComboBox, UI.getControl, ims.framework.utils.getControl", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   # print(frozen_output)\n    # print(re.findall(pattern, frozen_output))\n    # print(re.search(pattern, frozen_output))\n    # print(re.search(pattern, frozen_output))\n    # print(", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r.subs.new().save()\n        self.assertEqual(\n            [get(s) for s in r.subs],\n            [(\"0\", 0), (\"1\", 1)],\n        )\n        self.assertEqual(\n            [get(s", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, b, (x, (x, b, (x, b, t, b, a, t, (t, a, b, b))\n    assert Sum(x, (x, b, (x, b,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tUnityEngine.WWW a2;", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._newItemList = (this._newItemList == null) ? null : ArrayList.ReadOnly(changedItems);\n        }\n        else\n        {\n            this._oldStartingIndex = startingIndex;\n            this._", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           xmlMarshaller.marshal(objectToWrite);\n        }\n        }\n        }\n    }\n    }\n    }\n        }\n        }\n        finally {\n            writer.close();\n        }\n        }\n        }\n        XMLStreamReaderWriterReader\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus2:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//read the size\n\t\t\t\t\tif (bitmap.\n\t\t\t\t\t\t// read the rest of the IconDirEntry\n\t\t\t\t\t\t\t\t// read the rest of the iconDir\n\t\t\t\t\t\t// read the size", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.successor == null) {\n                l.successor.next = JSR;\n                if (l.successor != null) {\n                l.next = null;\n            }\n        }\n        }\n        if (l.successor != null) {", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            var result_of_this_method", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t\t}\n\t\t\n\t\tprivate void setLabelShowLables(boolean value) {\n\t\t\tbtnShowLables.setSelection(value);\n\t\t\tlabelShowLabels.setSelection", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getCurrentValue( driver, \"Image\"\n        self._getFirstValue( \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Channel\"\n        self", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.gss_kex = self._parse_kexgss_continue()\n        self.gss_host = self.gss_continue\n        self.gss_init_ctx = self.kexgss_init_kexg_init()\n        m", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData.getConnectionName(), true);\n            if (treeModel != null) {\n                treeModel.insertNodeInto(node, tree.getRootNode(), tree.getRootNode().getChildCount());\n            }\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           )\n                return result\n        class SalaryRule(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python code, mainly for usability purposes\"\"\"\n\"\"\"            def _get_salary_rule_category(self, category_id):\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = np.zeros\n    mf = np.zeros\n    #OK\n    #Mass function\n    #MfracToMfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #M", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getBounds().getWidth() * 1.1);\n        d.height = (int) (getBounds().getHeight() * 1.1);\n        return d;\n    }\n    /**\n     * Construct text fig\n     *", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container=np.zeros(self.container)\n        for phi_theta_res=0.1,phi_cutting_angle,phi_res=0.1,phi_res=0.1\n        self.container=np.zeros(18)", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t\twindow.Show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t}\n\t\tprivate void OnOrdersCancelFailed(OrderCancelFailedEventArgs args)\n\t\t{\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D, _Hist3D, _Hist(ROOT.TH3D)\n        _post_init__(self,\n                    *args)\n        # ROOT.TH3D,\n        if params[0]['bins', index)\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getPagingOrder() == PagingOrder.REVERSE ? query.first : query.last);\n        }\n    }\n    private Query findQuery(XmppConnection connection) {\n        synchronized (qu", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\")\n                im1L = im1L.convert(\"L\")\n                im1L = im1L.convert(\"L\")\n                im1L = im1L.convert(\"L\")\n                im1L = im1L.", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\treturn ret;\n\t\t}\n\t}\n\tprotected SPEC.PROP getProperty(String key) {\n\t\treturn SPEC.PROP.get(key);\n\t}\n\tprotected void setProperty(SPEC.PROP prop, Object value", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield String(self, \"signature\", \"Signature\")\n    if self[\"block_type\"].value == 1:\n        yield String(self, \"filename\", \"Filename\")\n        yield String(self, \"comment_size\", \"Comments size\")\n        if self[\"", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method will be called when the engine is disconnected.\n\t */\n\t@Override\n\tpublic void", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       env = environ\n        for p, app in self.apps:\n            if p.startswith(environ['PATH_INFO']):\n                return app(environ, start_response)\n        raise NotFoundError('Not found')\nwsgi_app = lambda environ, start_response:", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\n\t\t\n\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                throw new Exception(\"Negative chance is not allowed\");\n            if (chance > 100)\n                chance = 100;\n            if (chance < 0)\n                chance = 0;\n            if", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new enum\n            self.assign_property(child_el)\n            self.assign_property(C)\n            self.assign_child_el\n            self.assign_desc\n            self.assign_desc\n            self.assign_desc\n            self.assign_", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No FOG services were found!\");\n                }\n            }\n        }\n    }\n}\n\n\n// <summary>\n//     Represents a menu item in a menu strip.\n// </summary>\npublic class SubClassMenuItem : MenuItem", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            {\n                return (object)this.ViewState[\"\"]\n            {\n            }\n        }\n        }\n        }\n        }\n        }\n        {\n            get\n        {\n            object obj = this.ViewState[\"\"]\n            {\n            }", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(textureArray.get(textureHash[textureHash];\n                this.vertexBuffer.clear();\n                this.vertexBuffer.\n                this.vertexArray[textureHash];\n                this.vertexBuffer.clear();\n                this.vertexBuffer", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = header\n    return response\n\n@ensure_csrf_cookie\ndef add_p3p_header(view_func):\n    \"\"\"\n    Adds P3P header to the response.\n    \"\"\"\n    @wra", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if not None, return_list, center, upper_left_list, list_of_list, area_extent, center, radius, center, center, center, center, center, upper_left_extent, center, radius, center, center, upper_left_extent,", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(Starting.STATE)\nQUEST.set(\"chosen\", \"? ? ? ? ? ? ? ? ?\")\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(21001)\nQUEST.addTalk", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Immediate = true;\n            Started = false;\n            Attributes = new AttributeCollection();\n            Textures = new Dictionary<String, TextureInfo>();\n            Uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            _sCurProgram", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case\n        self._metabolites = self\n        self._reactions = self\n        self._genes = self\n        self._compartments = self\n    if not hasattr(self, \"name\"):\n       ", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\t\n\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\t\n\t\treturn coll;\n\t}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new DecelerateInterpolator(1.0f));\n        mListView.setLayoutTransition(set);\n    }\n\t\n\t/**\n\t * Fill the list with the data.\n\t */\n    private void fillData() {\n", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (row.IsFieldKeyNull())\n                {\n                    if (row.FieldKey == 0)\n                    {\n                        HighestNumber = 1;\n                    }\n                    else\n                    {\n                        HighestNumber = Math.Max(High", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(pssm, i);\n\t\t}\n\t\t\n\t\t\n\t\tfor (int", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
