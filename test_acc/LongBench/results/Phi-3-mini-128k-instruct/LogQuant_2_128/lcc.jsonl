{"pred": "\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\t\tif ( addNew )\n\t\t\t\t\t{\n\t\t\t\t\tif ( addNew )\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\tif e_u not in roots:\n\t\t\t\troots.append(e_u)\n\t\t\tif e_v not in roots:\n\t\t\t\troots.append(e_v)\n\t\t\t\n\t\t\tfor", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        nframes = a.nframes\n        buffsize = 1024\n        buff = a.read_frames(buffsize)\n        a.seek(0, 1)\n        a.write", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    # Open the video page\n    video_page = VideoPage(self.browser)\n    video_page.open_video_page(video_id)\n\n\n**My current code**\n\n    class VideoPage(UnisubsPage):\n        _URL = \"videos/%", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tWriter writer = new OutputStreamWriter(new ByteArrayOutputStream(), \"UTF-8\");\n\t\t\t\tWriter writer2 = new OutputStreamWriter(new ByteArrayOutputStream(), \"UTF-8\");\n\t\t\t\txstream.marshal(value, writer);\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\nclass _QAsk(object):\n        def __init__(self):\n        self.question = None\n        self.answer = None\n        self.id = None\n        self.category = None\n        self.answer = None\n        self.an_id = _QA =", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map, SR_Utilities.Location.Any);\n                    if (loc == null)\n                        return;\n                    mob.SendMessage(loc.ToString());\n                ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       for (int i = 0; i < 0; i < 1; i++) {\n            if (i.getInt8(), i.getInt8(), i.getInt8());\n        }\n        }\n    }\n    }\n    }\n    }\n   ", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       sp = new JESpace(name, path);\n        spaceRegistrar.put(name, sp);\n        return sp;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   return self.do_get(environ, self.\n        else:\n            response = self.do_get(environ, self.dispatcher.wsdl\n\n    def do_get(self.path, environ,\n    def\n    do_get(self, environ,\n       ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.set_status_as_repeated(status_id)\n        self.webview.set_status_as_repeated_by(status_id)\n        self.webview.set_status_as_repeated(status_id)", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n        }\n    def action_upload_file_to_upload_file(self,\n        }\n    def action_upload_sftp_file(self,\n        }\n    def action_download_files_to_file_path(self", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b), \"Trusted+Untrusted\");\n#endif\n\t}\n}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return self.trust_managers[0].getAcceptedIssuers()\n    def getClientAliases(self, kwargs):\n        aliases = []\n        for trust_manager in self.trust_managers:\n            aliases.extend(trust", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        //request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        //request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        //request.setAttribute(\"domainInfo\", manager.", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__datastream_encoder = self.__encoder\n    def __init__:\n        raise NotImplemented\n    def __data_stream_protocol: DataStreamProtocol\n    def __init__(self)\n    def __setup_datastream_protocol = DataStreamProtocol", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\tif (iter.Clickable) {\n\t\t\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool1);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg == null) {\n                argValues[i] = null;\n        null ", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(UUID.fromString(stringId), DataManager.get(stringId));\n\t\t\t}\n\t\t},\n\t\tFIRM(UUID.fromString(stringId), new Firm(UUID.fromString(stringId),", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\taddField(new FieldEditor(AUTO_SAVE, \"Auto save\", getFieldEditorParent()));\n\t\taddField(new FieldEditor(AUTO_SAVE_TIME, \"Auto save time (in sec)\",\t\t((\t(\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               AddEntry( from, from.VirtualArmorMod );\n            }\n        }\n\t}\n\t}\n}\n}\n\n}\n\n}\n\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_callable(self.session.\n        self.\n        \"\"\"\n        \"\"\"\n        @classmethod\n        \"\"\"\n        def flush_all_entities\n        \"\"\"\n        @classmethod\n        self._flushing:\n        \"\"\"\n        @class:`.Session", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\n\t\treturn keyNames(fields);\n\t}\n\t\t\n\t\t\t\n\t\treturn name\n\t\t\t\n\t\t\t\n\t\treturn fields.get(String);\n\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   if self.method\n    return method\n    @asynchronous\n    return self.data_received\n    return self.data_received\n    return self.request.path\n    @asynchronous\n    return method\n    # Don't use this decorator\n    @asynchronous", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View view in Views)\n\t\t\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.download()\n    ## This is the problem\n    ## I need to call the function download()\n    ## but I need to pass the backoff", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 10)\n                {\n                    if (i.Weapon.SkillBonus.GetSkill(i)\n                    }\n                else\n                {\n                    }\n            }\n            }\n            if (mod == \n               ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(build, builds=platforms))\n    else:\n        builds = android_builds(build, builds=platforms)\n    # Build the button\n    if force_direct:\n        return download_firefox_direct(\n            build,", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBeansList.forEach(", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if ( argument.Parent is VariableDeclarationSyntax ) {\n                    var variableName = ((VariableDeclarationSyntax) argument.Parent).Declaration.Declaration.Identifier.Value.StringValue;\n                    if ( memberList.", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test_usage_key, 'group_key, 'group_id,\n        self.assert_children(self.assert_children.children.children[\n            self.assert_key, self.assert_children(", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfName(\"Encoding\"));\n            tmp.Add(new PdfName(encoding));\n            PdfDictionary dic = new PdfDictionary(tmp.ToArray(0));\n            dic.Put(PdfName.FN, new PdfName(fontName", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new EmojiPageBitmapListener());\n        return task;\n      }\n    }\n    @Override\n    public void onSuccess(final Bitmap bitmap) {\n      if (bitmap != null)", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: add policy profile selection\n    # less than ideal button duplication\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles, sequences);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n            if (Enabled)\n            {\n                writer.AddAttribute(\"onmouseover\", Page.ResolveClientUrl(HoverImageURL));\n                writer.AddAttribute(\"onmouseout\", Page.ResolveClientUrl(HoverImageURL));\n               ", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n    if (compound.hasTagDefine(\"Damage\", new NBTTagCompound()))\n    {\n        damageCooldown = compound.getInt(\"DamageCooldown\");\n    }\n\nI'm not sure what the \"Damage\"", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n}\n/**\n * A <code>Scope</code> that applies to an effect.\n *\n * @author <NAME>\n */\npublic class Scope extends FreeColXMLObject {\n   ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(token, {'itype': 'fqdn'})\n    assert len(i['hits']['hits']) == 0\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(name=\"owner\")\n        self.assertEqual(p.owns[0].name, \"company\")\n        self.assertEqual(p.owns[0], organization)\n        self.assertEqual(p.employees[0], employee", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self.plot_x_range = None\n    if self._interactive:\n                self._plot_y_var_options.\n                self._plot_x_range.extend(zmin=None, z_min=None, z_x_min=None\n                z_", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               toScan.Add(path);\n            }\n            foreach (var path in toScan)\n            {\n                _rootFolderService.Scan(rootFolder, path, ScanPending);\n            }\n        }\n        private void Watcher_Changed(object sender, FileSystemEventArgs", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, k -> write(k, re", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid = self.request['inreplyid = self.request['inreplyid = self.id\n        replycount = self.request['replycount']\n                   \n        replycount = self.request['commentcount", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t\tm_LandBlock = m_LandBlock = new Tile[][][][][][][]\n\t\t{\n\t\t\t\t\tm_ID = m_X;\n\t\t\t\tm_Y = m_Y & 0x &", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = land.GetChannelUri(landData, land.AllowVoice, land.AllowVoice,\n                    channel_uri:\n                    channel_uri = land.GetChannelUri(channel_uri,\n                    channel_uri,\n                    channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEdit.IsNew=true;\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(object", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the time\n        # Read the time column headings\n        # Extract the column_headings = column_headings\n        column_headings = column_headings\n        # Read the time_array\n        # Read the time_coords\n        # Create time\n       ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_create', context, data_dict)\n\n\ndef _check_group_auth(context, data_", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChildren().get(predictionAttribute.getMapping().get(example.getValues().get(predictionAttribute.getIndex()))).getPartitionId();\n\t\t\t\tdepths[i] = node.getPartitionId();\n\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        #endregion // Methods\n    }\n}\n// ---------------------------------\n// ---------------------------------\n// <summary>\n//     A translation unit", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (ch,\n         }\n         if (ch,\n         }\n      }\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired && !StringUtil.isBlank(studyFormName)) {\n          return ValidationResults.REQUIRED_FAIL;\n        }\n        SampleDAO sampleDAO = new SampleDAOImpl();\n        SampleDAO.Sample sample = sample", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Rejecting client {0} because {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tcoll.addAll(Arrays.asList(beans).toArray(new CatsReferralPendingEmergencyNonEDAdmissionListVoBean[0]));\n\t\treturn coll;\n\t}\n\tpublic CatsReferralPendingEmergencyNon", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'views':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  pD[ 'plotName' ] = plotName\n  #Get report type\n  if not 'reportType' in pD:\n    pD[ 'reportType' ] = 'grouping'\n  #Get report type", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot);\n\t}\n\t\t}\n\t\tprivate class BaseBuilderQueueManager\n\t\t{\n\t\t\tpublic BaseBuilderQueueManager(IBotTickModule self, string building", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutput_columns(plan.columns.getColumns());\n        catalogStmt.setOutput_columns_index(plan.columns.getIndex());\n        catalogStmt.setOutput_columns_name(plan.columns.getColumnNames());\n        catalogStmt.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(226, 28);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (dc_parity)parity;\n\t\t\tdcb.StopBits = (dc_stopb", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_edit_profile(self.user)\n    def test_user_with_cobranding(self.user)\n        self.check_edit_user(self.user)\n    def test_user_with_cobrand_with_cobranding", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    #print \"Keep tempdir:\", _keep_tempdir\n    #print \"Keep tempdir:\", _keep_tempdir\n    #print \"Keep tempdir:\", _keep_temp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.APList = self.getInterface(self.iface, self.oldInterface, _(\"Network:\"), _(\"Network:\"), self.oldInterface, _(\"Network\"), self.getInterface(self.iface, _(\"Interface: \"),\n\t\t\tself", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               fCode = fCode.Replace(\" \", \"\");\n                fCode = fCode.Replace(\"%\", \"%25\");\n                fCode = fCode.Replace(\"*\", \"%2A\");\n                fCode = fCode.Replace(\"#\", \"%23\");\n                fCode = f", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  \n  }\n  \n  /**\n   * Load a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   * Commas may be quoted if needed.\n   */\n  public static String[] get", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-180, +180, 45)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        x_points = x_points.flatten()\n        y_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetDataObject(currPacket.ClonePacket());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(SavePacket));", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # get_timbre_pitches_pitch_loudness_timbre_pitch_loudness_file_dirs_dirs\n    for dirs in os.path(os.split(os.path.split(wav_dirs)\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public int GetRefCount(TK", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        }\n        this.SuspendLayout();\n        this.SuspendLayout();\n        this.ResumeLayout();\n        }\n        this.SuspendLayout\n        }\n        this.Suspend", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _BaseContext = type( 'BaseContext', (object,), {\n        '__slots__': (),\n        'GetCurrentContext': GetCurrentContext,\n        'GetCurrentContextIsValid': CurrentContextIsValid,\n        'GetCurrentContextType': CurrentContextType,\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.kEnd);\n        for (final SevenZArchiveEntryEntryEntryEntry);\n    }\n    }\n    private static final int writeUint64(DataOutput header)\n    private void writeUint64(DataOutput header", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (255.0 * (1.0 - (double) (System.currentTimeMillis() - start) / rampDelay));\n                if (alphaLevel == 0)\n                    rampUp = false;\n                if (ramp", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.Should().Be(true);\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        [Test]\n        [Test]\n        public void\n        {\n        [Test()\n        {\n            Prepare", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       ConfigFile = 'G_1' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' + ' +", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) >> 2);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course_updates(self):\n        \"\"\"\n        Create course updates.\n        \"\"\"\n        course_updates = self._course_details\n        if self._updates:\n            course_updates.update(self._up", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\tif(chance < 0) chance = 0;\n\t\t\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        # If it doesn't exist, do nothing\n        # If it does exist, delete the files\n        # If the config directory doesn't exist, do nothing\n        # If it does exist, delete the files\n        if", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.\n\n        this.chkPrivacy.UseVisualStyleBackColor = true;\n        this.chkPrivacy.Size = new System.Drawing.\n       \n        this.chkPrivacy.Size = new System.Drawing.\n        this.", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.add_file(self.archive.name)\n        self.ui_log.info(\"\")\n        self.sos.info(\"\")\n        self.ui.info(self.ui_log.info(self.ui.archive.info.info\n        self", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionBasicFossil):\n    def getSessionId(self):\n        \"\"\" Session Id \"\"\"\n    getSessionId.produce = lambda s: s.getId()\n    def getSessionTitle(self):\n        \"\"\" Session Title \"\"\"\n    get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           throw new MessageImportInvalidPathException(e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), subfoldersCheckbox.isSelected(), messageWriter);\n            }", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Integer) {\n\t\t       \t\t\t\tlayer = (Integer)value;\n\t\t       \t\t}\n\t\t    \t}\n\t    \t}\n\t    \tif (layer != -1) {\n\t\t\tlayer =", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void willBeExecutedOnNewEv\n\n**Java Code for Fetching User Information and Updating the UI**\n\nThe following Java code", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tif (sum == 0) {\n\t\t\tfor (Emotion emotion : emotions)\n\t\t\t\temotion.strength = 1;\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'stages': {\n                    'finished_at':\n                    'started_at':\n                    'job': {\n                    'started_at':\n                    'finished_at':\n                    'job': {\n                    'started_at", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        if ZoneLetter < 'N':\n            print \"UTMtoLL: point is in the southern hemisphere\"\n            return\n    #point is in northern hemisphere\n    #phi1 = phi1Rad\n    #LatRad", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[user.username]))\n    else:", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action(self.action)\n    @property\n    def _validate_license_widget\n    def _validate_license_widget\n    def is_license_approved\",\n    @property\n    def project_reviewed_license_approved_license_", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public String getIdentifier()\n    {\n        return identifier;\n    }\n    /**\n     * @param identifier\n     */\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n            positional_tags = new_positional_tags_list\n            return positional_tags\n    def add_tags(positional_tags):\n        '''\n        Adds the provided tags", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n        }\n    }\n}\n\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer:\nfrom scapy.fields import *\nfrom scapy.layers.obd import OBD_PID00, OBD_PID01, OBD_PID02, OBD_PID03, OBD_PID04, OBD", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           {\n                this.AddSpell(typeof(Reg.Garlic, Reg.Garlic, Reg.MandrakeRoot, 1, 4436, 11, 46, 11, 10438, 111.", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.preserved = True\n        if exc is not None:\n            self._preserved_exc = exc\n        self.app = self.app.app_context()\n        self.app.do_teardown_request()\n        self.app = None\n        self", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_columns=False)\ndef _pubsub_consumer_id,\n        PubSubConsumer.\n    return_columns=session,\n    def_id, needs_columns=False):\n    return _pubsub_consumer", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesForRelease(ResourceEntity resource, ReleaseEntity release) {\n       ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        rot_dir_norm = np.linalg.norm(rot_dir)\n        rot_dir /= rot_dir_norm\n        # Compute the distance from the source to the", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url = self.url\n    def _buildURL(self, self.url, self.url\n        return self._buildURL(url)\n    def _buildURL(self, self.url)\n    def _buildURL(self, self.url)\n    def _", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (null);\n\t\t}\n\t\t\n\t\tpublic static FontUnit FromString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too small for Naccache-Stern cipher.\\n\");\n\t\t\t}\n\t\t\t// check for correct", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].Type, Is.EqualTo(TokenType.String));\n\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].AsJValue.ToString(), Is.EqualTo(\"The outer", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic t1 = getVertexTopic(h, null, null);\n                Topic t2 = getVertexTopic(h % width, null, null);\n                edges.add(new T2(t1, t2));\n            }\n            return edges;\n        }", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    assert np.allclose(data[1],\n    data[1][0]\n    assert np.allclose(data[1][0],\n    [1.08000,\n    [1.080", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStore ts = TripleStore.open(args[0]);\n        TripleStore ts2 = TripleStore.open(args[1]);\n        System.out.println(\"Comparing graphs: \" + args[0] + \" and \" + args[1]);\n       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.102200',\n                    u'AvailabilityZone': 'us-east-1a'}]\n        assert not alert.lowest_spot_price(history, 'g2.2xlarge', 'Windows', '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the consistency of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t\tboolean", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, new[] { vao });\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuff", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_error\n    @property\n    def _model_cov_mat(self):\n        return self._project_model\n    @property\n    def y_data_cov_mat(self):\n        return self._data_cov_mat\n       ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = owningAccount.getCanonicalId.getCanonicalAccounts.getCanonicalId(accounts.getCanonicalId(owningAccounts.getAccounts.getUserId)\n            if (deletedAccounts.getOwnerAccounts", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           // TODO: Add event handler\n        }\n        #endregion\n        #endregion\n        #endregion\n        #region Presentation Model\n        #region Properties\n        private FolderTreeNode _selectedTreeNode;\n        public FolderTreeNode SelectedFolderTreeNode\n        {\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        doReturn(true).when(command).validateTemplateName(any(String.class));\n        doReturn(true).when(command).validateTemplateName(eq(name));\n        assertTrue(is", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Numeric.NegativeButtonPressed.Connect(this.OnNegativeButtonPressed);\n\t\t\tthis.spinbuttonCheckPeriod.Numeric.NegativeButtonPressed.Disconnect();\n\t\t\tthis.spinbutton", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.logger.debug(\n        self.logger.debug(\n        )\n        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldnull);\n\t\t\t//ilgen.Emit(OpC", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   }\n    }\n    public static Builder MergeFrom(ChannelId {\n    {\n    return new Builder(channel_id;\n    }\n    public Builder {\n      get {\n    get { return Builder {\n      return Builder;\n    {\n     ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(i, x);\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code>.\n     * \n     * @param i\n     *            the index of the quad to get.\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(columnName, COLUMNS_COLUM_SORTABLE_LANGUNS_USE_ID\n    }\n    }\n    public static final String[] COLUMNS_SORTABLE_\n    }\n    }\n    public static String[] COLUMNS", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tanimDeltaTime = Time.realtimeSinceStartup - animStartTime;\n\t\t\t\tif (animDeltaTime <= 1f)\n\t\t\t\t{\n\t\t\t\t\tif (inputField.text.Length == 0)\n\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    #endregion\n  }\n}\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"ModifiedBy\"].ToString();\n            }\n            if (lastUser.Length > 0)\n            {\n                Users.Add(lastUser);\n            }\n            if (lastUser.Length == 0)\n            {\n                Users.Add(r", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X > Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y > Game.Renderer.Resolution.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Check if the row is not null\n            if (VerificationResultCollection.Contains(Row, VerificationResult, VerificationColumn, CriteriaCriteriaCodesUsed, VerificationColumn, VerificationCriteria, VerificationColumn, VerificationTable, VerificationResult, VerificationResult,", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content to args.\n                args.Add (filename, null, new Node (new byte[] { buffer.Length }));\n                args.Add (filename, null, new Node (buffer));\n            }\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementsRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n    PayloadRequirementReason.reasons = [reason for reason, strong in self._reasons]\n    PayloadRequirementReason", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t{\n\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\t\n\t}\n\t}\n\t#endregion\n\t\t\t\t\tNotifyRangeAtInterval\n\t\t}\n\t\t\t\t{\n\t\t\treturn CopyRange", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalArgumentException(\"BugInstance \" + bugInstance + \" has a null source line\");\n            }\n        }\n    }\n    /**\n     * @return\n     */\n    public boolean isApp", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\tpublic override void Serialize( GenericReader reader )\n\t{\n\t\t}\n\t}\n\tpublic override void Deserialize( GenericWriter )\n\t{\n\t}\n\t}\n\tpublic override void Deserialize( GenericReader\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"JungleClearW\") &&\n            {\n                if (Menu.GetSlider(\"JungleClearCount\")\n                    {\n                    if (Menu.GetSlider(\"LaneClear", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn GridBagConstraints.get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints\n\t * @param x\n\t * @param y\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        warnings = []\n        for warning in tree.findall('{http://www.dwd.de/dwd-genemetli/}W", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def, field_model_def)\n        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(field_def, field_model", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var stmtTextCreate(namedWindow\n                    :\n                    :\n                    :\n                    :\n                    :\n                :\n                var compiled = namedWindow\n                :\n                    :\n                :\n                :\n                var compiled = namedWindow\n                :\n               ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "  \n    def\n   \n   \n   \n   \n   \n    a\n   \n    a\n   \n    a\n   \n   \n    def __rmul__(self, other):\n       \n    if other == Particle\n       \n        if not isinstance(self, isinstance", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    class website_view(osv.osv):\n        _name = 'ir.ui.view'\n        _description = 'Website View'\n        _columns = {\n            'arch': fields.text('View template', required=True),\n            'website_meta_", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n        if (oldValue != null) {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n    }\n    /**\n     * The key used to store the current renderer in", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert items == [(\"testharness\", \"/\" +", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\t#endregion\n\t}\n}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   private void pushGraph() {\n        return graphQueue.graphQueue.add(methodInvocation.getInlineInfo(methodInvocation.callee.calleeInfo.\n        }\n        pushGraph(methodInvocation.invoke().callee().arguments();\n        }\n        }\n        currentGraph", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.create_pytest_env = self.args.get('pr', self.pytest_bindings,\n        self.pytest_bindings = self.pytest_bindings = self.pytest_bindings\n        if self.args['pr']\n        self", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(states, key, stamp);\n                    if (phi == null) {\n                        phi = mergePhi(states, key, null, null);\n                    }\n                    if (phi !=", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallDataEvent */\n    public void handle", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1159001, \"\", 0x22 ); // You are too far away to use the map.\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBaseCreature.Tele", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   db.Base.metadata.create_all(bind=db.engine)\n\n\n## The execution log of the code above is:\n<class '__main__.Bib0x'>: created\n<class '__main__.Bib1x'>: created\n<class '__main", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set('all_users', set(self.module.get('all_users', set())))\n        self.module.set('all_sessions', set(self.module.get('all_sessions', set())))\n        self.module.set('all", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.header = self.header\n    \"\"\"\n    _BaseFile(self,\n    _BaseFile {\n    _BaseFile {\n    def _BaseFile {\n    def _BaseFile {\n    def __init__(self, **Keyword arguments**: string,\n    _", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      return res\n    if not res['Value']:\n      self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n      return S_OK()\n    else:\n      gLogger.info( \"", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(method.equals(\"/\".toString())\n\t\t\treturn null;\n\t}\n\t}\n\t\t\n\t\tif(method.equals(\"/searchform\")) {\n\t\t\treturn null;\n\t}\n\tif(method.equals(\"/search\")) {\n\t\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(str(info), msg)\n        result = yield self.run_fake_single_build(gsp, buildResult, resultText,\n                                                    expWarning=expWarning)\n        self.assertEqual(result, str(info))\n        self", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.scheme = 'http://www.google.com/schemas/atom/core'\n    self.category.term = 'test'\n    self.assert_(self.category.scheme == 'http://www.google.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotatedTypeMirror\n        AnnotatedTypeMirror,\n        AnnotatedTypeMirrors.\n        private AnnotatedTypeMirror\n        typeMirror\n        typeAnnotatedTypeMirror\n        private Annot", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat.draw_header(mat.use_transparency and mat.use_transparency and mat.use_diffuse_shader = mat.diffuse_shader = mat.diffuse_intensity = mat.diffuse_intensity.use_transparency", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            if (_engine.Palette.\n            _mirroring = _engine.Mapper10_Latch1 = mapper10_Latch2\n            mapper10_latch2 = mapper10_latch2", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add(m_jMenuBar.add", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = unique_slug(AnnouncementTwitterCrossPublication, self, 'slug', 'twitter_pub_date', 'twitter_pub_date')\n    self.slug = slug\n    super(Announcement", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['.php'] = PhpLexer(encoding, startstring='<?php ', filenames='.php')\n# Enable highlighting for Python code by tuning Pygments' Python lexer\n# See also http://www.sphinx-doc.org/en", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   ''', (groupID, sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration))\n\n#\n# This function since I can't find a library function that does what I want\n#\ndef time_add(", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       r.db_create('projects', if_not_exists=True).run(conn)\n        r.db('projects').get(project_id).update({'last_snapshot': timestamp}).run(conn)\n    # Close the connection\n    conn.close()\ndef db", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\t// Deian's skill_\n\t\t\t\t// I'm not sure if I'm going to be able to play a lute?\n\t\t\tbreak;\n\t\t\tbreak;\n\t\tbreak;\n\t\tbreak;\n\t\tbreak;", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__\n        self.codestr = '\n        Response.__init__(self, cmd, resstr, datalines):\n        self.code\n        self.codestr = 'codehead, resstr, resstr, datalines):\n        self.", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    def __init__(self, name, status, duration, result):\n        self.name = name\n        self.status = status\n        self.duration = duration\n        self.result = result\nNext line of code:\nclass TestCase:\n    def __init", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(context, CrappalinksActivity.class);\n                intent.putExtra(\"uri\", uri);\n                startActivity(intent);\n            }\n        }\n    }\n}\n}\n\n\n## Your task:In the given code, identify and correct the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        raise AssertionError(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name,", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_inputs = self._bytecode_filenames(inputs)\n        inputs.extend(ext_inputs)\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -----------------------------------------------\n    # (called by outsiders)\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tlazyPropertyAlias = lazyPropertyAlias = table = table = result = null;\n\t\t\t\t\tif (result = null;\n\t\t\t\tlazyProperties = new object[] {\n\t\t\t\t\t\tresult = table.LazyProperties = table", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--output=' + log_name,\n\n    ]\n    return cmd_arg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (child) Delegate (parent)\n        [RolesRequired(\"Admin,SaveEventDelegate\")]\n        [RolesRequired(\"Admin,ListEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} : {1}\", item.DisplayName, GetItemValueText(item)));\n                    }\n                    else\n                    {\n                        throw new Exception(\"Unknown value type\");\n                    }\n                }\n                else\n               ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"show\", \"downloadType\": \"direct\"}, decode=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tprivate CPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tif (self.Trait<IN", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting DHCP service failed\")\n                       return False\n                    else:\n                       self.logger.info(\"restarting DHCP service succeeded\")\n                return True\n            else:\n                self.logger.error(\"dhcp module", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                //\n            }\n            }\n            {\n                state.\n            }\n            {\n                state.\n                state.Frequency = (state.Frequency;\n                state.Symbol = state.Symbol;\n                state.Frequency = (state.", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        });\n        /// <summary>\n        /// The Sorted Tag VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", true, true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\n\t\t\t\n\t\t\tstring selectedEventName = \"\";\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//\n\t\t\n\t\n\t\t\n\t\n\t//", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(b\"abcdefghij\", self.read(b\"abcdefgh\")\n\n\n    def test_insert_bytes_before_middle(self, b\"abcdefgh\")\n        self.failUnlessEqual(b\"abcdefghij\")", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    plt.plot(cr['combined'][app][test][stat]['durations'])\n    plt.show()\n    # TODO: add error bars\n    # TODO: add", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self, 'seteuid(1, 1, \n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        self.assertEqual(\n        \"\"\"\n        test_uid, gid, uid, gid, uid", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\t\tg.fillRect(x, y, controlSize, controlSize);\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  \"\"\"Simulate a classifier test.\"\"\"\n  numWinnerFailures = 0\n  numInferenceFailures = 0\n  num", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset, value);\n    }\n    @INLINE\n    public final int getArrayLength() {\n        return readLength(this);\n    }\n    @INLINE\n    public final int getArrayLengthUnscaled() {\n        return getArrayLength();", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            return FileUtils.CombinePaths(ProjectBase.ProjectDirectory, relativePath);\n        }\n    }\n}\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   string = string.format(*args, **kwargs)\n    return string\n\ndef str_format(*args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format()\n    \"\"\"\n    string = '{' + ''.join(['{%s' for _ in", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i17 = i16;\n      }\n      i15 = 1;\n      i14 = i1;\n      if (i1 - 1)\n      {\n        i15 = i1 * i1;\n    }\n      }\n     ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"\\n\";\n\t\t\t\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// A state in the", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                {\n                    Slot = SpellSlot.R,\n                    Delay = 250,\n                    Radius = 1,\n                    Delay = 1000,\n                    Type = SpellSlot.Slot", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE,\n                          close_f", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataObjectMethod (true)]\n\t\t[DataObjectMethodProvider (typeof(System.ComponentModel.Component))]\n\t\t[Browsable (false)]\n\t\tpublic Index Index\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.formLayout = QtWidgets.FormLayout()\n        self.\n\n        self.\n        self.\n        self.\n        self.\n        self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               setText( R.string.taf_no_taf_found, layout );\n            }\n            stationId = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_IDENT ) );\n            mLastForecast =", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxTime, \"unexpected max time\");\n\t\t\tAssert.AreEqual(string.Format(\"select * from Continent", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctab[(uiCRCITTSum & 0x00FF) ^ uiByteValue];\n            }\n            return (ulong)(((ulong)uiCRCITTSum", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t/**\n\t *\n\t * @return\n\t * @return\n\t */\n\t@Override\n\tpublic void getDisguiseModule() {\n\t\treturn null;\n\t}\n\t/**\n\t *", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[0];\n        }\n        return new IHyperlinkDetector[] {\n            new CeylonHyperlinkDetector(controller, editor, sourceViewer),\n            new CeylonContentAssistant(editor, completionProcessor),\n           ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.mainLayout.addWidget(self.button)\n        self.mainLayout.setLayout(self)\n        self.setLayout(self)\n        self.l.addWidget(self.mainLayout)\n        self.connect(self.button.\n        self.setLayout", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Current location\n\t\t\t\t{\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\tshouldSet = false;\n\t\t\t\t\tshouldSet = false;\n\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object choice : valueChoices)\n                     {\n                        if (choice.equals(value))\n                        {\n                           result = value;\n                           break;\n                        }\n                     }\n               }\n            }\n            else\n            {\n              ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int i=0; i<numStates.length.\n\t\t\tfor (int j=0; j<numStates; j<numStates.length)\n\t\t\tfor (int k=0; k<numStates; k++){\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found\n                                if (orderIndex >= 0 && orderIndex < esDocumentSale.dataRecords.Length && order", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t// FIXME: get correct state\n\t\t\tstate = CommunicationState.Created;\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic void Begin {\n\t\t\t// FIXME: get correct state\n\t\t\tstate = CommunicationState", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n        //TODO\n", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.RelativeTo (viewport);\n\t\t}\n\t\tpublic static", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key:\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n        self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if (type == RequestType.Activity) {\n                return convertToActivityBucketList(list);\n            }\n            if (type == RequestType.Step) {\n                return convertToStepBucketList(list);\n            }\n\n        }\n        notifyActivityReceived", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%s)' % (function_name, ')' * exec_count))\n  PrintLongLine('%s %s(%s) {' % (parent_class, function_name, 'void' if exec_count == 0 else 'void'))\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        mimetype='application/json'\n    )\n    return response\n\ndef range_item_dict(item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */, DEFAULT_CONTEXTS));\n            }\n            whereClause.addChild(whereGraph);\n        }\n    }\n    \n    @Test\n    public void test() {\n        final ASTContainer ast = new AST", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super(UserDetailView, self).get_context_data(**kwargs)\n        context[\"set_is_active", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Set the initial residual\n            _iterator.SetResidual(result);\n            // Set the initial guess\n            _iterator.SetGuess(result);\n            // Set the initial error\n            _iterator.SetError(result);\n            // Set the initial preconditioned resid", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left].add(sortedNumbers[right]).divide(new Apfloat(2));\n\t\t\tApfloat[] medians = new Apfloat[]{median, median};\n\t\t\treturn medians;\n\t\t} else {\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           # Build the parent_counts and parent_counts\n    # Note that_ne_sample_count\n    # Note that the number of times\n    # Note that_count\n    # parent\n    # Note\n    # Note\n    # parent\n    # Note\n    # Note", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result['mapping'] = mapping_json\n        return result\n    def test_enrich(self):\n        \"\"\"Test whether the enriched indexes are properly populated\"\"\"\n        if not self.enrich_backend:\n            return {'enrich': 0}\n        self.en", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsNull)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyBotInfo(orderManager.LobbyInfo.Client, botController", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn string.Format(\"{0} ({1})\", this.Message, this._status);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.Message;\n\t\t\t}\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       self.data = frame_payload[2:]\n        self.data += b'\\x00' * (MAX_FRAME_SIZE - len(self.data))\n        return self.data\nclass DataFrameWithEndStream(DataFrame):\n    frame_type = FrameType.", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.ClusterId != cluster.ClusterId)\n                throw new InvalidOperationException(\"Cluster \" + cluster.ClusterId + \" has inconsistent cluster id\");\n            foreach (var node in cluster.Nodes)\n                if (node.ClusterId != cluster.Cl", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKin\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tnbttagcompound.setCompoundTag(\"display\", new NBTTagCompound());\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(Context, this, typeAttribute.Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_returnType = null;\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t\t\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrack", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tassertTrue(classType.isClass());\n\t\tresult = instrumentation.getClassType());\n\t\tassertThat(result);\n\t\t}\n\t\tverify(instrumentationApplier());\n\t\tverify(instrumentationApplier().getSensorAssignment());\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit()\n\t\t\t\t\t\t\t\treturn false;\n\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           float pS = iScore[start][end][r.leftChild];\n            if (pS == Float.NEGATIVE_INFINITY) {\n              continue;\n            }\n            int min2 = wideRExtent[end][r.leftChild];\n            if", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync_file_list_file_processor_fn\n        pipe_stdin_file.write.close_called_once_with_file_path\n        ]\n        pipe.stdin.close_called_once_called_once_called_pipe_stdin\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tthreadThreadsChanged(threads => {\n\t\t\t\t\t\t\t\tif (thread.IsRunning)\n\t\t\t\t\t\t\t\t\t\t\t\tThreadsVM.Threads.Clear();\n\t\t\t\tif (threadState.Threads.Threads", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", \"color\", \"color\"\n\t\twriter.attribute( null, \"color\", \"color\", \"sval\", \"color\"\n\t\twriter.endTag( null, \"name\", \"color\"\n\t\t\"rgb\"\n\t\t", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       return node.outputs[0]\n    if isinstance(node.outputs[1], node.inputs[1].ndim\n        if all(Subtensor.merge(node.ndim == ndim == ndim(node.nd.outputs[0].nd", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].queryset = self.fields['groups']\n    self.fields['groups'].required = False\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple()\n    self.fields['groups'].help_text = \"Select the groups you want to", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event_key = event.\n                def before_init_event.\n        query\n        def wrap(self,\n        def before_compile(self, query=None,\n        if not raw=False\n        def wrap(query, event_key.\n            def wrap(event_", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(xml_object, system)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(self.data, self.current_filter)\n        self.update_filter(self.data, self.current_filter)\n        self.update_filtered_data()\n        self.update_filter(self.data, self.current_filter)", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t\t{\n\t\t\t\tCodeEmitType(TypeWrapper typeWrapper : TypeWrapper : TypeWrapper : CodeEmitter\n\t\t\t{\n\t\t\t{\n\t\t{\n\t\t\t}\n\t}\n\t}\n\t[XmlType(\"type)\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objTypeBox.SelectedIndex = 0;\n\t\t\tthis.objTypeBox.Location = new System.Drawing.Point(104, 208);\n\t\t\tthis.objTypeBox.Size = new System.Drawing.Size(1", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       self.assertEqual(c.branch, \"master\")\n        self.fail(\"Expected 'master', got %r\" % (c.branch,))\n    def testMsgS6(self):\n        c = self.get(\"mail/syncmail.6\")\n        self.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos().getX(), supertile.getPos().getY(), supertile.getPos().getZ())) {\n\t\tif(supertile.getWorld().isBlockLoaded(supert", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           THashSet<Node> neighborsInC = new THashSet<Node>(component.getNeighbors());\n            neighborsInC.retainAll(c.getComponents());\n            float nbNeighborsInC = neighborsInC.size();\n           ", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if not docid in flags[flagname][version][docformat]:\n                                logger.info(\"ERROR: Document %s: Expected flag %s but not found\" % (docid, docformat))\n                                logger.info(\"ERROR: Document %s: Expected flag %", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates a {@link Datable} instance for the start date of the specified period.\n   * @param period the period for which the start date has", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = sourceEventName;\n\t\tsourceEventBinding.DataTarget = targetEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEvent", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       switchManager = (containerName) (containerName);\n        // Authorization check = DaylightWebUtil.getNodePortsJsonBean)\n        for (String containerName) {\n        // Authorization check\n        }\n        // Authorization check = (String userName)\n        String", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tpublic static class Forms;\n\t\t\t\t\n\t\t\t\t\t\t\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\npublic static void main(String[] args) {\n    OMEData omedata = new OMEData();\n    List l = omedata.getRandom(null);\n    System.out.println(l);", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_label_uri = 'http://open_predicate_uri\n\n\n\n        return:\n\n        la_obj = None\n        \"\"\"\n        \"\"\"\n        la_obj = None\n        \"\"\"\n        \"\"\"\n        return\n        \"\"\"\n        return\n       ", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           //\n            buffer.Append\n            buffer.Append(\"\n            {\n                buffer.Append\n                buffer.Append(\"Cell_cell_options=\n                .\n                buffer.Append(\"\n                buffer.Append(\"\n                .Align\n                .Append(\n                \"\n                .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes[byteIndex++] = cjkToJis [ch - 0xFF60 + 0xFF01];\n\t\t\t\t++byteIndex;\n\t\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# 00 00 00 00 00 00 00 00 a(4) a(4) a(4) {10 00 00 00 00 0 00 a(4) {0", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name == \"creative\";\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public int getID()\n        {\n            return this.id;\n        }\n        /**\n         * Returns the name of this game type\n        ", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl.Purge();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (ControlFlags.SelfRelative, csd.ControlFlags);\n\t}", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, results)\n    def __process(self, results):\n        self.__idle(self.__idle, self.__idle, self.__idle, self.__idle,\n                   self.__idle, self.__idle, self.__", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.Current.ReApplySettingsToast(CurrentLicense = EditorGUIState = GUIState.photonServerSettings();\n        {\n            GUILayout.SetProperty(GUIState.Settings.ServerSettings.ServerSettings.photonServerSettings;\n       ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_repto = rootLayout.findViewById(R.id.full_repto);\n        full_repto.setText(Html.fromHtml(message.repto));\n        full_repto.setMovementMethod(LinkMovementMethod.getInstance());\n        full", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis] *\n                             self.ibzk_kc[k, :, np.newaxis, np.newaxis])\n            phase_cc = np", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       utkastService.createNewUtkastRequest.setPatient(new UtkastRequest.createNewDraftRequest(intygsTyp.luse.createNewDraftRequest.newRequest(new UtkastRequest.newRequest(new UtkastRequest.createNewD", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\tforeach(ILNode bb) {\n\t\t\t\t\tforeach (ILNode block) {\n\t\t\t\t\tILBlocks\n\t\t\t\t\t\tILBlocks\n\t\t\t\t\t\tILBlocks\n\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    // TODO\n\t\t\t\n\t}\n\t}\n\t\n\t\n\t//\t\n\t//\n\t\t//\n\t//\t\n\t//\t\n\t//\n\t//\t\n\t//\t\n\t//\t\n\t//\n\t//\t\n\t//\t\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   _not_serialized_attrs_ = ['fracture_type', 'fracture_id', 'fracture_name', 'fracture_color', 'fracture_mesh_step', 'fracture_mesh_step_min', 'fract", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)(num >>> 16) & 0xff;\n        out[outOff + 2] = (byte)(num", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.source = source;\n            this.valueGetter = new SimpleRegexValueGetter( this.match, this.source,\n                objectVariables );\n        }\n        private final Iterable<PatternMatch> source;\n        private final PatternMatch match;\n        private final", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'SEUIL':\n        slice_json_json['threshold'] = transform_values_xml_json_to_json(value, format = 'date')\n    elif key == 'VALEUR':\n        slice_json_json['valeur'] = transform", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n    }\n  }\n  public void remove(InternalFrame frame) {\n    if (frame!=null) {\n      if (buttons.containsKey(frame)) {\n        btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME + \" = \" + Db.Table1.GROUP_NAME + \" AND \" + Db.Table1.GROUP_NAME + \" = '\" + ((Spinner) layout.findViewById(R.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.StructureToPtr(this, m_ptr, disposing);\n            }\n            else\n            {\n                Marshal.FreeHGlobal(m_ptr);\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        public void Dispose()", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL = '/accounts/login/\nAUTHENTICATION_BACKEND = None\n#\n####################\n#\n############\n#\n############\n#\n############\n#\n#########\n#########\n#\n#\n#########\n#\n#########\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue.RemoveRange(0, numberToCancel);\n\t\t}\n\t\tpublic void BuildUnit(Actor actor, bool force = false)\n\t\t{\n\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n        infoText += \" files\"\n        infoText += \" files\"\n        infoText.append(\" files\")\n        infoText += \" \" + str(numberOfFiles)\n        self.showCurrentDir.setText(self.currentDir)\n        self.showCurrentDir\n        self", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       if self.c_build.target = self.target = None\n        # TODO\n        #\n        def post()\n        def post()\n        # TODO\n        \"\"\"\n        def run_post()\n        def\n        \"\"\"\n        def run_post()\n        \"\"\"\n       ", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        rospy.loginfo(\"Result: %s\" % result.success)\n        if result.success:\n            rospy.", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + 1 ]\n\t\t\t\t\t\t\t\t\t- chemical[ 0 ][ idx + 1 ]\n\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnNames.add(name);\n                columnTypes.add(type);\n                break;\n            case ColumnType.TIMESTAMP:\n                DateLocale timestampLocale =\n                        locale == null\n                                ? this.dateLocale\n                                : dateLocaleFactory.", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\tParam = qs.NewParameter();\n\t\tParam.DbType = DbType.Int32;\n\t\tParam.ParameterName = \"@obj_id\";\n\t\tParam.Size = 4;\n\t\tParam.Value = entity.obj_id;\n\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tpublic HbmPropertyMapping(MemberExpression<MemberExpression>\n\t\t{\n\t\t\tpublic void SetPropertyValue(object member, HbmProperty)\n\t\t{\n\t\t\tthrow new MyPropertyMapper(member, Columns, HbmProperty)\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.key_id\n        if self.authentication = self.authentication\n        \"\"\"\n        if self.authentication = self.ntp_auth_enable = self.state\n        \"\"\"\n        if self.state = self.ntp_auth_keyid = \"ntp_enable", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.edit_info_location, edited_location, edited_user_id, after_user_id\n        )\n        # test_course_key,\n        )\n        # test_course_key,\n        # pylint,\n       ", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((TEXT_CODE & 0xff) << 24));\n\n    }\n    public void ignorableWhitespace(char ch) throws SAXException {\n        addToCharBuff(ch);\n        updateWithCharBuff();\n   ", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['value", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           if (api.ParameterDescriptions.Count == 0)\n            {\n                return null;\n            }\n            // If the action has no parameters, return the type of the return value.\n            if (api.ActionDescriptor.IsNonDependentParameterFree())\n            {\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if self.on_quit_cell(record, column.name, value, callback=callback):\n                    gobject.idle_add(self.set_cursor, path, self.next_column(path, column), True)\n                    return True\n        else:\n           ", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.setPropertyValue(LegacyConfigPostProcessor.PROPERTY_PROPERTIES, newLocationList);\n        }\n        return beanFactory.getBeanDefinition(LegacyConfigPostProcessor.BEAN_NAME_REPOSITORY_PROPERTIES).getPropertyValues", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n        except (IOError, ValueError) as e:\n            module.fail_json(msg=str(e))\n        finally:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)]\n            Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)]\n            Guid riid,\n            [In, MarshalAs(UnmanagedType.LPStruct)]\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return spm.addAclKey( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @RequestMapping(\n            path = UPDATE,\n            method = RequestMethod.POST,\n            produces = MediaType.APPLICATION_JSON_VALUE )\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies the tag of the element matches what is expected.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.nodeType == Node.nodeType == Node.nodeType == Node.nodeType == Node.ELEMENT_NAMESPACE, node.nodeType == Node.ELEMENT_NODE_NODElement = None\n        node.nodeType == Node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t}\n\t\t\t\tvalidateEMSSc\n\t\t\t\tvalidateEMSSc\n\t\t\t\tscenePatientCount\n\t\t\t\ttest\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonScenePatient\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\tencoder.writeTypeAndLength(encoder.getLength(encoder)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tencoder.\n\t\t\t\t\t\t\t\t\t\tencoder.setTypeAndLength(encoder.getLength", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the player's HUD\n        display.update(delta);\n        \n        //", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        EbRegistration registration = new EbRegistration( action );\n        EbRegistration.addRegistration( registration );\n        EbGameJoin.addEbGameJoin( EbRegistration.addRegistration( registration ) );\n        EbGameJoin.add", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error: %s\" % r.data.decode(\"utf-8\"))\n    if r.status != 200:\n        raise RuntimeError(\"Error: %s\" % r.data.decode(\"utf-8\"))\n    filename = get_filename(r", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\tPlatform.LogError(SR.ErrorMergeOrders, e);\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   return [elem for elem in elements if elem != 0]\n    c_elements = [\n        elem\n        for elem in elements\n        if elem != 0\n    ]\n    return c_elements\n\n    raise ValueError(\"Reaction's objective cannot be based on multiple re", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return (\n            super(UnitManager, self).get_queryset().filter(\n                path__startswith=pootle_path,\n                store__is_public=True,\n                store__is_locked=False,\n                store__is_new=False,\n               ", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='city',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"ARP request: {}\".format(str(poxpkt)))\n                self.logger.debug(\"ARP request: {}\".format(str(poxpkt)))\n                self.logger.debug(\"ARP table: {}\".format(self.dstmac_", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() > m_MaxCount) {\n      m_RecentItems.remove(m_MaxCount - 1);\n    }", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.IsFriend(src))\n                return true;\n            if (target.IsFriend(src.Guild) || target.IsFriend(src.Alliance) || target.IsFriend(src.Guild) || target.IsFriend(src.", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   // TODO:\n    }\n    //\n    //\n    //\n    //\n    public void\n    public void\n    //\n    //\n    //\n    //\n    public void\n    //\n    //\n    public void\n    //\n    //\n    //\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tmStream.ReadData(int)\n\t\t\t\tmStream.ReadData(mReadData.ReadDataType(mWiWiReport.WriteReport(mReadData(0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic MskJointVoComparator(int direction, boolean caseInsensitive)\n\t\t{\n\t\t\tthis.direction = direction", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueUnits2Units(i1);\n            _loUnit = _loUnit2Units2Indx = _loUnit2Units2Units[i1];\n            _units2Indx2Units[i - 1];\n            _units", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = self.create_view(RatesView, wait_for_page_load=True)\n        view.is_displayed\n        view.title.text == 'Compute Chargeback Rates'\n        view.currency.value == 'USD'\n        view.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( _lockedToScratch )\n\t\t\t{\n\t\t\t\tif ( _scratchSize == 0 )\n\t\t\t\t{\n\t\t\t\t\tthrow new AxiomException( \"Cannot write to scratch buffer, it is not locked.\" );", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.scan_sat.system.value = self.scan_sat.value = getConfigEntry(_(\"Satellite\"), self.scan_s.frequency)\n\t\tself.list.append(self.tuning_type.value = self.tuning_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CNT:\n            tcpKeepAliveCnt = (Integer) opt", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               int p = (PdfNumber(p = 0;\n                // DecodePredictor(dataStream.Seek(dataStream.Seek(dataStream.Seek(dataStream.Seek(dataStream.Seek(dataStream.Seek(dataStream.Seek", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ('foo', 'bar'))\n        self.assertEqual(s.get_interface_decomposed(), ('foo', 'bar'))\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        for pos_xx in xrange(len(self.get_options().get_options, self.get_options.get_options())\n        for pos_xx in xrange(self.get_options.get_options().get_options().get_options().get_options().", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n            // This is a test\n            // This is a test\n            [\n            .\n            // This is a test\n            [Test]\n            {\n            // This is a test\n            [\n            Assert.AreEqual(\n                // This is a", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object remove(Object key) {\n\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object getFirst() {\n\t\treturn getFirstElement();\n\t}\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"} Accounting for return. Account : {4}\", auction.ID.ToString(), auction.ItemCount, m.Name, m.Serial, m.AccessLevel, m.Account.Username);\n\t\t\t\tm_Writer.WriteLine", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n\n    @api.model\n    def attendance_action_change(self):\n        return {\n            'name': _('Attendances'),\n            'help': _(\n                'You can check in or out from your attendances.'),\n            '", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow r = form.grdResults().getRows().get(orderInvestigationLiteVo.getSpecimenIndex());\n\t\tif (r == null)\n\t\t{\n\t\t\tr = new grdResultsRow();\n\t\t\tr.", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = c.ReadToStruct(0, typeof(POINT));\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The index of this item\n        /// </summary>\n        public int Index { get { return", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_tab(self, cwd, profile)\n        self.set_title(self.title.get_title())\n        self.set_title(self.title.get_title())\n        self.set_title(self.title.get_title", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = new Type( typeArraySize, arraySize, UnmanagedType, ManageType = null;\n                    }\n                    TypeInfo = new StructType(managedType, arraySize = TypeArrayFragment.Length = sizeArray, ManagedType = nameFragment;\n                    mar", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType;\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\tpublic bool IsNotNullable {\n\t\tget {\n\t\treturn false;\n\t}\n\t}\n\tset {\n\t\treturn", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self._context = OpenSSL.SSL.Context(protocol)\n        self._context.set_options(\n            OpenSSL.SSL.OP_NO_SSLWITH_INSECURE_SERVER_CERT_STORE,\n        )\n    def load_verify_loc", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox5;\n\t\t\t// Container child vbox5\n\t\tthis.vbox5\n\t\t\tthis.vbox5.Add (this.vbox3);\n\t\t\tthis.vbox3.Add (this.vbox3);\n\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.connect(\"unrealize\", gbook.get_page_area.get_children()\n    gtk.unrealize(gtk.page_area.get_children())\n    gtk.unrealize\n    #\n    #\n    gtk.un", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_Shift + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_CTRL + Qt.Key_Tab_", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void createEditPart(EditPart editPart)\n  {\n    super.createEditPart(editPart);\n    editPart.setZoomManager(getZoomManager());\n  }\n  \n  protected void setEditPart(", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(10, 863);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(82, ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n/**\n * Marker class for content that has been marked for editing\n */\npublic class MarkedContent\n{\n    private String contentId;\n    private String contentTitle;\n    private String markerId;\n    private String form", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t//\tbyte[] digest = new byte[] { 0x0a, 0x9f, 0x9f, 0x0c, 0x7f, 0x14, 0x0e, ", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += EnumSwitchUnion.serialize(current_align, EnumSwitchUnion.class, \"m_d\", \"\");\n\t    \n\t    current_sum += EnumSwitchUnion.serialize(current_align, EnumSwitchUnion.class, \"intVal", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n      return null;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n        return null;\n      if (File.Exists(javaHome + @\"\\bin\\java.exe\"))\n     ", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               # Attempt to find the job\n                if job in l:\n                    return [comment, l]\n                else:\n                    return None\n        # Attempt to find the job\n        for l in self.lines:\n            if comment is not None:\n                self.do", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifierVERTEX_WEIGHT_PROX_EDIT(vertex_group_a\n        modifier_vertex_vertex_group_vertex_group_vertex_group_vertex_vertex_vertex_group_vertex_group_vertex", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                rankCounts[i] = rankCounts[i] > 0 ? rankCounts[i] : minLikelihood;\n            }\n        }\n        for(", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getEnd());\n        }\n        assertEquals(Arrays.asList(1, 2, 3), neighbors);\n    }\n    @Test\n    @Display", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.packet_number = int(self.get_input(\"Give packet number to inspect: \"))\n                self.parser(self.packet_number)\n            except ValueError:\n                print(self.fatal+\"[!] Please enter a number\"+self.bl", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'unique_constraints': []}\n        }\n        }\n        }\n        }\n        },\n        'scanned': True,\n        'blank': 'True',\n        'default': 'True", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n            }\n            }\n            returnImports.getTypes(sdoTypeName(), false);\n        }\n    }\n        }\n        }\n        return;\n    }\n    }\n    }\n    }\n    returnImportedTypes(nextTypes(next", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.message_ids\n        \"\"\"\n        if ids:\n            self.write(cr, uid, ids, context)\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        to_unlink = self.write(cr, uid, ids,", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           /// <param name=\"col\n        /// <returns>Returns the number of items in the grid\n        ///\n        ///\n        /// <returns>Returns the number of items in the grid\n        /// <param name=\"col\n        ///\n        ///\n        ///\n        ///\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name + \" (\" + this.LineId + \")\";\n        }\n    }\n}\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\n\t// CareContext\n\t\t\tif (null, value1 = null;\n\t\t}\n\t\t}\n\t//\t}\n\t}\n\t\t// CareContext\n\tif (null != null) \n\t\t{\n\t\t\tvalue1 = domainObject", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            notify_build_done(elapsed)\n        return status\n\nif __name", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\testPn = pn = pn = pn\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashes.Items.Clear();\n                Stashes.Items.AddRange(gitItemStatuses.Select(gitItemStatus => new GitItemStatus(gitItemStatus.Staged, gitItemStatus.Unstaged, gitItemStatus.Modified, gitItemStatus.Added", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item_to_item_to_item_to_2_to_item_to_3_to_item_to_4_to_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @since 4.2\n     */\n    @", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    }\n    }\n    public AddNumbers();\n    {\n        public int AddInt(int a, int b)\n        {\n            return int.AddInt(int a, int b);\n        }\n    }\n    }\n    }\n", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = (EClassifier)value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this,", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.func is not None:\n        args.func(archive_index, args)\n    else:\n        parser.print_help()\n    sys.exit(0)\nif __name__ == '__main", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, cmd_ss, cmd_ss, cmd_ss, cmd_ss, \n        if self.state == 'IDLE\n        self.state = 'In idle state'\n        self.state = '", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    v_1 = r_1;\n      // (, line 1:\n      do {\n        // (, line 1:\n          // (, line 2:\n          if (!(in_grouping_back, line 1:\n          do {\n            //", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = new ObjectPanel(channel, cd.name, cls, cd.nreceived, cd.nlost, cd.nack, cd.max_interval, cd.min_interval).getObject();\n            }\n            catch (Exception ex)\n            {\n                System.", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_all_extensions_by_name = self.cert.get_subject_key_constraints.get_extension_key_constraints_extra_key_constraints_extra_constraints_extra_oc_constraints_value = self.cert.get_subject_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.end() == _slots.end()) {\n\t\t\t\t\t/* This slot has been disconnected, so we can't call it */\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (i->second", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   return [X]\n    #   return [Interval(X, X)]\n    #\n    # The interval is split up into two intervals:\n    #   [X, Y]\n    #   [Y, Z]\n    #\n    #   where X = first word", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tExpect(30);\n\t\t\t\tif (la.kind == 31) {\n\t\t\t\t\tGet();\n\t\t\t\t\tif (la.kind == 32", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_uom_id.id * line.product", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(\"openHAB-ssl._tcp.local.\", \"openHAB\", httpSSLPort, getDefaultServiceProperties());\n    }\n}\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<PermissionEntry>();\n                permissions.add(vf2,\n                                                                                                                                    \n                                                    \n                                                    \n                                     vf2NodeRef.getChildRef.getChildRef.setPermissionService.setPermissionEntry", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_property('ID_INPUT_KEY', '1')\n\nThis line seems to be a continuation of the previous test, but it's not clear what the intention is. It appears to be an attempt to filter the devices based on the 'ID_INPUT_KEY'", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId=\"1\", floorId=\"1\")\n    data", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    # We find the best fit\n    best_array_stations = array_stations\n    rd = { 'ant_stations': array_stations = {\n        'ant_stations = {\n        'calibrator = \"calibrator = \"calibrator", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011;\n            if (Keys.Count > 0)\n            {\n                ItemID |= (uint)_Resource;\n            }\n            if (_Crafter != null)\n            {\n                ItemID |= (uint)_Cra", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> tunerList = tunerList.iterator\n            // Now we have a list of devices\n            // and we have a list of devices\n            // of devices\n        }\n        for (Iterator<String> tunerList = devices.getDeviceList();\n       ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.GV1_2) {\n      jobs.put(Version.GV1_2, new AttributesMigrationJob());\n    }\n    if (lastSeenVersion < Version.GV2) {\n      jobs.put(Version.GV2", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file is malformed. Each line should have at least two columns.\");\n      }\n      if (split.length < 4) {\n        throw new IllegalArgumentException(\"Regex", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #try:\n            #    return include[1]\n            #except IndexError:\n            #    return None\n            #return include[1]\n        # If we get here, we have not found the file.\n        # Now we have to search the environment variables.\n        #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def _get_layer_by_index(self, index,datasource,\n    \"\"\"\n        return a datasource.\n        \"\"\"\n        >>> from mapnik.py\n        >>> from mapnik.datasource\n        >>> from mapnik.datasource(file='osm,Layer", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.port = None\n        self.port = self.port\n        self.ip = self.ip\n        self.port = self.port\n        def port(self):\n        if self.want.ip:\n        if self.want.ip = None\n        if", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionManager, getActionObject, \" + className + \" not found.\");\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className, null);\n    }\n    public IAction", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   # pylint: disable=no-member-defined\n    # pylint: disable=no-member\n    self.test_update_thread_id\n    )\n    # pylint: disable-member-id\n    @patch.member-function\n    def test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Tool.msvs.embedManifestDllAction(target, source, env, env.subst('$MFILE'))\n        else:\n            raise SCons.Errors.StopError(SCons.Util.EvalInfo(env, 'WINDOWSOBJECT", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IStatus status = execute(getShell().getSelection(), new SubProgressMonitor(new ProgressMonitorDialog(getShell(), \"Executing action...\", \"Action executed\", \"Action executed\", getShell()), new SubProgressMonitorListener() {\n\n                @Override\n                    public void update", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\tdata.counts[0]=0;\n\t\t\n\t\treturn super.init(smi, sdi) && checkConnection();\n\t}\n\t\n\tpublic boolean deactivate()\n\t{\n\t\treturn true;\n\t}\n\t\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   #\n    assert f(2014,12,31, 12,30, 12,1,31,12,15,15)\n    assert f(2014,12,12,1,1,3", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int.\n            {\n            }\n            }\n            //int\n            {\n            }\n            }\n            //int\n            {\n            }\n            if (m_MinTimeOverride = m_MinTimeOverride;\n            {\n                if (m_MinTimeOverride", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       self._open_session_list = []\n        self._open_session_list.append(session)\n        try:\n            self._session_cmd_close(session, suspend_log_chk_cmd)\n        except Exception:\n            pass\n        finally:\n            try", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(\"[SUB]\");\n        Future<Integer> rc2 = service.submit(pub);\n        service.shutdown();\n        return service.invokeAny(rc);\n    }\n}\n}\n\n\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnRequestBeforeParameters(res, destination, r);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressed = WriteCompressedUInt32(value);\n\t\t\tvar compressedLength = (uint)((compressed & 0xFFFF) + 3);\n\t\t\treturn compressedLength;\n\t\t}\n\t\tstatic uint WriteCompressedU", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.path\n        self.fm.path\n        self.fm.env.path.split(self.fm.env.copy)\n        file.\n        self.fm.env.copy(self.fm.env.copy.path\n        for f in self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_Type()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest));\n\t\t\tAssert.IsInstanceOfType (objCOMTest, typeof (COMTest));", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.send_control_message(self.control_messages(self.control_messages(self.control_messages.add(self.control_socket.receive_control_messages(self.control_socket\n            self.control_socket.send_control_messages.send", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Show specific brand on top of player\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    def show(self, raw=False, **params):\n        if raw:\n            return self\n        if not raw:\n            if colsize is None:\n                colsize = self.colsize\n            else:\n                colsize = colsize\n            if colsize is None", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       self._assert_column_value(self.column, self.value, self.expected)\n    def test_update_cell_based_on_data_when_row_has_no_children(self):\n        self._run_test_update_cell_based_on_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tGridColumn gridcolumn = (GridColumn) grid.getTag();\n\t\tif (StringUtil.equalsIgnoreCase(gridcolumn.getName(), column.getName())) {\n\t\t    return", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry[] Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    InventoryEntry invEntry = Inventory[i];\n                    XmlNode n = nl[i];\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tChangeOfServiceVo vo = beans[i].buildVo();\n\t\t\tcoll.add(vo);\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 2, 2, 3, 3, 4, 5, 5, 4, 3, 2, 4, 6, 6, 6, 5, 4, 3, 4", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Blake2b, 0x4, 0x3C, 0x3C, 0x3F, 0xF, 0xF, 0xF, 0xF, 0x1B, 0x3F,", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\tNextFrame.Lock();\n\t\t\t\t\t// Copy the frame to the queue\n\t\t\t\t\tLayer QueueFrame = Next", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.actionTraceList != null)) {\n            return false;\n        }\n        if ((this.screenshots != null)) {\n            return false;\n        }\n        if ((this.files != null)) {\n            return false;\n        }\n        if", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           voiceSettings = p.readInt(i);\n            if (num == 0) {\n                dial(ret = responseInts(p);\n            }\n            }\n            else {\n            ret =  responseCallList(p);\n            case RIL_REQUEST_GET", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomain()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JsonGenerationException e", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = newVertices[y * xSizeP + x];\n            newNormals[y * xSizeP + x] = newNormals[y * xSizeP + x];\n            newTriangles[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tObject result = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection to \" + url.toString() + \" was successful.", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getSelectionLength()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getSelectionLength(boolean b)\n\t\t\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"No object found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.close();\n    }", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           if (stactics_chardata_e[c_e_offset, 0, 0, 0, 0, 0);\n                    palette_code,\n                    palette_d, 0, 0);\n                    stactics_e", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n            {\n                }\n            }\n            }\n            }\n            }\n            List<CollisionObjects>\n            {\n                {\n                List<CollisionObjects.MinionObjects.Add(CollisionObject.Above\n                    {\n                    List<CollisionObject", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (x.getNodeType() == NodeType.MEASURED && y.getNodeType() == NodeType.MEASURED) {\n            return true;\n        }\n        return false;\n    }\n    public Graph doFinalOrientation(Graph graph) {\n       ", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (plcs.Contains(pop.Children[i]))\n                        plcs.Push(pop.Children[i]);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descend", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            return;\n                    }\n                    if (mobiles.Count == 0)\n                        return;\n                    from.DoHarmful(mobiles[mobiles.Count - 1]);", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t{\n\t\t\treturn false;\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getCompoIds(String sUserId) {\n    return mock.getCompoIds(sUserId);\n  }\n  @Override", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       files[++index] = (String) mListView.getItemAtPosition(key);\n                    }\n                    final ArrayList<File> files = new ArrayList<>(files.size());\n                    for (int i = 0; i < checkedItemSize; i++) {\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.channel.close();\n\nBut I get the error:\n\n    java.lang.NullPointerException: Cannot invoke \"io.netty.channel.Channel.close()\" because \"this.channel\" is null\n\nI'm not sure why channel is null. I thought it", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if d_index_list_\n                z_dict = t_dict\n                \n            for t_index_list = range(t_dict\n                \n            # get the period_index_list = [t_dict\n                \n            # get_index_list = list(all", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              String.format(context.getString(resourceOne),\n                                           context.getString(resourceTwo),\n                                           context.getString(resourceMany)));\n  }\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if self.config[\"build\"][\"android\"]:\n            env[\"ANDROID_NDK_ROOT\"] = self.", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in type_paths.items():\n                if path not in self._data:\n                    source_file = SourceFile(tests_root, path, rel_path, url_base)\n                    source_files[path] = source_file\n                for test in", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private BindingContext createBindingContext() {\n        return new BindingContext(script, specificPermissions);\n    }\n   ", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped client adapter\n        /// </summary>\n        /// <returns>The timeout in milliseconds</returns>\n        protected virtual int ClientGetTimeout()\n        {\n            throw new NotImplementedException();\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(grad.shape[0]):\n        grad[i,1:] = grad[i,1:] + grad[i,0]*energy[i]\n      return grad\n    else:\n      return grad\n  def untransform_grad(self, grad, tasks", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tif(caseInsensitive)\n\t\t\t{", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterFamilyCode(pf.getParameterFamilyCode());\n        parameter.setParameterCode(\"DEPTH\");\n        parameter.setParameterValue(depth);\n        parameter.setParameterType(ParameterType.INTEGER);\n        parameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNodeFactory(kind, sub, kind, LNodeFactory.Empty);\n\t\t\treturn true;\n\t\t}\n\t\t}\n\t\t// [\n\t\t\t\t\t//\n\t\t\t\treturn true;\n\t}\n\t\t}\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    extendedWillHit = MinionManager.GetMinions(objAiBase.Position).Count();\n                    if (extendedWillHit > extendedWillHit)\n                    {\n                        extendedWillHit = extendedWillHit;\n                        extendedFarm", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t}\n\t\t\n\t\tprotected void setContext(ims.framework.IAppFormBridge.getControl(form, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output) is None\n    # Or\n    return not re.search(pattern, frozen_output)\n\n@task\n@timed\ndef install_python_packages():\n    \"\"\"\n    Installs Python packages.\n    \"\"\"\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r.subs.new().save()\n        self.assertEqual(\n            [get(s) for s in r.subs],\n            [(\"0\", 0), (\"1\", 1)],\n        )\n    def test_o2m_readonly(self", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, (x, (x, (x, a, x, b, x, x, b)) == Sum(x, x, x, b, (x, x, b, (x, x, x, b, x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tUnityEngine.WWW self=(Un", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._newItemList = (this._newItemList == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = -1;\n        }\n        private void InitializeMoveOrReplace(Not", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToOutputStream(objectToWrite(objectToWrite);\n            }\n        }\n        }\n    }\n        }\n        }\n        }\n        }\n        finally {\n            if(null != XMLStreamReader.\n            }\n        }\n        }\n        }\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus2:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//readSize\n\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t\t//\t\t\t\n\t\t\t\t\t\t\t\t//\t\t\t\t\t\t//\t\t//\n\t\t\t\t\tif (bitmapSize = reader.", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l == null) {\n                throw new IllegalArgumentException(\"Label.\n                if (l.next) {\n                throw new IllegalArgumentException\n                if (l.next != null) {\n                    if (l.inSubroutine(l.next) ==", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack, __method, __intp, true);\n            var result_of_this_method = (object)__mStack[__esp +", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t\t}\n\t\t\n\t\tprivate void setLabelPosition(String position) {\n\t\t\tcomboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t\t\texplos", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self.assertEqual( currImageValue\n        self._getCurrentValue\n        self._getCurrentValue\n        currImageValue\n        currImageValue\n        self, currImageValue)\n        self._getCurrentValue( driver, \"Image\")\n        currImageValue\n        currImageValue)", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.gss_gss_continue\n        self.x = self.x\n        m.add_byte(self.gss_continue\n        self.parse_kexgss_continue\n        self.old_style = self.s\n        self.p = m.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(connectionData.getConnectionName(), true);\n            DefaultMutableTreeNode folderNode = new DefaultMutableTreeNode(connectionData.getDatabaseTypeLabel(), true);\n            DefaultMutableTreeNode node = new DefaultMutableTreeNode(databaseNode", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                   self.cr.execute(\"SELECT number_of_days, number_of_hours, number_of_minutes, number_of_hours_per_day, number_of_minutes_per_hour, number_of_minutes_per_hour_per_", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = np.zeros)\n    #Mass function\n   \n    mf = np.array([mfrac, MfracToMfrac(m, frac=1.0, frac=1.0)\n    #Mpc/h\n    #Mpc\n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getBounds().getWidth() * 0.75);\n        d.height = (int) (d.width * 0.75);\n        return d;\n    }\n    \n    @Override\n    public Dimension getPreferred", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container.append(share_edge(self.edge)\n        self.share_edge(p0,p2)\n        self.p2_p2,p3,p4,p5,p6,p7,p8,p9,p10,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void _portfoliosWindow_PortfolioChanged(Portfolio portfolio)\n\t\t{\n\t\t\tShowOrHide(_portfoliosWindow);\n\t\t}\n\t\tprivate void _portfoliosWindow_", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D, _Hist3D, _Hist(axis=1)\n        _Hist3D)\n        if params[0]['bins'] is None, params[0]['bins']\n        if params[0]['bins', params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getPagingOrder() == PagingOrder.NORMAL ? query.first : query.last);\n        }\n    }\n    private Query findQuery(Query query) {\n        synchronized (queries)", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\")\n                im1L = im1.convert(\"L\")\n                im1L = im1.convert(\"L\")\n                im1L = im1.convert(\"L\")\n                im1L = im1.convert(\"L\")", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.size() > 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (ret.size() == 0)\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield self.description\n    yield self.parseFlags\n    yield self.parseHeader\n    yield self.parseBody\n    yield self.description\n    yield self.parseFlags\n    yield self.parseHeader\n    yield self.parseBody\n    yield self.description\n    yield self.", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionL", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       return super(Gateway_u0, self).get_environ()\n        env.pop('wsgi.input_terminated', None)\n        if req.chunked_read:\n            # XXX: This is a bit of a hack.\n            # The WSGI app", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = DataModel( self , fieldtypes[ field , setfields )\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (chance < 1)\n                return;\n            if (chance < 100)\n                chance *= 100;\n            if (chance < 0)\n                chance = ", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # type:\n            # Create a new enumerated_value\n            # Create a new reg_value\n            # Create a reg_el\n            # Create a mem_value\n        # Create a reg_type\n        # Create a reg_type\n        return a R\n        return r", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                MessageBox.Show(\"No modules found!\");\n            }\n        }\n    }\n}\n\n\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                return true;\n            }\n            }\n            }\n        }\n        }\n        }\n        }\n        }\n        }\n        public bool\n        {\n            get\n            {\n                return true;\n            }\n            }\n        }\n        }", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.vertexArray[textureHash]\n                this.vertexArray[textureHash]\n            this.vertexArray[textureHash]\n            }\n            }\n            this.vertexBuffer.clear();\n        }\n    }\n        }\n       ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    \"\"\"\n    @wraps(view_func)\n    def inner(request, *args, **kwargs):\n        response = view_func(request, *args, **kwargs)\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                    }\n                }\n            }\n            // remove the old drivers from the pool\n            foreach", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if name in 'radius', 'center, 'units', 'upper_left_extent, name, 'center', units, var_list\n        if 'center',\n        units, 'units,\n        radius,\n        area_extent, units,\n        resolution, units", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.set(\"chance\", '1')\nQUEST.addStartNpc(WK_ROMP)\nQUEST.beginContest()\nQUEST.addTutorialNpc(WK_ROMP, \"binfo\")", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\treturn string.Empty;\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            VertexDataSize = VertexDataStride * VertexDataSize;\n            Attributes = new AttributeInfo[0];\n            Attributes.AddRange(new AttributeInfo[]\n            {", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.reactions._reaction = set()\n        self.metabolites._reaction = set()\n        self.genes._reaction = set()\n    def remove_metabol", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\t\n\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\t\n\t\treturn coll;\n\t}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       LayoutAnimationController.setListItemsLayoutAnimation(mListView.getListView(), set);\n    }\n    */\n\t\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\tif (resultCode == RESULT_C", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               HighestNumber = PartnerInterestRow.FieldKey.CompareTo(HighestNumber) > 0 ? PartnerInterestRow.FieldKey : HighestNumber;\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.SetField", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tthis.classifier.buildClassifier(this.dataset);\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (pssm.getPssm(i) == null)\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
