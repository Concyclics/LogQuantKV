{"pred": "\t\t\tif ( m_Registered && m_Registered\n\t\t\t\tif ( !m_Registered )\n\t\t\t\t\tif ( !m_Registered )\n\t\t\t{\n\t\t\t\t\tif ( m_Registered )\n\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\tif e_u in roots:\n\t\t\t\troots.remove(e_u)\n\t\t\t\troots.append(e_u)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        a.seek(0)\n        a.write_frames(np.zeros(nframes, dtype=np.float32))\n        a.seek(0", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_subtitle_status(self, language):\n        \"\"\"\n        Return the status of the subtitles for a given language.\n        \"\"\"\n        self.wait_for_element_present(self._SUBTITLE_LANGUAGES)\n        return self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tWriter.writeStartElement(\"ol\", \"Style\", context.getWriter().getAttributes());\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.question_type = None\n   \n   \n   \n   \n    def _handle_qa_data = _QuestionData(self):\n        self.question = _QuestionData(_QuestionData)\n    def _handle_qa(self):\n        self.question = QA", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.SendGump(new SR_Gump(SR_RunePrompt.RUNE_LOCATION, mob.Location, mob.Map));\n                    Send(mob);\n                    break;\n                case 3:\n                    mob.SendGump(", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       int encodedChain[0]\n        }\n    }\n    }\n    //\n    //\n    }\n    }\n    }\n    }\n    }\n    public void send(HandshakeMsg\n    }\n    }\n    public void send(CertificateMsg\n   ", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       }\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name, String path) {\n        return (JESpace) spaceRegistrar.get (name);\n    }\n    public static synchronized void registerSpace (String name", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   response = self.send_response(environ, response, response\n    response\n        # WSGISOAPeople, this method:\n        if self.path == \"GET\" % \"POST\" % % % '200\n        return self.wsdl.dispatcher.dispatcher", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.notify_error(status_id, i18n.get('error_in_conversation'))\n    def notify_error(self, status_id, message):\n        QMessageBox.critical(self, i18n.get('error_in_con", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n    def action_create_archive\n        return operation_id=operation_id,\n        \"data\": data=operation\n        operation_status_id,\n        data=operation.data\n        data=data\n        data=operation.data\n        data=data\n        data=data", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b), \"Trusted+Untrusted\");\n\t\t}\n\t}\n#endif\n\t}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       # FIXME:\n        # return self.getAcceptedIssuers()\n    def getAcceptedIssuers(self):\n        for trust_manager in self.trust_managers:\n            try:\n                return trust_manager.getAcceptedIss", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       Map domainInfo = new HashMap();\n        domainInfo.put(\"domain\", domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\nCan someone explain what's happening in the doCatchAll method? I'm not sure what the code is doing.", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   await self.send_datastream_stream_writer = self.__encoder_stream_stream.get_datastream_stream_stream.data_stream\n        self.__datastream_stream.data_stream)\n        self.__datastream_address)\n        self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\tif (option1) {\n\t\t\t\t\t\t\t//change in database\n\t\t\t\t\t\t\t//...\n\t\t\t\t\t\t\t//...\n\t\t\t\t\t\t\t//...\n\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length()];\n        for (int i = 0; i < args.length; i++) {\n            String[] argValues = getArgValues(application, request,\n                defaultMessages, locale, args[i]);\n           \n;\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t{\n\t\t\t\t\t// Load the data\n\t\t\t\t\tloadFromFile();\n\t\t\t\t}\n\t\t\t\t@Override\n\t\t\t\tpublic void saveToFile(String key, String subKey)\n\t\t\t\t{\n\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "              \n            }\n        }\n    }\n}\n\nCan you fix the code so that it properly casts the spell on the selected target?\n\nBased on the provided code snippet and the task at hand, it seems there are a few issues that need to be addressed to ensure the spell is", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._autoflcahce:\n        self.\n        self.\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        self.autofl\n        \"\"\"\n        self._autoflash_all_loaded_mapper, all_mapper, all_table, all_", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\treturn new String\n\t\t\t\n\t\t\n\t\t\t\n\t\treturn keyToFieldName(IField.getTypeName\n\treturn name\n\t\n\t\n\t\n\treturn name\n\t\n\treturn keyToName(IField\n\t\t\n\t\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   def this\n    @class\n    @decorator\n    @decorator\n    return this\n    @demodulo\n    return\n    self.request.set_request_argument\n    @classmethod\n    @as_decorator\n    return this decorator.\n    @class", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\tif (ActiveViewIndex != -1)\n\t\t\twriter.AddAttribute(\"style\", \"display:none;\");\n\t\telse\n\t\t\twriter.AddAttribute(\"style\", \"display:block;\");\n\t\t\n\t\tbase.Render(writer);\n\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   if __name__ == '__main__':\n    # ...\n    # Just in case you want to use this script as a module\n    # ...\n    if __name__ == '__main__':\n    # ...\n    # Just in case you want to use this script as a", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i)\n                if (mod >= 1000)\n                if (i)\n                if (i)\n                return i;\n                else\n                return 0;\n                if (i)\n                {\n                    if (mod == 101)", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       if not small:\n            if not simple:\n                if not force_direct:\n                    builds.append(download_firefox(\n                        build=build,\n                        icon=icon,\n                        dom_id=dom_id,\n                        force_direct=force", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectIDsAndIssueTypeIDs(projectID, issueTypeID);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBeansList.add(", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           var replacements = new List<ArgumentSyntax>();\n            ArgumentSyntax argument;\n            ArgumentSyntaxSyntax argumentSyntax;\n            ArgumentSyntax argumentSyntax = argumentSyntax;\n            ArgumentSyntax argumentSyntax = argumentSyntax;\n            ArgumentSyntax argumentSyntax = argumentSyntax;\n            ArgumentSyntax argumentSyntax = argument", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.request_children.\n        self.assert_children(self.assertEqual(self.assert_children(self.assertEqual(self.assertEqual(split_test_module_key=self.assertEqual(split_test_module_usage_key =", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (fontSpecific) {\n                PdfDictionary fontSpecific = new PdfDictionary(fontSpecific);\n                PdfDictionary fontDict = new PdfDictionary(fontSpecific);\n                fontDict.Put(PdfName.FN, new PdfName(fontName", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tif (cell.getDepth() == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\t\tif (cgn.depth == -1)", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       return null;\n      }\n    }\n    @Override\n    public void onSuccess(final Bitmap result) {\n      Util.runOnMainThread(new Runnable() {\n        @Override public void run() {\n          if (result != null) {\n            bitmapReference.get", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    SwingUtilities.invokeLater(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (cmdHistory.canGoDown()) {\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @property\n    def _get_node_policies(self):\n        \"\"\"\n        Returns a list of policies for the node.\n        \"\"\"\n        return self.collection.appliance.db.client.list_policies(self.object.name)\n    def step", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.RenderControl(writer);\n        }\n    }\n}\n\n}\n\n    }\n}\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tcompound.setByte(\"Damage\", (byte) damage);\n\t}\n\t\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "      \n        @Override\n        public String toString() {\n            return super.toString();\n        }\n    }\n    /**\n     * Create a new <code>Effect</code> from an XML element.\n     *\n     * @param xr The <code>FreeColXML", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn', 'groups': 'everyone'})\n    assert i\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTIC", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.first()\n        self.assertEqual(person.owns[0], organization)\n        self.assertEqual(organization.employees[0], employee)\n        self.assertEqual(organization.employees[0].employer, organization", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   # self.\n        # no_x_range=None\n    # TODO\n    # no_x_value, x_value, x_value\n                    None,\n                    # plt.x_range=figsize=fig_size\n        plt.set_figsize(", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               toScan.Add(path);\n            }\n            else\n            {\n                toScan.Add(path);\n            }\n            }\n            return;\n        }\n        private void Watcher_Error(object sender, ErrorEventArgs e)\n        {\n            var dw = (", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic boolean removeIf(Object o, Object toRemove) {\n\t\treturn internalMap.remove(search(o), toRemove);\n\t}\n\t@Override\n\tpublic Set<Map.Entry<K", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request['viewtype'] = 'threadview'\n        reply = self.addnewcomment = None\n        replycount = 0\n        commentscount = 0\n        comment_text = ''\n        if self.request.has_key('viewtype'):\n        if", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tget {\n\t\t\t\t\n\t\t\t\treturn tiles[m_Tile[]\tget {\n\t\t\t\t{\n\t\t\t\tget {\n\t\t\t\t{\n\t\t\t\tget {\n\t\t\t\tget {\n\t\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "               \n                //\n                //\n                //\n                // TODO:\n                // TODO\n                //\n                // TODO:\n                // TODO\n                channel_uri:\n                channel_uri:\n                channel_uri:\n                channel_uri_channel_uri_s_channel_uri", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # TODO\n        time_series_headings\n        # TODO\n        column_headings = column_headings = column_headings = headings\n        # TODO\n        headings = headings\n        # Build regular latitude and longitude\n        # Build time series\n        #\n       ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   user = authz.get_user_id_for_username(user, allow_none=True)\n    if not user:\n        raise Exception('User not found')\n    # sysadmins only\n    return {'success': False, 'msg': _('User %s not", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\toutcomes[resultIndex] = node.getChild(depths[resultIndex]).getPartitionId();\n\t\t\t\tdepths[resultIndex] = depth;\n\t\t\t\t// extracting data\n\t\t\t\tint childIndex = node.getChild(", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for a segment.\n        /// </summary>\n        /// <param name=\"segment\">The segment", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (int) {\n            if (ch <= 0;\n         {\n         }\n         }\n         }\n         if (ch\n         if (ch\n         if (ch\n         if (ch\n         if (ch\n         if (ch\n         if (ch\n        ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired) {\n          if (existingRequired == true) {\n            if (existingRequired == true) {\n              if (existingRequired == true) {\n                if (existingRequired == true) {\n                  if (existingRequired == true) {", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendData(newConn.Socket, Encoding.UTF8.GetBytes(message));\n\t\t\t\t\tLog.Write(\"server\", \"Client {0} tried to connect without password and was rejected.\", newConn.Socket.RemoteEndPoint.AddressFamily,", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\t\treturn coll.add(new CatsReferralPendingEmergencyNonEDAdmissionListVo(bean).buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmission", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'advanced':\n    advanced()\nelif prnum == 'thumbs':\n    thumbs()\nelif prnum == 'viewsdb':\n   ", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD.get( 'plotName' )\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  plotName =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t{\n\t\t\tif (IsTraitDisabled)\n\t\t\t\treturn;\n\t\t\tif (player.Resources.HasResources(Resources.Water))\n\t\t\t{\n\t\t\t\t// If we have water, we need to find a new rally", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catColumn.setType(col.getType().getValue());\n        catColumn.setIndex(col.getIndex());\n        catColumn.setName(col.getName());\n        catColumn.setJdbcType(col.getJdbcType());\n        catColumn.setNullable", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (hs == Handshake.None) ? Parity.None : Parity.Even;\n\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.get_page(self.get_page(self.post_data = {'action': 'edit',\n                                                                \n                         'edit_profile', 'cobranding')\n        self.check_edit_user=self.user\n        )\n        self.", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args()\n    if _keep_tempdir is not None:\n        _keep_tempdir = _keep_tempdir\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\tself.currently,\n\t\t\t\t\n\t\t\t\t\n\t\t\tself.list = self.buildList(self.list,\n\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = fontX + fontY + fontX + fontY;\n                float fSize = (float)(size * x);\n                return new PdfContentByte(context).createRectangle(0, 0, fSize, fSize);\n            }\n        }\n        \n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   String[] results = Arrays.copyOf(results, results.length);\n  \n  \n  /**\n   * Load a comma-separated list of strings from Properties.  The list can include commas, but the commas must be quoted.\n   *\n   * @param key", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       x_points = np.append(x_points, -180)\n        y_points = np.arange(-87.2, +179.9, 17.5)\n        # Test points\n        self.assertEqual(\n            self.c", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (InvokeRequired)\n            {\n                BeginInvoke(new MethodInvoker(delegate\n                {\n                    toolStripButtonSave.Enabled = false;\n                    toolStripButtonRevert.Enabled = false;\n                }));\n            }\n            else\n            {\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    #\n    # print color\n    print_color = color\n    print_color_color = '\\0\n    print_color\n    print_color = pyl_color\n    print_color = color\n    print_color\n    print_color\n    print_color\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <returns>\n        /// true if the key is removed, false if the key is not in the set\n        /// </returns>\n        /// <exception cref=\"ArgumentException\">\n        /// Thrown if the value is not in the set and is not a duplicate\n        /// </", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendImageIndex = \n            treeNode\n            treeNode18\n            this.SuspendImageIndex = 0;\n            this.SuspendImageIndex = \n            treeNode50.SelectedImageIndex = 0;\n            this.Name =", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _NullFunctionPointer = ctypes.POINTER( ctypes.c_int )\n    def nullFunction(\n        functionName, dll,\n        resultType = ctypes.c_int,\n        argTypes = (),\n        doc = None,\n        argNames = (", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           if (emptyStreams.\n        }\n        }\n        }\n        }\n        }\n        if (emptyStreams) {\n            writeUint64(NID.streamsInfo(NID.kEmptyStreamsInfo\n                    .Uint64(N", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                    if (rampUp)\n                    {\n                        if (alphaLevel < 255)\n                            alphaLevel += 1;\n                        if (alphaLevel >= 255)\n                        {\n                            rampUp = false;\n                           ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Version(false);\n            var item.CanBeRemovable.Should().Should().BeFalse();\n            item.CanMoveFiles.Should().BeFalse();\n        }\n        }\n        }\n        }\n       \n        }\n        }\n        }\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, maxNanabBerries, weparBerries);\n                }\n            }\n        }\n    }\n}\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       if No == 0\n        f.writelines(f.write(str(str(psf.write(str(sex_file)\n        f.writelines(['\\n', 'A)', ' \n                ' \n                ' \n                'B')\n        f", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x00) >> 2);\n                    i += ((b & 0x08) << 2);\n                    i += ((b & 0x08) << 5);\n                    i &= 0xFF;\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       self._course_key = self._course_key or self._course_key = self._course_key or self.session.post(\n            STUDIO_BASE_URL + '/course/new',\n            data=self._course_dict,\n            headers=self.session", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif (splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\telse {\n\t\t\tchance = 100;\n\t\t}\n\t\tif (chance > ", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       return 0, \"Meter \" + name + \" deleted\"\n        module.exit_json(msg=\"Meter \" + name + \" deleted\", changed=True)\n        return 0, \"Meter \" + name + \" deleted\"\n        module.exit_json(msg=\"", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           // \n            // \n            this.chkPrivacy.AutoSizeMode.Text = new System.Windows.Forms.Size = new System.Drawing.Size = new System.Drawing.Size.Size = \n            this.chkPrivacy.AutoSize = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.log_debug_mode = self.report_directive.log_info.info(self.archive.log_log.info.info(\"Collecting plugin_name, plugin_name, plugin.name, self.ui_log.info(\"Collecting\"\n                    self.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionFossil, ISessionMinimalFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = IMaterialMinimalFossil\n    getAllMaterialList.name", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       throw new ClientException(\"Error importing messages\", e);\n                    }\n                };\n            } else {\n                messageWriter = new MessageWriter() {\n                    @Override\n                    public boolean write(Message message) throws MessageWriterException {\n                        if (importServerRadio.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tif (value instanceof Number) {\n\t\t\t\t\t\t\tlayer = (int)value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isClosed()) {\n            throw new IllegalStateException(\"Session is closed\");\n        }\n        if (currentSession == null) {\n            throw new IllegalStateException(\"Session is null\");\n        }\n        if (currentSession", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion e : emotions)\n\t\t\tsum += e.strength;\n\t\tfor (Emotion e : emotions)\n\t\t\te.strength /= sum;\n\t}\n}\n}\n}\n\n\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'job',\n            '\n            ,\n            'started_at': constants.SPLIT\n            'finished_at': constants.SPL\n            'finished_at': constants.SPLITED,\n            'started_at': constants.SPLIT\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   #phi1 = phi1\n    #calculate the longitude\n    C = (phi1-eccPrimeSquared/6*eccSquared)*eccPrimeSquared*eccSquared*eccSquared*eccSquared", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n    if request.method == 'POST':\n    form = ReportUserForm(request.POST)\n    if form.is_valid():\n        form.save()\n        messages.success(request, \"Report submitted successfully!\")\n        return HttpResponseRedirect(reverse('profile_user',", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    @property\n    def _\n    @property\n    def property\n    @property\n    def __init__(\n    \"\"\"\n    @property\n    \"\"\"\n    def _\n    @property\n    def configure_series_listing(self,\n    @property\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void ApplyTo(KPForm form)\n\t\t{\n\t\t\tif(form == null) throw new ArgumentNullException(\"form\");\n\t\t\tif(m_props.RightToLeft)\n\t\t\t{\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp = arr[i] & 0xFF;\n                temp--;\n            }\n            //Shift the number down one byte\n            arr[i] = (byte) temp;\n        }\n        return arr;\n    }\n    /**\n     * @return the datatype", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags = []\n            for tag in positional_tags:\n                if tag == 'positional_tags':\n                    new_positional_tags.append(flag)\n                else:\n                    new_positional_tags.append(TagRegex(", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            public override object[] GetCustomAttributes (Type attributeType, bool inherit)\n            {\n                throw new NotImplementedException ();\n            }\n        }\n    }\n}\n\n// Complete the rest of the code for the MethodGenericParameter and TypeGenericParameter classes.\n// Ens", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# This file is part of Scapy\n# See http://www.secdev.org/projects/scapy for documentation\n# Copyright (C) 2012-2014 Nils Weiss <nils.weiss@gmx.net>\n# Copyright", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\n\t\t\n\t\t\treturn self.bus.add_signal_keyword=None, sender_keyword='sender'sender_keyword='sender' % gobject.signal_name='dbus.service.add_service.\n\t\tdbus.glibusdus.", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            {\n                Reg.Garlic, 1, 10415, 10444, 10444, 10444150.5, 104445, 104415", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.session.close()\n        self.session = self.app.synchronize(self.session)\n        self.app.teardown_request(self.request.endpoint, exc=exc)\n        self.app.teardown_request(self.request.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_id, needs_columns=None):\n    \"\"\"\n    return _pubsub_consumer_id,\n    needs_columns=None):\n    pubsub_consumer_id, needs_columns=None):\n    return _", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n    }\n    return result;\n}\n\n\n    public Set<ResourceEntity> getConsumedRelatedResourcesForRelease(ResourceEntity resource, ReleaseEntity release", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       dx = src_radius * np.cos(angles)\n    else:\n        # Find distance from source to line of interest\n        source_to_line_distance = np.sqrt(src_radius ** 2 - dx ** 2)\n        # Find source to line distance\n       ", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   return self.url\n    self.url\n    \"\"\"\n    return self.url\n    self.url\n    if self.providerType = self.providerType == self.providerType\n    if self.isEnabled():\n        self.enabled()\n    def __init__(self, url", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\t{\n\t\t\t\t// Format the string representation of the FontUnit object\n\t\t\t\t// using the specified format provider.\n\t\t\t\t//\n\t\t\t\t// The format provider specifies how the object should\n\t\t\t\t// be formatted, such as using", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\n\t\t\tAssert.That(obj.Properties.Count, Is.EqualTo(2));\n\t\t\tAssert.That(obj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(obj.Properties[0].Value", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int i = 0; i < width; i++) {\n                    edges.add(new T2(\"http://example.org/edge/\", \"edge\"));\n                }\n            }\n            if (isToroid) {\n                edges.add(new T2", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = 0.3\n    assert_r\n    assert np.allclose(1.0.31e+0.0\n    assert np.allclose(1.0)\n    assert np.allclose(1.0)\n    assert np.allclose(", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "      \n        //        File file = new File(\"C:\\\\Users\\\\thompsonb\\\\Desktop\\\\test.txt\");\n        //        file.createNewFile();\n        //        file.delete();\n        //        file.createNewFile();\n        //        file.delete();\n        ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                    tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t}\n\t}\n\t/**\n\t * Checks if the application is already installed.\n\t * \n\t * @return\n\t */\n\tpublic boolean isInstalled() {\n\t\treturn isInstalled();\n\t}\n\t/**", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, new uint[] { vao });\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       def _data_cov_mat_model_data_model_cov_mat, y_model_cov_mat\n        return self._project_model_cov_mat_cov_mat_inverse\n        return self._data_data_cov_mat_model_data_model_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       ReflectionToStringBuilder toStringBuilder = new ReflectionToStringBuilder(this);\n        m_hashCode = toStringBuilder.toHashCode();\n        return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (getOwnerId = accountId = accountId = Accounts.getOwnerId, getObject = osgBucket = getBucket.getOw\n          } else {\n            if (accountIdAdmin = accountId.getOwnerId())\n            if (deletedAccount", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           get { \n            if (value != null)\n            {\n                value.FolderSelectedChanged += FolderSelectedChanged;\n            }\n        }\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       //        assertTrue(command.validateTemplateName(name, isImportAsClone));\n    }\n    @Test\n    public void testValidateSpaceRequirements() {\n        ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        doReturn(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Numeric.Numeric.NegativeButton.NegativeButton.NegativeButton.NegativeButton.NegativeButton.NegativeButton.NegativeButton.NegativeButton.NegativeButton.Neg", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       # =-\n        #-=\n        #\n        self.system\n        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Ldnull);\n\t\t\tilgen.Emit(OpCodes.Ldnull);\n\t\t\tilgen.Emit", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "  \n    Builder MergeFrom(I\n    Builder {\n      return BuilderMergeFrom(this, pb::FieldDescriptor;\n    }\n    Builder {\n    return Builder {\n    Builder Builder {\n      return Builder(this, Builder;", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[getVertIndex(i, x)] = vertices.normalized().mul(vertices.normal);\n                vertices[getVertIndex(i, x)] = vertices.normalized().mul(vertices.color);\n                vertices[getVertIndex(i, x)] = vertices.", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (\n        }\n        if (getProperty(PROPERTY_COLUM_COLUMNS_COLUM_COLUM_DATE_COLUMNS_\n        }\n        }\n        return result\n        }\n        if (column\n        }\n        if (columnName\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (selectedBefore)\n\t\t\t{\n\t\t\t\tif (animDeltaTime <= 1f)\n\t\t\t\t{\n\t\t\t\t\tif (selectedBefore)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (animDeltaTime", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       // Invalidate();\n        //base.OnSizeChanged(e);\n      }\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n   ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               {\n                    lastUser = string.Empty;\n                }\n                Users.Add(lastUser);\n            }\n            if (Users.Count > 0)\n            {\n                foreach (string user in Users)\n                {\n                    SendEmailForUser(user, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X > EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y > EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           Verify\n            Verify(VerificationControls, Verify(VerificationControls, Verify, VerificationControls, VerificationControls, VerificationColumn, VerificationControls, VerificationControls, VerificationControls, VerificationControls, VerificationControls, VerificationControls, VerificationColumn, Verification", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int)stream.Length);\n                // Adding file content to args.\n                args.Add (filename, buffer.Clone (true), null).LastChild.Value = args.GetExChildValue (\"convert\", context, true);\n            }", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n        return self._apply_called_for_all_requirements\n\n\n    def __str__(self):\n        \"\"\"String representation of the requirements\"\"\"\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tNotifyRangeMinimum\n\t\t\t}\n\t\t\t\t\n\t\t\t\tNotifyRangeMinimum\n\t\t\treturn Enabled;\n\t\t}\n\t}\n\t\t\tNotifyPropertyChanged", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\tget {\n\t\t\treturn Path.Combine (XdgBaseDirectory.GetUserDirectory (\"XDG_DATA_HOME\", \".local/share/tomboy\"),\n\t\t\t                        tomboyDirName);\n\t\t}\n\t\t\n\t\tpublic string DataDirectory", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugInstance.getBugPattern() == null) {\n            bugInstance.getMessage().printStackTrace();\n        }\n    }\n    /**\n     * @return\n     */\n    public BugReporter getBugReporter() {\n        return this;\n    }\n   ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\t}\n\t}\n\tpublic class Cake( int )\n\t{\n\t\t}\n\t}\n\t}\n\tpublic class Cookie\n\t{\n\t\tpublic override double DefaultWeight\n\t{\n\t\t\tget {\n\t\t\t}", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n        if (Me.IsValidTarget(true));\n        }\n        {\n            if (Menu.GetSlider(\"LaneClearW\")\n            {\n                if (Menu.GetSlider(\"LaneClearW\")\n                if (Menu.GetSlider(\"LaneClear", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, wx, wy, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx, wx", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       forecast = self.forecast(region, location)\n        return forecast\n\n\n## Your task: Given the provided Python code for the DWD plugin, which is used to fetch and parse weather data from the Deutscher Wetterdienst (DWD), identify and correct any issues that may prevent", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.resolve_field_name(\n                'test_base', 'test_base', 'testsuite'),\n            'title'\n        )\n        self.assert", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               fields\n                :\n                {\n                :\n                :\n                :\n                :\n                :\n                :\n                var result = env.CompileDeploy(\n                :\n                :\n                \"select *\n                :\n                :\n                :\n                :\n                :", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def _\n        other\n       \n       \n       \n       \n        c_orbit = other\n       \n        self.\n        other\n        self.x, vx, vx, y, ay, az, m\n        self.x, m\n        other = self\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = super(view, self).save(cr, uid, res_id, value=arch, xpath=xpath, context=context)\n\n    # @value.in_context_if_root_not_embedded_field\n    # def save_embedded_", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           if (value != null) {\n                c.setClientProperty(propertyKey, value);\n            }\n            else {\n                c.setClientProperty(propertyKey, null);\n            }\n        }\n    }\n}\n    }\n    private static final String documentBaseKey", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, filename, contents=b\"\", script_type=\"testharness\")\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.loader = new HbmSqlLoader(namedQueryReference);\n\t\t\tmapping.loader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\t#endregion\n\t}\n}\n}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Tithe );\n\t\t\twriter.WriteEncodedInt( (int) m_Silver );\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   currentGraphQueue.peekInliningData.\n    pushInvocationDepth();\n    pushGraph(methodInvocation(methodInvocation.invoke()\n\n    return invocationQueue.invokeAndAdd(methodInvocation() {\n    }\n    for CallsiteHolder.\n    }\n    current", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.log_path = self.create_log_path = self.log_path = self.args['log_path']\n        self.log_path = self.args['log_path']\n        self.pytest_bindings = self.pytest_bindings\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phiValue = getCachedPhi(value, phi);\n                    if (phiValue != null) {\n                        value = phiValue;\n                    }\n                }\n                if (phi) {\n                    states.", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.sendMessage(MSG_SET_CALL_DATA_USAGE, new Message.ObtainSendOrdering(\n                    MSG_SEND_SESSION_MODIFY_RESPONSE,\n                    new VideoProfile(\n                            \"video/", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\n\t\t\t\tBaseCreature.Teleport(from, Moonstone.GetWorldLocation(), Moonstone.Map);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   # from inveni.bibrec.models import *\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set(user, data)\n        # Cast old data to set\n        self.module.set(user, data)\n        # Cast old data to set\n        self.module.set(user, data)\n        # Cast old data to set\n        self.module", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       >>> _BaseFile {\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        msgid = 'msgid\n        msgstr = 'Unicode string\n        \"\"\"\n        self.header = self.header = self.header = _BaseFile.__init__\n        \"\"\"\n        _", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )\n    else:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput' )", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(method.equals(\"formPassword.\n\t\t\t// FIXME\n\t\t// FIXME\n\t\t//\n\t\t// FIXME\n\t\t// FIXME\n\t\t//FIXME\n\t// FIXME\n\t\treturn null;\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(self.buildbot_results, [\n            {\n                'build': {\n                    'build': {\n                        'number': 1,\n                        'result': 'SUCCESS',\n                        'timestamp': 14197600", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/2008/04/analytics'\n    self.category.term = 'pageviews", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<AnnotatedTypeMirror>\n        AnnotatedTypeMirror\n        AnnotatedTypeMirror\n        AnnotatedDeclaredTypeMirror\n    templateTypeMirror\n    AnnotatedTypeMirror\n    typeMirror\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       row.operator(mat.use_transparency_method = mat.use_transparency = mat.use_transparency = mat.use_transparency\n        if base_mat.use_transparency\n        if simple_material.use_transparency_method", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           mapper16_latch1 = _latch2\n            mapper16_latch1 = _engine.Mapper16_latch1_latch1 = mapper6\n            }\n            mapper64_IRQ_enabled = mapper6_IRQ", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(m_jPopupMenu);\n            _jMenuBar.add(m_jMenuBar);\n            _jMenuBar.add(m_jMenuBar);\n            _jMenuBar.add(m_jMenuBar);\n           ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t\n\t\tAdd(\"Aranwen\", \"Aranwen\", \"Aranwen\", 10001, \"AranwenScript\");\n\t\t\n\t\t//----------------\n\t\t// Weapon Shop\n\t\t//----------------\n\t\t// Page 1\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t\n\t\t{\n\t\t\tint height = Math.Max (minimumHeight, Math.Max (minHeight, min));\n\t\t\tif (height < Frame.H) {\n\t\t\t\tFrame.W = Math.Max (minWidth, Frame.W);", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                            max_length=255,\n                            unique=True)\n    # FIXME AutoSlugField\n    slug = models.SlugField(_('", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexer_confs = PhpLexer, 'php', re.VERBOSE, 'PhpLexerConf'\nlexer_confs = {mimetypes.by_name['text/x-php']: lexer_confs}\nlexers['text/", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "               \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       r = rethinkdb.db(\"kubernetes\").table(\"projects\").get_field(\"last_snapshot\").update({\"last_snapshot\": timestamp}).set_field(\"last_snapshot\", timestamp).set_field(\"last_snapshot\", timestamp).run(conn)\n   ", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\tbreak;\n\t\t\tbreak;\n\t\t\tbreak;\n\t\tbreak;\n\tbreak;\n\t\tbreak;\n\t\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__(self, restag, rescode, resstr, resstr, datalines):\n        self.codehead, self.codehead, self.codehead, self.codehead, self.codehead, self.codetail, self.codetail, self.", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    def __init__(self, uuid, host_name, result):\n        self.uuid = uuid\n        self.name = name\n        self.start = None\n        self.finish = None\n        self.result = result\n        self.rc =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Uri uri = Uri.parse(uri);\n                startActivity(new Intent(context, Crappalinks.class, uri));\n            }\n        }\n    }\n}\n\n\n## Your task:Improve the code by adding a feature to detect and handle redirects from URLs that", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   assert not primary_filepath.endswith(\"primary.xml\")\n    if primary_filepath.endswith(\"primary.xml\"):\n        raise AssertionError(\"primary.xml file is present in directory, but doesn't contain any packages\")\n    else:\n        raise Assertion", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       if self.compile:\n            byte_compile_outputs = self._byte_compile_outputs()\n            inputs.extend(byte_compile_outputs)\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -------------------------------------------------\n    # (", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tresult = table = lazyProperties.ToArray(lazyPropertyLazyProperties = table = table.PropertySpans = propertyLazyProperties = entityProperties = table = tableLazyProperties = propertyLazyPropertySpaces = propertyLazyProperties = propertyLazyPropertyLazyPropertyLazy", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       ]\n        q = 'SELECT job_sha1, job_run_cmd, job_submit_time, job_state, job_id, job_args, job_max_vmem, job_cpu_bound, job_submit_time, job_run_cmd, job_", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           var model = new DelegateViewModel();\n            return View(\"Form\", model);\n        }\n        // Add a relationship (EventDelegate) between Delegate (child) Event (parent)\n        [RolesRequired(\"Admin,SaveEventDelegate\")]\n        [RolesRequired(\"Admin,List", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n...\n\n\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\ndef handlePremium(self):\n    self.logDebug(\"Premium handling\")\n    if self.file_id in self.premium_urls:\n        self.logDebug(\"File ID is in premium_urls\")\n        self.premium_url =", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Length == 0)\n\t\t\t\treturn null;\n\t\t\tif (path.Length == 1)\n\t\t\t{\n\t\t\t\treturn self.Location;\n\t\t\t}\n\t\t\t// Find the closest harvestable", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                       self.logger.error(\"dhcpd -t failed\")\n                    return False\n                return True\n            else:\n                self.logger.info(\"dhcpd module not installed, skipping dhcp restart\")\n            return True\n        return False\n    def rsync_", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder(Event.newBuilder(Event.Severity.WARNING, \"This is a warning message\", \"Warning source\"));\n    }\n    @Override\n    public Event.Builder warningEvent(String type, String msg) {\n        return Event.newBuilder(Event", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n            while (true)\n            {\n                // Create a new context.\n            {\n                state.\n        {\n            if (_orderFall = (byte)\n           \n        }\n            while (\n            state.Frequency < 0\n            {", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        });\n        /// <summary>\n        /// The SQ VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\n\t\n\t\n\t\n\t\tstring selectedDescription = t\n\t\t\n\t\t\n\t\n\tstring.Format(myEventType.FormatDescription = myEventTypeOrg testOrLimited\n\t\t\n\t(string tests,\n\t\tstring.Format(t\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(0)\n    self.assertRaises(KeyError, o.seek(0, 0)\n    self.assertRaises(BitReaderError, BitReaderError\n    self.failUnless(self.read(b\"\")\n", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win_download ?>\n  <a href=\"http://dl.google.com/android/install_windows_sdk.html?platform=windows_x86_64&amp;arch=x86_64&amp;sdk=", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylabel('Mean +/- 95%% CI')\n    plt.ylim(csi_95)\n    plt.plot(cr['combined']['durations'], cr['combined'][app][test][stat]['values'],\n             'o-')", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self.test_euid)\n    self.assertEqual(1, 'uid, 1, 1, 0, 1\n    def test_euid, gid, self.test_uid, gid, uid, self.test_uid", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, x + controlSize - 2, y + controlSize - 2);\n\t\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " knn.learn(v[5], 0)\n  knn.learn(v[0], 0)\n  knn.learn(v[1], 0)\n  knn.learn(v[2], 0)\n  knn.learn(v[", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = offset + offset - headerSize;\n        final Object value = elementKind.asValue(value).asObject();\n        ObjectCellAccess.writeElement(value, index);\n    }\n    @HOSTED_ONLY\n    public void visitObjectCell(ObjectMir", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath == \"\") {\n                return null;\n            }\n            return FileUtils.CombinePaths(Path.GetDirectoryName(ProjectBase.GetDirectoryPath()), relativePath);\n        }\n        /// <summary>\n        /// Resolves an assembly", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n\n    # Remove whitespace\n    string = re.sub(r'\\s+', ' ', string)\n    # Remove all whitespace\n    string = re.sub(r'\\s+', '', string)\n    # Remove all whitespace\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i1 = i17 + i16 + i1 - 1 + 1, i1, i16, i1, i16, paramArrayOfInt8, i16, i16, i16, i16, i16, i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t}\n\t\t\n\t\treturn str;\n\t}\n\t\n}\n}\n}\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               new SpellData,\n                Slot = SpellSlot = 110,\n                Type = SpellShotType = SpellShot,\n                Delay = 250,\n                    Range = 1200,\n                    Radius = ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t\t\n\t\t\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       proc = subprocess.Popen(['/bin/true'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    @testlib.with_context\n    def test_add_parameter_file_contents(self, context):\n        context.add_", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t// Start the core services\n\t\t\tStartCoreServices();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Starts the core services.\n\t\t/// This initializes the PropertyService and ResourceService.\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tprotected internal bool IsValid\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == false)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"ConstraintName cannot be null, empty, or duplicate.\");\n\t\t\t\t}\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.\n\n        self.\n\n        self.\n        self.\n        self.\n\n\n# The above code is not edit\n\n        self.\n        self.\n        self.\n        self.\n        self.\n        self.\n        self.\n        self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               mTafTask.setBackgroundTask( new TafTask() {\n                    @Override\n                    public void onTaskCompleted( Cursor cursor ) {\n                        if ( cursor.moveToFirst() ) {\n                            String wxCode = cursor.getString( cursor.getColumnIndex", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(\"from Locality\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"un", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITSums = (ulong)(((ulong)uiCRCITSums << 8) | (uiCRCITSums >> (order - 8))) ^ crctab[(ulong)(((ulong)uiCRCITSums >> (order", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\n\t\n\treturn;\n\t\tgetShootTarget;\n\t\t\n\treturn null;\n\t}\n\t}\n\treturnSentryMode.getSentryModule();\n\t}\n\tgetShoot();\n\treturn null;\n\t}\n\t}\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           ISourceViewer sourceViewer = sourceViewer;\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(sourceViewer, controller),\n                new CeylonContentAssistant(editor).getContentAssistant()", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.setDrawingMode(self.getDrawingMode = self.getDrawingMode()\n        self.setDrawingMode()\n        self.drawingMode = self.getDrawingMode()\n        self.l = qt.QVBoxLayout(self)\n        self.l\n       ", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Back to home\n\t\t\tcase 4: // Back\n\t\t\tcase 5: // Forward\n\t\t\tcase 6: // Previous\n\t\t\tcase 7: // Next\n\t\t\tcase 8: // Set\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object choice : selectComponent.getValueChoices())\n                     {\n                        if (choice.equals(value))\n                        {\n                           result = value;\n                           break;\n                        }\n                     }\n                  }\n            }\n            else\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\n\t\tfor (int k=0; k<0; k<numStates;\n\t\tif (totalChanges>\n\t\tif (numChanges>0\\n\n\t\tfor (int k=0; k<0\n\t\t}\n\t\tfor (int", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            //get the index of the purchase order and line that caused the problem\n                            foreach (var unpricedLine in unpricedLines)\n                            {\n                                int orderIndex = unpricedLine.Key;\n                                int lineIndex = unpricedLine.Value", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t}\n\t}\n\tpublic void AddParameterInspector (IParameterInspector inspector) {\n\t\tthrow new NotImplementedException ();\n\t}\n\tpublic void RemoveParameterInspector", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       //expect(ACE_ACCESS_TARGET\n        //expect(ACE_ACCESS_TARGET\n        //ACE_ACCESS_TYPE_TARGET\n        //ACE_ACCESS_TYPE.\n        //ownerSubject.getACL\n        //ownerId\n       ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t}\n\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t:\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo', 'port']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None, port=None):\n        self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if (type == RequestType.Activity) {\n                logActivity(list);\n            }\n            if (type == RequestType.Activity) {\n                logActivity(list);\n            }\n            if (type == RequestType.Step) {\n                logStep(list);\n           ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " for i in xrange(bind_count)\n  if bind_count > 0:\n    PrintLongLine('%s, ' % (bind_types[i]), ' ')\n  if exec_count > 0:\n    PrintLongLine('%s, ' % exec_", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [\n                {\n                    'id': item.pk,\n                    'title': range_item_title(item),\n                    'description': range_item_description(item),\n                    '", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(score), new VarNode(score),\n                        null, Scope.DEFAULT_CONTEXTS)\n                        )\n                        )\n                        )\n                        )\n                        )\n                        )\n                        )\n                        )\n                       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailToolbar, self).dispatch(request, *args, **kwargs)\n\n    def get_initial(self):\n        return super(UserDetailToolbar, self).get_initial()\n\n    def get_initial(self):\n        return super(UserDetail", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     IEnumerable<byte> publicKey;\n    }\n    /// <summary>\n    /// The hashed 8 bytes of the public key of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKeyHash {\n      get { return this.PublicKeyHash; }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Solve the system\n            _preconditioner.Solve(matrix, d, r, result);\n            // Solve the system\n            for (int i = 0; i < matrix.RowCount; i++)\n            {\n                // Get the current row of the matrix\n", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\tApfloat[] medians = new Apfloat[]{median};\n\t\treturn medians;\n\t}\n\t\n\tApfloat median = (sortedNumbers[left] + sortedNumbers[right]) / 2;\n\tAp", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           reference_counts = np.\n        # Just like\n            # Next_neighb\n            # The value_counts[ts.\n        # The time\n        # The time\n        #_time = ts.\n        # sample_counts = np.sum_neigh", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       # Check if the mapping is loaded\n        mapping_loaded = mapping_json == csv_mapping\n        # Check if the mapping is enriched\n        enrich_mapping = self.enrich_backend.get_enriched_mapping()\n        mapping_enriched = mapping_", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value == null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar slot = new EditableSpectatorTemplate(slot.Key, slot.Value", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" \" + _rootCause.ToString() + \" \" + GetMessageByCode(errcode) + \" \" + errcode.ToString();\n\t\t\t}\n\t\t\treturn \"NTSTATUS_SUCCESS\";\n\t\t}\n\t", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       self.data = self.data + b'A' * (MAX_FRAME_SIZE - len(self.data))\n        self.data += self.data\n        self.data += b'B' * (MAX_FRAME_SIZE - len(self.data))", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.Closed != null)\n                throw new InvalidOperationException(\"Cluster has no boundary curve\");\n            foreach (var node in cluster.Nodes)\n                if (node.UnderClosed != null)\n                    throw new InvalidOperationException(\"Node is under a closed cluster\");", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double\n\t\n#pragmaSkeletonHandle.setTarget(m_interpolation(m_jumping(m_jumping(m_jumping);\n\t\n\tbtKinematicCharacterController::jumping(double jumping)\n\t\t\n\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            ExpressionTree init = initializers.get(i);\n            if (canBeLeaked(init)) {\n                checker.report(Result.failure(\"unique.leaked\"), init);\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\n\t\tNBTTagCompound nbttagcompound = nbttagcompound == null ? new NBTTagCompound() : nbttagcompound.clone();\n\t\t\n\t\tif (nbttagcompound.hasKey(\"color\"))\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeNode != null)\n\t\t\t{\n\t\t\t\t// parse the return type\n\t\t\t\t_returnType = TypeNode.ParseType(TypeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate static void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{\n\t\t\tif (real != expected1 && real != expected2)\n\t\t\t{", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\ttest(ClassType(classType);\n\t\tresult = ImmutableClassType(AnnotationType());\n\t\tImmutableClassType(AnnotationType());\n\t\tresult = classType(ClassType());\n\t\tClassType();\n\t\tClassType(AnnotationType());\n\t\tClass", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\tif (this.activationUnit == null;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tif (other.getAbstractionUnit == null;", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min = min + r.score;\n            if (min > min2) {\n              continue;\n            }\n            if (min > min2) {\n              continue;\n            }\n            float pS = iScore[start][end][parentState];\n            if (", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           ret = 0\n        )\n        )\n        )\n        )\n        pipe.stdin.write.close.write.called_mock.write.return_value = '--custom_file.stdin.write.return_value = ret\n        )\n        assert_mock", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvoid DbgManager(object dispatcher) {\n\t\t\t\t\t\t\t\tUI(() => DeinitializeProcess_UI();\n\t\t\t}\n\t\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"r\", \"color\", \"r\", String.value, \"color\", String.r\", \"bval\", String.\n\t\twriter.attribute( null, \"x\", String.valueOf\", String.\n\twriter.attribute( null, \"color\", String", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof HibernateProxy ) {\n\t\t\tproxyThat = ((HibernateProxy)proxyThat).getHibernateTemplate().getObject(proxyThat.getClass());\n\t\t}\n\t\telse {\n\t\t\tproxyThat = aThat;\n\t\t}\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if not isinstance(node.op.idx_accepts, node.ndim,\n                                                                                    node.ndim(node.inputs[1]\n                                                                                                                                                                    # This isinstance(node.ndim)\n                                ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].widget.attrs['class'] = 'btn-group-sm'\n    self.fields['groups'].widget.attrs['class'] = 'btn-group-sm'\n    self.fields['groups'].widget.attrs['class'] = 'btn-", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               def wrap(query_compile(\n                def wrap(query)\n                def init_query_stack\n        if not raw=True\n        def wrap_compile(query.\n        if not raw=False\n        def wrap(*arg:\n            def wrap(*arg:\n        return event", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(resource_fs)\n\ndef get_module_descriptor(self, *args, **kwargs):\n    \"\"\"\n    Return a ConditionalModuleDescriptor instance.\n    \"\"\"\n    return ConditionalDescriptor(*args, **", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(axis, indices)\n    def _to_selection(self, data, bg_value, axes):\n        # get filtered data\n        filtered_data = self.filter_data(data, bg_value)\n        # get filtered data shape\n        shape_", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tpublic sealed class Lderef : Simple\n\t\t{\n\t\t\t\tpublic sealed class Lderef : Instruction\n\t\t\t{\n\t\t:\n\t\t{\n\t\t\t:\n\t\t\t}\n\t\t{\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objYLabel.Text = \"Var Y:\";\n\t\t\t// \n\t\t\t// objYText\n\t\t\t// \n\t\t\tthis.objYText.MaxLength = 40;\n\t\t\tthis.objYText.", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files),\n                         set([\"test/mail/syncmail.py\",\n                              \"test/mail/syncmail.1\",\n                              \"test/mail/sync", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       this.data.put(row.get(ID_KEY), csvData.getOrDefault(row.get(ID_KEY), \"\"));\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n   ", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t@Override\n\tpublic boolean onWandWielded(EntityLivingBase wieler, ItemStack wand, int wielded) {\n\t\treturn false;\n\t}\n}\n@Override\npublic boolean onBlockInteractedWith(World worldIn, BlockPos pos, I", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           Node n = c.getComponents().iterator().next();\n            THashSet<Node> neighborsInC = new THashSet<Node>();\n            neighborsInC.add(n);\n            neighborsInC.retainAll(c.getComponents());\n            for (", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if not minfo['flags'][flagname][version] == minfo['flags'][flagname][version]:\n                                are_equal = False\n                            if not minfo['flags'][flagname][version] == minfo['flags'][flagname][version]:\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t{\n\t\t\t\n\t\t{\n\t\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.add(exDate);\n    }\n    return exDateList;\n  }\n  @Override\n  public void addExceptionDates(List<ExDate> exDateList) {\n    // TODO Auto-generated method stub\n    throw new UnsupportedOperationException(\"", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding = sourceEvent.AddComponent<dfEventBinding>();\n\t\tsourceEventBinding.SourceComponent = sourceEvent.gameObject;\n\t\tsourceEventBinding.SourceProperty = sourceProperty;\n\t\tsourceEventBinding.TargetProperty = targetProperty;\n\t\tsourceEventBinding", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       // Authorization\n        // Authorization check\n        // Authorization check\n        // Authorization check\n        // Authorization check\n        if (userName = userName, privilege = Privilege\n        userName = request.getUserPr\n        //getContainerName\n        String container", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\n\t\t\t\t\n\t\t{\n\t\t\t}\n\t\t\tImagePath path;\n\t\t\t{\n\t\t\t\t\n\t\t\tpublic ImageHelper(String imagePath, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static void main(String[] args) {\n        OMEData data = new OMEData(new String[] { \"test_data.properties\" });\n        List projects = data.get(\"projects\");\n        List images", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_equiv_predicate_uri = 'skos:00000\n       \n        )\n        la = LinkAnnotation.objects.filter(Q\n                    .subject_uri=old_predicate_uri,\n                    .predicate_uri\n                ", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"\n        buffer.Append(\"indent_options= \");\n            buffer.Append(\"\n        buffer.Append(\"\n            {\n            buffer.Append(\"indent_options= \")\n            buffer.Append(\"indent_options= \")\n            buffer.Append(\"alignment_options=", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\tbytes[byteIndex++] = cjkToJis[ch];\n\t\t\t\tbytes[byteIndex++] = cjkToJis[ch + 1];\n\t\t\t\tbytes[byteIndex++] = cjkToJis[ch + 2", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n@ispec=\"32<1(4) {00(4) a(4) {0a} {0a} {0b} {00} {0} {00} {00} {0b} {0a} {0a} {0a", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tstream = new FileInputStream(location.getFile());\n\t\t\t}\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\tthrow new RuntimeException(\"Error loading properties file\", e);", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name == \"creative\";\n        }\n        public boolean isCreative()\n        {\n            return this.isCreativeMode();\n        }\n        /**\n         * Returns true if this is the CREATIVE game type\n         */\n        public boolean isCre", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0);\n\t\t\tAssert.AreEqual (1, csd.DiscretionaryAcl.Count);\n\t\t\tcsd.DiscretionaryAcl", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       except:\n            error = \"response error\"\n        return error\n    except:\n        error = \"json error\"\n    else:\n        if error:\n            raise AcoustidLookupError(error)\n        return json.loads(data)\n\n\nclass Acoustid", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.photon Warning:\n            PhotonEditorGUI.photonWarning = true;\n        this.photonWarningList = PhotonEditor.GetRpcList();\n        if (Photon.RpcList.CountList.Count.AdditionalR", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       // Set the context menu for the full_msgid TextView\n        registerForContextMenu(full_msgid);\n        return full_msg;\n    }\n}\n\n@Override\npublic void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menu_info", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           psit_G = psit_G\n            return np.einsum('nk,nkj->nkj', a_skx, psit_G[k])\n        # Symmetry operations\n        if self.symmetry is not None:\n            s", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       @Test\n    @Test\n    public void\n    private String intygsTyp)\n    {\n        String intygsTyp)\n        String\n        intygsTyp = \"luse\";\n        String intygsTyp = \"luse\";\n        String intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tblocks\n\t\t\t\tblocksRecursive(block = node = null;\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tILBlock = node = node;\n\t\t\t\t\t\n", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagd\n\t    if (rb.IsRagd\n\t\t\t//\n\tif (IsRagdoll\n\t{\n\t    if (rb.Ragdoll\n\t}\n\tif (rb.Ragdoll\n\t{\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   ", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)(num & 0xff);\n    }\n    }\n\n\n## Your task:In the given Java code for a GOST 28147 OFB counter mode implementation, identify and correct the error in the `intToBytes` method", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( this, objectVariables, objectVariables ) );\n        }\n    }\n\tprivate static class SimpleRegexFilteredPatternFinder\n\t    extends FilteredPatternFinder<PatternMatch, PatternNode>\n\t{\n\t", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if not values_xml_json:\n        return None\n    return values_xml_json\ndef transform_values_holder_xml_json_to_json(values_xml_json, format = 'date'):\n    comments = []\n    values_json = collections.OrderedDict", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n    }\n    if (ClientSettings.ICON_ENABLE_FRAME!=null)\n      btn.setSelected(true);\n    }\n  }\n  public void remove", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import random\nrandLC = getRandomLC()\nprint randLC\n\n\n## Your task: - Generate a Python function that, when given a list of SDSS object names, returns a list of their corresponding LC filenames, redshifts, and data arrays. The function should handle exceptions", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   double threshold = 0.7;\n    double value = 0;\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n     ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.GROUP_NAME + \" = ? AND \" + Db.Table1.ID_GROUP + \" = ?\", new String[]{Db.Table1.GROUP_NAME, String.valueOf(newId)}, null);", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.FreeHGlobal(m_ptr);\n                m_ptr = IntPtr.Zero;\n                m_ptr = IntPtr.Zero;\n            }\n            disposing = false;\n        }\n        public void Dispose()\n        {\n            Dispose(true);", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URLSAFTER_AUTH_MIDDLENORMARCHECKED_USER_MIDD\nLOGIN_REDIRECT_PROPAGE_NAMES_URL_REDIRECT\n#\n#\n# Set the default login middleware", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n        self.currentDir\n        self.fileSystemModel.setFilter(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.treeView.setRootIndex(self.fileSystemModel.setRoot", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       def subst_infile: self.file\n        self.file.\n        self.file\n        def subst_pc(self)\n        def subst_pc(self)\n        def subst_pc.run_task_in\n        self.file.\n        \"\"\"\n        subst_", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n\nif __name__ == '__main__':\n    rospy.init_node('pars_server')\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (timestampLocale == null) {\n                    throw JsonException.$(0, \"TIMESTAMP_FORMAT_REQUIRED\");\n                }\n                if (timestampFormatFactory.getTimestampFormat(timestampFormatFactory.getTimestampFormat(pattern), timestampLocale) == null", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\tParam = qs.NewParameter();\n\t\tParam.DbType = DbType.Int32;\n\t\tParam.ParameterName = \"@obj_id\";\n\t\tParam.Size = 4;\n\t\tParam.Value = entity.obj_id;\n\t\t", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t{\n\t\t}\n\t\tpublic bool[]\n\t\t{\n\t\t\tAssert.\n\t\tAssert.\n\t\t{\n\t\t\tnew.\n\t\t\t}\n\t\tAssert.That(mapping.Type, Is.Is.EqualTo(true);\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.key_id\n        self.module.ntp_auth_keyid = self.ntp_id = self.module.module.ntp_auth_keyid\n        self.config_ntp_auth_enable\n        if self.state == 'enable'\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assert_user_id,\n            component.update_info, self.user_id)\n            self.assert_user_id)\n            self.assertEqual(component.id)\n            self.assertEqual(component.course_key, self.user_id, sub", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((ELEMENT_CODE & 0xff));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Keyword(keyword)\ndef mkcomparison(keyword, keyword2):\n    return aetypes.Comparison(keyword, keyword2)\ndef mklogical(keyword, keyword2):\n    return aetypes.Logical(keyword, keyword2)\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // If the action returns an HttpResponseMessage, we don't need to look for a sample object.\n            if (api.ReturnsType == null)\n            {\n                // If no specific type is provided, try to find a type that can be used for the sample.\n                if", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           return False\n    def _key_up(self, path, model, column=None):\n        if column is None:\n            column = self.get_cursor_column(path)\n        if not column:\n            return False\n        if self.screen.parent:\n            if", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegalConfigPostProcessor.PROPERTY_LOCATIONS, newLocations);\n        }\n        return beanProperties;\n    }\n    /**\n     * Returns the name of the bean that holds the repository properties.\n     * \n     * @", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readlines()\n    except NameError:\n        pass\n    else:\n        f.close()\n\n    if not os.path.exists(dest):\n        if not create:\n            module.fail_json(msg=\"User %s not present and create=no\"", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] UnmanagedType.IUnknown pUnk,\n            [In, MarshalAs(UnmanagedType.LPStruct)] UnmanagedType.GUID guid,\n            [In, MarshalAs(Un", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return ensureAdminAccess(\n                Principals.getCurrentPrincipal(),\n                Principals.getCurrentSecurablePrincipal(),\n                Principals.getCurrentSecurablePrincipal().getPrincipalType() );\n        }\n    }\n    @Timed\n    @Override", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if not self.verify_tag(element):\n        self.fail_test(\"Unrecognized tag: %s\" % element.tag)\n        return False\n        if not self.verify_element(element):\n            return False\n        if not self.verify_extra_text(", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   node.ownerDocument, node.nodeType\n        if node.nodeType = DocumentNode,\n        if node.nodeType == Node.doctype = node\n        if node.nodeType == Node.nodeType == Node.DOCUMENTRY\n        if node.nodeType == Node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t//\n\t\t\t\ttarget)\n\t\t\tvalidateEMSScause\n\t\t\treturn EMSSc\n\t\t\tvalidateEMSSc\n\t\t\ttest\n\t\t\tscenePatientCount()\n\t\t\t\tgetScenePatientCount\n\t\t\tget", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\n\t \n\t\tif (encoder.setTypeAndLength(type, encoder.getLength = encoder.Length = type = type;\n\t\t \n\t\t \n\t\t\tTlvEncoder.getLength(encoder.getTypeAndLength(encoder", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       if (input.isKeyDown(Input.KEY_W))\n        {\n            Weapon a = new Weapon(myWeapon, 1);\n            a.init(0, Username);\n            ActiveWeapons.add(a);\n            send(", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       EbGameJoin.addRegistration( EbRegistration.create( GameEngine.model().getGame(), m_colorValue, m_companyValue, company );\n        EbGameJoin.addRegistration( EbRegistration.create( GameEngine.model().getGame(), colorValue, company )", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error getting filename from content-disposition header: %s\" % headers)\n    if \"content-disposition\" in r.headers:\n        filename = get_filename(r.headers)\n    else:\n        raise RuntimeError(\"No filename in content-disposition", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t\tif (response.IsSuccessStatusCode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmergedOrder = response.DryRunMergedOrder;\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   metabolites = [metabolite for metabolite in reaction.metabolites]\n    if len(metabolites) > 1:\n        raise ValueError(\"Cannot compute envelope for reactions with multiple metabolites.\")\n    return reaction.elements\ndef _find_car", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return super(Unit, self).get_query_set().filter(\n            store__in=self.get_stores_for_path(pootle_path),\n            store__is_translated=False,\n            store__is_fuzzy=False,\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('img_map_area', models.TextField(blank=True)),\n                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Switch {} processing packet {}\".format(self.name, str(poxpkt)))\n                if self.interface_to_port_map[dstmac] == port_num:\n                    self.logger.debug(\"Switch {} processing packet {}\".format(self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;\n    else\n      addRecentItem(item);\n  }\n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Skills[SkillName.DetectHidden].Value > 0)\n            {\n                target.SendLocalizedMessage(500814); // You have been revealed!\n            }\n        }\n    }\n    public static bool CanDetect(", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    getMaxTradePeriod()\n    }\n    @Nullable\n    public State getState() {\n    @Nullable\n    @Nullable\n    @Nullable\n    getTradePeriodState() {\n    }\n    @Nullable\n    @Null", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\t\tbyte)\n\t\t\t\tbyte>\n\t\t\t\tbyte>\n\t\t\t\tbyte>\n\t\t\t\t\tbyte)\n\t\t\t\tbyte>(byte)\n\t\t\t\t\t\t\t\t\tbyte>(byte)(\n\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tsuper.compare = new MskJointVoComparator(this, direction);\n\t\t}\n\t\t@Override\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\t\n\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _subAllocator\n        }\n        }\n        }\n        {\n            _heapStart = _units2Units[i]\n        }\n        }\n        public int _units2Units2Units2Units2Units2Units2Un", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       navigate_to(rate.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t{\n\t\t\tif ( _bufferId == 0 )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Cannot write to an uninitialized buffer\" );\n\t\t\t}\n\t\t\tif ( _bufferId == 0 )\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_mode.value = self.getSelectedService = self.getSelectedService.getSelectedService()\n\t\tself.satfinder_scan_nims_list.append(getConfigEntry(self.scan_satfinder_satfinder_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n        }\n        return;\n    }\n    case ZMQ.ZMQ_TYPE:\n        int type = (Integer) optval;\n        if (type <", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (PdfImageFilter = new PdfImageFilter(predictor = \n                catch (PdfImage = (PdfObject.Length = \n                Image.Width = width;\n                if (filter = \n                }\n                catch (Exception e\n                {\n                break", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface().__class__, types.String)\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar'])\n        self", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n       \n        self.p_operator(self.get_options().get_options().get_options().get_options().get_options().get_options().get_options().get_options()\n        for index in range(0, len(map_list())\n       \n        self", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           // This is a test\n            //\n            Assert.AreEqual(\n            // This is a: \n            // This is a test\n            // test\n            // This is a test\n            // test\n            //\n            // This is a test\n            // test\n            // This", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\t\treturn map.remove( key );\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Set key", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"} Viewing item {0}\", auction.ID.ToString() );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n\t/// <summary>\n\t/// Records the end of the auction\n\t/// </", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return self.sudo().attendance_action(action_message)\n    @api.model\n    def attendance_action(self):\n        return self.env.ref('hr.attendance_action_greeting_message').read(\n            [\n                'previous_att", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRowCollection results = form.grdResults().getRows();\n\t\tfor (int i = 0; i < results.size(); i++)\n\t\t{\n\t\t\tgrdResultsRowCollection row = results.get(i).getRows();\n\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               LPPOINT lp = (LPPOINT)pt.ReadToStructure(0, typeof(LPOINT));\n                return new Point(lp.x, lp.y);\n            }\n            set\n            {\n                LVITEM lvi = this.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.new_terminal(cwd, profile, debug=debug, _param1=cwd, _param2=profile)\n        self.terminator.new_terminal(cwd, profile, debug=debug, _param1=cwd, _param2", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               if ( arraySizeSizeSize = \n                    nameArraySizeFragments[1]\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    }\n                    managedType = nameArrayArraySizeFragment = name", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\treturn TypeAttributes {\n\t\t\treturn TypeAttributes.IsEnum {\n\t\t}\n\t\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}\n\t}", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "              \n                }\n            }\n        }\n        #endregion\n        #region private helpers\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = _Context(protocol=_openssl_versions[protocol],\n                              context=protocol,\n                              check_hostname=False)\n    def get_verify_locations(self):\n        return self.context.get_ca_certs()\n    def load", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox6\n\t\n\t\t// Container child hbox3\n\t\t\n\t\tthis.vbox6 = ((global::Gtk.Box.BoxChild\n\tw7;\n\tw7.Position = 0;\n\t\tw20.Position =", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    #gtk.connect_gtk.set_property_name = \"board\"\n    #, gtk.set_property_name_property_name\n    #\n    # Connect the statusbar, status, status_vbox, _\n    #\n    # Connect the status", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-next-line\",\n    \"Go-to-next\",\n    \"Locate-next\": \"locate-next\",\n    \"Locate-previous\":\n    \"Locate-previous\": \"previous-line\",\n    \"Locate-previous\": \"previous", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "  \n    return super.isFileReadOnly();\n    \n  protected boolean isFileEditable()\n  {\n    return super.isFileEditable();\n  }\n  \n  protected boolean isFileReadOnly()\n  {\n    return super.isFileReadOnly();\n ", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(10, 656);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(82, ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (sb != null)\n        {\n            sb.append(sb.length());\n        }\n        if (sb != null)\n        {\n            sb.append(sb.length());\n        }\n        return sb.toString();\n    }\n}\n}\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t//TODO:\n\t\t// 0xEA, 0xEA, 0x0b, 0x64, 0x0A, 0x0b, 0xA2, 0xA0, 0x0E,", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_sum += EnumSwitcher.getMaxCdrSerializedSize(current_align);\n\t\n\tcurrent_sum += EnumSwitcher.getMaxCdrSerializedSize(current_align);\n\t\n\tcurrent_sum += 4 + CDRSerializer.align", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               pattern = re.compile(r'^%s\\s*' % name)\n            if re.match(pattern, l):\n                comment = l\n                job = l.split(None, 1  # split on whitespace\n                                  only=True)[-1]\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# mesh_geometry_id\n        modifier_json(mesh_json(json, modifier_json)\n        modifier_json(mesh_json(mesh_mod_weight_mesh_json(mesh_json)\nclass MeshModifier(mesh_", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] ranks = pepLenRanks.get(peptideLengthFromIndex(peptideLength));\n            if(ranks == null)\n            {\n                ranks = new double[totalBuckets];\n                pepLenRanks.put(peptideLength,", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       val neighbors = vertex.neighbors();\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.contains(2));\n        assertTrue(neighbors.contains(", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.parser(self.choice, cap)\n            except Exception as e:\n                print(self.fatal+\"[!] Error: \"+str(e)+self.blk)\n                self.print_usage()\n                self.get_input('>>>')\n            self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Money Received Report (Documents Issued)\",\n            \"Money Received Report (", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'django.db.models.fields.related.ForeignKey', [], {'to': [], {'null': 'True, 'blank': 'True', 'to': u'null': 'True', 'blank': 'True', 'to': 'True', 'blank': 'True'}),\n        },", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return null;\n            }\n            }\n            return(false);\n            return;\n            }\n        }\n    }\n            return;\n    }\n    }\n    }\n    }\n    return;\n    }\n    }\n    }\n    }\n    }", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       \"\"\"\n        self.holiday_request_id)\n    \"\"\"\n        \"\"\"\n        self.holid)\n        \"\"\"\n        \"\"\"\n        \"\"\"\n    \"\"\"\n    if uid, self.holiday_status_id\n        \"\"\"\n    \"\"\"\n    \"\"\"\n    self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          \n        /// <returns>\n        /// <param name=\"true\"\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        /// <returns>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "          \n        }\n    }\n}\n\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\n\t\tvalueObject.setCareContext\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tvalue1\n\t\t\t\t\t\t\n\t\t\tvalueObject.getCareContext\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           status = call(\n                [\"cargo\", \"build\"] + opts + params,\n                env=env,\n            )\n        if android:\n            # Build the APK\n            status = call(\n                [\"cargo\", \"build\", \"--release\", \"--bin\", \"", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\testPrecEstimatedPrecisionPrecision\n\t\t\t\testimatePrecision = pnEstimate =\n\t\t\testimatePrecision;\n\t\t\t\t\n\t\t\testimatePrecision = \n\t\t\testimateP", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               StashMessage.Text = _currentWorkingDirStashItem.Message;\n                StashMessage.Text = _currentWorkingDirStashItem.Message;\n                StashMessage.Text = _currentWorkingDirStashItem.Message;\n                StashMessage.Text =", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   # -----------------------------------------------------------------------------\n    # --------------------------------------------------------------------------\n    # Create the assignment item for out_buffer0_to_bm0_assign_item:\n    out0_to_bm0_addr_assign_item = st.AssignAddressItem(\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        AuthScope that = (AuthScope) o;\n        if (LangUtils.equals(this.scheme, that.scheme)) {\n            if (this.scheme != ANY_S", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n            }\n        }\n        private void WrapBeginEncrypt\n        protected void WrapInvoke(string a, x\n        }\n        public override void EndCall(int a, int a\n        {\n        int a\n        }\n        }\n        int AddInt\n        {", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\ts += \";\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleStringAusSeriennrDtoArray(\n\t\t\tList<SeriennrChargennrMit", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   if args.verbosity > 0:\n        log.config(log_file=args.log_file)\n    archive_index = load_archive_index(args)\n    if archive_index is None:\n        log.info('cryptostasis', 'No archive", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       if self.cmd_token = self.cmd_ss, self.cmd_token, self.cmd_ss, self.cmd_ss, es, self.cmd_ss, self.cmd_ss = bit\n        if self.cmd_ss\n        self.cmd_ss, self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      v_1:\n      // (, line 8\n      // [, line 8\n      v_1:\n      do\n      lab1:\n      do {\n        // (, line 9\n        // (, line 9\n        v_1:\n       ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               if (cls != null && cls.getName().equals(\"lcm.lcm.LCMDataInputStream\"))\n                    {\n                        System.out.println(\"Found LCMDataInputStream\");\n                    }\n                else\n                    {\n                        System.out.println(\"", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def self.certificate.cert.cert.get_extension_pyopenssl_certificate_version\n    #pyopenssl_extension\n    def get_extension_keyusage_extension_name\n    def _get_authority_key_cert_usage_cert_usage_get", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i->second)\n\t\t\t\t{\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t\tif (still_there)\n\t\t\t\t{\n\t\t\t\t\tif (c)\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # --\n    #    if X.end <= 0xE000:\n    #        return [Interval(X.begin, X.end)]\n    #    else:\n    #        return [Interval(X.begin, 0x10000), Inter", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t\t\tif (la.kind == 11) {\n\t\t\t\t\t\tGet();\n\t\t\t\t\t\tif (la.kind == 12) {\n\t\t\t\t\t\t\tSet(out s);\n\t\t\t\t\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list = self.edi_export(cr, uid, edi_doc_list, context=context)\n        return edi_doc_list\n\n    def edi_import(self, cr, uid, edi_document, context=None):", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   ", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               List<VirtualPermissionEntry>\n                List<List<List> List<List<? extends List>\n                List<PermissionEntry>\n                Map<List<List>\n                List<PermissionEntry>\n                List<PermissionEntry>\n                List<PermissionEntry>\n        }\n        {", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(devices.match_subsystem('input')))\n            for device in devices:\n                assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken, loginId, password)\n    data = login().login()\n    data = login().mainmenu()\n    data = login().endTutorial()\n    data = login().cardUpdate()\n    data = login().exploration()\n    data = login().", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    array_array = determine_array_stokes = determine_array_stations = array_stations = array_stations = array_stations = array_stations = array_stations\n    ant\n    if (a)\n    print \"determine_array_st", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           UpdateItemID();\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       //\n        for (Iterator\n        for Tuner\n        for (String device : devices){\n            TunerHdhr\n            tuner.getFullName()\n            + \" - DRS\n        }\n        }\n        }\n        // DRS \n        // DRS", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_OPT_OUT, new PinReminderMigrationJob());\n    }\n    if (lastSeenVersion < Version.PIN_OPT_OUT) {\n      jobs", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (lineCount == 0) {\n        // log.info(\"Parsing RegexNER mapping line \" + lineCount + \" from \" + mapping + \": \" + line);\n        // log.info(\"Parsing RegexNER mapping line \" + lineCount + \" from \" + mapping", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           if not sub_path:\n                sub_path = ()\n            if sub_path:\n                break\n        if sub_path:\n            return sub_path[0]\n        # if we get here, we have not found it\n        # now try the path in the environment variable", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init__\n    def __init__\n    def __init__ = None\n    def _get_datasource = None\n    def _get_datasource(self,\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return self.features(self,", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.ip\n        self.port:\n        self.ip\n        if self.port\n        if self.want.port\n        if self.want.port != self.want.port\n        if self.want.ip:\n        if self.want.", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def inputs(self):\n        return self.playbook_input_parameters.read()\n    def read(self):\n        self.read_all_inputs()\n        return super(MethodDetailsView, self).read()\n    def read_all_inputs", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n            }\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className);\n    }\n    public IAction getActionObject(String className", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   # Create a thread_id\n    # Create a thread_id\n    # Create_thread_id\n    # Create_thread_id\n    # Create_thread_id\n    # Create_thread_id\n    # Create_thread_id\n    # Create_thread_id\n", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return env.AskOptions(\n                [SCons.Util.Check],\n                [SCons.Util.Check],\n                [SCons.Util.Check],\n                [SCons.Util.Check],\n                [SCons.Util.Check],\n                [SCons.", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IStatus[] errorStatus = execute(getResources(), new SubProgressMonitor(monitor, 1000));\n        } catch (CoreException e) {\n            errorStatus[0] = e.getStatus();\n        }\n        if (errorStatus[0] != null", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\n\t\t\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # since 12:30:30:30\n    #\n    assert f(2014, 1, 12,12,12,12,12,12,12,12, 12,12,1", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (dmintmintime)\n            {\n                mintime)\n            {\n                dmintA = dmintime;\n                mintime = mint;\n                minttime.AddHours(0);\n            }\n            mintime = TimeSpan.FromMinutes", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_support_chk_cmd)\n\n        if s:\n            raise exceptions.TestFail(\n                \"Background program is still running after resume\")\n\n    @error_context.context_aware\n    def", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       Future<Integer> rc = service.submit(new Callable<Integer>()\n        {\n            @Override\n            public Integer call()\n            {\n                return rc.get();\n            }\n        });\n        System.out.println(rc.get());\n        service.", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           this.owner.getDecorator().setOnSendReplyAfterParameters(res, destination, this.ownerID);\n            // FaultToleranceTechnicalService.RECOVERY_SERVER\n            UniversalBody newDestination = this.location.searchObject(r.", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar compressedValue = BitConverter.Int64.MaxValue;\n\t\t\tvar compressedValue = BitConverter.Int64.ToInt64(compressedValue, 0);\n\t\t\tcompressedValue = compressedValue + 1;\n\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.copy_file = \"extracted_path = os.path\n        self.fm.thisdir.path.extract(one_file = self.refresh_file = os.path.split_dirs = self.fm.path.split()\n        self.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\tAssert.AreEqual (testLocation, testLocation, \"#A02\");\n\t\t}\n\t\tprotected override void InvokeMemberImpl (string name, BindingFlags bindingAttr, Binder binder, CallingConv\n\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       self.assertEqual(flagdata[self.new_av],\n        self.assertEqual(flagdata[self.old_av],\n        self.assertEqual(flagdata[self.new_av],\n        self.assertEqual(flagdata[self.old_av],\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Logic\n            self.Logic.\n            self.Logic\n        self.Logic\n        self.Logic\n        self.send_control_message\n        self.Logic(self.send_control_message\n        self.send_message(self.send", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   public static void changeLeader(PlayerGroup group, Player player) {\n        Preconditions.checkNotNull(player, \"Player should not be null\");\n        Preconditions.checkNotNull(group, \"Group should not be null\");\n        Preconditions.checkNotNull", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n\n# +\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       self._assert_column_text(tree_model, self._create_store_widget(), \"Some Text\")\n    self.assertEqual(\"Some Text\", self.expected_text)\n    self.assertEqual(\"Some Text\", self.actual_text)\n    self.assertEqual(", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\treturn ESCAPE_EXISTS;\n    }\n    /**\n     * set the value values\n     * \n     * @param values\n     * @throws ExpressionException\n     * @throws PageException\n     **/\n    public void setValues(String", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt16(n.Attributes[\"ImageIndex\"].InnerText);\n                XmlNode n = nl[0];\n                InventoryEntry nInv = new InventoryEntry();\n                nInv.ItemSign = n.Attributes[\"ID\"].InnerText;\n               ", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           Version(1, new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// pbKey:\n\t\t\t//Hashing the password\n\t\t//Hashing\n\t\t//Key:\n\t//Hashing\n\t\t//Hashing\n\t// Key:\n\t// Salt:\n\t// Salt\n\t// Hashing\n\t// Key:", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tint received = (int) dispatchManaExact(stack, player, manaToGet);\n\t\tif(received == manaToGet)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the discount multiplier", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# import settings\nfrom settings_local import *\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((other.state != null)) {\n            if ((!this.getUserErrorMessage())\n                || ((!this.getUserErrorMessage().equals(other.getUserErrorMessage()))))\n                return false;\n        }\n        if ((this.actionTraceList == null))", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setVoice(voice = responseInts(PhoneNumber\n            dc = RIL_REQUEST_CDMA_VOID_VOID_SET_SIM_SET_SIM_VOID_SET_CALL_VOID_\n            }\n            }\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizePixelsPerTile + x, yPixelsPerTile, 0], newNormals[y * xSizePixelsPerTile + x, y, 0],\n                    newTriangles[y * (xSize", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionStarts()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int[] get", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeObject(new Object[] {true, \"Object not found: \" + name});\n        }\n        else\n            out.writeObject(new Object[] {true, \"Object found: \" + name});\n        out.flush();\n        out.close();\n    }\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           drawgfx,\n                    ,\n                    ,\n                    pixel,\n                    pixel,\n                    pixel,\n                    )\n                    ) {\n                    pixel, 0,\n                    pixel,\n                    pixel,\n                    f,\n                    )", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n                            .SelectCollisionObject\n                   \n                    .Select\n                    .GetCollision(object\n                    .Minion\n                    {\n                    {\n                    : CollisionObject\n                    :\n                    .Select\n                    {\n                    }\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isDefCollider(x, y, z)) {\n            return true;\n        }\n        return false;\n    }\n    private void orientUnshieldedColliders(Graph dag) {\n        if (dag == null) throw new IllegalArgumentException();", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop.GetType() == typeof(PlaceBase))\n                    plcs.Push(pop as PlaceBase);\n                }\n            }\n            return null;\n        }\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       return false;\n    }\n    if (this == other) {\n        return true;\n    }\n    if (other == null) {\n        return false;\n    }\n    if (getClass() != other.getClass()) {\n        return false;\n    }\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i].MoveOver(mobiles[i], from, false))\n                        {\n                            if (mobiles[i] == from)\n                                return;\n                            if (mobiles[i] == null || !mobiles", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tif (message)\n\t\t\t\t{\n\t\t\t\t\tstring text = String.Format(text, args);\n\t\t\t\t\tif (message)\n\t\t\t\t\t{\n\t\t\t\t\t\tInternalMessage(user, text);\n\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   }\n  @Override\n  public String getComponentName(String sComponentId) {\n    return mock.getComponentName(sComponentId);\n  }\n  @Override\n  public String getComponentName(String sComponentId) {\n    return mock.getComponentName(s", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       if (checkedItemSize == 1) {\n                            final File file = (File) mListView.getItemAtPosition(key);\n                            final File zipFile = new File(file.getParentFile(), file.getName() + \".zip\");\n                            if (!zipFile", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    NetworkManager.this.j.writeLock().addCatching(new GenericFutureListener[]{\n    new ChannelFutureListener.Closure() {\n        @Override\n        public void operationComplete(ChannelFuture future) throws Exception {\n            if (future.isSuccessful())", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "              \n            # get theta1\n                # get theta_index\n                # get theta_index\n                # get theta_index = \n                # get theta_dict_index_key = k_dict = [kk = (z_dict = [kk_dict_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne);\n    }\n    if (recipient.size() == 1) {\n      return context.getString(resourceOne);\n    }\n    if (recipient.size() == 2) {\n      return context.getString(resourceTwo", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = os.pathsep.join(extra_path + env[\"PATH\"].split(os.pathsep))\n        env[\"LD_LIBRARY_PATH\"] = os.environ.get(\"LD_LIBRARY_PATH\", \"\") + \\\n                                 os.path", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for rel_path, tests in iteritems(type_paths[test_type]):\n            for test in tests:\n                if isinstance(test, dict):\n                    test = test_cls(tests_root, rel_path, url_base=obj[\"url_base\"])", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof ModuleNode) {\n            script = (Script) script.asType(ModuleNode.class);\n        } else {\n            script = (Script) script.asType(ASTNode.class);\n        }\n    }\n    private Binding createBindingForCompilation()", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override the default timeout for a wrapped server adapter\n        /// </summary>\n        /// <param name=\"timeout\">The timeout in milliseconds</param>\n        protected virtual void ServerSetTimeout(int timeout)\n        {\n            throw new NotSupport", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(grad.shape[0]):\n        grad_E = grad[i,:]\n        grad_E = grad_E * self.y_stds[0]/self.y_stds[1:] + grad_means[1:]\n        grad_", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\t\tif (caseInsensitive)\n\t\t{\n\t\t\tif (caseInsensitive)\n\t\t\t{\n\t\t\t\tif (this.ordinvcurrentstatus != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.ordinv", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, stacks);\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        final List<StackImpl> found = stackDao.findStacksWithSpecifiedTags(asList(\"search-tag1\", \"search", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.addParameter(new ParameterImpl(\"DEPTH\", depth));\n        pf.addParameter(new ParameterImpl(\"DEPTH_EXCLUSION_REGEXP\", exclusionRegexp));\n        pf.addParameter(new ParameterImpl(\"DEPTH_", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t\n\t\t\t\n\t\t(\n\t\t\t\n\t\t\treturn (candidate.Kind.Kind\n\t\t\t\t\n\t\t\t)\n\t\t{\n\t\t\tif (kind.IsKind(sub.Kind(sub.Kind)\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = colisionList.Count;\n                        extendedFarmLocation = colisionList.First();\n                    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t\n\t\t\n\t\tprotected void\n\t\t\n\t}\n\tprotected void\n\tgetContextMenuBridgeBridgeBridge ctnmBridge, UI,\n\t\t\t\n\t\t\n\t}\n\tprotected boolean\n\tgetContextMenu\n\tprotected void setContext", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   # Look for the package name in the output of pip freeze\n    for line in frozen_output.splitlines():\n        if re.search(pattern, line):\n            return True\n    return False\n\n@task\ndef install_python_prereqs():\n    \"\"\"", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r = self.env['test_testing_utilities.sub2'].create({'name': 'a'})\n        self.assertEqual(\n            [get(s) for s in r.subs],\n            [(\"a\", 1, 1)],\n        )", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, (x, (x, b)) + Sum(x, (x, (x, b))\n    == Sum(x, (x, x))\n    assert Sum(x, (x, (x, (x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1 = LuaDLL.lua_tostring(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tSystem.String a2;\n\t\t\tcheckType(l", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = new ArrayList(changedItems).GetLowerBound(0);\n            this._newItemList = (IList)changedItems.Clone();\n        }\n        else\n        {\n            this._oldStartingIndex = -1;\n            this._old", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "          \n            XMLStreamWriter streamWriter = new XMLStreamWriter,\n            XMLStreamWriter streamWriter = new StringWriter();\n            }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.OrgType2:\n                    c.OrgType2 = Token2Csv();\n                    break;\n                case Param.OrgType2:\n                    c.OrgType2 = Token2Csv();\n                    break;\n                case Param.", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t\t// TODO\n\t\t\t\t\t// read the IconDirEntry\n\t\t\t\t\t// TODO:\n\t\t\t\t\t\t\t// read the rest of the size\n\t\t\t\t\t// IconDirEntry\n\t\t\t\t\t// read the Icon", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           //\n            // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nanswers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           StackObject* ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            var result_of_this_method = instance_of_this_method.ToString();\n            ptr_of_this_method =", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(position);\n\t\tcomboLabelPosition.setSelection(position);\n\t\t\n\t\tprivate void setLabelPosition(Position position) {\n\t\t\tcomboLabelPosition.setSelection(position);\n\t\t\tcomboLabelPosition.setSelection", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self.assertEqual( \"ImageValue = self._getCurrentValue\n        currImageValue\n        currImageValue = self._getCurrentValue( driver, \"Image\")\n        self._getCurrentValue\n        currImageValue = self._getCurrentValue( \"Image\"\n        self._getCurrent", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.old_style = self.old_style\n        gss_continue\n        m.add_byte(srv_continue\n        self.transport.kexgss_continue\n        m.add_byte(srv_continue\n        m.add_byte(self.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getRootHierarchyNode().getSelectionValues()[0];\n        if (node.getUserObject() instanceof DatabaseNode) {\n            DatabaseNode databaseNode = (DatabaseNode) node.getUserObject();\n            if", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           SELECT sum(number_of_hours) as number_of_hours, sum(number_of_days) as number_of_days\\\n                            FROM smart_salary_simulator_payslip as hp, smart_salary_simulator_pays", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = 1.\n        #unitless\n        #unit\n        #Mpc/Mpc\n    #Mpc\n        #Mpc\n    for i in range(np.ar\n    #Mpc\n    #Mpc\n    #Mpc\n    #Mpc", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.setSize(new Dimension(1, 1));\n        d.setSize(new Dimension(1, 1));\n        d.setSize(new Dimension(1, 1));\n        d.setSize(new Dimension(1, 1));\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #the cutting limit\n        self.flag\n        self.container.append(self.flag=off_center\n        self.container=np.zeros\n        self.flag=0\n        self.container.append(self.container.shape(1,0)\n        self.", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowOrHide(Window window, bool show)\n\t\t{\n\t\t\tif (show)\n\t\t\t{\n\t\t\t\twindow.Show();\n\t\t\t}\n\t\t\telse\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register = self.GetBin(self, index)\n        index = index)\n        return self.Clone(index)\n        _Hist3D)\n        _content = self.GetBinContent(index)\n        if params[0]['bins']\n        self.", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           queryMessageArchiveManagement(connection, query);\n        }\n    }\n    private Query findQueryInProgress(Query query) {\n        synchronized (queries) {\n            for (Query q : queries) {\n                if (q.getQueryId().equals(query.get", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\")\n                im1L = im1L.convert(\"L\")\n                h1 = im1L.histogram()\n        else:\n            im1L = im1.convert(\"L\")\n            h1 = im1L", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\tif (rsp.getSFI() == SFI_LOG) {\n\t\t\tfinal ArrayList<byte[]> l = new ArrayList<byte[]>();\n\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tl.", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   def parse(self):\n        yield self.parseHeader()\n        yield self.parseBody()\nclass ACEParser(Parser):\n    endian = LITTLE_ENDIAN\n    _mimes = [(\"ace\", \"application/x-ace\")]\n    def create", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t\n\t}\n\t/**\n\t * This method is not used.\n\t * \n\t * @param data\n\t *          the data to send\n\t * @throws IOException\n\t * @throws IllegalStateException\n\t * @throws InterruptedException\n\t */", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       app = self.dispatch(environ, start_response)\n        return app(environ, start_response)\n\n        def dispatch(environ, start_response):\n            path = environ.get('PATH_INFO', '')\n            for prefix, app in self.apps:\n                if path", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\n\t\t\n\t\n\t#:\n\t#\n\t#\n\t#\n\t#\n\t\t#\n\t#\n\t#\n\t#\n\tsetfields = None\n\t#\n\t#\n\t# ( :\n\t#\n\t#\n\t#\n\t#", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n            {\n                throw new Exception(\"Chance cannot be negative\");\n            }\n            if (chance < 0)\n                return;\n            if (chance < 100)\n                return;\n            res = Enhance", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a user-defined enumeratedValue\n            # Create a user-defined\n            # Create a new enum_el\n        Create a new RDL\n        # Create a new_enum_el\n        # Create a new enum_el\n        # Create a new_enum_el\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"FOG Service has been configured successfully\");\n                }\n            }\n        }\n        public void writeServiceInfo()\n        {\n            File.WriteAllText(CONFIGPATH, String.Join(Environment.NewLine, alModules.Select(m =>", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            {\n            {\n            return this.SubmitText\n            {\n            }\n            set\n            {\n            {\n            }\n            }\n        }\n        }\n        }\n        }\n        }\n        {\n            {\n            set\n            {\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.currentTextureArray(this.texCoordBuffer\n                if(this.currentTextureHash\n                if(this.texArray[texArray.getTrianglePoint[0];\n                return this.texureHash[texureHash[texU[texCoord[tex", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if 'Access-Control-Expose-Headers' not in exposedHeaders\n    \"\"\"\n    response.headers.add_header('Access-Control-Expose-Headers', 'Access-Control-Expose-Headers')\n    \"\"\"\n@require_http_methods([\"GET\", \"POST", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   // remove the driver from the idle pool\n                    Driver d = idlePool.Dequeue();\n                    // add the driver to the list of old drivers\n                    oldDrivers.Add(d);\n                    // and add the driver to the idle pool\n                    Enqueue", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   [resolution, center, inverse_list, units, units, center, name, width, units, height, center, or units, width, height, shape, units, units, units, units, height, units, units, units, units, units, units, units, units, units,", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST_CONDITIONS = {\n    \"0\" : \"Low level.\",\n    \"1\" : \"Low level.\",\n    \"2\" : \"Low level.\",\n    \"3\" : \"Low level.\",\n    \"4\" : \"Low level.\",\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\t\t}\n\t\t\t\t\t(double;\n\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _sCurProgram = new TextureInfo(this, \"TextureUnit\");\n            _textures = new Dictionary<String, TextureInfo>();\n            _sCurProgram = this;\n        }\n        public void Dispose()\n        {\n            _sCurProgram = null;\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self.reactions._model = self\n        self.metabolites._model = self\n        self.genes._model = self\n        self.solution = Solution(None)\n        self.compartments = DictList()\n        self.media = DictList()\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\t\n\t\tTumourGroupListVo vo = new TumourGroupListVo();\n\t\tvo.setBean(new TumourGroupListVoBean());\n\t\tTumourGroupListVoBean voBean = vo.getBean();\n\t\tvo", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.x=current.y\n\t\t\t\tif(current.y\n\t\t\t\tif(lines[current.y)\n\t\t\t\t\tif(current.y-1)\n\t\t\t\tif(current.y,\n\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       mListView.setLayoutAnimation(set);\n    }\n\t\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\tif (resultCode == RESULT_OK) {\n\t\t\tif (getParent() !=", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestTableEnum.GetInterestTableEnum(PartnerInterestTableEnum.InterestCombo) == PartnerInterestEnum.InterestCombo.GetEnumName())\n                {\n                    if (HighestNumber < PartnerInterestRow.Interest", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\t//int[] \tscoresSol \t\t= new int[length];\n\t\t\n\t\t//for (int i = 0; i < length; ++i)\n\t\t//{\n\t\t//\tscoresSol[i] = this.class", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
