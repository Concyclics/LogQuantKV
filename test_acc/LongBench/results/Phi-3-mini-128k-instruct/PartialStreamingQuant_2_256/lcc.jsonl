{"pred": "\t\t\t{\n\t\t\t\tif ( addNew )\n\t\t\t\t{\n\t\t\t\t\tif ( add )\n\t\t\t\t\tm_Arena = new Arena( m_Arena\n\t\t\t\t\tm_Registered = true;\n", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        a.seek(0)\n        a.write_frames(np.zeros(nframes, dtype=np.float32))\n        a.seek(0", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_present(self._EMBED_CODE, wait_time=10)\n\n[Answer]:\nThe error you're encountering, `TimeoutException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class, \"value\");\n\t\t\t\twriter.addAttribute(\"type\", OLStyleValue.class, \"type\");\n\t\t\t\twriter.addAttribute(\"default\", OLStyleValue.class, \"default", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    def _handle_anagrams_blacklist(self, anagrams_prefix_blacklist, self.anagrams_suffix_blacklist, self.anagrams_suffix_blacklist = self.anagrams_prefix_del(self)\n   ", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   Send(mob, new SR_RuneAcc(mob.Account, RuneAcc.ChildRune));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a name for this rune:\");\n                    string name = mob.Prom", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n    }\n    }\n    }\n\n    @Override\n    public void send(HandshakeOutStream s) throws IOException {\n    {\n        int clen\n        if (chain.length()\n    }\n    }\n    @Override\n    @Override\n   ", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n        return (JESpace) spaceRegistrar.get", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void draw(WndBag wndBag, WndDrawContext ctx) {\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   return self.dispatcher.dispatch(self.path, self.dispatcher.dispatcher.wsdl()\n    def dispatch(self, environ, environ, method):\n        log.wsgi_dispatcher.dispatcher.dispatcher.dispatcher.dispatcher.dispatcher.dispatcher", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.mark_status_as_repeated(status_id)\n    def mark_status_as_unrepeated(self, status_id):\n        self.webview.mark_status_as_unrepeated(status_id)\n   ", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n            return self.get_file_status_id.operation_id\n        return {\"error\": False,\n                    \"status_id\": status_id,\n                    \"operation\": OperationStatus.STATUS_SUCCESS}\n        def action_create_archive(self, login, password", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            accepted_issuers = trust_manager.getAcceptedIssuers()\n            if accepted_issuers:\n                return accepted_issuers\n        return None\n    def checkClientTrusted(self", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        // Add the domain info to the request\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   #@data_stream_writer\n    def __data_stream_writer\n    def __setup_data_stream_writer\n    def __setup_data_stream_data_queue\n    def get_cmd_line\n    async def __encoder_encoder\n    def __player", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n               \n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons = getPersons();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void save()\n\t\t\t{\n\t\t\t\tsavePersons();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void flushData()", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\taddField(new FieldEditor(AUTO_SAVE, \"Auto save\", getFieldEditorParent()));\n\t\t\taddField(new FieldEditor(AUTO_SAVE_TIME, \"Auto save time (in\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.EndAction( typeof( ArchProtectionSpell ) );\n            }\n        }\n        public override void OnCast()\n        {\n            Caster.SendAsciiMessage(\"Select target\");\n            Caster.SendAsciiMessage(\"Press enter to select\");\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_for_session.\n        \"\"\"\n        \"\"\"\n        def flush_all()\n        \"\"\"\n        def _autoflush()\n        \"\"\"\n        def _get_bind_for_session\n        \"\"\"\n        def _connection_for_session\n        def _", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   classmethod = stream_request_body.\n    return method\n    @stream_request_body.\n    @asynchronous\n    return method\n    @asynchronous\n    @gen.coroutine\n    def data_received(self):\n        self.clear_headers_write", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveIndex\", viewIndex.ToString ());\n\t\t\tforeach (View v in Views) {\n\t\t\t\tv.RenderControl (writer);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic class Multi", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    wd = WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n    wd.download()\n\n\n    def download(self):\n        \"\"\"\n        This will be called", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 101)\n                {\n                    if (i == \n                    if (i == \n                    return ImbuingGumpC;\n                }\n                else\n                    {\n                    if (i == \n                    i.We", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.append({'os': 'os_windows',\n                       'os_pretty': 'Windows',\n                       'os_pretty_short': 'Win',\n                       'os_short': 'Windows',\n                       'os_short_short': 'Win',\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectIDAndIssueTypeID(projectID, issueTypeID);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\treturn true;\n\t\t}\n\t", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (var argumentSyntax in argumentSyntaxs) {\n                var argument = argumentSyntax.ToArgument();\n                if ( argument.IsByRef ) {\n                    var argumentSyntaxToReplace = argumentSyntax;\n                    argumentSyntaxToReplace = argumentSyntaxToReplace.Replace( SyntaxFactory.", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(split_test_usage_key, self.split_test_usage_key, self.split_test_usage_key, self.assertEqual(split_test_update_url, self.split_test_usage_key, 'test_usage_key,", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           Object[] metrics = new Object[0];\n            if (cmap10 != null)\n                tmp.Add(cmap10);\n            if (cmap31 != null)\n                tmp.Add(cmap31);\n            if (cmap21 != null", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"Creating cell \" + cell.getName() +", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap result) {\n            bitmapReference.get().setBitmap(result);\n          }\n          @Override public void on", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_cloud_instance and\n            match_page(summary='Select Policy Profiles') and\n            sel.is_displayed(resource_locator.format(self.obj.name))\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           if (Enabled)\n                writer.AddCssClass(Page.ResolveClientUrl(\"ToolbarButton_Enabled\"));\n            else\n                writer.AddCssClass(Page.ResolveClientUrl(\"ToolbarButton_Disabled\"));\n        }\n    }\n}\n\nCan", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tinventory.set(0, ItemStackHelper.createItemStack(compound.getStringList().get(0)));\n\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.write", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n}\n\n/**\n * @author <NAME>\n */\npublic class Scope extends FreeColGameObjectType {\n    public static final String ALL = \"all\";\n    public static final String ON", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.ut", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.first()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0],", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   def _plot_line_data\n        if self._interactive:\n        else:\n            if self._interactive:\n                self.im\n                self._plot_im(z_min=zmin, z_max=z_max, cmap=cmap,\n               ", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.StartsWith(rootFolder.Path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            toScan.ExceptWith(ignored);\n            if (toScan.Any())\n            {\n                _scanDebouncer", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(search(null), transform(remappingFunction)));", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplytoid'):\n            if self.request.has_key('inreplytoid'):\n                    reply_id = self.request['inreply_id']\n                   \n                    if self.request.has_key", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t}\n\t}\n\t\tpublic sbyte m_X\n\t\t{\n\t\tget {\n\t\t\treturn m_X;\n\t}\n\t}\n\t\tset\n\t\t{\n\t\t\t{\n\t\t\t}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = land.GetChannelUri(land.GetLandData(land.AllowVoice, land.AllowVoice, m_freeSwitchRealtion\n                // - check for the parcel\n                // - get the parcel voice info\n                // - get the", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEdit.PayPeriodEdit(textDateStart.Text,textDateStop.Text,textDatePaycheck.Text);\n\t\t\tDialogResult=DialogResult", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       column_headings = column_headings = column_headings\n        header_name = column_headings = column_headings\n        column_headings = column_headings\n        coords = coords = coords = coords = coords\n        coords = coords", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group or organization')}\n    return authz.is_authorized('group_create', context, data_dict)\ndef user_create_rest(context, data_dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble confidence = Math.pow(confidences[parentIndex], 1d / depths[parentIndex]);\n\t\t\t\tdouble defaultConfidence = (1d - confidence) / (numberOfPartitions - 1);\n\t\t\t\t// setting outcomes\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (offset < 0 || _min > 0;\n      }\n      }\n   }\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n   @Override\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        if (existingRequired && (sample == null || sample.getStudyFormName() == null)) {\n          return Valid", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendData(newConn.Socket, BitConverter.GetBytes(ProtocolVersion.Version));\n\t\t\t\t\tSendData(newConn.Socket, BitConverter.GetBytes(newConn.PlayerIndex));\n\t\t\t\t\tSendData(newCon", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingE", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot type\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (bot.HasAdequateRefineryCount())\n\t\t\t\tbot.SetRallyPointsForNewProductionBuildings();\n\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\tBaseBuilderBotModule module;\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setParent(db);\n        catalogStmt.setParent(proc);\n        catalogStmt.setParent(catalog);\n        catalogStmt.setParent(catalog.getDatabases().get(\"database\"));\n        catalogStmt.setParent(catalog.get", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\tthis.comboBox1.Size = new System.Drawing.Size(258, 20);\n\t\t\tthis.comboBox", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (int)parity;\n\t\t\tdcb.StopBits = (int)bits;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_permissions(self.user,\n        self.check_permissions(self.admin,\n        'user_profile.get_url,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                ", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, leftovers = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\n    # print \"Keep tempdir:\", _keep_tempdir\n    # print \"Config file is:\", self.cfgfile\n    # print", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.list = self.buildList(self.rescanList)\n\t\tself.updateList = self.list\n\t\tself.list.setList(self.newList = self.list\n\t\t\tself.wlanList = self.rescanList = self.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               if (generateChecksum && checksumText)\n                    fCode += \" \" + GetChecksum(code);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (text != null)\n                    fCode += \" \"", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list may include commas, but they must be quoted.\n   *\n   * @param key The key to the list\n   * @", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 15)\n        x_points = np.append(x_points, [180.0])\n        y_points = np.append(y_points, [90.0])\n       ", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (toolStripButtonSave.Enabled)\n            {\n                SavePacket();\n            }\n       ", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # ======================\n    print '====================\n    print_color\n    print_color\n    # ======================\n    return 0\n\ndef get_raw_data_from_echonest(wav_dirs_dirs):\n    # get the data from", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns a copy of the set as a list.\n        /// </summary>\n        /// <returns>a copy of the set as a list</returns>\n        public List<KeyValuePair<TK, int>> ToList()\n        {\n           ", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.Controls.Add(treeView1);\n        this.", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   GLUT = _PlatformBase(\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n        'GLUT',\n       ", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, \n        FileOutputStream.write(NID.kEnd);\n    }\n    }\n    private void writeFileEmptyStreams(final File file) throws IOException {\n        if (file.getSize) {\n            writeUint64(", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (rampDelay * (System.currentTimeMillis() - start) / 1000.0);\n                if (alphaLevel < 0)\n                    alphaLevel = 0;\n                if (alphaLevel > 255)", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            }\n        }\n    }\n        }\n        [Test]\n        public void\n        public void\n        {\n            GivenGlobalSeedLimits();\n        }\n        [Test]\n        public void\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\nawait RecycleItems(session, cancellationToken);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       for i in range(1, len(ComP[AdComp]\n\n\ndef ExpFunc(expfunc, \n        exp_func(constr, \n        ParamDict[AdComp][1]\n        [1]\n        ParamDict[AdComp][1]\n       ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                    i += ((b & 0x02)", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        course_data = {\n            'display_name': self._course_dict['display_name'],\n            'start_date': self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\ttry {\n\t\t\t\tfloat floatNumber = Float.parseFloat(splitNumber[1]);\n\t\t\t\tif(floatNumber > 100) chance = 100;\n\t\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            os.makedirs(config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.TabControl();\n            this.chkPrivacy.\n            this.chkPrivacy.TabIndex = \n            this.chkPrivacy.TabIndex = \n            this.chkPrivacy.Text =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive_type_name\n        self.archive_options.append(self.archive.log_log.info(\"\")\n            self.archive.add_file(self.archive_type_archive_name\n            self._build_archive_name\n            self.archive_name", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionAbstractFossil(ISessionBasicFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = ILocalFileExtendedFossil\n    getAllMaterialList.name = \"resources\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.err.println(\"ClientException: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), channelId, messageWriter = messageWriter.getWriter(),", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tlayer = ((Scriptable) value).toInt();\n\t\t\t\t}\n\t\t    \t}\n\t\t}\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    \treturn layer;\n    }\n", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequestDelegate() {\n            @Override\n            public void onCompleted(GraphResponse response) {\n                if (response.getError() != null) {\n                    // An error occurred, and we should not attempt to", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tif (sum > 0){\n\t\t\tfor (Emotion emotion : emotions){\n\t\t\t\temotion.strength = emotion.strength", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           },\n            {\n            'finished_at':\n            {\n            'started_at': constants.SPLITED_FINISHAS_FINISHAT_FINISHAS,\n            'stage1': {\n            'stage2':\n           ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if (NorthernHemisphere):\n        phi1 = phi1 + 180\n    else:\n        phi1 = phi1 - 180\n    #phi1 is the latitude in radians\n    if (phi1 < -90", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[username]))\n    else:\n       ", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action(self,\n    @property\n    def _license_info\n    def _license_info\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property_fields\n    @property", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.LeftToRight = RightToLeft.No;\n\t\t\t}\n\t\t}\n\t\tpublic static KPTranslation Load(string strFile)\n\t\t{\n\t\t\treturn Load(new FileStream(strFile, FileMode.Open, File", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public int getSize()\n    {\n        return getSize();\n    }\n    /**", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n            new_positional_tags_list.append(regex)\n            new_positional_tags_list.append(regex)\n            new_positional_tags_list.append(regex", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n            }\n        }\n    }\n}\n\n\n## Your task:Implement the `GetProperty` method in the `GenericParameter` class to return a `PropertyInfo` object that represents a property with the name \"Index\". The `PropertyInfo`", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Nit this out\nclass OBD_PID20(OBD_Packet):\n    name = \"PID_20_VehicleIdentificationNumber\"\n    fields_desc = [\n        FlagsField('data', 0, 17, 'I", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe:\n\t\t\tsys.exit(1)\n\t\tsys.exit(1)\n\t\t\treturn True\n\tdef main():\n\t\tif sys.argv:\n\t\tsys.exit(1)\n\t\tsys.exit(2)\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            }\n            }\n            if (m_Mana > 11)\n            {\n                AddSpell(typeof(Mystic, G, G, Mandrake, SpidersSilk, Gins, Mandrake, SulfurousAsh );\n               ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if exc is None:\n            exc = sys.exc_info()[1]\n        self.app.do_teardown_request(exc, self.g)\n        if self.preserved:\n            self.app.do_teardown_request(ex", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_columns=False)\ndef pubsub_topic(session, cluster_id, needs_id, needs_columns=False)\ndef pubsub_consumer(session, cluster_id, needs_columns=False)\ndef pubsub", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByRelease(Set<ResourceEntity> resources, ReleaseEntity release", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       phi = np.arctan2(x[1], x[2])\n    else:\n        phi = np.arctan2(src_radius * np.sin(min_rot_angle),\n                         src_radius * np.cos(min_rot_angle)", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url\n    '''\n    self.url\n    '''\n    self.url = self.url\n    '''\n    def _doSearch(self):\n        '''\n        '''\n        if self.url\n    '''\n    '''\n    '''\n    '''\n    '''\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, font_size_names [type]);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (null);\n\t\t}\n\t\t\n\t\tpublic static FontUnit Parse (string s,", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for decryption.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].Type, Is.EqualTo(TokenType.String));\n\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].Value, Is.EqualTo(\"must be an object or array", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               edges.add(new T2(\"vertex-\"+h, \"vertex-\"+h%2+\",vertex-\"+(h+1)%2));\n            }\n            if(isToroid) {\n                edges.add(new T2(\"vertex-0", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    assert np.allclose(data[0][0], [4.161.0]\n    assert np.allclose(data[1][0], 1.08000e+00)\n    assert", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       //        log.setLevel(Level.FINER);\n        //        log.setUseParentHandlers(false);\n        //        log.info(\"Starting\");\n        //        log.info(\"args=\" + Arrays.toString(args));\n        //        log.info", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.104400',\n                    u'AvailabilityZone': 'us-east-1d'}]\n        assert not alert.lowest_spot_price(history, 'us-east-1d') is None, \"", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation(performDownload());\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the presence of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, buffer);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_error_mat_inverse\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_error_cov_mat_inverse\n    @property\n    def x_model_error(self):\n        \"\"\"\n        :py:obj", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * Converts this to a String.\n     *\n     * @return a String representation\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this,", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               owningAccount = getEucalypt.getUserId());\n                if (walrusBucket.get(walrusBucket.getCanonicalId\n                owningAccount = accountIdAccounts.getAccounts(getEucalyptis\n                if", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _folderSystem.Folders.FoldersChanged += value; }\n            remove { _folderSystem.Folders.FoldersChanged -= value; }\n        }\n        public event EventHandler SelectedFolderChanged\n        {\n            add { _folderSystem.Fold", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplate importedTemplate = new VmTemplate();\n        importedTemplate.setName(name);\n        doReturn(mock(VmTemplate.class)).when(command).getVmTemplate", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.StepChange = 1D;\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.StepChange = 1D;\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.StepChange =", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.system['system]\n        # self.system['directory']\n        # self.system['category']\n        self.system['scriptstatus']\n        self.scriptstatus\n        # self.system['scriptstatus']\n        # self.system['DEBUG']\n        # self.", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Ldnull);\n\t\t\tilgen.Emit(OpCodes.St", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder() {\n      return this;\n    }\n    }\n    public static Builder MergeFrom(global::bnet.ParseFrom(byte[] data) {\n    return pb::ParseFrom(byte[] {\n      return this.BuildParsing;\n    }", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(getQuad(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code>s first vertex.\n     * \n     * @param i\n     *            The", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (m_useLanguages) {\n            if (m_useLanguages)\n        }\n        }\n        }\n        if (m_useLanguages) {\n            if (m_useLanguages)\n        }\n        }\n        if (m_useTypes", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (animDeltaTime <= 1f)\n\t\t\t{\n\t\t\t\tif (inputField.text.Length == 0)\n\t\t\t\t{\n\t\t\t\t\tVector3 tempVec3 = placeholderRect.localScale;\n\t\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.SizeChanged(e);\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region EVENT HANDLERS\n    //", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (!lastUser.IsNull())\n            {\n                Users.Add(lastUser);\n            }\n            if (Users.Count > 0)\n            {\n                SendEmailForUser(Users, AErrors", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (\n                (\n                //\n            }\n            }\n            //\n            {\n                //\n            }\n            }\n            // get the data from the dataset\n            {\n                if (AConferenceData.PcConference.Row.Row.Row.Row.", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content to args.\n                args.Add (filename, buffer).LastChild.Value = buffer;\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementRequirement = namedtuple('PayloadRequirementRequirement', ['reason', 'strong'])\n\n\n## The execution log of the code seems fine.\nThe only thing I can see is that the docstring of the PayloadRequirementRequirement", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t\t\t\tNotifyPropertyChanged(\"CustomRangeStart\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEnd\");\n\t\t}\n\t\t}\n\t}\n\t\t\t\t\n\t}\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\tpublic string XdgBaseDirectory {\nNext line of code:\n\t\t\treturn XdgBaseDirectory.Get", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: \" + bugInstance.getMessage() + \" has no source line\");\n            }\n        }\n    }\n    /**\n     * @return the reportHistory\n     */\n   ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\tpublic class Cheese : CheeseWheel\n\t{\n\t\t{\n\t\tpublic override double DefaultWeight = 0.1;\n\t\t}\n\t{\n\t\t}\n\tpublic CheeseWheel :\n\t{\n\t\t}\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"LaneClearR\") && Menu.GetSlider(\"JungleClearR\")\n        {\n            if (Menu.GetSlider(\"JungleClearW\") && Menu.GetSl", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n}\n\n\n## Your task:Improve the code by refactoring it to reduce redundancy and improve readability. Ensure that the code is more", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       tree = xml.etree.ElementTree.fromstring(self._retr_file(filename))\n        root = tree.getroot()\n        for child in root:\n            if child.tag == 'Ort':\n                if child.attrib['Name'] == region:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite'),\n            Model_parser.model_definitions('testsuite')\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               env.CompileDeploy(\"create window MyInfra#keepall as MyInfraWidening);\n                var path = new RegressionPath();\n                var stmtTextCreate;\n                env.CompileDeploy(\"create table MyInfraMyInfra(\n                    @", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def sample_orbit = self.orbit\n        if self._simulation is None:\n        if self.simulation:\n            self.simulation = other.simulation\n        if self.simulation:\n        return self.simulation.add_particle(other)\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\nview = self.browse(cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.putClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            if (oldValue != null) {\n                c.putClientProperty(BasicHTML.propertyKey, oldValue);\n            }\n        }\n    }\n    private static final String propertyKey", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.sqlloader.NamedQuery = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\tpublic void", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   private void doInlineable(MethodInvocation calleeInvocation.callee();\n    }\n    }\n    pushGraphQueue.push(new MethodInvocation(currentInvocation());\n    }\n    }\n    private void doInlineInfo(MethodInvocation calleeInvocation) {\n        assert inv", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n    def create_log_path(self.args['log_path']\n        self.log_path = self.args['log_path']\n        self.create_log_path = self.log_path\n        self.create_pytest_bindings = self.args['", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(virtual, stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(virtual, stamp);\n                    }\n                    if (phi != null) {\n                ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(event);\n    }\n    /** @see Connection.VideoProvider#handleCallSessionEvent */\n    public abstract void handleCallSessionEvent(int event);\n    /** @see Connection.VideoProvider#handleCallDataEvent */\n    public abstract void handleCallDataEvent", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1019001, \"\", 0x22 ); // You are too far away to use the map.\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendLocalizedMessage", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   from inveni.records.models import *\n\n# vim: set et ts=4 sw=4:\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.pop(user, None)\n        self.module.pop('all_users', None)\n        self.module.pop('all_sessions', None)\n        self.module.pop('all_sessions', None)\n        self.module.pop('all", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrapwidth = _Base\n    # }}}\n    def __str__(self, fpath, wrapwidth, encoding = 'utf8\n    \"\"\"\n    MOFile {\n    def __str__(self):\n        \"\"\"\n        Return the string representation of the mo file.\n   ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get transformation problematics\" )\n      return S_ERROR( \"Failed to get transformation problematics\" )\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"/\") {\n\t\t\t\treturn null;\n\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\t\t// FIXME\n\t\n\t// FIXME\n\t\n\t// FIXME", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            [w['message'] for w in self.flushWarnings()],\n            ['The Gerrit status callback uses the old way to communicate results.'])\n        msg = yield self.run_fake_single_build(self, buildResults=[buildResult", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/2005/04/sports#team'\n    self.category.term = '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: this is a wildcard type\n        // TODO: this is not implemented in a type\n        // is a wildcard type\n        // type\n        if (type.getReceiverType(type, type, type, p)\n        if (type.isDeclaredTypeM", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = context.material\n        if mat.use_shader and (mat.use_shader and mat.use_shader.type = \"BLEND_ENGINE_ENGINES_ENGINE = 'BLEND_ENGINE_ENGINE_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            mapper16_IRQEnabled = _mapper64_IRQEnabled;\n            mapper6_commandNumber = _engine.Pu.IRQEnabled;\n            mapper6_timer_IRQ_Latch1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jMenuBar.add(m_jMenuBar);\n            m_jMenuBar.add(m_jMenuBar);\n            m_jMenuBar.add(m_jMenuBar);\n            m_jMenuBar.add(m_jMenuBar);\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Math.Max (min, Frame.H);\n\t\t\tint newHeight = Height;\n\t\t\tif (newHeight < height) {\n\t\t\t\tnewHeight = height;\n\t\t\t\tAnimateY (Frame.Y + (int)", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   from django.utils.timezone import now\n    self.pub_date = now\n    self.save()\n    # FIXME: This is not the right way to do it.\n    # FIXME: This is not the right way to do it.\n    # FIX", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['.php'] = PhpLexer(startinline=True,\n                           use_token_math CmdLineParser\n# -*- coding: utf-8 -*-\n\n# -*- coding: utf-8 -*-\n\n# -*- coding", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   ''', (i,))\n    row_0 = cursor.next()\n    row_0 = (row_0[0], row_0[1], row_0[2], row_0[3], row_0[4], row_0[5], row_0", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table_create('snapshots').run()\n        conn.table_create('snapshot_events').run()\n        conn.table_create('events').run()\n        conn.table_create('backups').", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\t\tbreak;\n\tbreak;\n\tcase \"shop_headman\":\n\t\tbreak;\n\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__\n        self.codehead = ()\n        self.codetail = ()\n        self.coderep = ()\n        self.codetail = ()\n        self.coderep = ()\n        self.codestr = ()\n        self.codetail", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, start, finish, status, host_data):\n        self.uuid = uuid\n        self.name = name\n        self.start = start\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               if (uri != null)\n                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                    startActivity(intent);\n            }\n        }\n    }\n}\n\n}\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary) == 0):\n        raise AssertionError(\"primary.xml doesn't contain any packages\")\n    else:\n        print(\"primary.xml contains additional packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       if self.compile:\n            bytecode_inputs = self._bytecode_filenames(inputs)\n        else:\n            bytecode_inputs = []\n        return inputs + bytecode_inputs\n    # -- Utility functions --------------------------------------------------\n    #", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tlazyPropertyLazyCache = false;\n\t\t\t\tlazyPropertyColumnSpans[lazyPropertyLazy = false;\n\t\t\t\tlazyPropertyLazy = false;\n\t\t\t\tlazyPropertyLazy = false;\n\t\t\tla", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       #sge_cmd_arg = ' '.join(sge_cmd_arg)\n        #print >> sys.stderr, sge_cmd_arg\n        #print >> sys.stderr, \" \".join(sge_cmd_arg)\n        #print >> sys.", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0}{1}{2}\", prefix, menu.DisplayName, GetItemValueText(menu.Items[0])));\n                        }\n                    }\n                    return string.Empty;\n                }\n                else\n                {\n                   ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n        if premium_url:\n            self.logDebug(\"Premium download url: %s\" % premium_url)\n            self.download(premium_url, post={\"download\": \"show\"})\n        else:\n            self.fail(_(\"No prem", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// Find the closest harvestable cell:\n\t\t\tvar closestHarvestablePos = path.FirstOrDefault(loc => claimLayer.TryClaimCell(self, loc));", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                   self.logger.error(\"restarting dhcp service failed\")\n                    return False\n        return True\n    def clean_link_cache(self):\n        \"\"\"\n        Clears the link cache\n        \"\"\"\n        self.logger.info(\"cleaning link cache\")\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           state = _allocator.AllocateContext(state.Suffix.Suffix;\n        }\n        }\n        {\n            _runLength = _runLength;\n            _runLength = 0;\n            _runLength = 0;\n            _runLength", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQvr VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\n\tprotected void on_row_double_clicked (object o, object o, EventArgs args)\n\t{\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t//\n\t\t//\n\t//\n\t//\n\t//", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(b\"abcdefghij\", self.read(b\"abcdefghij\\x00\\x00\\x01\")\n\n    def test_insert_after_middle(self):\n        self.failUnlessEqual(self.file", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    plt.plot(cr['combined'][app][test]['stats']['durations'])\n    plt.show()\n\nif __name__ == '__main__':\n   ", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self, self.mockos.runAsEffectiveUser(\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        L{util.runAsEffectiveUser(\n        \"\"\"\n        self.assertEqual(util.runAsEffectiveUser, self.mock", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\tg.fillRect(x + 1", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\n  \"\"\"\n  failures += simulateClassifier(knn, patternDict, \"KNN Classifier test\")\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  failures", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset, value);\n    }\n    @HOSTED_ONLY\n    public void writeHeader(ObjectMirror mirror) {\n        final Kind elementKind = elementKind();\n        final ObjectAccess objectAccess = ObjectAccess.fromMirror(mirror);", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(SolutionTask.Project.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n               ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n\ndef str_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format()\n    \"\"\"\n    return string % args\n\ndef str_format(*args, **kwargs):\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i17 = i17;\n        i15 = i2i17 + i16 * i17, i16, i16, i16, i16, i16, i16, i16, i16, i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t}\n\t\treturn str;\n\t}\n\t\n\tpublic override bool Equals( object obj ) {\n\t\tif( obj == null || obj.GetType() != typeof( Layer ) )", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                Slot = 150,\n                    Radius = 150,\n                    Radius = 100,\n                    MissileSpeed = 150,\n                    Slot = SpellSlot.Q,\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n\t/**\n\t * Stubs the code list service.\n\t *\n\t * @param codelistService\n\t */\n\t@Before\n\tpublic", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE)\n    @testlib.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataCategory (\"Data\")]\n\t\t[DataCompilationCondition (typeof(DataTable).IsAssignableFrom (typeof(DataTable)))]\n\t\t[EditorAttribute (typeof(DataGridView", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout.setItem(self.verticalLayout.addItem(self.verticalLayout.addWidget(self.verticalLayout)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.verticalLayout.addItem(self.verticalLayout)\n\n        self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               detail.setVisibility( View.VISIBLE );\n            }\n            return true;\n        }\n    }\n    @Override\n    public void onActivityResult( int requestCode, int resultCode, Intent data ) {\n        if ( resultCode == RESULT_OK ) {", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(\"from Locality\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionRowCount, \"unexpected", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[uiCRCITTSum ^ uiByteValue];\n            }\n            if (refin != 0)\n            {\n                uiCRCITTSum = reflect(uiC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisp\n\t\t\n\t}\n\t}\n\t/**\n\t *\n\t * @return The sentry's speed module\n\t */\n\t\treturn getSpeedModule();\n\t}\n\t\n\t}\n\t/**\n\t * @return\n\t *\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, sourceViewer) };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller, sourceV", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.setAlignment(qt.Qt.AlignLeft)\n        self.l.addWidget(self.l, \n\n        self.l.addWidget(self.l)\n        self.l.setWidth(self.lineSize.setText()\n        self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Send\n\t\t\t\t{\n\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\tbreak", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (numHistories>0)\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t\n\t\t}\n\t\t\n\t}\n\t\t\n\t}\n\t\t\n\t\n\t\n\t\n\t\n\t\t\n\t\n\t}", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the line can be found\n                                if (orderPurchaseESD.dataRecords[unpricedLine.Key].lines[unpr", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\tthrow new NotImplementedException ();\n\t\t\t}\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic MethodInfo SyncMethod {\n\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new Not", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, mockDatabase, mockDatabase, mockCurrentSubject);\n        assertEquals(0, permission.getACECount());\n        assertEquals(1, permission.getACId(0));\n        assertEquals(ACE_", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.Clamp (viewport.Min, viewport.Max);\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.Clamp (viewport.Min, view", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t(XDREnum):\n    __members__ = [\n        endpoint_key(vlan=1, mac_hi=0x0000, mac_lo=0x0000),\n        endpoint_key(vlan=2,", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                List<ActivityBucket> activityBucketList = convertToActivityBucketList(list);\n                notifyActivityReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, activityBuck", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print '                   %s%s>' % (function_name, signature)\n  print '  private:'\n  if is_method:\n    print '    Class* method;'\n  else:\n    print '    ReturnType (%s)()' % exec_type_", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        content_type=\"application/json\"\n    )\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(whereClause);\n                whereClause.setJoinGroup(whereGroup);\n                whereGroup.setJoinGroup(whereGroup);\n                where", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.request.POST.get(\"set_is_active\"):\n            self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n    def _handle_set_is_active(self):", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the hash of the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetStatus(DefaultStatus);\n            // Solve the matrix equation\n            for (int k = 0; k < result.Count; k++)\n            {\n                // Get the current residual\n                result[k] = input[k] - matrix.Multiply", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat[] median = new Apfloat[1];\n\t\tmedian[0] = sortedNumbers[left];\n\t\treturn median;\n\t} else {\n\t\tApfloat[] median = new Apfloat[2];\n\t\tmedian[0] = sortedNumbers[", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "          \n    # Compute the nearest_neighborhoods\n    # Compute the tree_sequence\n    # Compute the tree sequence\n    # Compute the number of nodes in the reference_count_neighborhood\n    # Compute the number of nodes in the reference_count", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result['mapping'] = mapping_json[self.enrich_index]['mappings']\n        result['mapping_ok'] = self.enrich_backend.check_mappings(csv_mapping)\n        return result\n    def test_enrich(self):\n        \"\"\"Test whether", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.Value.IsBot)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif (slot.Value.Value.IsBot && botController == null)\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" \" + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override object MemberwiseClone()\n\t\t{\n\t\t\tSmbException copy = (Sm", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data + padding_bytes\n    def __repr__(self):\n        return '<DataFrame stream_id: {}, data: {}>'.format(self.stream_id, self.data)\nclass HeaderFrame(Frame):\n    frame_", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull == null)\n                throw new MsaglException(\"Cluster \" + cluster.Name + \" has no rectangular boundary\");\n            if (cluster.RectangularBoundary != cluster.BoundaryCurve.RectangularHull", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKinWorld.\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tNBTTagCompound nbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tnbttagcompound.setInteger(\"color\",", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, _returnNode, _returnNode.SelectSingleNode(typeAttribute.Value));\n\t\t\t\t}\n\t\t\t}\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\tAssert.AreEqual(default_height, default_height, myTrackBar.Height, \"#SIZE25\");\n\t\t}\n\t\t\n\t\tprivate void AreEqual(int expected1, int expected2, IntPtr handle, string name)\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t\t(ClassType);\n\t\t}\n\t\t}\n\t\tresult = Collections.empty());\n\t\t// must be write lock\n\t\tverify(Mockito.any", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t\n\t\t\t\t\n\t\t\t\n\t}\n\t\n\tpublic AccessPath getAccessPath()\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > narrowL) {\n              continue;\n            }\n            int max2 = wideRExtent[end][r.leftChild];\n            int max = (max2 > min1) ? max2 : min1;\n            if (min > max) {\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'drwxrwxrwxrwt',\n            'drwxrwxrwt\n        )\n        assert ret,\n        assert cmd.out is None\n        assert cmd.ret\n        assert cmd.list_items\n        ]\n        pipe.stdin.write.called_", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocesses.IsRunningChanged(true);\n\t\t}\n\t\t\t\t// UI threadContext.ThreadCategoryChanged {\n\t\t\t\t\tthreadCategory.Threads.Threads.CollectionChanged += threadCategoryChanged;\n\t\t}\n\t\t\tvoid DbgThread", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"diffuse\", \"color\", null, \"diffuse\", \"diffuse\", \"r\", \"g\", \"specularcolor\", \"specularcolor\", \"diffuse\", \"specularcolor\", \"specular\", \"diffuse\", \"specularcolor\", \"", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nname = output_name + '.' + ID + '.rejected_config'\nwith open(name, 'w') as f_ID:\n  f_ID.write(str(total_rej))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # We can't_list,\n        # This is a list(node.owner, op, all_shape_inp,\n        if node.op.op.set_instead_op.op(node.owner.op.op.scalar_op, node.op", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   def save(self, commit=True):\n        \"\"\"Override save to add user and community to the instance\"\"\"\n        instance = super(PermissionGroupsForm, self).save(commit=False)\n        instance.user = self.user\n        instance.community = self.community\n        if", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event.\n                query.\n                query.\n                query.\n            query.with_query\n        \"\"\"\n        def after_compile(self, query)\n        \"\"\"\n        def after_compile(self, query.\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n       ", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   ConditionalDescriptor = type(\n        'ConditionalDescriptor',\n        (ConditionalFields,),\n        {'definition_from_xml': ConditionalDescriptor.definition_from_xml,\n         'definition_to_xml': ConditionalDescriptor.definition_to_xml,\n         'get", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            if isinstance(change, ArrayValueChange):\n                change.old_value = self.filter_data(self.bg_value, self.current_filter)\n                change.new_value = self.filter_data(self.", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\tif (TypeWrapper.IsGhost)\n\t\t\t{\n\t\t\t{\n\t\t\t\t{\n\t\t\t\tCodeEmitter\n\t\t\t{\n\t\t\t\tpublic sealed class Ldref : Instruction\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/syncmail.py\",\n                                         \"buildbot/changes", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, Collection<String>> entry : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos().offset(0, 1, 0)))\n\t\t\treturn false;\n\t\treturn super.onWanded(player, wand);\n\t}\n\t@Override\n\tpublic", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           THashSet<Node> neighborsInC = new THashSet<Node>(component.getNeighbors());\n            neighborsInC.retainAll(c.getComponents());\n            intrinsicCohesion += this.getRepresentativity(component, neighborsIn", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if not docformat in flags[flagname][version]:\n                                logger.info(\"ERROR: Document %s: Expected flag %s but not found\" % (str(docid), str(docformat)))\n                                logger.info(\"ERROR: Document %s: Problem with retr", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts the specified date to a Datable.\n   * @param", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = sourceEventName;\n\t\tsourceEventBinding.SourceProperty = sourceProperty;\n\t\tsourceEventBinding.TargetProperty = targetProperty;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       List<String> nodePorts = new ArrayList<String>();\n        // Authorization check\n        String nodeId\n        String containerName = (containerName)\n        String userName = (request.getUserPrincipal\n        String nodeName = request.getUserPrincipal()\n        String", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tpublic void", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public int randomInt(int min, int max) {\n        if (min > max) {\n            throw new RuntimeException(\"min must be less than or equal to max\");\n        }\n        return rnd.nextInt", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\n\n        # make_na_equiv_uuids\n\n        \"\"\"\n        for_uu\n        :\n        \"\"\"\n        for_\n        :\n        :\n        :\n        :\n        :\n        :\n        :\n        :", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"\n            buffer.Append(\"\n            .Append(\"\n            .Append(\"\n            .Append(\"\n            .Append(\");\n            {\n                buffer.Append(\"\n            {\n                buffer.Append(\"\n                buffer.Append(\"\n                buffer.Append(\"\n               ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana.\n\t\t\t\tbytes[byteIndex] = (ch >= 0xFF61 && ch <= 0xFF9F) ?\n\t\t\t\t\t\t(ch - 0xFF60) + 0", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# 00 00 00 00 00 00 00 00 00 00 0 00 00 00 00 0 00 00 00 00 00 ", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tpropertiesMap = new Properties();\n\t\t\tstream = location.getInputStream();\n\t\t\tpropertiesMap.load(stream);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultDaclIsAllowEveryoneFullAccess ()", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, results)\n    def __process(self, results):\n        self.__idle(self.__idle, self.__idle, results)\n    def __idle(self, func, *args, **kwargs):\n        self.__idle", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.photonSetup.ReLoadSettingsFile = PhotonEditor.Current.AppId;\n        if (PhotonEditor.photonCloudAppId = (ServerSettings.AppIdInfo.AppIdInfoLabel = ServerSettings.AppIdInfo.AppIdInfoLabel", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       MessageView_full.this.getActivity().getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        return full_subj.getText().toString();\n    }\n    @Override\n    public void onStart() {\n        super.onStart();\n    }\n   ", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cd = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis] *\n                              self.ibzk_kc[k, :, np.newaxis, :].T)\n            psit_G = np", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       // TODO\n    }\n    }\n    }\n    }\n    }\n    private static final String PATIENT_TYPE_NAME;\n    private String PATI_FORNAMN;\n    private String PATIYG_TYPE_VERSION;\n    private static", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = 0; i < block.Count) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.isKinematic) {\n\t    if (rb.isKinematic.\n\t    {\n\t    }\n\t    }\n\t}\n\t\n\t}\n\t}\n\tpublic void SetBodyAnimator(BodyAnimator.Animator animator", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   \"\"\"Geological Layer for fractures\"\"\"\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture Layer\"\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)((num >>> 16) & 0xff);\n        out[outOff + 2] = (byte)", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.source = new PatternMatcher( source, objectVariables );\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    private final Map<String, PatternNode> labelToNode;", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['@from'] = value\n    elif key == 'fin':\n        node_json['@to'] = value\n    elif key == 'NODE':\n        for child_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n    }\n  }\n  public void remove(InternalFrame frame) {\n    if (frame!=null) {\n      if (buttons.containsKey(frame)) {\n        btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.table import Table\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n\t\t\t\t\tcv.put(Db.Table3.GROUP_NAME, \"New Name\");\n\t\t\t\t\tcv.put(Db.Table3._ID, newId);\n\t\t\t\t\tdb.update(Db", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid));\n                Marshal.DestroyStructure(m_ptr, typeof(WINTRUST_FILE_INFO));\n                Marshal.FreeHGlobal(m_ptr);\n            }\n        }\n        #", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL_COOKIE_NAME = 'session_cookie_name = 'session_id'\nSESSION_COOKIE_NAME = 'session_id'\n# Whether to use a secure cookies.\nSESSION_COOKIE_VERIFY = 'secure'\n# Whether to", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tif (queue.Count > numberToCancel)\n\t\t\t{\n\t\t\t\tvar item = queue.ElementAt(numberToCancel);\n\t\t\t\tplayerResources.G", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.showCurrentDirInfo()\n    \n    def doShowDir(self.currentDir)\n    \n    def treeView(self.currentDirTxtLine.setText(self.currentDirTxtLine.setText(self.currentDirTxtLine.setText(self.file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = self.bld.bld.post_cb()\n        if self.bld.post()\n        self.posted = False\n        self.source = None\n        self.targets = None\n        self.source = None\n        self.targets = None\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        rospy.loginfo(\"Succeeded the Logic Plan\")\n        self._as.set_suc", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] - chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t, hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampFormatFactory.getTimestampFormatFactory().get", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\tpublic void SetPropertyValue(MyClass, HbmProperty mapping, member, member)\n\t\t{\n\t\t\tthrow new MapperProperty(member, mapping.Column(member, mapping.Property);\n\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_enable = self.config_ntp_auth_enable = self.authentication\n        if self.ntp_auth_enable = self.state = self.module.config_ntp_auth_auth_enable = self.authentication = state\n   ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assert_item_location,\n            )\n            # test_course\n        self.assertEqual(self.store.get_item(self.course.split_send_item_location.split_send_send_course_key,  # pylint: disable=protected", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((ch[start] & 0xff) & 0xff));\ndigest.update((byte) ((ch[start + 1] & 0xff) & 0xff));\ndigest.update((byte) ((ch[start", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['start'], dict['end'], dict['inclusive'])\n    #\n    # The following are special\n    #\n    if t == 'rang':\n        return aetypes.Range(dict['start'], dict['end'], dict['in", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // If the action has a return type, we can use that as the type for the sample.\n            Type returnType = api.ActionDescriptor.ReturnType;\n            if (returnType != null)\n            {\n                formatters = new Collection<MediaTypeFormatter>(formatters);\n               ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            if self.on_create_line(record, value):\n                return True\n        return False\n    def", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanFactory.getBean(beanFactory.getBeanDefinition(beanName).getBeanName());\n    }\n    /**\n     * Returns the name", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise ValueError(\"Found non-blank line in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e),\n                            changed=False)\n    changed", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetMediaSink(\n            [MarshalAs(UnmanagedType.Interface)] out IMFMediaSinkAlt ppMediaS", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return null;\n    }\n    @Timed\n    @Override\n    @GetMapping(\n            path = USERS + { USER_ID + \":\" + USER_ID_PATH },\n            produces = MediaType.APPLICATION_JSON_", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        Arguments:\n        element Element object.\n        Returns", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   nodeType,\n        nodeType = node.node = node.nodeType = node.node = node.nodeType = node.nodeType\n        node.nodeName = node.nodeType\n        node.nodeType\n        node.nodeName = node.nodeName\n        node.owner", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t}\n\t\t\t\tgetLocationTypeObservation\n\t\t\t\tgetLocationTypeObservation\n\t\t\t\tgetLocationTypeObservation\n\t\t\tgetLocationTypeObservation\n\t\t\t\tgetLocationTypeObservation\n\t\t\t}\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\n\t\t\t{\n\t\t\t\tencoder.getLength() = encoder.getOffset()[0] = encoder.getOffset() = encoder.getSignatureInfo.getSignedPortionBeginOffset[0] = decoder.getOffset() + ", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        //Updates the HUD\n        display.update(delta);\n        //Updates the HUD\n        display.", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n            .addPlayer( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n   ", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error %d in response to GET request\" % r.status)\n    if r.status != 200:\n        raise RuntimeError(\"Error %d in response to GET request\" % r.status)\n    filename = get_filename(r.headers)\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRun)\n\t\t\t\t\t{\n\t\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction contains more than one metabolite.\")\n    return [reaction.metabolites[0].elements.get(\"C\", 0)]\ndef _find_carbon_sources(", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            store__user__isnull=False,\n            store__user__is_active=True,\n        )\n    def get_for_path(self, po", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Switch {} sending packet {} to port {}\".format(self.name, poxpkt, self.interface_to_port_map[poxpkt.srcip] if poxpkt.srcip in self.dstmac_cache else 'any'))\n                self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= getMaxCount()) {\n      if (m_RecentItems.size() == getMaxCount())\n\tm_RecentItems.remove(m_RecentItems.size", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.IsFriend(src))\n                return false;\n            return true;\n        }\n    }\n}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public void getState() {\n    return getState();\n    }\n    @Nullable\n    public void onState(Phase getState() {\n        return getState();\n    }\n    }\n    @Nullable\n    public void onStateChanged()", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t{\n\t\t\t\tbyte[] buff = ReadData(mReadData(int reportType, buff[0] = \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif(o1 == null)\n\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _indx2Units[i1]\n            _indx2Units2Units2Units2Units2Units2Units2Units2Units2\n            }\n        }\n        }\n        }\n    }\n        //UPGRADE_", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       add_view = navigate_to(self, 'Add')\n        add_view.add_button.click()\n        return rate\n    def update(self, description, currency=None, fields=None):\n        \"\"\"Update a rate in the UI\n        Args:\n            description", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, dest );\n\t\t\t\tOpenGL.UnmapBuffer( All.ElementArrayBuffer );\n\t\t\t\tif ( discardWholeBuffer )\n\t\t\t\t{\n\t\t\t\t\tOpenGL.", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = \"single_transponder\"\n\t\t\tself.sat.system.value = self.scan_system.value = self.scan_entry.system.system.value = self.scan_system.frequency.value = self.scan", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAlive only accepts one of -1,0,1 \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CNT:\n            tcpKeep", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (PdfName.Known(PdfDictionary.Get(PdfReader.Seek(PdfStream.Seek(tot);\n                }\n                else {\n                    throw new IOException(\"unknown filter\");\n            }\n            }\n            }\n            break;\n       ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar'])\n        self.assertEqual", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def p_operator(self, xx, pos_xx):\n        if self.get_options().get_p()\n        return\n    def p_operator(self, xx, pos_xx):\n        if self.get_options().get_p_deg_flag():\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n            Assert.AreEqual(\n            Assert.Parse\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object replace(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old !=", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm_Writer.WriteLine( \"## Returning item [{0}] Mobile: {1} [2], {3}, Account : {4}\", auction.ID.ToString(), m.Name, m.Serial.ToString(), m.AccessLevel.ToString(), m.Account.Username", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client', 'target': 'new', 'params': action_message}\n    @api.model\n    def _get_default_next_action(self):\n        return 'hr_attendance.attendance_action_greeting_message", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow rRow = form.grdResults().getRows().getRowByColTestName(orderInvestigationLiteVo.getSpecimen().getSpecimenId());\n\t\tif (rRow == null)\n\t\t{\n\t\t\trRow =", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.Read();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item in the list view.\n        /// </summary>\n        public int Index { get", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_terminal(self.uuid, cwd, profile, debugtab)\n        self.set_title(self.title.get_title())\n        self.set_position(self.position)\n        self.set_always_hint(Gtk", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = CreateStruct(\n                    managedType = managedType;\n                    TypeName = managedType\n                    }\n                    MarshalAttribute = null\n                    }\n                    MarshalAttribute = marshalAttribute\n                    = null\n                    TypeInfo = null\n                ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType; }\n\t\t}\n\t}\n\t}\n\t}\n\tpublic bool IsValueType {\n\t\tget {\n\t\treturn base_type.IsValueType;\n\t}\n\t}\n\tset {\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private void evidence_EvidenceLookup(object sender", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self._context = OpenSSL.SSL.Context(_openssl_to_stdlib_verify[protocol])\n        self._context.set_options(\n            _openssl_to_stdlib_verify[protocol],\n            _openssl_to_stdlib_verify[protocol],", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox3\n\t\t}\n\t\tthis.vbox3.Add (this.vbox3);\n\t\tthis.vbox3.Position = 0;\n\t\tw20;\n\t\tw22.Position = 0;\n\t\t", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    _ensureReadForGameWidgets\n    def_\n    #\n    # The sidepanels\n    def _callback (notebook, gtk.Notebook.connect(\"switch_page\", gtk.connect_notify_panels.get_current_page_num, gtk", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_C,\n    \"Go-to-this-line\": QKey_F3\n    \"Locate-this-line\": Q", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + persistenceUnitName + \", persistenceProviderClassName=\" + persistenceProviderClassName + \", transactionType=\" + transactionType + \", nonJtaDataSource=\" + nonJtaDataSource + \", jtaDataSource=\" + jtaDataSource + \", mappingFile", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void refreshVisuals()\n  {\n    if (isSelected)\n    {\n      if (isHighContrast())\n      {\n        setFont(new Font(Font.DEFAULT, Font.PLAIN, 12", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(182, 652);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return URLEncodedUtils.format(sb.toString(), \"UTF-8\");\n    }\n}\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// (\n\t\t\t\t0x0b, 0x9f, 0x1a, 0xef, 0xb, 0x0a, 0x0e, 0x9f, 0x1a, 0x", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_sum;\n\t    \n\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // intVal\n\t    current_sum += IntegerSerializer.getMaxCdrSerializedSize(current_align);\n\t    sum", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if job:\n                    if job in l:\n                        return [comment, l]\n                else:\n                    return [comment, l]\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n            if l.starts", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier_json = None\n\n\nclass MeshModifier_json = None\n\nclass MeshModifier_data_vertex_tex_uv_uv_map_tex_mapping = None\n        modifier_json['mask_tex_uv_uv_uv_", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           if(rankCounts == null)\n                continue;\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    rankCounts[i] =", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2,", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.parser(self.choice, cap=self.cap)\n            except (KeyboardInterrupt, EOFError):\n                print(self.grn+'[*] Exiting...'+self.blk)\n                return\n            except Exception as e:\n                print(self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'object_name': 'django.db.models.Meta', 'ordering': 'django.db.models.fields.CharField', 'max_length': '50'}),\n            'title': ('django", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               returnTypes(sTypeName);\n                }\n            }\n        }\n        }\n        }\n    }\n    }\n    }\n    }\n    private void processIncludes(QName, QName) {\n        if (inclusion) {\n        returnTypes(Q", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n            self.unlink_id\n        \"\"\"\n        \"\"\"\n        self.unlink_id:\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           /// <summary>\n        /// <param name=\"GridBaseManager.GridBase\n        /// <summary>\n        ///\n        /// <param name=\"grid\n        ///\n        /// <returns the grid\n        ///\n        ///\n        ///\n        /// <returns the grid\n        ///", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return string.Format(\"MixerLine: {0}, Type: {1}, Channels: {2}, SourceCount: {3}, ControlsCount: {4}\",\n                this.Name,\n                this.TypeDescription,\n                this.Channels,\n                this.SourceCount", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tif (null == null)\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           opts += [\"--\"]\n            if android:\n                opts += [\"--android\"]\n            if android_glue:\n                opts += [\"--android-glue\"]\n            if android_glue:\n                opts += [\"--android-glue\"]\n            if android:\n               ", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t//\treturn score;\n\t\t\t//\t\n\t\t\t//\t\t\t//\t\treturn score;\n\t\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdouble score = this.getOptimisticScore(counts", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               StashMessage.Text = gitStash.Message;\n                StashMessage.Enabled = true;\n            }\n            if (gitStash.IsUntrackedFiles)\n            {\n                MessageBox.Show(_stashUntrackedFilesNotSupportedCaption,", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item.out_address\n    assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return this.match(o) == 0;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return this.match(this) * 31 + (this.", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    }\n    }\n    public class AddNumbersService\n    {\n        public AddNumbers()\n    {\n            this.Url = \"http://localhost:88888;\n            this.Url = \"http://localhost:88888", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = (EClassifier)value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this,", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.func == list_index:\n        args.func(archive_index, args)\n    elif args.func == change_password:\n        args.func(archive_index, args)\n    elif args.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss = t\n        self.cmd_ss, self.cmd_es = t\n        self.cmd_ss, self.cmd_ss, self.state", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n        // (, line 169\n        // (, line 17\n        // (, line 18\n        v_1:\n        do {\n          // (, line 18\n        } while (false);\n        // setlimit, line 19", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception e) {\n                System.out.println(\"Error: \"+e);\n            }\n            if (o != null) {\n                cd = channelMap.get(channel);\n                if (cd == null) {\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_subject_key_info\n\n    def _get_subject_key_usage\n    def _get_subject_key_usage_usage\n    def _get_authority_key_usage_get_key_usage\n    def _get_key_usage_usage", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (Slots::iterator i = s.begin(); i != s.end(); ++i) {\n\t    print(\"\\t\\t\\tif (i->second == *i) {\", file=f)\n\t    print(\"\\t\\t\\t\\tst", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   front_seq = [0xE000, 0x10000]\n    back_seq = [0x10000, 0x110000]\n    #     (The following **must** hold according to the definition of the", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 10) {\n\t\t\t\tExpect(20);\n\t\t\t\tif (la.kind == 11) {\n\t\t\t\t\tExpect(12);\n\t\t\t\t\tGraph g2;\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line['product_id']\n            edi_doc['product_uom_id'] = line['product_uom_id']\n            edi_doc['product_qty'] = line['product_qty']\n            ed", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions.setService.setReadOnly());\n        }\n        }\n        }\n        assertTrue(AccessStatus.hasPermissionAs(virtualContent,\n                     asUser1,\n                     PermissionService.setPermissionService.\n                     false);\n        }\n        this.", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(devices)\n\nThis line seems to be causing an issue. Can you explain why it's there and what it's supposed to do? It looks like a redundant operation. If the intention was to convert the Enumerator object to a list, the conversion should have been done", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    app = Device(deviceToken)\n    user = User(app, loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId=\"1\",", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    rd = { 'antp\n        'antnum': 0,\n        'antnum': 0,\n        'antpos': { 'name': 'W1C0\n        'freq': 0,\n        'source': 0,\n        'stokes", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           _ItemID = CraftSystem.GetItemID(this);\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       TunerManager.getTunerList(addDevice);\n        }\n        }\n        if (addDevice) {\n            // If we are adding a device, we are not adding live devices\n            // If we are adding a device, we are adding liveDevices\n            // D", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.CURRENT_VERSION) {\n      jobs.put(", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER: line \" + lineCount + \" in mapping file is missing a regex or a type\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexString :", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.AppendENVPath('BIBINPUTS', os.path.join(env['BIBINPUTS'], n))\n            #env.AppendENVPath('BSTINPUTS', os.path.join(env['BSTINPUTS'], n))\n            #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return None\n    def features(self,\n        def make_it(self,\n        return None\n        \"\"\"\n        \"\"\"\n        Return an iterator which yields instances of PythonDatasource\n        \"\"\"\n        self.datasource = None\n        \"\"\"\n        def features(self, key", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.ip = self.ip\n        self.port = self.port\n        self.destination = self.port\n        self.description = self.description\n        self.manual_resume = self.manual_resume\n        self.debug = self.debug\n        self.filter", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Add Method' and\n            self.script.is_displayed and\n            self.script.is_displayed and\n            self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"No action class found for \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return getActionObject(className);\n    }\n    public IAction getActionObject(String className, IEventSubscriber", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.assert_kwargs_standalone, self.test_create_thread_id):\n        self.update_thread_id)\n    @patch.assert_thread_id):\n        self.assert_thread_id):\n        self.assert_equal(self.assert_equal", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Util.RegressionTest(target, source, embedManifestDllAction,\n                                                    [manifestSrc, source[0]],\n                                                    env,\n                                                    'embed_manifest_dll',\n                                                    'embed_manifest", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(new SubProgressMonitor(shell.getDisplay(), 0, true), errorStatus);\n        } catch (OperationCanceledException e) {\n            // Do nothing\n        } finally {\n            shell.close();\n        }\n    }\n}\n", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts=new int[meta.getFieldCount()];\n\t\t\n\t\treturn super.init(smi, sdi) && checkInitialMetaIsSet();\n\t}\n\t\n\tpublic boolean deconfigure(StepMetaInterface smi, StepDataInterface sdi", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regrs\n    assert f(2014,12:30, 12,30, 12:30, 12:30)\n    assert f(2014,12, 12:30, 1", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int z = int.ToInt32(s, smaxtime, m_MinTimeSpan, m_MinTimeSpan.ToMinutes, m_MinTime);\n            }\n            }\n            m_MinTime = m_MinTime;\n            m_MaxTime =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(suspend_support_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest doesn't support suspend\")\n        s, o = self._session_cmd_close(sus", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(\"[PUB]\");\n        final Future<Boolean> rc2 = service.submit(pub);\n        assertThat(rc2.get(), is(true));\n        System.out.println(\"[PUB] done\");\n        service.shutdown", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                this.owner.getDecorator().setOnSendRequestAfterParameters(res, destination, r);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tvar bytes = BitConverter.GetBytes(value);\n\t\t\treturn BitConverter.ToUInt32(bytes, 0);\n\t\t}\n\t\tstatic void WriteCompressedUInt32(BinaryWriter writer, uint value) {\n\t\t\tvar bytes", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.open_file(self.fm.thisdir.path\n        self.fm.thisdir.path.path\n        self.fm.env.reload_cwd.load_content\n        self.fm.thisdir.load_content\n       ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\t[ExpectedException (typeof (MissingMethodException))]\n\t\tpublic void CreateInstance_NonExistentMethod ()\n\t\t{\n\t\t\tActivator.CreateInstance (new NonCOMTest(), \"NonExistentMethod\");\n\t\t}\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       de = Locale.objects.get(code='de')\n        self.assertEqual(Signoff.objects.count(), 2)\n        self.assertEqual(AppVersionTreeThrough.objects.count(), 2)\n        self.assertEqual(AppVersionTreeThr", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.execute_control_message\n        \"\"\"\n        self.Log.debug(self.Log.debug(\"sending command: %s\", self.control_message)\n        self.Log.debug(\"message: %s\",", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n/**\n * Send a message to all group members\n */\npublic static void send", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\nclass Tokenizer(object):\n    def __init__(self, toks):\n        self.toks = toks\n        self.toks_by_col = self.cut()\n        self.col_widths = self.get_col_widths()\n\n    def", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column = QuantitySelectionColumn(None, 0, 10)\n        self.assertIsInstance(column, HasSortableWidget)\n        self.assertEqual(column.get_sort_data_type(), 'text')\n        self.assertEqual(column.get_sort", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    parent.release();\n\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n    /**\n     * set the value valuesdisplayed\n     * \n     * @param valuesdisplayed value to set\n     **/\n    public void setValues", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt32(element.Attributes[\"ImageIndex\"].InnerText);\n                GrayImageIndex = Convert.ToInt32(element.Attributes[\"GrayImageIndex\"].InnerText);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\tm_key[i] = null;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tChangeOfServiceVo vo = beans[i].buildVo();\n\t\t\tif(vo != null)\n\t\t\t\tcoll.add", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Argon2Kdf.Kdf.SetDefaultParameters(p, 3, 4, 0, 0x8, 0x32, 0x2, 0x8, 0x38, 0xC, 0xA", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's inventory.\n\t * @return The discount applied to the player's inventory.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n\n\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tLayer newFrame = Lights.Clone ();\n\t\t\t\t// Copy the bl", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            responseInts(p);\n            dc.setCDMA_DataCallList(p);\n            responseInts(p);\n            }\n            responseInts(p);\n            case RIL_REQUEST_SET_PREFER", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.getLicenceType().equals(LicenceEnumType.COMMERCIAL)) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizePixelsPerTile + xPixelsPerTile / 2] = newVertices[y * xSizePixelsPerTile + xPixelsPerTile / 2] = newVertices[y * xSizeP", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tif (rawResult.equals(testInt1))\n\t\t\t\t{\n\t\t\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionStart()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getBlockSelectionEnd()\n\t\t\t{", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"No such object\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0;\n            pixel_y = 0;\n            sx = 0,\n            j = 0;\n            pixel_x = 0,\n            j = 0,\n            j = 0,\n            pixel_y = 0,", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n\n\n\n\n                    {\n                    var collision = spell.CollisionObject\n                    {\n                    var collisionObjects = spell.To\n                    {\n                        }\n                    : Obj_AI_Base\n                    {\n                        }\n                    : Ob", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(y);\n        Node a = path.get(0);\n        Node b = path.get(1);\n        Node c = path.get(2);\n        if (!graph.isDefCollider(a,", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop.Children[i] is Drawable)\n                        plcs.Push(pop.Children[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        #region Initialization\n        public override void Initialize(ScriptManager scriptManager)", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment otherAttachment = (FinancialEntityAttachment) other;\n        if (this.attachmentId == null) {\n            if (otherAtt", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       mobiles[i].DoHarmful(mobiles[i]);\n                    }\n                }\n            }\n        }\n        public override void OnAfterDelete()\n        {\n            if (m_Timer != null)\n                m_Timer.Stop();\n            base", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(new KeyValuePair<PlayerMobile, WorldChatMessage>(user, msg));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getComponentIds(String sUserId) {\n    return mock.getComponentIds(sUserId);\n  }\n  @Override\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        final String name = file.getName();\n                        final String path = file.getAbsolutePath();\n                        final String zipName = name.replaceAll(\"\\\\.zip$\", \"\");", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.channel.close();\n}\n    public void a(PacketListener packetListener) {\n        this.a(packetListener);\n    }\n    public void a(GenericFutureListener<Future<?>>[] genericfuturelistener, GenericFutureListener<Future<?>>[]", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if find_tipper = False\n                \n        # read_data_dict = dict_read_data_dict.read_j_file.read_j_file.read_j_file.read_j_file.read_j_file.read_j_file.read", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              String.format(\"%1$s and %2$s\",\n                                            TextUtils.join(\", \", recipients.subList(0, recipients.size() -", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if not self.config[\"tools\"][\"system-rust\"]:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    if isinstance(test, dict):\n                        test = test_cls.from_json(tests_root, test)\n                    tests[path].add(test)\n            self", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = (Script) script.getClass().getAnnotation(CompileTimeStrategy.CompiledScript.class).value();\n        }\n    }\n    private static Compiler", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <returns>The timeout in milliseconds</returns>\n        protected virtual int ServerGetTimeout()\n        {\n            return ServerGetTimeout();\n        }\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     transformed_grad = grad_var*i + self.y_means[0]*grad + grad_means\n      transformed_grad = transformed_grad.reshape(-1,3)\n      transformed_grad = np.asarray(transformed_grad)\n      return transformed_", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\tif(caseInsensitive)\n\t\t\t{", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, stacks);\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.getTags().addAll(asList(\"search-tag1\", \"search", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(ParameterDataService.DEPTH);\n        parameter.setParameterValue(depth);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEXP\n        parameter = new ParameterImpl();\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == S.Kind(LNode.Kind.Kind.IsTriviaInParen(kind)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t\n\t}\n\tprotected void setControl(\n\t\t\t\n\t\tsuper.setControl(form, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   print(pattern)\n    print(re.search(pattern, frozen).group())\n    print(re.search(pattern, frozen).group(1))\n    print(re.search(pattern, frozen).group(2))\n    print(re.search(pattern,", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs.value", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, y, (x, y, (x, y))\n    assert Sum(x, y, y)) == Sum(x, y))\n    assert Sum(x, y)) == Sum(x, x, y)) == Sum(x, x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tUnityEngine.WW\n\n## Your task:In the context of the provided Lua_UnityEngine_WWW class, which method is used to load", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._oldItemList = null;\n            this._oldStartingIndex = startingIndex;\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = startingIndex;\n        }\n        else", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToOutputStream(objectToWrite);\n        }\n        }\n        }\n        }\n        }\n        }\n        if(null != null) {\n            throw new Exception();\n        }\n        }\n        if(null) {\n            throw new Exception();\n        }", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t\t//read the IconDirEntrySize\n\t\t\t\t\t\t\t\t\t\t// read the IconDirEntryCount;\n\t\t\t\t\t\t\t\t// read the IconDirEntry;\n\t\t\t\t\t\t// read the IconDirEntry;\n\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (JSR) {\n                if (JSR) {\n                if (JSR) {\n                l\n                l\n                l.successors\n                l.\n                l\n            }\n            }\n        }\n    }\n    }\n    // -------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(ptr_of_this_method, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            var result", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t}\n\t\n\tprivate void setBlockOutline(LineStyle lineStyle) {\n\t\tif(lineStyle == null)\n\t\t\tsetBlockOutline(null);\n\t\telse\n\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getFirstValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.gss_kexg = self.transport.gss_kexgss_hostkey\n        self.old_style = self.old_style = self.p\n        self.old_style = self.old_style = self.gss_hostkey", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName, connectionData);\n            if (disableTreeSelection) {\n                node.putClientProperty(\"JTree.lineStyle\", \"Angled\");\n            }\n            tree.insertNodeInto(node, tree.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code))\n                return result\n            \"\"\"\n            class 'smart_salary_simulator.smart_contract'\n                id = self.env['smart_salary_simulator.contract", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = MfracToMfrac(Mvir, zi, frac=200.0)\n    #MfracToMfrac\n    #Mfrac\n    #MfracToMfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    for", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getBounds().getWidth() * 0.75);\n        d.height = (int) (getBounds().getHeight() * 0.75);\n        return d;\n    }\n    \n    @Override\n    public Dimension", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #the_dist=np.array(0.0,1.0,0)\n        #dist_list=[],\n        #dist_list=[],\n        #list=[]\n        #dist_list=[0,0,0,0]\n        #dist_list=[", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void _ordersWindow_SelectionChanged(object sender, SelectionChangedEventArgs e)\n\t\t{\n\t\t\tvar order = _ordersWindow.OrderGrid.SelectedItem as Order;\n\t\t\tif (order != null)", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D)\n    def __init__(self, *args):\n        _Hist3D.__init__(self,\n        if index)\n    def _centers(self, index):\n        if index == -1:\n            return self.GetB", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getPagingOrder() == PagingOrder.REVERSE ? query.first : query.last);\n        }\n    }\n    public Query getQuery(XmppConnection connection, String queryId) {\n       ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    else:\n        yield", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionLost(Throwable cause) {\n\t\tlog.error(\"Connection lost: {}\", cause.getMessage());\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path = environ.get('PATH_INFO', '').lstrip('/')\n        for prefix, app in self.apps:\n            if prefix and path.startswith(prefix):\n                environ['PATH_INFO'] = path[len(prefix):]\n                return self.wsgi_", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( data )\n\t\tmodel\n\t\tfieldset = [ 'xsetfield ]\n\t\txsetfield = self.data.fields\n\t\t\t\n\t\txsetfield = self.data.data.fields\n\t\txsetfield = self.data", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (CraftResources.IsStandard(CraftResource.Heartwood) && chance < 10)\n                return;\n            if (CraftResources.IsStandard(CraftResource.Heartwood) && chance < 100)\n                return;\n            if (", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new RDLType\n        self.assign_field_el\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Create a new field\n        \"\"\"\n        def\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Create a new enum\n       ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No FOG Services found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate application directory!\");\n                this.Close();\n            }\n        }\n    }\n}\n\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                object obj = (object)\n                {\n                return (obj)\n                {\n                }\n            }\n            }\n        }\n            {\n                this.ViewState[\"SubmitText\"]\n                return (string)\n                {\n                this.Value\n                }", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(textureHash\n                if(this.textureArray[textureArray[textureHash[textureHash]\n                if(this.currentTexture[textureHash];\n                colorBuffer\n                this.vertexBuffer.clear();\n                this.vertexBuffer.clear", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\ndef require_course_access(view_func):\n    \"\"\"\n    Decorator that ensures that the user has access to the course.\n    \"\"\"\n    @wra", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n       ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if not inverse_center, center, units, units, units, radius, resolution, upper_left_extent, units, center, upper_left_extent, units,\n    new_center = _round_units = _sign, inverse_units = 'units, units", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(STARTED)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nSTART = sm.getQKeyValue(\"cond\")\nSTART2 = \"cond\"\nsm.sendNpcController(", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\tstring str = string.Format(\"{0}\n\t\t\t}\n\t\t\t\treturn str;\n\t\t}\n\t\t}\n\t\t}\n\t\t\tcatch (Exception exception)\n\t\t{\n\t\t\t\tempty = PlayTime.Empty;", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(_sCurProgram);\n            Attributes.Add(new AttributeInfo(this, \"Position\", 0, 0, 0, 0, VertexAttribPointerType.Float, true));\n            Attributes.Add(new AttributeInfo(this,", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case\n        self._reaction = set([])\n        self._metabolite = set([])\n        self._gene = set([])\n    # A list of all reactions in the model\n    self.reactions", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\tif(current.y<1){\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new AccelerateDecelerateInterpolator());\n        mListView.setLayoutAnimation(controller);\n    \t\n    }\n\t\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    ARow.SetFieldKey(row.FieldKey);\n                    break;\n                }\n                else\n                {\n                    ARow.SetFieldKey(row.FieldKey + 1);", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(pssm, i);\n\t\t}\n\t\t\n\t\tfor (int i = 0; i", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
