{"pred": "   private final transient JKademliaStorageEntry storageEntry;\n    private final transient KademliaRoutingTable routingTable;\n    private final transient KademliaConfiguration config;\n\n    private final transient KademliaSerializer serializer;\n\n    private final", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(mSpectaculumView);\n\n        mParameterListAdapter = new EffectParameterListAdapter(m", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, dk0, dk1):\n       ", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private List<Effect> mEffects;\n    private Effect mSelectedEffect;\n    private ImmersiveSensorNavigation mImmersiveSensorNavigation;\n    private List<Effect> mEffects;\n    private Effect mSelectedEffect;\n    private ImmersiveSensorNavigation m", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFre", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务执行器\n     */\n    private TaskRunner taskRunner;\n\n    /**\n     * 任务执行器\n     */\n    private TaskRunner taskRunnerLocal;", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tprintNoNewline(format(\"Found %d problem(s)\", problems.size());\n\t\t\tif (args.dryRun()) {", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           Log.d(this.getClass().getSimpleName(), \"Device registered with id \" + deviceId);\n\n            // send the registration id to the server\n            // TODO: send the registration id to the server\n\n            return true;\n        } catch (Exception e) {\n           ", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n  @Test\n  public void testProcessSignResponse() throws U2FException {\n    when(mockDataStore.getSecurityKeyData(", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "       self.acctA = results[0]\n        self.acctO = results[1]\n        self.state = CCStateConnected\n        self.uaO = SipTo(self.global_config, self.remote_ip, self.caller_name, self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   pass\n\n\nclass FlagList(Signature):\n    \"\"\"\n    A list of flags.\n\n    Flags are bit fields, and are stored as a list of integers.\n    \"\"\"\n    def __init__(self, *args):\n        super(FlagList, self).__", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           raise ValueError(\"Consistency error\")\n\n  def __repr__(self):\n    return 'Constraint(%s)' % self.tree\nequip/analysis/constraint/expr.py\nclass ConstraintVisitor(object):\n  \"\"\"\n    A visitor for the constraint A", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity != null && activity.getSupportFragmentManager().findFragmentByTag(", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       LocationData locationData = new LocationData();\n        locationData.setLatitude(latitude);\n        locationData.setLongitude(longitude);\n        locationData.setId(AppSettings.sUserLogin);\n        // TODO: Add code to post location data to ForkMe", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       self.assertTrue(self._validate_allocation(\n            self._make_segment(\n                (('0',),\n                self.net['net1'].network,\n                self.batch_size, self.resource),\n            (('1',),\n                self.net['", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   user = User(id=\"user_id\", email=\"user@domain.com\")\n    assert init_called\n    assert user.id == \"user_id\"\n    assert user.email == \"user@domain.com\"\n    assert not hasattr(user, \"name\")\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "           if isinstance(result, XPathToken) and result.symbol == '?':\n                result.value = result.evaluate(context)\n            else:\n                yield result\n\n\n@method(infix('|', bp=32))\ndef evaluate_union_operator", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new RSGaussianBlurTransformation(new RSGaussianBlurTransformation(context, 5)),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> SHOW_TRAILERS = (view, index) -> {\n        view.setVisibility(View.VISIBLE);\n        TrailerAdapter.showTrailer(view, index);\n    };\n\n    private", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n                server.getMBeanServerConnection().addMBean(instance, name);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (Exception e) {\n                writeResponse(FAILURE, correlationId);\n               ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild.insert()\n\n        await ctx.send(f\"Reported {wild.pkmn.label} at {wild.location.location_text}!\")\n\n        if role:\n            await ctx.send(f\"{role.mention} has been", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   data = SNLIData(c['data'], vocab=vocab, retrieval=c['retrieval'])\n\n\ndef _initialize_simple_model_and_data(c):\n    if c['vocab']:\n        vocab = Vocabul", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50., ", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def test_extend_too_many_times(self):  # pragma: no cover\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(TooManyExtensions):\n            for extension_num in range(", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   self.threed_cone_settings = ConeSettings(self, \"Channel\")\n\n    @property\n    def channel_count(self):\n        \"\"\"Number of channels in the sound.\n\n        :type: int\n        \"\"\"\n        return self._channel_count\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, calg, data):\n        self._calg = calg\n        self.data = data\n\n    def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes += self.calg.to_bytes(1, 'big", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   cellSize = findCellSize(img2, detectSpotsParameter, verbose = verbose, out = out, **parameter);\n    #cellSize = findCellSize(img2, verbose = verbose, out = out, **parameter);\n    #cellSize = findCellSize(img2,", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume /", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\r\n\r\n                printer.print(transactionIterator.next());\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkDirectoryValid(File directory) {\r\n\r\n        if (!directory.exists()) {\r\n           ", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (query.queryType == RequestType.TIMESERIES || query.queryType == RequestType.TOPN) {\n                    Either<JSONArray, JSONObject> result = coordinator.getResult(stmnt.dataSource, reqHeaders);\n                    if (result.", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "               algorithm_parameter_name='KYE',\n                algorithm_parameter_value=b'0123456789012345678901234567890123456789012", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           subexpRecursiveCheckTrav(root, i);\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_CEC) {\n            if (env.backrefedMem > 0)", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^add-package-ci-pipeline$', AddPackageCIPipeline.as_view(), name=\"add-package-ci-pipeline\"),\n    url(r'^delete-graph-rule$', DeleteGraphRuleView.as_view(), name=\"delete-", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   self._storage_type = storage_type\n\n    def get_storage_type(self):\n        return self._storage_type\n\n\n#\n# DB COUNT RECORDS\n#\n# Asks the number of records in a database.\n#\n# Request: (database", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            Class<$Argument2> mutableArgumentClass, CheckedConsumer<$Argument2> givenStep) {\n        preparation.recordGivenStep(mutable", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   return MoreObjects.toStringHelper(CommandResult.class)\n        .add(\"exit code\", process.exitCode())\n        .add(\"stdout\", MoreObjects.toStringHelper(ByteArrayOutputStream.class)\n        .add(\"bytes\", process.stdoutBytes())\n        .add(\"string\",", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\ttextColor = Color.parseColor(options.getString(Keys.COLOR_TEXT, \"#000000\"));\n\t}\n\t\n\tprivate void setTextViewParams(TextView tv) {\n\t\ttv.setTextSize(textSize);\n\t}\n\t\n\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(xml, Message.class);\n\t\tif (msg.isTextMessage()) {\n\t\t\treturn talk(msg.getFromUserName(), msg.getContent());\n\t\t}\n\t\tif (msg.isImageMessage()) {\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 获取运行时特征并存储在 '该文件路径' + '_info_/' 目录中，\n    # 因此调用该函数时需要先检查以上目录是否存在", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "       @group(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n        async def cmd_raidcity(self, ctx, *city):\n            \"\"\"\n            **!raid-city city-name** - creates a raid party channel", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "   @freeze_time(FAKE_NOW)\n    def test_date_strings_get_converted_to_dates(self):\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), FAKE_NOW", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file, os.path.dirname(config_file))\n        config_actor.start()\n\n        # start database actor\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePicture(mActivity, picUrl, \"分享自煎蛋 \" + picUrl);\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.shareText(mActivity, picture.getText_", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\twrite_tm_filetype(\"pFWER_%s\" % opts.tmifile[0],\n\t\t\t\t\t\timage_array = outdata,\n\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               SurveyActivity.class,\n                SurveyPromptLoader.class,\n                StreamContentProvider.class,\n                ResponseSyncAdapter.class,\n                StreamSyncAdapter.class,\n                OhmletActivity.class,\n                OhmletFragment.class,\n                OhmletSearchFragment", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ElGamal: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ElGam", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_self():\n            if is_element_node(item):\n                self.add_xsd_type(item)\n            elif item is context.root:\n                # item is the schema\n               ", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter,\n    }\n\n    def __init__(self, source, varz_tag):\n      self._source = source\n      self._varz_tag = varz_tag\n      self._heap = []\n      self._no_members =", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "   nc._connections = {\n        '127.0.0.1:5678': mock.MagicMock()\n        }\n        nc.send_message('127.0.0.1:5678', 'foo', protocol)", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"query\", qe.getQuery());\n        assertEquals(\"query\", qe.getQuery());\n        // end::query[]\n    }\n\n    public void statementExecution() {\n        // tag::statement[]\n        ProxyTestDataSource ds = new ProxyTestDataSource", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n\n    @Test\n    public void testBatchExecutionSuccess() {\n        StatementBatchExecution se = new StatementBatchExecution();\n        se.setSuccess(true);\n\n        ProxyTestDataSource ds = new Pro", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR request\")\n            yield self._sendLinkADRReq(device)\n            \n        self.adrprocessing = False\n        returnValue(None)\n    \n    def _createLinkAD", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "               pbar.update(1)\n                for proc in procs:\n                    p.join()\n                if error_dict:\n                    for v in error_dict.values():\n                        raise v\n            else:\n                for args in self.fmllr_rescore", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       FragmentObservable<Chat> observable = new FragmentObservable<Chat>(this);\n        observable.register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       json_dict['ref_time'] = self.img_handle.ref_time\n\n        else:\n\n            # Get time from the config\n            json_dict['ref_time'] = self.config.ref_time\n\n\n        # Save the frame number\n        json_", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        mHomeServerNames = new ArrayList<String>();\n        mAdapter = new ConsoleRoomSummaryAdapter(this, mPublicRoomsListList);\n        mMyRoomList.setAdapter(mAdapter", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfig", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "chim_detect = ChimeraDetector(raw_bp_graphs, target_sequences,\n                                  args.block_sizes, args.resolve_repeats)\n\n    #breaking contigs\n    new_container = chim_detect.break_", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);\n    }\n\n    @Override\n    public void onDisable()", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                }\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            default:\n                Log.e(MYTAG, \"推送类型未知\");\n        }\n    }\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "\n    }\n\n    @Override\n    public String getConnectionId() {\n        return connectionId;\n    }\n\n    @Override\n    public MBeanServerConnection getMBeanServerConnection(Subject subject) {\n        return mbeanServerConnection;\n    }\n\n    @Override", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   private JTextField descriptionTextField;\n    private JTextField recommendationTextField;\n    private JTextField notesTextField;\n    private JTextField notes_collection_script_textfield;\n    private JTextField nessus_compliance_result_textfield;\n    private JTextField import_tool_id", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createAllMetricChartPanel(\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        for (int metric = 0; metric < DatasetGenerator.NUM_METRICS; metric++) {\n            createMetricChartPanel(", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.MESSAGE && !packet.isAckRequested()) {\n            if (packet.getData() instanceof List) {\n                List<Object> data = (List<Object>) packet.getData();\n                for", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "     videoSource = factory.createVideoSource(\n          appRtcClient.videoCapturer(), appRtcClient.pcConstraints());\n      } else {\n        videoSource = factory.createVideoSource(null, appRtcClient.pcConstraints());\n      }\n      videoSource.add", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n        @Override\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n            super.onUpgrade(db, oldVersion, newVersion);\n        }\n\n        @Override\n        public void onDowngrade(SQLiteDatabase db, int", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getSupportActionBar().setDisplay", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "\n    return obj\n\n\ndef main():\n    import coopy.foundation\n    import coopy.network\n    import coopy.snapshot\n    import coopy.utils\n    import coopy.validation\n\n    # create a system object\n    system = coopy.foundation", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    self.config.container.run_command(docker_config.render_command_string())\n\n    if self.config.debug_valgrind:\n        DebugValgrindSupport(self.config).update(docker_config)\n    elif self.config.debug_g", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": " Observable.fromIterable(SectionNames)\n      .flatMap(new Function<String, Observable<Board>>() {\n        @Override\n        public Observable<Board> apply(@NonNull String sectionName) throws Exception {\n          return LoadBoardListFromCache(BOARD_TYPE_ALL", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "   mAdapter = new UserAdapter(getActivity(), R.layout.user_item, users);\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_search_", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "   ICompilationUnit testClass = null;\r\n\r\n\tString testClassName = model.getTestClassName();\r\n\r\n\tString testSourceFolderName = JUTPreferences.getTestSourceFolderName();\r\n\r\n\tString testPackageName = model.getTestPackageName();\r\n\r\n\t", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(self.simulator_data_client.datagramReceived(mock_simulator_data_datagram, (self.remote_host, self.port))\n        self.assertTrue(self.simulator_data_client.simulator_data_received(", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "       textareaMessage.setText(httpMessage.getRes().getResponse());\n        textareaMessage.setCaretPosition(0);\n        textareaMessage.setDocument(new DefaultDocument());\n        textareaMessage.setDocument(httpMessage.getRes().getResponse());\n        textarea", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert_unordered(describe_table(\"Simple\"), expected_status)\n\n\ndef test_create_table_with_backups():\n    \"\"\"A table that specifies backups\"\"\"\n    class Model(BaseModel):\n        class Meta:\n            backups = True\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   @loadfile()\n    def load(self, filething, known_frames=None, translate=True, v2_version=4,\n             load_v1=True):\n        \"\"\"Load tags from a filename.\n\n        Args:\n            filename (filething): filename", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "public Query visit(Ord4Search n, Query query) {\r\n    Operator op = orderOfOps.get(3);\r\n\r\n    if (op != Operator.PROXIMITY) {\r\n      visitCheckForBoolean(new VisitCheckOp4(n));\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new LevelsTransformation().setNumLevels(6),\n                    new MapColorsTransformation(),\n                    new MirrorTransformation().setOpacity", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           exception_class = struct.unpack('!h', self._header[1])[0]\n            exception_message = self._header[2:]\n            raise exception_class(exception_message)\n\n        if self._header[0] == 2:\n            self._header", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'BMUnitType': args.bmunittype}):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter(\"15", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t}\n\t\t\titems.add( item );\n\t\t}\n\n\t\treturn items;\n\t}\n\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   user_key = dump_key(engine, user)\n    assert user_key == {\"id\": {\"S\": \"foo\"}, \"joined\": {\"S\": \"2019-01-01T00:00:00Z\"}\n\n\ndef test_", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new TaskName(),\n        StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES),\n        StaticString.WHITESPACE,\n        new Percentage(),\n        StaticString.", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource, Object... fields, String action, String method) {\n\t\treturn new FormFor(resource, fields, action, method);\n\t}\n\tpublic static FormFor formFor(Object resource, Object... fields, String action, String method, String", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "```python\nfor e in data[\"events\"]:\n            events.append(Event(e))\n```\n\nThe above loop should be used to append `Event` objects to the `events` list. Each `Event` object should be created from the dictionary `e` in the `data[\"events", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   ParameterHolderMatcher parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mExitTransition != null) {\r\n                mExitTransition.exit(this);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (mExitTransition != null) {\r\n", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "public QsolToQueryVisitor(Analyzer analyzer, String field) {\r\n    this.analyzer = analyzer;\r\n    this.field = field;\r\n  }\r\n\r\n  public Query getQuery() {\r\n    return proxBuilder.getQuery();\r\n  }\r\n\r", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.vcf:\n\t\t\tif args.genotype is None:\n\t\t\t\traise ValueError('Genotype data is not defined!')\n\t\t\tif args.phenotype is None:\n\t\t\t\traise ValueError('Phenot", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_file)\n\n    def get_frame(self, frame_no):\n        \"\"\" Get the frame at the given frame number. \"\"\"\n\n        # Read the frame\n        ret, frame = self.vid.read", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   ilm = ilms.IlluminationLineModel(ilmvals=ILMVALS, zslab=-29.3,\n            zscale=0.89, laser_wavelength=0.45)\n    # 3. illumination\n", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketFoodGroup.sendTo(player);\n\t}\n}\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       form = self.form_class(initial={'post': post})\n\n    def post(self, request, pk, username, slug):\n        post = get_object_or_404(Post, pk=pk)\n        if post.deleted:\n", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tISelectionProvider selectionProvider = getSite().getSelectionProvider();\n\t\t\t\t\t\tselectionProvider.setSelection(new SingleCellSelection(selectedCells.get(0), true);\n\t\t\t\t\t}\n\t\t\t\t\telse if (selectedCells", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   @keyclass.register(RevocationKeyClass)\n    def keyclass_int(self, val):\n        self._keyclass = val\n\n    @sdproperty\n    def public_key_algorithm(self):\n        return self._public_key_algorithm\n\n    @", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method('comment', nargs=0, bp=80, label='kind test')\ndef select_comment_kind_test(self, context=None):\n    if context is None:", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "def getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        p_id, p_type, p_sub_type, p_name, p_adopt, p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   im.set_image(P, H, I)\n\n\n## The execution block below shows the error message\n\nmake_image_0()\n\nFile \"peri/test/nbody.py\", line 10, in create_configuration\n    return pos, rad, tile", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "       run_mp(compile_information_func, jobs, self.log_directory, return_info=True)\n    # ------------------------------------------------------------------------------\n    # -----------------------------------------------------------------------------\n\n    def compile_train_graphs(self) -> None:\n        \"\"\"\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_from_horiz = rotationWrtHorizon(platepar)\n\n    # Recompute the reference RA and Dec\n    platepar.updateRefRADec(preserve_rotation=True)\n\n    # Recompute the FOV centre in Alt/", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 10_000L);\n        contentValues.put(JobStorage.COL", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "   mDelAdapter = new UserAdapter(getActivity(), R.layout.user_item_checkbox, users);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "\n    class Meta:\n        model = Progress\n        fields = ['area', 'groups', 'year', 'value', 'remarks']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setVisibility(View.VISIBLE);\n        }\n    }\n\n    @UiThread\n    protected void showButton() {\n        fab.setVisibility(View.VISIBLE);\n    }\n\n    @UiThread\n    protected void hideButton() {", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "               // TODO: Implement the rest of the reconnect logic here\n            }\n        });\n\n        return deferred;\n    }\n\n    @Override\n    public Promise<Void> disconnect(final ConnectionContext context) {\n        return Promises.newSuccess();\n    }", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router<Road, RoadPoint> router;\n\n    private final SpatialOperator spatial;\n\n    private final TimePriority timePriority;\n\n    private final Distance distance;\n\n    private final KState<MatcherCandidate, MatcherTransition,", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<FilterType> filterTypes;\n\n    public DropMenuAdapter(Context context, OnFilterDoneListener onFilterDoneListener) {\n        this.mContext = context;\n        this.onFilterDoneListener = onFilterDoneListener;\n        titles = new String[FilterUrl.", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n  # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "self.svg.n_tris += len(tris) / 3\n\n\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data == null)\n\t\t\t\t\tbreak;\n\t\t\t\ttry {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} catch (IOException e) {\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.meteor_begin_cartesian = self.cartesian_points[0]\n        self.meteor_end_cartesian = self.cartesian_points[-1]\n\n        # Compute the great circle\n        self.gc_beg, self.gc_end =", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol f = new FunctionSymbol(classInFile.getScope(), fhead.ID().getText(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    /**\n     * Called when the visitor reaches a node with children.\n     * @param node The node being visited.\n     */\n    public void visit(Node node) {\n        // Implement this method to perform a specific action on the node.\n    }\n\n    /**", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private CodeGeneratorFactory codeGeneratorFactory;\n\n    private IOptions options;\n\n    @Override\n    public void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n\n        messager = processingEnv.getMessager();\n        typeUtils = processingEnv", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritChangeListPanel.class).to(GerritChangeListPanelImpl.class);\n        bind(GerritChangeDetailsPanel.class).to(GerritChangeDetailsPanelImpl.class);\n        bind(GerritRestApi.class).toProvider(", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "               if (getZxidFromName(snapFile.getName()).compareTo(zxidLong) > 0) {\r\n                    i--;\r\n                } else {\r\n                    break;\r\n                }\r\n\r\n                snapFile = snapshots.get(i);\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       self._invalidate_visible_entries()\n\n    def _visible_transactions(self):\n        if self._visible_transactions is None:\n            self._set_visible_transactions()\n        return self._visible_transactions\n\n    def _visible_transactions_", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   #\n    # JPEG segment\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\treturn Observable.just(null);\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.just(query);\n\t\t\t\t});\n\t\tqueryTextChangeEvents\n\t\t\t\t.filter(query -> !TextUtils.isEmpty(query))", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   p = scramble_positions(POS, delete_frac=0.1)\n    # 2. create image\n    im = util.Image(shape=(1024, 1024, 3), dtype=np.float64)\n    im.", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "apply_and = _elementwise_binary_op(left, right, apply_fast_and)\n\ndef apply_or(left: Column, right):\n    if type(right) == Column:\n        result, index = apply_fast_or(left.values, right.values", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "               stringBuilder.append(\"\\n\\nRequest \")\r\n                        .append(RequestFragment.sSelectedRequests.get(i).getName())\r\n                        .append(\": \")\r\n                        .append(RequestFragment.sSelectedRequests.get(i).getPackageName());", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "       return SearchMenuPage(context, params)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if not checkFileExistence(pattern.filename):\n                    errmsg += \"File << %-20s >> does not exist!\\n\"%(pattern.filename)\n\n        # 2.2 parameter range\n        for param in self.get(\"Refine\").constraints:", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'caption', 'description')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private StarTask starTask;\n    private CommitTask commitTask;\n    private RepoContentTask repoContentTask;\n    private StarContentTask starContentTask", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\t\n\t\tFile inputFile = new File(basePathDDI2FO + \"ddi-to-fo.xml\");\n\t\t\n\t\tFile outputForm", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the token\n                        UserTask.getInstance().requirePasswordToken(user);\n                    }\n                });\n\n        // \"Cancel\" button to close the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', NewPackageView.as_view(), name=\"package-new\"),\n    url(r'^(?P<package_name>[\\w\\-\\", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, TwoBandsTwoBitsEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[tg.tierNameList[0]]\n\n\ndef test_save_roundtrip(self):\n    \"\"\"\n    Test that a textgrid can be saved and then loaded and the data\n    is the same\n    \"\"\"\n\n    tg =", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "               procs.append(KaldiProcessWorker(\n                    job_name=i,\n                    job_q=return_queue,\n                    function=function,\n                    return_dict=error_dict,\n                    stopped=stopped,\n                ))\n                pro", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       self.test_nfs(self)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'nfs')\n        dataset = NfS(root_dir, fps=240)\n       ", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "\n    void add(FixTag tag, Supplier<Boolean> validitySupplier);\n\n    void add(FixTag tag, Supplier<Boolean> validitySupplier, String message);\n\n    void add(FixTag tag, Supplier<Boolean> validitySupplier", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           chunk_key = chunk_idx\n            chunk_key = chunk_key\n            chunk_key = chunk_key\n            chunk_key = chunk_key\n            chunk_key = chunk_key\n            chunk_key = chunk_key\n            chunk_key = chunk_key\n           ", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn new AnyMatchExplanation(fieldOptions, expanderOptions);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, SchemaValidator schemaValidator, FolderCleaner folderClean", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER | RESPONSE_MASK), new MarshalledResponseHandler<NotificationListener>(NotificationListener.class));\n        registry.put((byte) (ATTRIBUTE | RESPONSE_MASK", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       FileSaver fs = new FileSaver(content, lang, \"twitter\", url, LogDB.getNewId(lang));\n                        fs.save(logDb);\n                        map.put(tweet.getText(), true);\n                        log.info(\"Saved twe", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n\n        elif isinstance(descriptor, FixedReplicationNode):\n            lines.append('{}{}'.format(indent, descriptor))\n           ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "   group.add_argument(\n        \"--delay-distro\",\n        dest=\"latency_distro_time\",\n        help=\"\"\"latency distribution time [millisecond].\n        valid units are either: {}.\n        e.g. tcset eth0 --", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       self.contact = Contact.objects.get(phone_number=self.phone_number)\n        if not self.contact:\n            raise ValueError(\"No contact found for phone number {}\".format(self.phone_number))\n\n    def get_groups(self):\n        return", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPProject> liveProjects = LiveProjectSource.create(org);\n\n    // Extract the state of the live projects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Extract live states\",", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "from hammertime.ruleset import SimilarPathGenerator\n\nclass SimilarPathGeneratorTest(TestCase):\n\n    def setUp(self):\n        self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRXDA = tempfile.TemporaryDirectory()", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   conditions.append(AndCondition(condition_for(\"eq\", column), condition_for(\"eq\", column))\n    if \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"eq\", column), condition_for(\"eq\", column)))\n    if \"begins", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "```python\n    assert get_square_idx(0, 0) == 0\n```\n\nThe `get_square_idx` function is expected to return the index of the square associated with the top-left element of a 9x9 Sudoku puzzle. The top-left element", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClass;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testClass", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "   self.varz_tag = self.next_sink.VarzTag()\n    self.varz_socket = self.next_sink.VarzSocket()\n    self.varz_socket.open()\n    self.varz_socket.SetVarz(self", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\n\tprivate static final int TOP_MARGIN = 10;\n\tprivate static final int BOTTOM_MARGIN = 10;\n\tprivate static final int LEFT_MARGIN = 10;\n\tprivate static final int RIGHT_", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var cmdLine = new CmdLine().add(javadocTool.getName()).addAll(cmdLine.toArguments());\n    var exitCode = javadoc.run(files);\n    log.verbose(javadoc, javadoc -> javadoc.getExitCode", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaAtivarSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    # Run the requested subcommand.\n    cmd = self.commands[name]\n    if cmd:\n      result = cmd.Execute(gopts", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    PersistentData providePersistentData(Application app) {\n        return new PersistentData(app);\n    }\n\n    @Provides @Singleton\n    Prefs providePrefs(Application app) {\n        return new Prefs(", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(4));\n    }\n\n    @Test\n    public void testBatchCount() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n       ", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // TODO:\n        // Add verifiers here\n        // verifiers.put(\"ValidSchemaName\", new ValidSchemaNameVerifierImpl());\n        // verifiers.put(\"LocalFilesExist\", new LocalFilesExistVerifierImpl());\n        // verifiers.put(\"RemoteFilesEx", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostLoginExecute(Boolean success, long userId, String regId) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        activity.getSelfUser().setId", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   public DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs out the currently logged in user (via user.logout)\n     *\n     * @throws DrupalLogoutException if there was an", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "self.textInput.returnPressed.connect(self.sentMessage)\n\n\n## Your task:Complete the code by implementing the `sentMessage` method in the `QuirkTesterWindow` class. The `sentMessage` method should send the message typed in the `PesterInput` widget to", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/problemlist', ProblemListHandler),\n            (r'/status', StatusHandler),\n            (r'/submit', SubmitHandler),\n            (r'/debug', DebugHandler),\n            (r'/contestlist', ContestListHandler),\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\tList<AlvisIRQueryNode> clauses = andQueryNode.getClauses();\n\t\t\tList<ExpansionResult> results = new ArrayList", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Invalid criterion\");\n        }\n\n        SelectionChunk selectionChunk = new SelectionChunk(informationCriterion);\n\n        return selectionChunk;\n    }\n\n    /* (non-Javadoc)\n     * @see", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, typing.unify(ty1, ty2))\n\n\n@with_info(st_typ)\ndef sig(expr):\n    \"\"\"Turn a signature into a Sigma type.\n    \n    Arguments:\n    - `expr", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AnalyticsTracker analyticsTracker);\n    void inject(AudioBookManager audioBookManager);\n    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(PlaybackService play", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<ExpenseCategory> categories;\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_chart_category, container, false);", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response()\n    response.content_type = None\n    response.text = 'foo'\n    response.body = 'bar'\n    response.status_code = 200\n    assert_raises(\n        ResponseValidationError,\n        validate_response,\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tprivate final SDocumentGraph graph;\n\n\t/**\n\t * @return the graph\n\t */\n\tpublic SDocumentGraph getGraph() {\n\t\treturn graph;\n\t}\n\n\t/**\n\t * @param graph\n\t */\n\tpublic void setGraph(SDocumentGraph", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"errors\"].append(e)\n                print(\n                    f\"{self.name}: {", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "api.add_resource(AccelerometerResource, \"/aircraft/sensors/accelerometer\",\n                     resource_class_args=(sensors.accelerometer,))\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sens", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetHeadingDeg())\n\n\nclass", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--no, --names-only Retrieve only the object paths (names).',\n    CMD_OPTION_MULTIPLE_NAMESPACE_HELP_LINE,\n    CMD_OPTION_KEYS_HELP_LINE,\n    CMD", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@Resource\n\tprivate HintDisp hintDisp;\n\t@Resource\n\tprivate SubmissionsList submissionsList;\n\t@Resource\n\tprivate UserList userList;\n\t@Resource\n\tprivate IpLogs ipLogs;\n\t@Resource\n\tprivate Category", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           log.error(t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress = false;\n        }\n    }\n\n    private void setControlsEnabled(boolean enabled) {\n       ", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\n# Implement the test case for the full end-to-end flow of signup and cancellation in Hindi\nself.run_e2e_flow_for_language(language=\"Hindi\", person_name=u'\\u0906\\u0930\\u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected IStrictMode strictMode;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected ILocationListener locationListener;\n  protected ILocationListener locationListenerPassive;\n  protected ILocationListener locationListenerActive;\n  protected IStrictMode strictModePassive;\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "connect(DYNAMIC_TOOL_DIR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Str):\n    constructorList = [\n        Bit('spare', Pt=0, BitLen=1),\n        Bit('RRC_version', Pt=0, BitLen=1, Repr='hum'),\n        Bit('RRC_type',", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\tadjacency = create_adjac_vertex(v_lh, faces_lh)\n\t\tadjacency = create_adjac_vertex(v_rh, faces_rh)\n\t\tadjacency = CreateAdjSet(v_lh,", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" IS NULL\");\n    }\n    result.append(\" \").append(exp.getOperator()).append(\" \").append(OPEN_BRACKET);\n    acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    result.append(", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.storeCacheList(new CacheList(listName));\n      }\n    }\n  }\n\n  @FXML\n  public void loadCaches(ActionEvent actionEvent) {\n    final Optional<String> fileOption = Dialogs.\n        create().\n        title", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "Type1_TV, Type2, Type3_V, Type3_TV, Type4_LV, Type4_TLV, Type6_LVE, Type6_TLVE, StrRR\r\n]\r\n\r\nclass HeaderTLV(LayerTLV):\r\n   ", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class));\n\n        timeEntriesTable.getColumn(\"status\").setAggregation(\n                ScreensHelper.createAggregationInfo(\n                        projectsService.getEntityMetaPropertyPath(TimeEntry.class, \"status\"),\n", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           _c[False, PubKeyAlgorithm.RSAEncryptOrSign]: RSAPriv,\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "   self._expansion_info = ExpansionInfo(self._board_num, self._expansion_num)\n\n    @property\n    def expansion_info(self):\n        return self._expansion_info\n\n    def get_expansion_info(self):\n        return", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n        self.key_size = read_u16le(f)\n\n        for i in range(count):\n            key = read_u16le(f)\n            value = read_u16le(f)\n            self.references[key] = value", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Send email\n            send_connect_email(\n                subject='Connect - Account Invitation',\n                template='connect/accounts/request_invitation.html',\n                recipient=user.email", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "   @command(aliases=[\"load-form\"], pass_context=True)\n    @commands.has_permissions(manage_guild=True)\n    async def _load_pokeform(self, ctx):\n\n        await self.draft_interface.load_", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "       markets[name] = ex\n    return markets\n\n\nif __name__ == '__main__':\n    markets = create_markets(constant.EX_EXMO)\n    print(markets)\n    print(markets['Bitfinex_ETH", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "   self.add_xsd_type(item)\n    yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # '.' wildcard doesn't match document nodes\n            elif context", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   // Test that the data is correct\n    // TODO: Implement this test\n  }\n  \n  @Test\n  public void testIterator() {\n    // Test that the iterator is correct\n    // TODO: Implement this test\n  }\n  \n  @Test\n  public", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_EXPANSION_FACTORY)) {\n\t\t\tProperties", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "               MiPushClient.getInstance().init(getApplicationContext(),mi_APP_ID,mi_APP_KEY,new MiPushClient.OnTokenCallback() {\n                    @Override\n                    public void onToken(String token) {\n                        deviceGcmToken = token;\n                ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           output.append(tabulate(rows, headers, tablefmt=table_format,\n                            floatfmt='.2f', numalign=numalign, stralign=stralign,\n                            missingval=''))\n    if show_header:\n        output.append(u\"%", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n@app.route('/api/word/<word>')\n    def word_api_route(word):\n\nTo complete the code, you need to define the `word_api_route` function that will handle the API endpoint for looking up a single word. This function should use the `", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorIssues connectorIssues;\n\tprivate TaskDetailsActivity taskDetailsActivity;\n\tprivate TaskListByJQLThread thread;\n\n\tpublic TaskListByJQLActivity(Context ctx) {\n\t\tthis.", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, events.HANDLE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "\n    this.deployments = new SpringDeployments(restTemplate, root, tasks);\n    this.vms = new SpringVms(restTemplate, root, tasks);\n    this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n}\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(currentAnnotatedElement.get());\n                })\n                .collect(Collectors.toList());\n\n        FileManager fileManager = fileManagerFactory.build(roundDescriptor.getPackageName(), originatingElements);\n        SpecificationGenerator specificationGenerator = specification", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    private final ExecutorService executorService;\n\n    private final ReentrantLock lock = new ReentrantLock();\n\n    private final CountDownLatch latch = new CountDownLatch(1);\n\n    private final AtomicReference<List<FetchResult>> fetchResults", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        JPopupMenu popupMenu = new JPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   @Subscribe\n    public void onChangeChannel(ActionPerformedEvent event) {\n        channel = event.getChannel();\n        channels.setContentPanel(new GuiChannel(channel));\n    }\n\n    @Override\n    public void initGUI() {\n        super.", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       form.setLayout(new GridLayout(1, false));\r\n        form.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n        form.setLayout(new TableLayout(new int[] { 1, 1 }));\r\n        form", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"my_bar\", sampleable.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"bar\"\n\n        self.assertEqual(\"my_bar\",", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand,", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   h = httplib2.Http()\n    resp, content = h.request(urlunparse(('http', 'flickr.com', 'services/frob/%s' % frob, None, None, None, None))\n    frob_resp = json.loads(", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif(fcpMessage", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     op, arg = bytecode[k][2], bytecode[k][3]\n      if op in (COMPARE_OP, INPLACE_OPERATORS):\n        cond_stack_size += 1\n      elif op in (BINARY_OP_OPCODE", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private List<DailyExpense> mDailyExpenses = new ArrayList<>();\n\n    //UI\n    private ExpenseManagerDAO mDao;\n    private TextView mTotalAmount;\n    private TextView mTotalAmountLabel;\n    private TextView mTotalAmountLabel2;\n   ", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass PlatformAdminForm(forms.ModelForm):\n    engine = forms.ChoiceField(choices=ENGINE", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\nprivate void openCustomList(Long listId) {\n\n\n# Answer:\n\nprivate void openCustomList(Long listId) {\n\tIntent intent = new Intent(this, CustomListActivity.class);\n\tintent.putExtra(CustomListActivity.EXTRA_LIST_ID", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   self.__parser = LinuxPingParser(timezone=self.__timezone)\n\n    @property\n    def parser(self) -> PingParser:\n        return self.__parser\n\n    def parse(self, ping_result: Union[str, bytes, PingResult]) ->", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "   chat = new Chat(chatId, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "public void init() {\n\t\t// TODO Auto-generated method stub\n\t}\n}\n\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    return HttpResponseRedirect(reverse('home'))\n\n\ndef signin_tumblr(request):\n    redirect_uri = request.build_absolute_uri(reverse('complete-tum", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, isStatement());\n        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOr", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n    }\n  }\n\n  private void uploadFinished() {\n    if (successful) {\n      if (onSubmitComplete) {\n        onSubmitComplete.onSubmitComplete(null);\n      }\n      if (onUploadComplete) {\n        onUploadComplete", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_sources=assembly_points_by_sources)\n\n    #######################################\n    #       assembly points conflicts   #\n    #######################################\n    logger.info(\"Comput", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "   api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n       ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\tcase ActionMenuElement.LOAD:\n\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The default time format for the calendar.\n     */\n    private final DateTimeFormatter DEFAULT_TIME_FORMAT = DateTimeFormatter.ofPattern(DateConstants.TIME_FORMAT_PATTERN);\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "   this.vms = new SpringVms(restTemplate, root, tasks);\n\n    /**\n     * @return the BOSH Director\n     */\n    @Override\n    public DirectorClient getClient() {\n        return this;\n    }\n\n    /**\n     * @", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   VerifierProvider rsaLocator = new RsaSHA256Verifier(\n        new ServerInfoResolver() {\n          @Override\n          public JsonServerInfo resolve(URI serverDescriptor) {\n            return JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT);\n         ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected List<BaseAnimation> mAnimations;\n\n    public MultiItemTypeAdapter(Context context, List<T> datas) {\n        mContext = context;\n        mDatas = datas", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertNotNull(retrievedContent);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n\n            for (int i = 5; i < 10; i++) {\n               ", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\n    trackHistoryRepository.insert(new TrackHistoryEntry(stationUuid, stationIconUrl, track, artist, title, artUrl, startTime, endTime));\n\n\n    }\n\n    @Override\n    public void onPlayerStateChange(int state) {\n        if (state", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setUpActionBar();\n        setUpDrawer();\n        setUpFragments();\n    }\n\n    @", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "public class HomeFragment extends Fragment implements\r\n        SearchListener, WallpapersListener, ActivityCallback {\r\n\r\n    private static final String TAG = \"HomeFragment\";\r\n\r\n    private RecyclerView mRecyclerView;\r\n    private List<Home> mHomes = new ArrayList<>();\r\n   ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "   encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, encoding)\n    # ... rest of the code ...\n\n\n@cmd.command(epilog=COMMAND_EPILOG)\n@click.argument(\"credentials\", type=str)\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       return None\n\n    def _getPlaylistItem(self, playlistItemID):\n        \"\"\" Get the playlist item with the specified playlistItemID. \"\"\"\n        for _item in self.items:\n            if _item.playlistItemID == playlistItemID:\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "   def test_type_check_for_environment_value(self):\n        class TypeCheckEnv(object):\n            def __getitem__(self, key):\n                if key == u\"a\":\n                    return u\"b\"\n                else:\n                    raise TypeError\n\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   cmd.Execute(gopts, argv)\n    result = cmd.result\n    if gopts.trace:\n      git_trace2_event_log.StopEventLog()\n    return result\n\n  def Run(self, argv):\n    \"\"\"Run the main `repo", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               taskListenerManager.notifyRunnerTask(taskData, taskRunner);\n            } catch (Exception e) {\n                taskData.setResultData(null);\n                taskData.setErrorInfo(e.getMessage());\n                taskData.setState(TaskData.STATE_FAIL_PRO", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertEqual(await r.after_headers(entry), None)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = RejectStatusCode(404)\n        await self.assertRaises(Re", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       String[] split = xhandName.split(\" \");\n        //用户的姓名\n        stuName = split[1].replace(\"同学\", \"\");\n        //用户的学号\n        stuXH = split[0];\n        //用户的", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__con.create_table_from_data_matrix(\n            TcSubCommand.CLASS.value,\n            [\n                Tc.Key.DEVICE,\n                Tc.Key.CLASS_ID,\n                Tc.Key.RATE,\n           ", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       state[\"inventory\"] = frozenset(obj.inventory)\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: Location) -> None:\n        state[\"name\"] = obj.name", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "public Query visit(BasicSearchType n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.token", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic ParameterizedGenerationService(String surveyName) {\n\t\tthis.pipelineGenerator = new Pi", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "public static void main(String[] args) throws Exception {\n\n    PropertiesReader propertiesReader = new PropertiesReader(new File(\"zklogtool.properties\"));\n\n    CommandSnapshot commandSnapshot = new CommandSnapshot(args);\n\n    if (commandSnapshot.getDataDir() != null) {\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def run(self):\n        self.link.run()\n        self.listener.run()\n        self.reporter.run()\n        if self.config.do_cleaning:\n            self.cleaner.run()\n\n    def stop(self):\n        self", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       DataTestUtilities.validateMovieCursor(\"query by id using library's syntax\", cursorById, DataTestUtilities.createMovieEntry());\n    }\n\n    /**\n     * Test bulk insert\n     */\n    public void testProviderBulkInsert() {\n        long movieRowId", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "   self.EvtGenerationContrat(self, _)\n\n    def EvtGenerationAvenant(self, _):\n        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(list(node_children(self.elem)),\n                         [self.elem])\n\n    def test_match_element_node(self):\n        self.assertTrue(match_element_node(self.elem, 'element'))\n        self.assertTrue", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "public class MapViewActivity extends MapActivity implements OnClickListener,\n\t\tNetworkOperationListener<List<GeoLocation>> {\n\t\t\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\t// TODO Auto-generated method", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "   return ConfigCommandProcessor(\n        ConfigVlanCommandProcessor(self.switch_configuration),\n        ConfigVRFCommandProcessor(self.switch_configuration),\n        ConfigInterfaceCommandProcessor(self.switch_configuration)\n\n\nclass Cisco3750SwitchCore(BaseC", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('high_rate')\nNext line of code:\n  assert isinstance(config, HighRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: add a legend\n    # TODO: add error bars\n    # TODO: add a title\n    # TODO: add a y-axis label", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n\ndef _add_aircraft_resources(api, aircraft):\n    api.add_resource(AircraftResource, \"/air", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   self.write_corpus_information()\n    self.create_corpus_split()\n\n    @property\n    def num_jobs(self) -> int:\n        \"\"\"Number of jobs\"\"\"\n        return len(self.jobs)\n\n    @property\n   ", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private static final int REQUEST_CODE_CAMERA = 100;\n\n    private static final int REQUEST_CODE_CAMERA_PREVIEW = 101;\n\n    private static final int REQUEST_CODE_CAMERA_", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "public final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tUtil u = Util.getInstance();", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        installActionGroupInToolBar(new DefaultActionGroup(), toolBarPanel, ActionManager.getInstance(), \"Mongo Explorer\", true);\n    }\n\n    private", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tH1(\"TodoMVC\", \"To Do List\").input(null, \"text\").attr(\"placeholder\", \"What's on your to do list?\").attr(\"autofocus\", \"autofocus\");\n\n\t\t// List of todos\n\t\tList<Model> models", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    if(RETURN_DATA_AS_BYTE_ARRAY) {\n                        byte[] data = null;\n                        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                        output.compress(Bitmap.CompressFormat.", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   private void showToolbar() {\n        if (mShowToolbar) {\n            mToolbar.setVisibility(View.VISIBLE);\n        } else {\n            mToolbar.setVisibility(View.GONE);\n        }\n    }\n\n    @Override\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   assert validate_key_condition(model, index, key)\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n    \"\"\"Single key condition: equality comparison on range", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "   GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        // TODO Auto-generated method stub\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName)", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "api = RestApi(app, server)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._file_tree_model = FileTreeModel(self._directory)\n        self._file_tree_view = FileTreeView(self._file_tree_model, self.main_control)\n        self._project_settings_dialog = ProjectSettingsDialog(settings_ini, self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        (default=%(default", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private BorderLayout layout = new BorderLayout();\n\n    private GuiNewChatTC chatBox;\n\n    public ChatTray(Minecraft mc, ChatManager chat) {\n        super(mc);\n        this.chat = chat;\n        this.chatBox", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event move items\n     */\n    public interface ItemMovedListener {\n        /**\n         * Triggered when an item was moved\n         *\n         * @param item\n        ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_user(self, user):\n        self._user = user", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(packet);\n            break;\n        }\n\n        case MESSAGE: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\treturn new GenerationService(preprocessors, postprocessors);\n\t}\n\n\tprivate Preprocessor[] setPreProcessors(List<Preprocessing> preprocessing)", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        pipeline.apply(\"Read live data\", Read.from(LiveProjectSource.create(org)));\n\n    // Convert the live data to GCPResourceState objects.\n    PCollection<KV", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel\n\n\ndef test_create_table(session, model):\n    \"\"\"Test creating a table.\"\"\"\n    table_name = \"test_table\"\n    table_request = create_table_request(table_name, model)\n    session.create_table(", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                       dim, vocab, lookup,\n                                                       translate=True, normalize=True,\n                                                       **kwargs)\n\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private final String _id;\n    private final String _relayHost;\n    private final AudiologistInfo _audiologistInfo;\n    private final Object _txLockObject;\n    private final Object _lockObject;\n\n    public ChatManager(ChatManagerCallback callback)\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_picker);\n       ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       context = self.get_context_data(form=form)\n        return self.render_to_response(context)\n\n    def post(self, request, *args, **kwargs):\n        if \"user\" in self.kwargs:\n            self.object = self.get", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "   public static FogDescriptor convert(FogDescriptor descriptor, GameObject go) {\n        Fog fog = new Fog();\n        fog.density = descriptor.getDensity();\n        fog.gradient = descriptor.getGradient();\n        fog.color = des", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic StringArray64[] readStringBlock(String path, int blockSizeX, int blockSizeY, long nbBlocksX, long nbBlocksY)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t}\n\n\t}\n\n\t/**\n\t * Running the benchmark.\n\t *\n\t * @return if run succeeds or not\n\t */\n\tpublic boolean runBenchmark() {\n\t\ttry {\n\t\t\tbenchmark.run();\n\t\t\treturn true", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   graph_rule_manager = GraphRuleManager()\n    ci_pipeline_manager = CIPipelineManager()\n    pipeline_config_manager = PipelineConfigManager()\n    trans_platform_manager = TransplatformSyncManager()\n    ci_lang_job_map = ci_pip", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Saving the service discovery file.\");\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(city,\n\t\t\t\t\tendpointType, dataParser, networkManager, cache,", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            planilla_de_relevamiento = PlanillaDeRelevamiento.objects.get(id=request.POST[\"planilla_de_relevamiento\"])\n            planilla_de_relevamiento.habilitada = True\n", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "   self._cstr = self._ast.to_smtlib()\n    self._live = set()\n    worklist = [self.tree]\n    while worklist:\n      cur = worklist.pop(0)\n      if isinstance(cur, Ref):\n        self", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\treturn Minigame.getMinigameInstance(plugin).addPlayer(this, round);\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param round the name of the round", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1),\n                       [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 0),\n                       [0])\n    assert_array_equal(fold([MIN_H", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return format_digits(result, fmt_token, digits_family='0123456789',\n                        optional_digit='#', grouping_separator=None)\n\n###\n# Formatting functions\n@method(function('format-number', n", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\treturn default_flags | Qt.ItemIsDragEnabled | Qt.ItemIsDropEnabled\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       hydrator = Hydrator(version1, versions, [])\n        hydrator.hydrate_object(object_dto, object1)\n        hydrator.hydrate_object(object_dto, object2)\n        hydrator.h", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "        FASTDecoder decoder = DispatchLoader.loadDispatchReader(catBytes, PipeBundle.buffers(clientConfig.getRingBuffers()));\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(DFO, DopplerPoly(DopplerBase(0, 0)))\n  # doppler_poly.py\n  to_map_and_back(MFO, Message(0))\n  # message_factory.py\n", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               .containsString(\"\\\"_id\\\":\\\"\" + mappedRecords.get(0).getId() + \"\\\"\"));\n    }\n\n    @Test\n    public void storeWithSuggest() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRec", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "   @sdproperty\n    def keyid(self):\n        return self.fingerprint[:16]\n\n    @keyid.register(Fingerprint)\n    def keyid_fingerprint(self, val):\n        self.fingerprint = val\n\n    @", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\n\t\t// Registers the listeners\n\t\tregisterListeners();\n\n\t\t// Registers", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   res = Authorization.executeQuery(context, 100);\n                    } catch (SQLException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(ContextKeys.THROWABLES).add", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users-list'),\n\nurl(r'^users/new/$', new_user, name='new-user'),\nurl(r'^users/edit/(?P<pk>[-\\w]+)/$', edit_user", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           updateEmptyViews();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"PlaySessionSettingsDialogFragment\");\n            }\n        }\n    }\n\n    private void onLearnActionPerformed() {\n        if (stack !=", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   CookBookAdapter cookBookAdapter;\n    private DropDownMenu dropDownMenu;\n    private RecyclerView.LayoutManager layoutManager;\n    private LinearLayoutManager linearLayoutManager;\n    private DividerItemDecoration dividerItemDecoration;\n    private OkhttpManager okhttpManager;\n", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.blockLabel = NameLabel(obj, block.getBlockLabel(), \"Name\", True, obj.blockID)\n\n        obj.blockWidget = None\n        obj.comment = None\n        obj.buffImg = None\n        obj.collapseLabel = None\n        obj.last", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XDA(d1, d2)\n        beta = XorDiff(d3)\n\n        i, j = self._find_preimage(f, beta)\n        self.assertIsNotNone(i)\n        self.assertIsNotNone(j)\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\tif(node instanceof ConstantNode) {\n\t\t\treturn transformer.transformConstant((ConstantNode) node);\n\t\t} else if(node instanceof MultiConstantNode) {\n\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandCreate());\n\t\tcommands.add(new CommandDelete());\n\t\tcommands.add(new CommandSetFrom());\n\t\tcommands.add(new CommandSetTo());\n\t\tcommands.add(new Command", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       Challenge challenge = new Challenge(challengeData);\n        connection.sendPacket(challenge);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = PacketParserUtils.parseStreamError(doc);\n        Failure failure = new Failure", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "XteaCipher = tea.TeaCipher\n\n\n\nclass TestPrimitive(unittest.TestCase):\n\n    def test_ch_skch(self):\n        \"\"\"Test the characteristic search for ChaskeyPi.\"\"\"\n        bvf_cipher", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private PopupMenu mPopupMenu;\n\n    private int mToolbarHeight;\n\n    private int mFastScrollerHeight", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           effect = ((FlowAbsEffect) effect).getFlowAbsEffect();\n        }\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n\n        if (mSelectedEffect instanceof ImmersiveEffect) {\n            mImmersiveSensorNavigation =", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   # TODO: add the rest of the ESMHeader class definition\n\n# section 9.3\n###\n# ESM procedures\n###\n\nclass ESMProcedure(Layer):\n    constructorList = [\n        Bit('ESM', ReprName='ESM Type',", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "\n\n        }\n    };\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Bundle bundle = getArguments();\n        if (bundle != null) {\n            mArtist = new Artist(bundle.getLong(", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "               except TextGridParseError as e:\n                    self.textgrid_read_errors[file_name] = e\n                except Exception as e:\n                    self.return_dict[\"error\"] = file_name, e\n                finally:\n                    if self.stopped.", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\tuser.getCallback", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   @GET(\"api-info\")\n    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the Shodan account linked to the api key.\n     *\n     * @param apiKey account api key\n    ", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(VmPropertiesLogMessage message) {\n      vmProperties = message.vmProperties();\n    }\n\n    @Override\n    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.key(), message.value());\n    }", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   assert erb(freq, bandwidth) == pytest.approx(0.122)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 3", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   return Sequence(seq)\n\n\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read and return a single Dataset in a Sequence\"\"\"\n\n    # Read the tag and V", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   Optional<ICommentProcessor> processor = Optional.ofNullable(commentProcessorInterfaces.keySet().stream()\nanswers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   @Override\n    protected void onStart() {\n        super.onStart();\n        spiceManager.start(getActivity());\n    }\n\n    @Override\n    public void onStop() {\n        if (spiceManager.isStarted()) {\n            spiceManager.", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(NotationDataFlags)\n    def flags_NotationDataFlags(self, val):\n        self._flags = val\n", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "self.textArea.append(serverMsg)\n\n\n## Your task:Complete the code by implementing the missing function `sentMessage` in the `QuirkTesterWindow` class. This function should take the text input from the `PesterInput` widget, process it through the `PesterText", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\ndef check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check(arg, env):\n    if", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {\n            \"CPM_FORM\": [v.T, v.T**2, v.T**3],\n            \"CPM_ENTHALPY\": [v.T, v.T**2, v.T**-1", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndShowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        if (adMedia != null) {\n            if (adMedia.getListOfAds().size() >", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "public static void flushSensorDataCache(final int type, final String deviceID) {\n            if (type == 7 || type == 0) {\r\n                PressureSensorCollector.flushDBCache(deviceID);\n            }\n        }\r\n        if(type == 8", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   @POST(\"suggest\")\n    Call<Suggestions> getSuggestions(@Field(\"query\") @NonNull String query);\n\n    @GET(\"user\")\n    Call<AnonIdResponse> getAnonId(@QueryMap Map<String, String> serviceIds,", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       return Stream(model=model, engine=self)\n\n    def _compute_table_name(self, model):\n        \"\"\"Compute the table name for a model.\"\"\"\n        return model.Meta.table_name\n\n    def _compute_index_name(self, model", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.plot_confusion_matrix(confusion_matrix,\n                              classes=data_set.label_map.values(),\n                              normalize=True,\n                              title=\"Confusion matrix\")\n\n        self.log.info(\"accuracy: %2.2", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate SubmissionServices submission", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def query(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)\n\n    def __getitem__(self, key):\n        \"\"\"Commit batch with return value, or reference a previously defined\n        variable.\n\n       ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   @scoped_subgraph\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous frequency step as input. Thus, the decoder RNN\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionGroupNode node)", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\npublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n}\n\npublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n}\n\npublic static H3 h3(Attribute... attributes)", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       NiceTable table = new NiceTable(numberOfColumns);\n        // TODO Auto-generated method stub\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void visitClassResult(final ClassResult clazzRes) {\n        // TODO", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     self._graph.in_edges(self.entry_node)\nequip/analysis/graph/flowgraph.py\nclass FlowGraph(object):\n  \"\"\"\n    Represents the control flow graph.\n  \"\"\"\n  def __init__(self, cfg):\n   ", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\ndef parse_datetime_picture(picture: str) -> str:\n    \"\"\"\n    Parse a datetime format picture.\n\n    :param picture: a string containing the format picture.\n    :return: a string with the format picture.\n    \"\"\"\n    if not picture:\n        return", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "\n    private void setTitle(String title) {\n        setTitle(title);\n    }\n\n    private void updateMenuEntries() {\n        MenuItem mNick = getMenu().findItem(R.id.action_nick);\n        mNick.setTitle(m", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate XFORMSInsertWelcomePostprocessor xformsInsertWelcome = new XFORMSInsertWelcomePostprocessor();\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "   def OnGenerationEtatsPresence(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.presence_date.GetValue())\n        DocumentDialog(self, EtatsPresenceModifications(site, date)).ShowModal()", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += m * crosstens(J_rot) + dot(I, H_rot)\n        return H\n\n    def compute_angular_momentum_jacobian_inverse(self, p):\n        \"\"\"\n        Compute the inverse of the angular momentum", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       name.setText(queuedProjectResult.name);\n        author.setText(queuedProjectResult.patternAuthor.name);\n        gauge_description.setText(queuedProjectResult.gauge_description);\n        yarn_weight_description.setText(queuedProjectResult.y", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new RefreshCommand(),\n                new MigrateCommand(),\n                new VirtualPayCommand(),\n                new VirtualPayCommand(),\n                new VirtualSetCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualEconCommand(),\n                new VirtualEconService(),\n                new VirtualDataService", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       prior_specs = build_prior_specs(prior, params)\n        return prior_specs\n\n    def _fit(self, symbols, datasets, *args, **kwargs):\n        \"\"\"\n        Fit a set of symbols to the passed datasets.\n\n       ", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "   return Const.fromValue(arg, is_symbol=True)\n  elif op == LOAD_NAME:\n    return Ref.fromName(arg)\n  elif op in BINARY_TYPE_CAST_OPCODES:\n    return Operator.fromTypeMethod(arg", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "public ClientMaster(String entityBasePath, String gamepad) throws IOException {\n\t\tsuper(entityBasePath);\n\t\tthis.gamepad = gamepad;\n\t\tres = new ResourceLoader(FileLocation.CLASSPATH, new FileHandle(new File(\"resources.xml\")));", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensor", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic Collection<AuthorWithBooks> getAllAuthors() {\n\t\treturn authorRepository.findAll().stream()\n\t\t\t.map(AuthorWithBooks::newBuilder)\n\t\t\t.map(AuthorWithBooks.Builder::build)\n\t\t\t.collect", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(String name, SQLTranslation value, Env rest) {\n\t\tsuper();\n\t\tthis.rootQuery = new Env(rest);\n\t\tthis.schema = new Schema(rootClass);\n\t}\n\n\tpublic SQLBatch(String name,", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['launcher'], app_info['is_activity'])\n        \n        # 执行动态分析\n        if", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n        } } } } } \n   arala  this.  } } }\n     } } } } }y } } } } } } } \n        } } } } }        } } \n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "           Symbol.typed(bar_type, 'bar'),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_dict():\n    inc_type = Func[[IntType], IntType]\n    bar_type = DictType[StringType", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\tself.on_insert_sketch()\n\n\tdef on_insert_sketch(self):\n\t\tself._viewWidget.on_insert_sketch()\n\n\tdef on_insert_part_in_drawing(self):\n\t\tself._viewWidget.draw", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        case 403:\n                            return new ForbiddenException(cause);\n                        case 409:\n                            return new APIIncorrectException(cause);\n                        default:\n                            return", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "public Engine() {\r\n\t\tinit();\r\n\t}\r\n\r\n\tprivate void init() {\r\n\t\tregisterRenderer(Object.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Map.class, new DefaultMapRenderer());\r\n\t\tregisterRenderer(Collection.class, new", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\telse if (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPERCASE, defaultCapitalize)) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<ci_pipeline_uuid>[0-9a-f-]+)$', ajax_save_pipeline_config, name=\"save-pipeline-config\"),\n    url(r'^(?P<ci_pipeline_uuid>[0-9", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "Intent intent = new Intent(mContext, CandyBarWallpaperActivity.class);\nintent.putExtra(Extras.EXTRA_URL, mWallpapers.get(position).getURL());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.key, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(choice(string.", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               test_px_sum = 1000\n\n                # Compute the vignetting and extinction loss\n                vignetting_loss, extinction_loss = applyRecalibrate(platepar, x_mean, y_mean, test_px_sum)", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = _gen_grid(data, options)\n    \n    # Apply priors to likelihood surface\n    posterior = _apply_priors(data, options, metrics, grid)\n    \n    # Compute likelihood across grid\n    likelihood = _grid_likelihood", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           UIDialog.getDicesDialog(false);\n          }\n        }\n      }\n    });\n    doubleBtn = new TextButton(\"Double\", ts);\n    doubleBtn.addListener(new ClickListener() {\n      @Override\n      public void clicked(InputEvent event,", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(list(etree_iter_paths(root, with_root=True)), [\n            (root, ''),\n            (root[0], '.'),\n            (root[0][0], './/b1'),\n            (root[0][0][0", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "self.runner.add(ContentSimhashSampling(), with_child=True)\n\n\n    @async_test()\n    async def test_detect_soft_404_with_tail_lookup(self):\n        await self.runner.run()\n\n    @async", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe_cancelamento = CFeCancelamento(\n            CNPJ=_opcao('--destinatario-cnpj'),\n            chCanc=_opcao('--ch-cfe-cancel'),\n            CNPJ_desenvolvedora=", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "   List<UserName> parseUserName(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */\n   ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           // final EtsiResponse resp = this.client.sendRequest(req);\n            // 5. Construct ASiC file\n            final ASiCWithCAdESService asicService = this.service;\n            final ASiCWithCAdESSignatureParameters asic", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "DocumentModelItem(None, self, new_item, \"Proformers\")\n\n\nDocumentModelItem(None, self, new_item, \"Proformers\")\n\n\nDocumentModelItem(None, self, new_item, \"Proformers\")\n\n\nDocumentModelItem(", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "public static void flushSensorDataCache(final int type, final String deviceID)\r\n    {\r\n        if(type == 1 || type == 0) {\r\n            AccelerometerSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 2", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\n\tprivate List<PlayerOverview> players;\n\tprivate List<Game> games;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamScheduleResponse> teamSchedule;\n\tprivate List<TeamSummaryResponse> teamSummaryResponses", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback);\n    }\n\n    private void showError(ErrorObject error) {\n        AppliveryLog.error(error.getMessage", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           request[\"Key\"] = key\n        validate_sync(\"load\", consistent)\n\n        for obj in objs:\n            response = self.session.get_item(table_name, key=key, consistent=consistent)\n            if response is None:\n                raise MissingObjects", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "           print(draw_art(key_size, key_algo, fingerprint, color=True, longid=True))\n            print(format_fingerprint(fingerprint, sep=':'))\n            print(size_with_unit(key['size']))\n            print(", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "   def trocar_codigo_de_ativacao(\n            self, novo_codigo_ativacao,\n            opcao=constantes.CODIGO_ATIVACAO_REGULAR,\n            codigo_emergencia=None):\n       ", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "   self.assertEqual(node_document_uri(document), 'http://www.w3.org/XML/1998/namespace')\n\n    def test_node_children_function(self):\n        self.assertEqual(list(node_children(self.elem)),", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "               sorted = Arrays.sort(sorted, new StartDateComparator(true));\n                break;\n                case START_DATE_DESC:\n                sorted = Arrays.sort(sorted, new StartDateComparator(false));\n                break;\n                case DURATION_DE", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   self.logger.info(f\"Training complete for {self.identifier}...\")\n    self.training_complete = True\n    return\n    self.logger.info(f\"Training complete for {self.identifier}...\")\n    self.training_complete = True\n   ", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Tasks tasks;\n    private final Vms vms;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(rest", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   public void onFittingServiceStateUpdated(FittingConnectionState state, FittingConnectionError error, String id, String audiologistName, Bitmap audiologistPicture, HiMuteStatus muteStatusLeft, HiMuteStatus muteStatusRight)\n    {\n        FittingBinder b =", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@in", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        FontRenderer fontrenderer = mc.fontRenderer;\n        ILocation bounds = getLocation();\n\n        mc.getTextureManager().bindTexture(ChatBox.GUI_LOC", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3Aad = BlackFormula2.price_Sad_Automatic(\n            DATA[looptest][0], DATA[loopt", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            VotingModule.class\n    };\n\n\n    /**\n     * Load and register all modules\n     */\n    public static void loadModules() {\n        AthenaGM plugin = new AthenaGM();\n        for (Class moduleClass : module", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "   public static DownloadQueue newDownloadQueue(int threadPoolSize) {\n        DownloadQueue downloadQueue = new DownloadQueue(threadPoolSize);\n        downloadQueue.start();\n        return downloadQueue;\n    }\n\n    /**\n     * Create a new download queue.\n     *\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(MutableConfig config) {\n    // TODO Auto-generated method stub\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    // TODO Auto-generated method stub\n  }\n\n  @Override\n  public void watch(Config config,", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "   private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        // TODO: implement\n        return null;\n    }\n\n    /**\n     * Parse <mongo/> tag.\n     *\n     * @param element element of XML document\n     * @return mongo config\n", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\nsql = getUpdateSQL('status', ret, clause)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = DOFTask(self.robot, self.robot.left_foot.name,\n                            target=self.cur_stance.left_foot.pose,\n                            weight=swing_weight)\n        if self.cur_stance.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "@given(\n    integers(min_value=MIN_SIZE, max_value=MAX_SIZE),\n    strategies=st.integers(min_value=MIN_SIZE, max_value=MAX_SIZE),\n    strategies=st.integers(min_value=", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DQTSegment", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n        HibiscusExporter exporter = new HibiscusExporter(\n                hibiscusUrl, hibiscusKontoId, credId,\n                type, letterOutputPath);\n        exporter.export();\n    }\n\n    private JPanel createLast", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   GeneratePronunciationsArguments.generate_pronunciations_func = generate_pronunciations_func\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       Lore lore = LoreLoader.getLore(category, ident);\n        if (lore != null) {\n            PlayerHandler.getCollectedLore(entityPlayer).addLore(key);\n            PacketSyncLore.updateLore((EntityPlayerMP)", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private final AppConfiguration configuration;\n\n    public FinanceService(SessionFactory sessionFactory, AppConfiguration configuration) {\n        this.sessionFactory = sessionFactory;\n        this.configuration = configuration;\n    }\n\n    public AccountSummary getAccountSummary(User user) {\n        LOGGER", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t\treturn LogUtil.getLogger();\n\t}\n\n\tpublic static CloudUtil getCloudUtil() {\n\t\treturn CloudUtil.getInstance();\n\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n    else:\n        problem = SearchRkCh(ch, der_mode=der_mode, enc_der_mode=der_mode, search_mode=search_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "   def setUp(self):\n        self.hosts = H()\n        self.hosts.pty = DummyPty()\n        self.hosts.logger = logging.getLogger('test')\n        self.hosts.is_sandbox = False\n        self.hosts.hosts = {", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "   return [command for command in self.__command_history if command.startswith(self.get_tc_command())]\n\n    def __init_shaper(self, shaping_algorithm):\n        if shaping_algorithm is None:\n            self.__shaper = HtbSh", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " encoder = selectEncoder('2bits', NormalRateConfig, enabledBands)\n  assert isinstance(encoder, GPSGLONASSTwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CouldNotGetDataException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =  db.", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n\n    private DisplayEventCallback<Calendar> displayEventCallback;\n\n    private CalendarPrepareCallback calendarPrepareCallback;\n\n    private ViewGroup monthHeaderView;\n\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [my_stream.next() for _ in xrange(25)]\n\n  def test_inf_input(self):\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "           unify(t1.__instance__, t2, backref)\n    except TypeCheckError:\n        if backref and is_from_arg(backref):\n            unify(t1.__instance__, t2, backref)\n        else:\n            raise\n\n", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "\n    def __init__(self, username, password, client_id, client_secret, region_id, host=None, token=None, no_prompt=False, **kwargs\n    ):\n        \"\"\"\n        Initialize Blink class.\n\n        :param username: Blink username", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\treturn Qt.ItemIsEditable\n\n\tdef insertRows(self, position, rows, parent: QModelIndex = None):\n\t\tif parent is None:\n\t\t\tparent = self._root_item\n\t\t\treturn self.createIndex(position, 0,", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._varz.deserialization_failures()\n    else:\n      self._varz.message_bytes_sent()\n\n    if not msg.is_one_way:\n      tag = self._tag_pool.get()\n      msg.properties[Tag.", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // ThreadDumpRuntime runtime = ThreadDumpFactory.fromString(out.toString());\n        // assertThat(runtime.getThreads().size(), equalTo(1));\n    }\n\n    @Test\n    public void cliThreadDump() throws Exception {\n        TestThread.", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       data.setOperation(DrumOperation.APPEND_UPDATE);\n        return data;\n    }\n}\n\n", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       RoxanaProperties roxanaProperties = RoxanaPropertiesMockBuilder.build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(getRoxanaProperties());\n    }\n}\n", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._socket.write(self._ping_msg)\n\n  def _RecvLoop(self):\n    \"\"\"Dispatch messages from the remote server to their recipient.\n\n    Note: Deserialization and dispatch occurs on a seperate greenlet, this only\n    reads the message", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert abs(freq2lag(lag2freq(v)) - v < 1e-10\n\n\nclass TestAlmostEq(object):\n\n  def test_almost_eq_with_floats(self):\n    for a, b in [(.", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "\n            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n    self.spell_helper = SpellHelper()\n\n\n    @group(name=\"config\", description=\"Configure Clembot\", examples=[\"config\", \"clembot config\"])\n    @group.command(name=\"guild\", aliases=[\"g\", \"guild", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] is None or operands[1] is None:\n        return None\n\n    if operands[0].value is None or operands[1].value is None:\n        return None\n\n    if operands[0].value == operands[1].", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "\n        //Implementa la cabecera del menu...\n        TextView welcomeString = (TextView) header.findViewById(R.id.personalize_welcome);\n        welcomeString.setText(getActivity().getString(R.string.welcome_text));\n\n        return header;", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           Log.d(this.getClass().getSimpleName(), \"Chat created\");\n            Toaster.getInstance().toast(R.string.chat_created, Toast.LENGTH_LONG);\n            // Notify the fragment\n            ((InviteToChatFragment) classToNot", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       // 下单\n        MchPayRequest mchPayRequest = new MchPayRequest(request);\n        MchPayResponse response = wxPayClient.mchPay(mchPayRequest);\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "\n        assertEquals(KEY, creator.getKey());\n\n    }\n\n    @Test\n    void createTestWithParameters() {\n        Translator translator = new MockedTranslator();\n        MessageTranslatedCreator creator = new MessageTranslatedCreator", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public XReg readXReg() throws IOException {\n\t\treturn readOperand().asXReg();\n    }\n\n    public FReg readFReg() throws IOException {\n\t\treturn readOperand().asFReg();\n    }\n\n    public EObject readOperand()", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "       self.quota = quota.Quotas(self)\n        self.mgmt = management.Management(self)\n        self.mgmt_flavors = mgmt_flavors.MgmtFlavors(self)\n        self.mg", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            if parser_class.is_support_platform(self.__timezone):\n                self.__parser = parser_class()\n                break", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       m.videoSetFrameRate.setText(Integer.toString(mainVideoFrameRate));\r\n        }\r\n\r\n        // set video width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 400)// set minimum\r\n        // to 4", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "       self._probe = probe\n        # Set the default parameters.\n        self._params = {\n            'thresholds': {'weak': 1.5, 'strong': 5},\n            'threshold_method': 'positive',\n            'threshold_mode':", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPing", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "self._cdg = ControlDependence(self)\n\nequip/analysis/graph/graphs.py\nclass ControlFlowGraph(object):\n  \"\"\"\n    Represents the control flow graph of a function.\n  \"\"\"\n\n  def __init__(self, bytecode):", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       FragmentObservable<QRCodeFragment> obs = ObservableRegistry.getObservable(QRCodeFragment.class);\n        obs.register(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\n  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    result.append(SELECT).append(\" \").append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile base = new File(basePath, \"ddi-to-xforms/ddi-to-xforms-base.xml\");\n\t\t\tFile expected = new File(basePath, \"ddi-to-xforms/ddi-to-xforms-expected", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       bernoulli = Bernoulli(p=0.5)\n        draws = bernoulli.draw(1000)\n        self.assertTrue(np.all(draws == 0.5))\n\n    def test_approx(self):\n       ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void invalidValue(FixTag tag, InvalidValueException exception) {\n\t\tvalidities.put(tag, Validity.INVALID);\n\t}\n\t\n\t@Override\n\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tif (value)", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   self.assertEqual(\"Harvey\", replace_blank_name(name=\"Harvey\", language=\"Hindi\"))\n        self.assertEqual(\"હરીવ\", replace_blank_name(name=\"�����������", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.failWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(system", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       #\n        # check if we need to pad the string\n        if rem > 0:\n            #\n            # pad the string\n            #\n            # TODO: this is not the best way to do it...\n            #\n            # we need to know the CSN1 field that", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       self.session.create_table(model.Meta.table_name, model)\n\n        # Make sure we're not creating a table that already exists\n        if not skip_table_setup:\n            self.session.describe_table(model.Meta.table_name)", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "   def trocar_codigo_de_ativacao(\n            self,\n            novo_codigo_ativacao,\n            opcao=constantes.CODIGO_ATIVACAO_REGULAR,\n            codigo_emergencia=None):", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(123)\n    assert False\n\n\ndef test_bind_model(engine):\n    \"\"\"Can't bind things that don't subclass BaseModel\"\"\"\n    engine.bind(User)\n    assert True\n\n\ndef test_bind_model_", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass_sun_kg / m_per_pc**3\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert u7", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "   ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_Person.name=\"Mike\"', '--namespace', 'root/cimv2', '--no'],\n     {'stdout': ['\"root/cimv2:", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       loadModules();\n        // Load services\n        initializeServices();\n        // Load commands\n        loadCommands();\n        // Load listeners\n        loadListeners();\n    }\n\n    private void initializeServices() {\n        economyService = new LiteEconomyService(", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       return self.get_tag(index, name)\n\n        #: The number of tags available.\n        self._num_tags = c_uint()\n        ckresult(\n            self._call_fmod(\"FMOD_Sound_GetNumTags\", byref(self", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void startOrderEditActivity(Account account, Order order) {\n                        startActivity(OrderEditController.newIntent(MainActivity.this, account.getId(), order.getId()));\n                    }\n\n                    @Override\n                    public void showAccountList(List<", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/count\")\n\tCall<Imgur", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   ref, action = reference_tracker._value_ref(column, value, path=[\"foo\"])\n    assert ref == expected_ref\n    assert action == expected_action\n    assert reference_tracker.attr_values == expected_values\n\n\ndef test_ref_value_", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "result = d.addQueue(url, downloadAction, targetFileOrFolder);\n    } catch (NoSuchBuildNumberException e) {\r\n        e.printStackTrace();\r\n        \r\n        // Next line of code:\nthrow new NoSuchBuildNumberException(json, last_op,", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "views.py\nfrom .models import Post, Comment, VoteComment, VotePost\nfrom .forms import PostModelForm, CommentForm, CommentEditForm, CommentReplyForm, PostEditForm, RegisterForm, ProfileForm\nfrom .views import WriteView, ProfileView, ViewPost, Login", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    /**\n     * Retrieves a set of emojis to use in gif searching.\n     * Clicking on these emojis can perform searches with the emoji itselft as the query\n     *\n    ", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mWifiStateListener).ifPresent(wifiStateListener -> wifiStateListener.isSuccess(false));\n\n            wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode);\n        }\n    };\n\n    @NonNull\n    private final W", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "public static void flushSensorDataCache(final int type, final String deviceID)\n    {\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 7 ||", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def run_mp(\n        self,\n        argument_list: List[Tuple[Any, ...]],\n        log_directory: str,\n        return_info: bool = False,\n    ) -> Optional[Dict[int, Any]]:\n        \"\"\"\n        Run the", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Vms vms;\n    private final Deployments deployments;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Tasks tasks;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       ckresult(\n            self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag))\n        )\n        return tag\n\n    @property\n    def num_tags(self):\n        \"\"\"Number of tags available for this sound.\n\n", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "           bufr_message.length.value = nbytes_write\n            section = bufr_message.length.parent\n            bit_writer.set_uint(\n                bufr_message.length.value,\n                bufr_message.length.nbits,\n\n        if wire", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "   form = ReportAbuseForm(request.POST)\n\n    if form.is_valid():\n\n        abuse_report = AbuseReport.objects.create(\n            logged_against=logged_against,\n            logged_by=logged_by,", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void write(final Object obj) {\n        out.println(obj);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void write(final Object[] obj) {\n        out.println(obj);\n    }\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n        finalize(0);\n    }\n\n    private static void finalize(int exitCode) {\n        if (exitCode == 0)\n        {\n            System.exit(0);\n        }\n        else\n        {\n            System.exit(1);\n       ", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\t\n\t\tDo do = new Do();\n\t\t\n\t\tdo.record(MUTE(true), ID(\"1234567890\"), SEND_TONES(true), URL(\"http://www.google.com\"));\n\t\t\n\t\t", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "\t    nenvios = 0;\n\t    nmaxenvios = 3;\n\t    \n\t    if (resposta.getValor() != null && !resposta.getValor().isEmpty()) {\n\t\t    resposta.setCaminhoPara", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "           @Override\n            public void onReceive(byte[] response) {\n                // TODO Auto-generated method stub\n                try {\n                    String json = new String(response, \"UTF-8\");\n                    ProgramManager.getInstance().parseTrack(json);\n                    mHandler.ob", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    FsmPlayer fsmPlayer;\n\n    @Inject\n    PlayerUIController controller;\n\n    @Inject\n    StateFactory stateFactory;\n\n    @Inject\n    AdRetriever adRetriever;\n\n    @Inject\n    AdInterface adInterface;", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\tappEvent.addObserver(service) ;\n\t\t\t\tservice.start();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// load the settings\n    \tString settingsFile = \"driveuploader-settings.xml\" ;\n    \tif (!new", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    JavaFile javaFile = JavaFile.builder(packageName, TypeSpec.classBuilder(className)\n        .addModifiers(PUBLIC, FINAL)\n        .addTypeName", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "public static void enableReceiveNormalMsg(boolean enable){\r\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg(enable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 查询协议确认\r\n     * @param callback", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  '''\n\n\ndef test_parameters_msgtype3():\n  '''\n  LNAV message test\n  '''\n  parser = prepareArgsParser()\n  params =", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   elif is_comment_node(elem):\n        return f'/comment()[{context.position}]'\n    elif is_document_node(elem):\n        return path + suffix\n    elif is_element_node(elem):\n        return path + suffix\n    elif is_schema", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"\n        Fills the non", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               _isTyping = true;\n            }\n            else\n            {\n                Log.w(TAG, String.format(\"Skipped message of type %s\", message.getType()));\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\tif opts.cosinormediation:\n\t\tdata = data[0] # There should only be one interval...\n\t\ttime_var = pdCSV[\"%s\" % opts.cosinormediation[0]]\n\t\tperiod = float(opts.cosinorm", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       // TODO: Implement test\n    }\n\n    @Test\n    public void testThreadDump() {\n        ThreadDumpRuntime runtime = sut.runtime();\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equal", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this);\n                datePicker.setOnDatePickListener(new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(int year, int month, int day) {\n                        m", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "public static void flushSensorDataCache(final int type, final String deviceID) {\n            if (type == 1 || type == 0) {\n                AccelerometerSensorCollector.flushDBCache(deviceID);\n            }\n            if (type == 2 || type", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private Toolbar toolbar;\n\n    private ViewPager viewPager;\n\n    private TabLayout tabLayout;\n\n    private int navBarHeight;\n\n    private boolean isHideAppIcon;\n\n    private boolean isNavbarV", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.tracerouter = Tracerouter.Tracerouter(self)\n\n        self.listener.start()\n        self.link.start()\n        self.reporter.start()\n        self.cleaner.start()\n\n        self.listener.join()", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert deltas.deltas[4].attributes == Thread\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def _validate_open_hours(self, emails, open_hours, free_busy):\n        if not open_", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "   activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, sharedPreferences);\n    // TODO(jontayler): figure out how to get the shared preferences\n    // from the injected component.\n    // This is a bit of a hack.\n    // TODO", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "class IMSI_DETACH_INDICATION(Layer3):\n    '''\r\n    ME -> Net\r\n    Dual\r\n    # content #\r\n    MS classmark 1 is 1 byte\r\n    Identity is 1 to 8 bytes\r\n    '''\r\n", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "   self.__tc_command_output = run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n    self.__tc_command_output = self.__tc_command_output.strip()\n    self.__tc_command_output = self", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "   return Column(operator.eq(left.values, right.values), left.index)\n\ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result, index = apply_fast_ne(left.values, right.values,\n", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   @validation_error(SwaggerMappingError)\n    def validate_response(response, validator_map):\n    \"\"\"Validates response against our schemas.\n\n    :param response: the response object to validate\n    :type response: :class:`pyramid.response.Response", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
