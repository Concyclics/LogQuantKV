{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( !m_Registered )\n\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000)\n        buff = a.read_frames(100)\n        a.write_frames(buff)\n        a.seek(-100, 1", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_present(self._EMBED_CODE, wait_time=10)\n    self.click_by_css(self._EMBED_CODE)\n    self.wait_for_element_present(self._SELECT_LANGU", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tWriter writer = context.createWriter(new OutputStreamWriter(context.getWriter(Writer.class), \"UTF-8\"));\n\t\t\t\tWriter w = new OutputStreamWriter(new ByteArrayOutputStream(), \"UTF-8\");\n\t\t\t\tOLStyleValue styleValue", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.id = -1\n        self.category = None\n        self.type = None\n        self.answer = None\n        self.id = -1\n        self.category = None\n        self.type = None\n        self.question = None\n        self.answer =", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map, SR_Utilities.GetRandomInt(1, 1000000));\n                    SR_Utilities.Location loc2 = SR_Utilities.", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n    }\n    }\n    }\n    }\n    public void send(CertificateMsg\n    {\n    }\n    }\n    @Override\n    send(HandshakeMsg)\n    {\n    @Override\n    public void send(HandshakeIn,\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n        return (JESpace) spaceRegistrar.get", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void draw(WndBag wndBag, WndDrawInfo info) {\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   # WSGIOWSD, 'Request\n        response = self.response()\n        if self.path, self.path, args = self.path, self.path, environ['QUERY_STRING']\n        self.send_response = response\n        return self.response\n        self", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.lock_status(status_id)\n        self.base.mark_status_as_repeated(self.id_, self.account_id, status_id)\n    def lock_status(self, status_id):\n        self.webview.lock_status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False, \"status\": Operation.status_id}\n        }\n        }\n    def action_create_archive_to_sftp_to_ftp_id_id:\n        return {\"error\": False,\n            \"status\": OperationStatus.status_id", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n}\n#endif\n}\n}\n#endif\n#endif\n}\n#endif\n}\n#endif\n}\n#", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       self.trust_managers = [tm for tm in self.trust_managers if tm.getAcceptedIssuers()]\n        if not self.trust_managers:\n            return None\n        else:\n            return self.trust_managers\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        // Add the domain info to the request\n    }\n    /**\n     * Gets the domain info for the domain.\n     *\n     * @param domain the domain\n     * @return the domain info\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__encoder = self.__encoder\n\n        # type: Encoder\n    def __setup_encoder_cls = down_cast(\n        Encoder\n    def get_writer(self)\n    def __init__(self)\n        raise NotImplemented\n    async", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\tif (iter == null) {\n\t\t\t\t\t\t\t//if no item is selected\n\t\t\t\t\t\t\t//do nothing\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n               ]\net", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(getLoadedData().get(UUID.fromString(stringId)).getId(), new Firm(stringId, getLoadedData().get(UUID.fromString(stringId))));\n\t\t\t}\n\t\t},\n\t\tFIR", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\taddField(new FieldEditor(FONT, FONT_DEFAULT, getFieldEditorParent()));\n\t\t\taddField(new FieldEditor(FONT_SIZE, FONT_SIZE_DEFAULT, getField\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.SpellTarget = from;\n            }\n        }\n        public override void OnCast()\n        {\n            if ( Caster.CanSee( SpellTarget ) )\n            {\n                Caster.SendAsciiMessage(\"Target is in range\");\n            }", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._autofl\n        \"\"\"\n        \"\"\"\n        autofl\n        \"\"\"\n        def _identity_map\n        self.\n        \"\"\"\n        def _identity_mapper:\n        \"\"\"\n        if self.bind_mapper:\n        \"\"\"\n        def _query", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   if self.method\n        return method\n        # This decorator is not stream_request_body.\n        return method\n        @asynchronous\n    @asynchronous\n    def data_received\n        self.request.data_received\n    return None\n    # This decorator", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\tbase.Render (writer);\n\t\t}\n\t}\n\t\n\tpublic class MultiViewControlBuilder : ControlBuilder {\n\t\tpublic override void AddParsedSubObject", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.download()\n    wigle_downloader.download(\n        lat1, lat2, lon1, lon2,\n        max_", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i.SkillBonusBonus = 15)\n                if (i == \n                    {\n                    if (i.SkillBonuses.GetSkillName(i.SkillBonus)\n                }\n                else if (i", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(platforms)\n    else:\n        builds = android_builds(build, builds)\n    # Build the button\n    if not simple:\n        if small:\n            if not icon:\n                icon = 'fa-download'\n            if not simple:\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectTypeIssueTypeIDs(projectID, issueTypeID, null);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBean = stateBeansList", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var parameter = argument.Parameter;\n                if ( parameter.Type == null ) {\n                    parameter = parameter.WithType( SyntaxFactory.IdentifierName( typeof (Variant).Name ) );\n                }\n                var parameterSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.split_test_usage_key, self.split_test_usage_key, self.assert_children, self.split_test_usage_key, self.assert_children_key, 'children', 'children, '\n        self.assert_children", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           Object[] metrics = new Object[0];\n            if (fontSpecific)\n                metrics = new Object[1];\n            metrics = new Object[1];\n            metrics[0] = GetToUnicode(fontSpecific);\n            if (toUnicode == null)\n               ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = cgn.depth + 1;", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap result) {\n            bitmapReference.remove();\n            bitmapReference = null;\n            bitmapReference.get().re", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: Add policy_profiles_table\n    # TODO: Add table for policy_profiles\n    # TODO: Add table for policy_profiles_policies\n    # TODO: Add table for policy_profiles_policies\n    # TODO: Add table for policy", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           if (Enabled)\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            else\n                writer.AddAttribute(\"onmouseover\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            base.Render", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\ndamageCooldown = 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() +\n            \" probability=\" + probability +\n            \" scopes=\" + scopes;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        return super.toString() +\n           ", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'tags': ['test'],\n        'itype': 'fqdn',\n        'lasttime': arrow.ut", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.first()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0],", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   self._plot_im\n                if self._interactive:\n                    self.\n                else:\n                    self.\n                    self._interactive\n                    self.\n                self.savefig\n                    self.save\n                    self.savefig\n                self.save", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.StartsWith(rootFolder.Path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Count > 0)\n            {\n                _scanDebouncer.Execute(ScanPaths);\n           ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfAbsent(Object key, Function<? super Object, ? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.computeIfAbsent(key, o -> write(", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid'):\n            if self.request.has_key('inreply'):\n            if self.request.has_key('inreplyindex):\n            if self.request.has_key('inreply):\n        if", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset\n\t\t\t{\n\t\t\t\tif ( x < 0 )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t}\n\t\t}\n\t}\n\t\tpublic Tile GetTile\n\t\t{\n\t\t\tget", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // - check for a second time\n                if (land.AllowVoiceVoice\n                // - if we have a channel_uri:\n                // - if we have a channel_uri\n                // - get the channel_uri\n                // - get channel_uri\n               ", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tPayPeriodEdit.Text=PayPeriodCur.ToString();\n\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t}\n\t\t\tthis.", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the time\n        # Read the column headings\n        #\n        time_format = 'time_column_headings = [\n        # Read the column headings\n        # Read the lines of the file\n        # Read the lines\n        # Read the data\n        # Read", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return {'success': True}\ndef user_create_rest(context, data_dict):\n    model = context['model']\n    user = context['", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = node.getChildren().get(example.getLabel()).getPartitionId();\n\t\t\t\tdepths[parentIndex] = depth;\n\t\t\t\tdepths[parentIndex] += numberOfPartitions - 1;\n\t\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (strlen, offset, int len) {\n         if (strlen, offset, int min, int min, int max,\n      }\n      }\n   }\n   }\n   static int minLength() {\n      @Override\n      @Override\n      @Override\n     ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = getSampleDAO();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        if (sample != null) {\n            String existingStudyFormName = sample.getStudyFormName();\n            if", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tLog.Write(\"server\", \"Rejected client {0}: {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tDropClient(new", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tcoll.add(new CatsReferralPendingEmergencyNonEDAdmissionListVoBean(beans[0].getBean()));\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoBean", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(localtxt1, local", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get report type\n  if not 'reportType' in pD:\n    return S_ERROR( \"Missing report type!\" )\n  reportType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var defense in Info.DefenseTypes)\n\t\t\t\tif (bot.HasAdequateRefineryCount(defense))\n\t\t\t\t\tbot.BuildDefense(defense);\n\t\t}\n\t\tpublic override void OnDisposed", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.getColumns());\n        catalogStmt.setOutputColumns(plan.columns.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t\t\tthis.comboBox1.FormattingEnabled = true", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (dcb.Parity == Parity.None) ? Parity.None : (byte)parity;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_data()\n        self.assertEquals(page, 'cobranding')\n        self.check_promote_demote_user\n        self.check_promote_user(self.user,\n                                                                                                                                                                                                                ", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    if _keep_tempdir is None:\n        _keep_tempdir = False\n    else:\n        _keep_tempdir = _keep_tempdir\n    #print \"Keep tempdir is", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.rescancle = self.updateList,\n\t\t\tself.updateList = self.buildList(self.list)\n\t\tself.updateList = self.buildList\n\t\tself.wlanList = self.List\n\t\tself.rescanonLayout", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = font.GetWidthPoint(fCode, size);\n                float x = x + fontX + fontX + fontX * (size - baseline);\n                float y = font.GetAscentPoint(font, fCode, font, x, baseline, size,", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list may include commas, which are not escaped.\n   *\n   * @param key The key of the list\n   * @return A", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-49.99, +49.99, 49.99)\n        x_points = np.append(x_points, [180.0])\n        y_points = np.append(y_points", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (toolStripButtonSave.Enabled)\n            {\n                SavePacket();\n            }\n       ", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    #\n    # ======================================\n    # this function is used to get the singer_feature\n    # from echonest\n    # from wav_dir\n    # get_mfcc_data\n    # =======================\n    # this function\n    #", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Gets the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public int GetRefCount(T", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        }\n        this.ResumeLayout(false);\n        this.ResumeLayout += \n        this.treeNode18.Name = \"DummySolutionExplorer\n        treeNode28, \n       ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _NullFunction = self.createNullFunction( 'nullFunction', self.GL, None, ctypes.c_void_p, deprecated=True )\n    _NullFunction.__doc__ = \"\"\"Null function\"\"\"\n    _NullFunction.__name__ = 'nullFunction'\n    _", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.getEmptyStreamsInfo();\n        }\n        }\n        }\n        }\n    }\n    private void writeUint64(final DataOutput header) throws IOException {\n        }\n    private void writeUint64(", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 * (System.currentTimeMillis() - start) / rampDelay);\n                if (alphaLevel < 0)\n                    alphaLevel = 0;\n                if (alphaLevel > 255)\n                   ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.Should().Be(false);\n        }\n    }\n    }\n        }\n        [Test]\n        public void\n        [Test]\n        [Test]\n        public void\n        {\n        [Test]\n        [Test]\n        [", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\nawait RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['1) 0.0 to 1.0'])\n        f.writelines([' 2)  sky 0.0 \n        for i in range(1, 4):\n        f.writelines([' 3) 0.0 to 1", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x10) >> 2);\n                    i += ((b & 0x08) << 1);\n                    i += (((b & 0x04) >> 3) << 2);\n                    i += (", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        if self._course_key is not None:\n            return\n        course_key = self._create_course_key()\n        self._course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\ttry {\n\t\t\t\tfloat floatNumber = Float.parseFloat(splitNumber[1]);\n\t\t\t\tchance = floatNumber;\n\t\t\t} catch (NumberFormatException e) {\n\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            os.makedirs(config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.TabControl();\n            this.chkPrivacy.\n            this.chkPrivacy.TabIndex = \n            this.chkPrivacy.TabIndex = \n            this.chkPrivacy.Size =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive_type()\n    def __init__(self.archive_type()\n            self.archive.archive.set_archive_path(self.archive.add_archive_path(self.archive.add_archive(self.archive_name\n            self.archive.set_", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionAbstractFossil(ISessionBasicFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = ILocalFileExtendedFossil\n    getAllMaterialList.name = \"resources\"\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.out.println(\"Error importing message: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), result);\n                if (result.isSuccess())", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tif (value instanceof SortObject) {\n\t\t\t\t\t\t\tlayer = ((SortObject)value).getLayer();\n\t\t\t\t\t\t}\n\t\t    \t}\n\t\t}\n\t\treturn layer;\n\t} catch (Exception e", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n\n            @Override\n            public void onCompleted(JSONObject object, GraphResponse response) {\n                if (response.getError() != null) {\n                    Log.", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tif (sum == 0) return;\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.strength = (int) (em", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'stage': \n            '\n            'finished_at': constants.\n            'finished_at': constants.\n            'started_at',\n            'name': 'stage3',\n            'started_at': constants.\n            'stage':\n            'duration", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi1 = atan(eccPrimeSquared*eccSquared*eccSquared*eccSquared*sin(phi1Rad)*(4-6.0*eccSquared*eccSquared*eccSquared", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[username]))\n    else:\n       ", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action(\n    def _validate_license_info(self,\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @property\n    @", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic static KPTranslation Load(string strFile, IXmlSerializerEx xs)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs =", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public byte[] getData()\n    {\n        return writeByteArray();\n    }\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n            new_positional_tags_list.append(regex)\n            new_positional_tags_list.append(regex)\n            new_positional_tags_list.append(regex", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n            }\n        }\n    }\n}\n\n\n## Your task:Implement the `GetProperty` method in the `GenericParameter` class to return a `PropertyInfo` object that represents the property with the given name and binding flags. The method should", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# NamedTuple for OBD-II PID 0x1A (OBD-II PID 1A)\n# PID 1A is the OBD-II PID for the.\n# OBD-II PID 1A: OBD-II P", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            {\n                AddSpell(typeof(Reg.Garlic, 104436, 104436, 11110.0, Reg.MandrakeRoot, Reg.SpidersSilk, Reg.Garlic,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.pop(exc)\n        if exc is not None:\n            exc.reraise_on_eror = True\n        if exc and not exc.response:\n            exc.response = self.response\n        if self.session:\n            self.session.remove()\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_columns=False)\ndef _pubsub_consumer(session, cluster_id, needs_columns=False\ndef sub_id,\n    cluster_id, name=needs_columns=False):\n    def_sub_", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesForRelease(ResourceEntity resource, ReleaseEntity release) {\n       ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        # Compute distance from source to line of projection\n        source_to_line_distance = (src_radius * np.cos(angles) +\n                                  src_radius * np.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url\n    def _buildURL(self, url)\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        if self.providerType == GenericProvider.TORRENT\n        \"\"\"\n        if self.providerType == GenericProvider.TORRENT:\n        \"\"\"\n        return", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, font_size_names [type], unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (null, Thread.CurrentThread.CurrentCulture);\n\t\t}\n\t\t\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value.Properties[\"The outermost value\"].ToString(), Is.EqualTo(\"It is an object.\"));\n\t\tAssert.That(obj.Properties[1].ToString(), Is.EqualTo(\"In this test\"));\n\t\tAssert.That", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, this.isToroid ? \"edge-toroid\" : \"edge\");\n                Topic b = getVertexTopic(h, this.isToroid ? \"edge-toroid\" : \"edge\");\n                edges.add", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    # test_volume_scale=1.0\n    # test_volume_ratio\n    # test_flow_rate\n    test_lut_lut_identifier\n    test_add_px_um\n    test_", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       AbstractTripleStore expected = new LocalTripleStore(new File(\"expected.nt\"), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 31, 6,\n                                                     tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u'", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This function will download and install Yarta.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean performInstallation() {\n\t\tboolean", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, new[] { vao });\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, new[] { buffer });\n\t\t\tOpenGL.CheckGLError();", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._data_cov_mat_inverse\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._data_cov_mat_inverse\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_error\n    @property\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this, new ToStringStyle());\n    }\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (String.getUserId(),\n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           get { return _selectedFolderChanged; }\n        }\n        #endregion\n        #region Presentation Model implementation\n        #region IFolderExplorerComponent implementation\n        #region IFolderExplorerComponent.Initialized\n        void IFolderExplorerComponent.Initialized(object sender, EventArgs", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplate importedTemplate = new VmTemplate();\n        importedTemplate.setName(name);\n        VmTemplate importedTemplate = new VmTemplate();\n        importedTemplate.setName(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Numeric.NumericMode = Gtk.NumericMode.DIGITS;\n\t\t\tthis.spinbuttonCheckPeriod.Numeric.NumericProp = \"Digits\";\n\t\t\tthis.spinbuttonCheckPeriod", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('')\n        # self.system['NZB_FILENAME = self.system['NZB\n        #\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic ConstructorBuilder DefineConstructor(MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[] parameterCustomModifiers, Type[][] parameterCustomModifiers)\n\t\t{", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   }\n    public static Builder {\n      return this.Builder {\n      return this;\n    }\n    }\n    public static Builder {\n      Builder {\n      return new Invitation {\n    }\n    }\n    }\n    public static Builder {\n     ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(getQuadIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code>.\n     * \n     * @param i\n     *            the index of the", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(columnList)\n        {\n            if (m_useAttachments\n        }\n        }\n        }\n        return getColumns();\n    }\n    }\n    }\n    public List<String> getColumns() {\n        String[] columnsToH", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t\t}\n\t\t}\n\t}\n}\n}\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n   ", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (lastUser.Length > 0)\n            {\n                Users.Add(lastUser);\n            }\n            else\n            {\n                Users.Add(TAppSettingsManager.GetValue(\"DataChecks", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (\n                // TODO\n            }\n            }\n            }\n            //\n            }\n            if (VerificationResult != null)\n            {\n                TValidationControlsData.AddOrRemove\n                VerificationControlsData.Row.Row.SetValue(new TValidationControlsData", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as string.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n\nThe error in this line is that it tries to use the list of requirements as a string.\nTo fix this, we should", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t\t\t\tNotifyPropertyChanged(\"CustomRangeStart\");\n\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t}\n\t\t}\n\t\t}\n\t\t\t\t\n\t}\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\tpublic string XdgBaseDirectory {\nNext line of code:\n\t\t\treturn XdgBaseDirectory;\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: bugInstance \" + bugInstance + \" has a bug annotation without a source line\");\n            }\n        }\n    }\n    /**\n     * @return the reportHistory\n    ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\t}\n\tpublic override void Serialize( GenericWriter )\n\t{\n\t\t}\n\tpublic override void Deserialize( GenericReader )\n\t{\n\t}\n\tpublic override bool CheckHungerFactor = 0.1;\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"LaneClearR\")\n            {\n                if (Menu.GetSlider(\"LaneClearR\")\n            }\n            {\n                if (Menu.GetSlider(\"Jungle", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n}\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       tree = xml.etree.ElementTree.fromstring(self._retr_file(filename))\n        root = tree.getroot()\n        for child in root:\n            if child.tag == 'tns:Ort':\n                for child2 in child:\n                   ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite'),\n            Model_parser.model_definitions('testsuite')\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var fields = new []\n                {\n                    namedWindow\n                    :\n                    :\n                    :\n                    :\n            public class\n                :\n                var fields = new\n                {\n                    :\n                    :\n                    {\n                    var\n                ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   if self.simulation\n        \"\"\"\n        \"\"\"\n        self.simulation = other\n        self.m = other\n        self.m\n        self.m = other\n        self.m = other\n        self.m = other\n        return self\n       \n        self.m", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = self.browse(cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setHTML(true);\n        } else {\n            c.setHTML(false);\n        }\n        if (oldValue != null) {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        if (value != null) {\n            c", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert items == [(\"testharness\", filename)]\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\tpublic void Cache(ICacheMapper cacheMapper)\n\t\t{\n\t\t\tif (cacheMapper == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNull", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\tm_FactionItems.Item[", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n        pushGraph(invocationQueue.addGraphHolder(methodInvocation.callee().\n    }\n    }\n    private void pushGraph(MethodInvocation methodInvocation) {\n        assert methodInvocation.callee.methodInvocation.callee();\n        }\n    }\n    private", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.create_log_path = self.args['log_path']\n        self.log_path = self.args.get('log_path')\n        self.log_path = self.log_path\n        self.pytest_name = self.args['pytest", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(virtual, stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(virtual, stamp);\n                    }\n                    phi.setValue(getC", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(event);\n    }\n}\n\nCan someone help me to complete the code?\n\nA:\n\nI think you are missing the following code:\npublic abstract void onSetPauseImage(String uri);\n\npublic abstract void receiveSessionModifyResponse(", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1156701, \"\", 0x22 ); // Eodon Wall Map\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.add_to_class(Bibxxx)\n    Record.add_to_class(BibrecBibxxx)\n    for m in models:\n        m.add_to_class(BibrecBibxxx)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.pop(user, None)\n        if self.module.get('all_users'):\n            self.module.set('all_users', self.module.get('all_users') - set([user]))\n    def remove_user(self, username, domain):", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.header = ''\n        self.header = ''\n        self.header = self.header = ''.\n    _BaseFile.__init {\n    def _BaseFile {\n    def __str__()\n    def __repr__()\n    {\n    _BaseFile {", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get transformation problematics\", res['Message'] )\n      return res\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'Valid", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\tif(method.equals(\"/\") {\n\t\t\treturn null;\n\t}\n\t}\n\t}\n\t\n\tif(method.equals(\"/form\") {\n\t\treturn null;\n\t}\n\t}\n\t\n\tif(method.startsWith(\"/\") {", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(str(info), msg)\n        result = yield self.run_fake_single_build(gsp, buildResult, resultText,\n                                                    expWarning=expWarning)\n        self.assertEqual(result, str(info))\n        result", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/colaborator'\n    self.category.term = 'colaborator'\n    self.assert", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotatedTypeMirror>\n        AnnotatedTypeMirrorTypeMirror\n    @Override\n        AnnotatedDeclaredTypeMirror\n        @Override\n        AnnotatedDeclaredType\n        if (type.isDecla", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       if mat.use_transparency and (mat.use_transparency and mat.use_transparency and mat.use_transparency = (mat.use_transparency:\n            if mat.use_transparency:\n            sub = col.prop(mat", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            mapper16_IRQEnabled = _mapper16_IRQEnabled;\n            mapper16_latch1 = mapper16_latch1 = mapper16_latch2data1 = mapper16_latch2 = ma", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(m_jPopupMenu);\n            m_jPopupMenu.addSeparator();\n            m_jPopupMenu.add(m_jMenuBar.getInspectorMenuBar());\n            m_jMenuBar.add(", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = this.Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = models.SlugField(_('Slug'),\n                           max_length=255,\n                           unique=True,\n                           blank=True,\n                           help_text=_('Slug used for cross-", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.by_name['php'].startstring = r'\\bphp(?=\\s|\\()'\nlexers.by_name['php'].re = r'(?s)\\$([\\w\\[\\]]+)\\s*(?=\\()'\n# Enable highlighting for Python code\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   '''\n                    '''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration\n                    FROM flight_log_final\n                    WHERE registration = ?\n                    AND sdate >= :start_date\n                   ", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table_create('snapshots').run()\n        conn.table_create('snapshots_active').run()\n        conn.table_create('snapshots_deleted').run()\n        conn", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tbreak;\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t\tbreak;\n\t\tbreak;\n\t\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__\n        self.codehead\n        self.codetail = self.codetail = self.codetail = self.coderep =\n        self.codetail = ()\n        self.coderep = ()\n        self.codetail = ()", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host\n    \"\"\"\n    def __init__(self, uuid, name, finish, result):\n        self.uuid = uuid\n        self.name = name\n        self.finish = finish\n        self.result = result", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(context, Crappalinks.class);\n                intent.putExtra(\"uri\", uri);\n                startActivity(intent);\n            }\n        }\n    }\n}\n}\n\n\n## Your task:\nRevise the given Java code to enh", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   assert(not primary)\n    raise AssertionError(\"primary.xml contains packages\")\n@behave.when(\"primary in \\\"{path}\\\" doesn't have any packages\")\ndef primary_in_path_doesnt_have_any_packages(context, path):\n    file", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       # (The following line is not used in the current implementation.)\n        # return self.get_outputs()\n# install_lib.py\n# -----------------------------------------------------------------------------\n# Copyright (c) 2002, 2003, 2004", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\tlazyPropertyAlias = lazyPropertyAlias;\n\t\t\tif (table = table = null;\n\t\t\t{\n\t\t\t\tlazyPropertyLazyPropertyLazyClosure = lazyPropertyLazyAvailable;\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-N', job_name,\n        '-d', request['job_log_dir'],\n        '-o', log_name + '.out',\n        '-e', log_name + '.err',\n        '-hold_jid_min', request['job_id'],\n        '-", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (child) Delegate (parent)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        public Action", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} : {1}\", item.DisplayName, GetItemValueText(item)));\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n        }\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n        if premium_url:\n            self.download(premium_url, post={\"download\": \"download\", \"file_name\": self.pyfile.name})\n        else:\n            self.fail(_(\"Couldn't get premium download link\"))\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\t\tif (path.Count == 0)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\treturn path[0];\n\t\t\t\t}))\n\t\t\t{\n\t\t\t\t// If no harvestable cells are found, return null.", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"dhcpd -t failed\")\n                       return False\n                    self.logger.info(\"restarting dhcp service\")\n                    self.logger.info(\"service %s restart\" % service_name)\n                    rc = utils", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                for (stateIndex = 0;\n                {\n                    if (state.Frequency > 0)\n                {\n                    state.\n                }\n                if (state.Frequency < ORDER_BOUND_BIT_COUNT\n                {\n                ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        });\n        /// <summary>\n        /// The SQvr VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\t\t\n\t\tlabel_tests = new String[] { \"tests;\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(b'abcdefghij', self.read(b\"abcdefgh\")\n\n    def test_insert_escape(self):\n        self.failUnlessEqual(b\"abcdefghij\")\n        self.failUnlessEqual(b\"", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylabel('%s' % stat)\n    plt.plot(cr['combined'][app][test]['stats']['values'],\n            'o-', label=test)\n    plt.fill_between(range(len(cr['combined'][app][test]['", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(\n        self.assertEqual(1, 2, \n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Check UID/GID\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        Test that the current UID and GID are not root.\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(bDrawCross ? Color.GRAY : Color.LIGHT_GRAY);\n\t\t\t\t\tg.drawLine(x, y, x + controlSize - 1, y);\n\t\t\t\t\tg.drawLine", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\n  \"\"\"\n  failures += \"Test failed with k=3\\n\"\n  return failures\ndef simulateClassifier(knn, patternDict):\n  \"\"\"Test the KNN Classifier on a dictionary of", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = offset - headerSize();\n        if (value instanceof Value) {\n            final Value valueToWrite = (Value) value;\n            if (valueToWrite.isArray()) {\n                ArrayAccess.writeArray(mirror, index, valueToWrite.asArray());", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            return FileUtils.CombinePaths(Path.GetDirectoryName(Path.GetDirectoryName(this.Path)), relativePath);\n        }\n        /// <summary>", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % args\n    # This doesn't work because %s expects a tuple, not a list\n    #return string % tuple(args)\n    #return string % dict(args)\n    #return string % dict_recursive_merge(args)\n    #return string %", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i1 = i1, i18, i1, i17, i15, i16, i16, i16, paramArrayOfInt5, i16, paramArrayOfInt5, paramArrayOfDouble1, i16, paramArrayOf", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t}\n\t\treturn str;\n\t}\n\t\n\tpublic override bool TryTransition( string name, out State state ) {\n\t\t\n\t\tif( _desired_state == null )", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                Slot = SpellSlot.Q,\n                    Radius = 150,\n                    Radius = 100,\n                    Radius = 100,\n                    MissileSpell = MissileSpellName = \"", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(UUID.randomUUID(), \"test\", \"test\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            subprocess.Popen,\n            ['/bin/false'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//call once before adding a constraint to a collection\n\t\t//will throw an exception to prevent adding a constraint that violates a rule\n\t\t//such as a non-nullable column containing a null value\n\t\t//or a unique column containing a duplicate value\n\t\t//or a", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout.setItem(self.verticalLayout.addItem(self.verticalLayout.addWidget(self.verticalLayout)\n\n        self.verticalLayout.addItem(\"\")\n        self.verticalLayout.addItem(self.verticalLayout)\n        self.addItem(", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return;\n            }\n            // We have the station with TAF\n            wxs.moveToFirst();\n            String wxIdent = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_IDENT ) );\n            String wxType", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionRowCount, \"unexpected row count\");\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecution", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctab[((uiCRCITTSum >> 16) ^ uiByteValue) & 0x0000ffff];\n                uiCRCITTSum = (uiCRC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisplacementModule()\n\t}\n\t}\n\t}\n\treturn null;\n\t}\n\t}\n\t}\n\t}\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override\n\tgetDisp\n\tgetDisplacement", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, editor)\n            };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller, editor),", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.button.setEnabled(True)\n        self.connect(self,\n                         self._xLineSlot)\n        self.l.setEnabled(True)\n        self.connect(self,\n                        \n        self.button.setEnabled(True)\n        self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Pick location\n\t\t\t\t{\n\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location.X, m_Mobile.Location.Y );\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshould", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t}\n\t}\n\t\t\n\t}\n\t}\n\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found that contains the unpriced line\n                                if (unpricedLine.Key < orderPurchaseESD.data", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       Database.getCurrentSubject().getACETarget(0);\n        assertTrue(false);\n    }\n        assertEquals(0, \n        //ACE_ACETarget(0);\n        assertEquals(0, ACE_ACETarget(0);\n        assertEquals(", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.Clamp (viewport.Center, viewport.Center + viewport.ToVector2 ());\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.Cl", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key:\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n        self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tm_client", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                List<ActivityBucket> list = convertToActivityBucketList(list);\n                notifyActivityReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, list);\n            } else if", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s) {' % (function_name + ') {'))\n  PrintLongLine('    return (%s)callback;' % function_name)\n  PrintLongLine('  }')\n  PrintLongLine('  return NULL;')\n  print ''", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ], indent=4, ensure_ascii=False),\n        content_type=\"application/json\"\n    )\n    \"\"\"\n    response = Http", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n            }\n            final JoinGroupNode serviceNode = new JoinGroupNode();\n            serviceNode.addChild(serviceGraphPattern);\n            serviceNode.addChild", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.object.is_active:\n            self.handle_no_permission()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super(UserDetailView", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the hash of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get { return", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetSolveStatus(Resources.SolveInProgress);\n            _iterator.SetSolveStatus(Resources.SolveInProgress);\n            _iterator.SetSolveStatus(Resources.SolveInProgress);\n            _iterator.SetSolveStatus(Resources.Solve", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat median = median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           # Check the number of nodes in the reference_counts\n    # Note that this is a bitmasked array\n    # Note that this is a bitmasked_array\n    # Nodes in the same_sampled_array\n    # Nodes\n    # N\n    # samples", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result.update({'mapping': mapping_json})\n        return result\n    def _test_enrich(self):\n        \"\"\"Test whether the enriched indexes are properly enriched\"\"\"\n        perceval_backend = self.connectors[self.connector][3]()", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsNull)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif (slot.Value.IsBot)\n\t\t\t\t\t\t\t\t\t{", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + Environment.NewLine + _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic override string ToString(bool includeStackTrace)\n\t\t{\n\t\t\tif (include", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + self.data + padding_bytes\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('END_PUSH_PROMISE')\n    def __init", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull.Width != cluster.RectangularHull.Width)\n                throw new MsaglException(\"Cluster \" + cluster.DebugId + \" has inconsistent widths\");\n            if (cluster.BoundaryCurve.Rect", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double\n#if \n\t\tm_jumping()\n\t\t\n\tm_jumping = false;\n\tm_jumpSpeed = m_jumpSpeed = m_jumping = true;\n\tm_jumpSpeed = m_jumpSpeed = m", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\tNBTTagCompound nbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\tif (nbttagcompound != null)\n\t\t{\n\t\t\tnbttagcompound.setInteger(\"color\", color);\n\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(Context, CommentXmlNode, typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//--------------------------------------------------------------------\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\tAssert.AreEqual(default_height, default_height, myTrackBar.Height, \"#SIZE26\");\n\t\t}\n\t\t\n\t\tprivate void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tresult = instrumentation.addInstrumentationPoints(agentConfiguration(agentConfiguration, Collections.singleton(instrumentationApplier());\n\t\t}\n\t\t\t(ClassType);\n\t\tverify(classCache, times(1).executeWithWriteLock(Matchers.<Call", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\t\n\t\t\n\t\t\n\t}\n\t\n\tpublic AbstractionContainer(Abstraction)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > start) {\n              continue;\n            }\n            int max2 = wideRExtent[end][r.leftChild];\n            if (max2 < end - start) {\n              continue;\n            }\n            int max = (max2 > end)", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'command_wrappers.Command(\n            'command_wrappers.return_value = 'src',\n            shell=False, env=None,\n            stdout=False, stderr=False,\n            pipe_file.write.return_value = True\n        )\n", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningThreadsChanged += DbgProcess_Threads;\n\t\t\t\tprocess.ThreadsChanged -= DbgProcess_Threads;\n\t\t\t\tprocess.ThreadsChanged -= DbgProcessThreadsChanged;\n\t\t}\n\t\tvoid Dbg", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", \"r\", String.valueOf, \"g\", \"color\", String.valueOf( \"a\", String.valueOf( g, r, b,\n\t\twriter.attribute( null, \"color\", String.valueOf( g, \"color\", String.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nname = output_name + '.' + ID + '.rejected_config'\nwith open(name, 'w') as f_ID:\n  f_ID.write(str(total_rej))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # This is_shape_i,\n    if not isinstance(node.op, T.Elemwise,\n    # This is a Subtensor(node.op.idx_shape_i, T.TensorConstant(node.outputs[0]\n        if node.", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple\n    self.fields['groups'].label = \"Select the groups you want to be a part of:\"\n    self.fields['groups'].help_text = \"Select the", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               if not retval=True\n        \"\"\"\n        def _init_query\n        \"\"\"\n        def before_compile(self, query\n        def before_compile(self, query:\n        def before_compile(self, query:\n        def before_compile(self, query:\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(resource_fs)\n\n\ndef load_xmodule_class(runtime, system):\n    \"\"\"\n    Load the ConditionalModule class.\n    \"\"\"\n    return ConditionalModule\n\n\ndef load_xmodule", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(axis, indices)\n        self.update_filter(self.data, self.bg_value, self.current_filter, self.indices)\n        self.update_filtered_data()\n        self.update_filtered_bg_value()", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\t{\n\t\t\t\tpublic sealed class Ldref\n\t\t\t{\n\t\t\t\tpublic sealed class Ldref : Type : TypeWrapper : Type : Instruction\n\t\t{\n\t\t\t{\n\t\t\t}\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n    }\n    @Override\n    public Collection<String> getSupportedVocabulary", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.hasTagCompound()) {\n\t\t\tItemStack drop = new ItemStack(Item.STONE);\n\t\t\tdrop.set(true);\n\t\t\tdrops.add(drop);\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           THashSet<Node> neighborsInC = new THashSet<Node>(component.getNeighbors());\n            neighborsInC.retainAll(c.getComponents());\n            for (Node n : neighborsInC) {\n                intrinsicCohesion", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   if v1 != v2:\n                        are_equal = False\n            except Exception as e:\n                logger.info(\"ERROR: Problem when migrating document %s: can not retrieve from the bibdoc table \" % (str(docid), ))\n            logger.info(\"", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return exDateList;\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @param date the java.util.Date to convert.\n   * @return a Dat", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding = new dfEventBinding( sourceEventName, sourceProperty, targetProperty );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\tif( targetEventName == null )\n\t\t\treturn;\n\t\ttargetEventBinding = new dfEventBinding(", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       Map<String, String> nodeName = (String name = (String name)\n        // Authorization check\n        if (privilege\n        if (userName)\n        String nodeName = DaylightWebUtil.getSpanPortsName.getName()\n        String nodeName = (", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpublic static class CoreForms;\n\t\tpublic static class CoreForms;\n\t\tpublic static class Forms;\n\t\t\tpublic static", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static final int MAX_SIZE = 1000000;\n    public static final int MIN_SIZE = 1;\n    public static final int MAX_RANDOM = MAX_SIZE;\n   ", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\n\n        # make_na_equiv_uu\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\";\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n           ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes[byteIndex] = (ch >= 0xFF61 && ch <= 0xFF9F) ?\n\t\t\t\t\t\t(ch - 0xFF60) + 0x", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n@ispec(\"32<[ ~off2(4) a(4) ]\", mnemonic=\"32<(4) ]\", mnemonic=\"LD_A\", mode=\"Long-offset\")\n@ispec(\"32<[ ~off2(4) ~off", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties props = new Properties();\n\t\t\tstream = location.getInputStream();\n\t\t\tprops.load(stream);\n\t\t\treturn new JRPropertiesMap(props);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public int getID()\n        {\n            return this.id;\n        }\n        /**\n         * Returns the ID of this game type\n         */", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultDaclIsAllowEveryoneFullAccess ()", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, result)\n    def __process(self, result):\n        self.__idle(self.__idle, self.__idle, result)\n    def __idle(self, func, *args, **kwargs):\n        self.__idle", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.Current.ReAppId = null;\n        if (PhotonEditor.Current.photonAddress = string.Empty;\n        if (GUIUtility.keyboardControl = (PhotonEditor.Current.ServerSettings.photonAddress = Photon", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       MessageView_full.this.getActivity().getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        MessageView_full.this.getActivity().getSupportActionBar().setDisplayShowHomeEnabled(true);\n        MessageView_full.this.getActivity().getSupport", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           psit_G_ = np.einsum('nk,nkp->nkp', psit_G, self.ibzk_kc[s])\n            psit_G_ = np.einsum('nkp,kp->nk', psit", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       @Test\n    }\n    private String intygsTyp = \"luse\";\n    }\n    private String intygsTyp = \"luse\";\n    }\n    private String PATI\n    private String PATI\n    private String PATIENG_TYPE_", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    SmoothPosition = SmoothRotation = Position;\n\t    SmoothRotation = Position;\n\t    if (Owner.IsRagdoll\n\t    }\n\t    if (Owner.IsRagdroid.RagdollRBodypart != null\n", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   \"\"\"Geological Layer with fractures\"\"\"\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture Layer\"\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)(((num >>> 24) & 0xff) | 0x80);\n        out[outOff + 1] = (byte)(((num >>> 16) & 0xff) | 0x8", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.source = new FilteredPatternFinder( source,\n                new SimpleRegexValueGetter( this, objectVariables ) );\n        }\n\t    private final Iterable<PatternMatch> source;\n\t    private final PatternMatchMatcher matcher;\n\t    private final", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['@from'] = value\n    elif key == 'fin':\n        node_json['@to'] = value\n    elif key == 'NODE':\n        for child_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n      btn.addMouseListener(new MouseAdapter() {\n        public void mouseClicked(MouseEvent e) {\n          if (frameToClose!=null) {\n            if (btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.table import Table\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    writeRasterCode(p, out);\n    move(out, Util.px2mm(offset.x+toolDiameterInP", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME + \" = \" + Db.Table1.TABLE_NAME + \" AND \" + Db.Table1.GROUP_ID + \" = \" + newId, null, null, null);\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid).GUID);\n                Marshal.FreeHGlobal(m_ptr);\n            }\n        }\n        private void Dispose(bool disposing)\n        {\n            if (m_meth == Al", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL = '/accounts/login'\nLOGIN_REDIRECT_REDIRECTS = (\n# The URL to redirect to after login\nLOGIN_REDIRECTS = ()\n# The following settings are used by the Django's test server\n# settings.\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue.Count(q => q.Item == itemName) > numberToCancel)\n\t\t\t\tqueue.RemoveAll(q => q.Item == itemName && q.QueueLength > numberToCancel);\n\t\t\tif (", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    if self.activeTreeview==0:\n        self.clickedFileOrDir, self.clickedFileOrDir\n        self.clickedFileOrDir.\n        self.clickedFileOrDir.setVisible()\n        self.showCurrentDirInfo()\n        \n   ", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       self.update_post()\n        \"\"\"\n        The method is a task generator method\n        The method is used to process_task_gen_post\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    @property\n    \"\"\"\n    @property\n    :py:meth:`waflib", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #rospy.loginfo(\"Succeeded the Logic Plan\")\n        #success = True\n        #", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + 1 ] - chemical[ 0 ][ idx - 1 ]\n\t\t\t\t\t, hdiv0 );\n\t\t\t\t\tdelta[ 0 ][ idx ] += ( chemical[ 0 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern)));\n                break;\n            case ColumnType.", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t}\n\t\tpublic new HbmMappingMapping(HbmProperty(member, mapping =\n\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(cm.Length(cm.Name);\n\t\t\t\t\tLength(cm.", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_keyid_config = self.module.ntp_auth_enable = self.authentication\n        self.authentication = self.state = self.ntp_auth_enable = self.authentication\n    def config_ntp_auth_keyid\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assert_node(self.store.get_item(self.store.location)\n            self.assertRaised_update_info(self.store.get_item_info(self.store_item_location.course_key, self.store.course_key,", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) 0);\n        updateWithCharBuff(ch, start, length);\n    }\n    private void updateWithCharBuff(final char[] ch, final int start, final int length) {\n        final int size = charBuff.capacity();", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['value", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           formatters = new Collection<MediaTypeFormatter>();\n            formatters.AddRange(GlobalConfiguration.Configuration.Formatters);\n            formatters.Add(new FormattableMediaTypeFormatter());\n            formatters.Add(new JsonMediaTypeFormatter());\n            formatters.Add(new Xml", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           self.on_quit_cell(record, column.name, value, callback=callback)\n        elif (keyval == gtk.keysyms.Return\n                or (keyval == gtk.keysyms.ISO_Tab\n                    and not (self.screen.parent", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * @author dward\n     */\n    @Override\n    public int compareTo(Object o", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise ValueError(\"Found non-blank line in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e))\n    changed = False\n    msg = \"\"", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)]\n            Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)]\n            Guid guidExtendedType2,\n            [In, MarshalAs(UnmanagedType.LP", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return userDirectoryService.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = { USERS + CREDENTIALS + \"/\" + USER_ID_", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag matches what is expected.\n        This verifies the tag name and namespace prefix match what is expected", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.ELEMENT_NODE\n    def _get_node = node.nodeType = node.nodeType\n        if node.nodeType == Node.DOCUMENT_NODE\n        if node.nodeType == Node.ELEMENT_NODE", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\tvalidate(EMSSc\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t(int signedPortionLocator.setType(TlvEncoder.getTypeAndLength(encoder.getLength() = encoder.getLength() = encoder.getSignatureInfo = decoder.getOffset()[0]\n\t\t\t\t\t(decoder", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.update(delta);\n        }\n        \n        //Updates the player's HP\n        for(", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( colorValue );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n            .addPlayer( action );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error: %s\" % r.data.decode(\"utf-8\"))\n    if r.status != 200:\n        raise RuntimeError(\"Error: %s\" % r.data.decode(\"utf-8\"))\n    filename = get_filename(r", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRunMergedOrder == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailureReason = \"Merge", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Cannot determine weight of reaction with multiple metabolites.\")\n    return reaction.elements.get(\"C\", 0) * reaction.flux\ndef _total_components(reaction: \"Reaction", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.filter(store__path__startswith=pootle_path).filter(\n            Q(store__user__isnull=True) | Q(store__user__is_active=True)\n        )\n    def get_for_path(self, pootle", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               if dstip in self.dstmac_cache:\n                    self.dstmac_cache[dstip] = arp.hwsrc\n                else:\n                    self.dstmac_cache[dstip] = arp.hwsrc\n                self.logger.debug(\"Switch {}", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      removeOldest();\n    m_RecentItems.add(item);\n    updateMenu();\n  }\n  /**\n   * Remov", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.IsInRange(src, 10))\n                return true;\n            return false;\n        }\n    }\n}\n\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public Date getMaxTradePeriodDate() {\n    }\n    @Nullable\n    public void getTradePeriod() {\n    }\n    public void onState(State state) {\n        if (stateProperty.get(state) {\n    }\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tmStream.ReadReport(0)\n\t\t\t\tmStream.SetWriteData(mWriteData);\n\t\t\t\t\tmReadDataBuffer.ReadData(mReadData);\n\t\t\t\tmReadData(mDataReportType);\n\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(direction, caseInsensitive);\n\t\t}\n\t\tpublic boolean compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null || o2 == null)\n\t\t\t{\n\t\t\t\treturn false;", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _units2Units\n        }\n        }\n        }\n        }\n        }\n        //UPGRADED\n        //UPGRADE_INDEX_SIZE\n        {\n            _heap = _heap;\n            _units2UnitsStart =", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       add_view = navigate_to(rate, 'Add')\n        add_view.add_button.click()\n        return rate\n    @classmethod\n    def create(cls, description, currency=None, fields=None):\n        \"\"\"Create a rate in the UI\n        Ar", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Cannot write to shadow buffer\" );\n\t\t\t}\n\t\t\tif ( _scratchToScratch )\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = \"single_transponder\"\n\t\t\tself.sat.value = self.scan_sat.system.value = self.scan_satEntry.value = getConfigListEntry\n\t\t\tgetConfigListEntry.append(", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CNT:\n            tcpKeepAliveCnt = (Integer) opt", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               int p = \n                if (PdfDictionary.GetPredictor(dic.GetPdfObject(dic.Get(PdfName.PREDICT;\n                }\n                break;\n                }\n                break;\n            }\n            }\n            if (dic.Get", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ('foo', 'bar'))\n        self.assertTrue(isinstance(s.get_interface_decomposed(), tuple))\n       ", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def p_operator(self, xx, pos_xx, pos_xx):\n        if self.get_options.get_case() == \"Classical\":\n        if self.get_options().get_case() == \"Classical\":\n        if self.get_options().", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           // This is a test.\n            {\n            Assert.AreEqual(\n            Assert.AreEqual(\n            Assert.AreEqual(\n            }\n            Assert.AreEqual(\n            {\n            Assert.AreEqual(\n            {\n            Assert.AreEqual(\n            Assert", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\treturn map.keySet();\n\t}\n\t@Override\n\tpublic Collection values() {\n\t\treturn map.values();\n\t}\n\t@Override\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"## Returning Item {0}\", auction.ID.ToString() );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    @api.model\n    def _get_default_next_action(self):\n        return 'hr_attendance.action_greeting_message'\n    @api.model\n    def _get_default_next_action_name(self):", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\tgrdResultsRow rRow = form.grdResults().getRows().getRowByTestName(orderInvestigationLiteVo.getSpecimen().getSpecimenId());\n\tif (rRow == null)\n\t{\n\t\trRow = form.grdResults", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(pt.x, pt.y);\n            }\n            Dispose()\n            {\n                if (c != null) c.Dispose();\n            }\n        }\n        /// <summary>\n        /// The index of this item\n        /// </summary>\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       terminal = maker.create_terminal(self, cwd, profile)\n        terminal.on_window_focus_in()\n        terminal.set_title(self.get_title())\n        terminal.set_position(self.get_position())\n        terminal.set_", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = new MarshalInfo(\n                    }\n                    }\n                    managedType = managedType;\n                    MarshalAttribute\n                    }\n                    }\n                    StructTypeName = managedType;\n                    arraySize = arraySize;\n                    }\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType; }\n\t}\n\t\t}\n\t\t}\n\t}\n\t}\n\tpublic bool IsClass {\n\t\tget {\n\t\t\treturn true;\n\t}\n\t}\n\t}\n\t}\n\tpublic", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private methods\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self.context.set_options(\n            self.context.get_verify_mode() |\n            _openssl_to_stdlib_verify[protocol]\n        )\n        self.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vpanedPages.Add (vbox3);\n\t\t\tthis.vbox3.Add (this.vbox3);\n\t\t\tw26.Position = 0;\n\t\t\tw26.Expand = false;\n\t\t\tw2", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    # Connect the notebooks to the statusbar\n    def _(page_num):\n        page_num = page_num\n        tab = widgets[self.get_page_num, gtk.Align.set_page_num, gtk.Align.set", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_C,\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void refreshVisuals()\n  {\n    if (isSelected)\n    {\n      if (isHighContrast())\n      {\n        setFont(getFont().derive(Font.BOLD, Font.ITAL", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(10, 702);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(8", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (sb != null)\n        {\n            sb.append(string.substring(i + 1));\n        }\n        if (sb != null)\n        {\n            return sb.toString();\n        }\n        return string;\n    }\n}\n\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// (byte[] data = new byte[] { 0x0b, 0x9f, 0x63, 0x64, 0x05, 0x0b, 0x0b, 0x08, 0x", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += EnumSwitchUnion.class.getField(\"m_d\").getDeclaredMethod(\"serialize\", SerializerImpl.class, BinaryOutputStream.class).getGenericParameterTypes()[0].getGenericParameterTypes()[0].getSerializedSize(current_align);\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n    return javaHome;\n\n  }\n  private static String GetJavaHome(String resinHome, String javaHome)\n  {\n    if (javaHome == null)\n    {\n      if (File.Exists(Path.Combine(resinHome, \"bin\", \"", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if re.match(r'^%s' % job, l):\n                    return [comment, l]\n            else:\n                m = re.search(r'^%s' % name, l)\n                if m:\n                    return [l[:m.start", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier(mesh_json['mask_tex_uv_texture_tex_uv_uv_tex_uv_map_tex_use_channel_use_tex_uv_tex_map_tex_use_channel = modifier_tex_tex_uv_map", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            likelihoods = rankCountsToLikelihoods(rankCounts, totalPositivesCount, minLikelihood);\n            if(likelihoods != null)\n            {\n                likelihoods =", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2,", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.packet = self.cap[int(self.choice)-1]\n                self.packet.show()\n            except (ValueError, IndexError):\n                print(self.fatal+\"[!] Invalid packet number. Try again.\"+self.blk)\n               ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'object_name': 'django.models.fields.related.ForeignKey', [], [], {'to': 'main.Document', 'null': 'True', 'blank': 'True', 'to': 'True'}),", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               returnType\n            }\n            }\n        }\n        }\n        }\n    }\n    }\n    }\n    }\n    }\n    private void processTypes(QName, SDOTypeName\n    }\n    private void processTypes(QName) {\n        }", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.holid_id\n        self.onchange.\n        self._compute_number_of_days_in_id = self.\n        self.on_follow_id: self._compute_number_of_days_id: self.\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "          \n        ///\n        ///\n        /// <param name=\"The grid\n        ///\n        ///\n        ///\n        ///\n        /// <returns>\n        /// <returns>\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        /// <returns>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name;\n        }\n    }\n}\n\n}\n}\n\nCan anyone help me to complete the code?\n\nA: I've completed the code.\n\nA: Here is the completed code:\nusing System;\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 verbose=verbose,\n                 env=env)\n        if android:\n            # Build the APK\n            call([\"cargo\", \"build\", \"--release\", \"--target\", \"x86_", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t//\treturn score;\n\t\t//\tif (score.getScore(rule, predictPositives\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               StashMessage.Text = gitStash.Message;\n                StashMessage.Enabled = true;\n                StashMessage.ReadOnly = false;\n                StashMessage.SelectionLength = 0;\n                StashMessage.TextChanged += StashMessageTextChanged;\n            }", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm1_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm2_index).out_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return this.match(o) == 0;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return (this.scheme == null) ? 0 : this.", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n        }\n        }\n    }\n        public int AddInt(int a, int b)\n        {\n            return int a + b;\n        }\n    }\n    }\n    }\n    }\n    }\n    }\n    public class AddNumbers {", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if archive_index is None:\n        sys.exit(1)\n    args.func(archive_index, args)\nif __name__ == '__main__':\n    main()\n    sys.exit(0", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.ss, self.cmd_ss,\n        #\n        #\n        #\n        #\n    def decode_cmd_token\n        #", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      // (, line 167\n    // (, line 6:\n    // (, line 6:\n    //, line 6:\n    // (, line 6:\n    // <-, line 6:\n    // (, line 7:\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = dins.readObject();\n            } catch (IOException ex) {\n                System.out.println(\"Error reading \"+channel+\" \"+cd.name);\n                return;\n            }\n            catch (ClassNotFoundException ex) {\n                System.out.println(\"Error reading \"+", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   # CertificateExtension\n    def _get_authority_cert_issuer_ordered_info\n    def _get_authority_cert_key_usage(self):\n        self.set_serial_cert_authority_issuer_cert_ordered_cert_info\n   ", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (ScopedConnectionList::ScopedConnectionListIterator i = c.begin(); i != c.end(); ++i) {\n\t\t\t\t\tScopedConnection& c2 = *i;\n\t\t\t\t\tif (c2.is_slot)", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   front_seq = unicode_to_utf16(unicode_to_utf16(X.begin, 0xE000))\n    #     assert front_seq[0] == X.begin\n    #     assert front_seq[1] == 0x", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 11) {\n\t\t\t\tGet();\n\t\t\t\tSet(out s);\n\t\t\t\ts.Or(s);\n\t\t\t} else {\n\t\t\t\tGet();\n\t\t\t\tSet(out", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line['product_id']\n            edi_doc['product_qty'] = line['product_uom_id'] and line['product_uom_id']._last_displayed_quantity(cr, uid, line['", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, getDefaultServiceProperties());\n    }\n}\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<PermissionEntry>();\n        }\n        }\n        //\n        {\n        //\n        virtualNodeRef\n        virtualFolder);\n        List<PermissionEntry>\n        }\n        vf2UserPermissions =\n        {\n        //\n        }\n       ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(devices)\n\nThis line seems to be causing an issue. Can you explain why it's there and what it's supposed to do? It looks like a common pattern in pytest tests where you want to ensure that the list of devices returned by the enumerator is not empty", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId, floorId)\n    data = user.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    outlines = [\n        if (index_elements[0]\n        [\n        index_elements[1]\n        index_elements\n        if (index_elements[2]\n        [3]\n        'C': [\n        'C\n        'stokes': '", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = CraftSystem.GetItemID(this);\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String deviceName : devices){\n            TunerManager.getHdhrTunerList.addDevice = true;\n            TunerManager.getTunerList(device);\n        }\n        }\n        }\n        return;\n        }\n        }\n       ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file must have at least two columns per line.\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\" \"))", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #return [n for n in self._latex_names(include) if n in source_dir]\n            #return [n for n in self._latex_names(include) if n in source_dir]\n            return [n for n in self._latex_names(include) if", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return None\n    def features(self, features(self, features(self, self.features)\n    def features(self, self, self, Features\n    \"\"\"\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        def features(self, self, features\n        \"\"\"\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.port\n        if self.want.port:\n        self.want.port\n        if self.want.ip\n        if self.want.port\n        if self.want.port:\n        if self.want.ip:\n        if self", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.is_displayed and\n            self.inline_name.is_displayed and\n            self.inline_display_name.is_displayed", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Action class not found: \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return this.getActionObject(className);\n    }\n    public IAction getActionObject(String className, ConfigLoader config", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   # pylint: disable=no-member\n    @patch.set_comment_id,\n    # pylint: disable=no-member-name\n    @patch-member-name\n    # pylint: disable=no-member-name\n    @patch.member", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllCheckAction(target, source, env)\n        else:\n            raise SCons.Errors.StopError(SCons.Util.SConstructPath(source[0]),\n                                         \"Manifest file %s does not exist\" % manifestSrc)", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           MultiStatus errors = execute(getSelection(), new SubProgressMonitor(shell, 100));\n        } catch (CoreException e) {\n            errorStatus[0] = e;\n        } finally {\n            shell.close();\n        }\n        if (errorStatus[", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts=new int[meta.getFieldCount()];\n\t\t\n\t\treturn super.init(smi, sdi) && initializeMeta();\n\t}\n\t\n\tpublic boolean deactivate()\n\t{\n\t\tdata.counts=null;", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   #\n    #\n    #\n    assert f(2014,12,31, 12,15,15,31,31,12,12,15, 12,12,12,12,31", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int mint = int.ToInt32(mint[0] = \n            {\n                int[1] = int.ToInt32(m[1] = dmint[1] = smaxtime;\n            }\n            }\n            }\n            int", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(suspend_support_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest doesn't support suspend\")\n        s, o = self._session_cmd_close(suspend_support", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(service.invokeAny(sub.get(), new FutureCallback<Integer>()\n        {\n            @Override\n            public void completed(Future<Integer> future)\n            {\n                System.out.println(\"Completed\");\n                assertThat(future.get(),", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                this.owner.getDecorator().setOnSendRequestAfterParameters(res, r, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x7F * 2)\n\t\t\t\treturn 2;\n\t\t\telse if (value <= 0xFFFF * ", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.reload_file(self.fm.thisdir.path.get_path.replace(self.fm.thisdir.path.path\n        self.fm.env.path.path.get_dir.path\n        self.fm.execute(self.fm.this", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_Type()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest));\n\t\t\tAssert.IsInstanceOfType (objCOMTest, typeof (COMTest));", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       de = Locale.objects.get(code='de')\n        self.assertEqual(Signoff.objects.count(), 5)\n        self.assertEqual(Action.objects.count(), 10)\n        self.assertEqual(AppVersionTreeThrough.objects.", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.cmd.type\n        self.control_message.send_control_messages.add(cmd.parameters[\"cmd\":\n            self.control_socket.send_control_messages\n            self.Log.debug(\"control_", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n/**\n * Send a message to all group members\n */\npublic static void send", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\nclass Tokenizer(object):\n    def __init__(self, toks):\n        self.toks = toks\n        self.toks_by_col = self.cut()\n        self.maxwidth = self.get_maxwidth()\n        self.align = \"<\"", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       tree_model = ga_Gtk.ListStore(int, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent instanceof Tag);\n\treturn ESCAPED_TEXT.getCode();\n    }\n    /**\n     * set the value values\n     * \n     * @param values\n     * @throws ExpressionException\n     * @throws PageException\n     **/", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry[] Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    InventoryEntry invEntry = new InventoryEntry();\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tChangeOfServiceVo vo = beans[i].buildVo();\n\t\t\tcoll.add(vo);\n\t\t}\n\t\t\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t// Argon2k\n\t\t\t//[0x00, 0, 0x00, 0x2, 0x0F, 0x3C, 0xA, 0xF8, 0x3F, ", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, true) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------------\n#\n# Copyright (c) 2011, Django Software Foundation and individual contributors.\n# All rights reserved.\n#\n# Redistribution and use in source and binary", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tLayer newFrame = NextFrame;\n\t\t\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setVoice(voiceSettings);\n            dc.setVoiceSettings(p);\n            }\n            if (num == 0) {\n            if (num == 0) {\n                if (num == 1) {\n                    responseCallList", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.getName().equals(\"CC BY-SA\")) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[x * ySizeP + y] = newVertices[x * ySizeP + y];\n            newNormals[x * ySizeP + y] = newNormals[x * ySizeP + y];\n        }\n        for (int x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tObject result = client.call(\"add\", new Object[]{testInt1, testInt1});\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection to \" + url.", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionStart()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getBlockSelectionEnd()\n\t\t\t{", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"No object found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0;\n            pixel_y = 0;\n            pixel_x = 0,\n            pixel_y = 0;\n            pixel_x += 60, 0,\n            pixel_y = 0,\n            pixel_x = ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n                            }\n                            .Any(\n                            {\n                            :\n                            {\n                            }\n                            }\n                            }\n                    : CollisionObject.\n                    {\n                    {\n                    }\n                    }\n                    : {\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(y);\n        Node a = path.get(0);\n        Node b = path.get(1);\n        Node c = path.get(2);\n        if (graph.isDefCollider(a,", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop.Children[i] is Place)\n                        plcs.Push(pop.Children[i] as Place);\n                    else if (pop.Children[i] is Drawable)\n                        plcs.Push(pop.Children[i] as Drawable);", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       mobiles[i].DoHarmful(mobiles[i]);\n                    }\n                }\n            }\n            public override void OnAfterDelete()\n            {\n                base.OnAfterDelete();\n                m_Timer.Stop();\n            }\n        }\n   ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(new KeyValuePair<PlayerMobile, WorldChatMessage>(user, msg));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   @Override\n    public String getComponentName(String componentId) {\n      return mock.getComponentName(componentId);\n    }\n  @Override\n  public String getComponentName(String componentId, String componentName) {\n    return mock.getComponentName(componentId,", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        final File zipFile = new File(file.getParentFile(), file.getName() + \".zip\");\n                        if (!zipFile.exists()) {\n                            final FileInputStream fis = new", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.j.writeLock().lock();\n    try {\n        this.i.clear();\n    } finally {\n        this.j.writeLock().unlock();\n    }\n}\n    public void a(ChatBaseComponent chatbasecomponent) {\n        this.", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               num_per = np.zeros_array_index_keys = ['z_index_keys = z_index_keys\n                \n        # read_data_arrays = []\n        for z_dict = z_dict_values = z_dict\n                \n        # read_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              DatabaseFactory.getIdentityDatabase(context).getUnverifiedBannerDescription(recipients));\n  }\n  public static @Nullable String getUnverifiedB", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK_BUILD\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    test = test_cls.from_json(tests_root, test)\n                    tests[path].add(test)\n            self._data = {test_type: tests for test", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private BindingContext createBindingContext() {\n        return new BindingContext(new BindingSpecification(), new ImportCustomizer(), new", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <returns>The timeout in milliseconds</returns>\n        protected virtual int GetTimeout()\n        {\n            return ServerGetTimeout();\n        }\n        ///", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     transformed_grad = grad[:,0]\n      transformed_grad = transformed_grad * self.y_stds[0] / self.y_means[0]\n      transformed_grad = transformed_grad + grad[:,1:] * self.y_means[1:]", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t{\n\t\t\tif(this.ordinvcurrentstatus != null && obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t\t{\n\t\t\t\treturn this.ordinvcurrentstatus.compareTo(((OrderInv", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, stacks);\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        stacks[0].getTags().addAll(asList(\"search-tag1\", \"search-tag2\"));\n        stacks[", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterFamilyCode(pf);\n        parameter.setParameterCode(\"depth\");\n        parameter.setParameterValue(depth);\n        crawlParameters.add(parameter);\n        //DEPTH\n        parameter = new ParameterImpl();\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNode sub = sub(node, kind, sub);\n\t\t\t\t(sub);\n\t\t\t\t\t\n\t\t\t\tsub = null\n\t\t\t\t\t\n\t\t\t\tsub = null;\n\t\t}\n\t\t\t\t\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t\n\t}\n\tprotected void setContext(FormBridge.getControl(form, \"ContractID\", \"ContractID\", \"GPContractID,\n\t\t}\n\tprotected void setContext(FormLoader loader, FormLoader loader, Form, Form, IAppForm, UI, Form", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return not bool(re.search(pattern, frozen_output))\n    # Or, if you want to be explicit:\n    # return not re.search(pattern, frozen_output)\n\n@task\ndef install_python_prereqs():\n    \"\"\"\n   ", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs.value, 2)\n        self.assertEqual(r.subs.value, 2)\n        self.assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, (x, (x, (x, a, b), (x, b), (x, a, c), (x, c, (x, b), (x, c))\n    assert Sum(x, (x, b, c))\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tUnityEngine.WW\n\n**Assistant:** It seems like your code is mostly correct, but it's missing the closing part of the `UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._oldStartingIndex = -1;\n            this.InitializeAdd(action, null, -1);\n        }\n        else\n        {\n            this._newStartingIndex = -1;\n            this._old", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           xmlMarshaller.marshal(objectToWrite);\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        finally {\n            writer.close();\n        }\n        }\n        XMLStreamWriter stream = null;\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.Campus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//read the size\n\t\t\t\t\tif (bitmap.\n\t\t\t\t\t\t// read the rest of the IconDirEntry\n\t\t\t\t\t\t\t\t// (int) iconSize\n\t\t\t\t\tif (bitmap.Width =", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.successor != null) {\n                if (l.successor.\n                block.\n            }\n            }\n    }\n    }\n    }\n    // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            var result_of_this_method", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(position);\n\t\t}\n\t\t\n\t\tprivate void setLabelPosition(Position position) {\n\t\t\tcomboLabelPosition.setSelection(position);\n\t\t\texplosion.setSelection(getExplosion());\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.host_key = self.gss_gss_kexgss_gss_continue\n        self.old_host = self.gss_init\n        self.x = self.parse_kexgsex\n        self.p = self.transport.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData, overallNodeName);\n            if (treeModel != null) {\n                treeModel.insertNodeInto(node, tree.getRootNode(), tree.getRootNode().getChildCount());\n            }\n        }", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           self.cr.execute(\"SELECT sum(number_of_hours) as number_of_hours, sum(number_of_days) as number_of_days\\\n                            FROM smart_salary_simulator_payslip_rule_category as rc,", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = np.zeros\n   \n    for i in range(0, len(marr)\n    mf = np.array(mfrac)\n    #Mfrac\n    #Mfrac\n    mfrac = MfracToMfrac\n    mf, mf,", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (Math.ceil(getText().length() / font.getSizeInPoints()) * font.getSizePoint());\n        d.height = 10;\n        return d;\n    }\n    /**\n     * Construct text fig\n     *", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container=np.zeros(self.container)\n        self.container=np.zeros(len(self.container)\n        self.container=np.zeros(12)\n        self.container=np.zeros(12)\n        self.container", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t\twindow.Show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t}\n\t\tprivate void OnOrdersClick(object sender, RoutedEventArgs e)\n\t\t{", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D)\n    if params[0]['bins'] is None):\n        return self.__class__\n        Object.__init__(self,\n        params[0]['bins'], params[1][0], params[1][0],\n        params[0", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getPagingOrder() == PagingOrder.NORMAL ? query.getFirst() : query.getLast());\n        }\n    }\n    private Query findQuery(XmppConnection connection) {\n       ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", \"L\", im0L)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", \"L\", im0L)\n            elif channel == \"G\":\n                im1L = im1.", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield RawBytes(self, \"body_data\", self[\"body_size\"].value, \"Body data\")\n    # TODO: This is not used\n    if self[\"block_type\"].value == 2:\n        yield RawBytes(self, \"recovery_data\", self[\"body", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tif ( socketAdapter != null ) {\n\t\t\tsocketAdapter.dispose();\n\t\t\tsocketAdapter = null;\n\t\t}\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connection", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       self.request = Gateway_u0(environ, start_response)\n        for path, app in self.apps:\n            if environ['PATH_INFO'] == path:\n                environ['wsgi.path_info'] = path\n                return app(environ, start_response)", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (CraftResources.IsStandard(resType) && chance < 10)\n                return;\n            if (CraftResources.IsStandard(resType) && chance < 10)\n                return;\n            if (chance < 10)\n                return;", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new RDLType\n        if child.localName\n        C = self.instantiate_field_el\n        # Create a new_field_component\n        # Create component\n        # Addr_enum_el\n        # Create component_enum_type_enum_", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No FOG services were found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate the base directory of the current application!\");\n                this.Close();\n            }\n        }\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            {\n                return (object)this.ViewState[\"\"]\n            }\n            {\n            }\n            }\n        }\n        }\n        }\n        }\n        {\n            get\n            {\n            {\n                return (object)this.Value\n           ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(textureHash\n                if(textureArray.get(this.textureArray[textureArray[textureHash]\n                gettexCoordArray[texCoordArray[texCoordArray[texCoordArray\n    }\n    }\n    }\n    }", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\ndef require_course_access(view_func):\n    \"\"\"\n    Decorator that ensures that the user has access to the course.\n    \"\"\"\n    @wra", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                    else\n                    {\n                        old", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if name:\n        name:\n        units = _round_units:\n        inverse_units:\n        name, units,\n        resolution = _round_units:\n        name, units,\n        name = _sign:\n        units,\n        name, units,", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(Starting.STATE_0)\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nSTART = Start.STATE_0\nSTARTING = Starting.STATE_0\nSTOP = Start.", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t}\n\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Started = true;\n            Immediate = true;\n            Attributes = new AttributeCollection(this);\n            Textures = new Dictionary<String, TextureInfo>();\n            Uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            _s", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.reactions = DictList()\n        self.metabolites = DictList()\n        self.genes = DictList()\n        self.reactions._metabolites", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new DecelerateInterpolator());\n        mListView.setLayoutTransition(set);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n\tprivate void fillData() {\n\t\tmCursor = m", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    if (PartnerInterestRow.FieldKey == 0)\n                    {\n                        HighestNumber = 1;\n                    }\n                    else\n                    {\n                        High", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(pssm, i);\n\t\t}\n\t\t\n\t\t\n\t\tfor (int", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
