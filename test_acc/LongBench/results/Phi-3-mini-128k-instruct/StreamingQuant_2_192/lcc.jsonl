{"pred": "\t\t\tif ( addNew )\n\t\t\t{\n\t\t\t\tm_Registered = true;\n\t\t\tm_Arena = new Arena( m_Arena\n\t\t\tm_Registered = false;\n\t\tm_Started = false;", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\troots = self.find_roots(A, Y_, Z_)\n\t\t\t\n\t\t\tfor root in roots:\n\t\t\t\tif root not in roots:\n\t\t\t\t\troots.append(root)\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000, 0)\n        buff = a.read_frames(1000)\n        a.write_frames(buff)\n        a.seek(0,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_present(self._EMBED_CODE, wait_time=10)\n\n[\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\tWriter writer = new OutputStreamWriter(new ByteArrayOutputStream(), \"UTF-8\");\n\t\t\t\tWriter writer2 = new OutputStreamWriter(new ByteArrayOutputStream(), \"UTF-8\");\n\t\t\t\t\n\t\t\t\txstream.marshal(value,", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.id = -1\n        self.category = None\n        self.type = None\n        self.answer = None\n        self.id = -1\n        self.category = None\n        self.answer = None\n        self.question = None\n        self.category =", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map, SR_Utilities.GetRandomInt(1, 1000000));\n                    mob.SendMessage(loc.Name);\n                    break;", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n    }\n    }\n    }\n    }\n    @Override\n    void send(HandshakeInStream input) throws IOException {\n    {\n        if (input.getInt24())\n        s.put(new X509, v.length()\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (spaceRegistrar) {\n            sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void draw(WndBag wnd, Graphics g) {\n\t\t\tsuper.draw(", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   self.dispatcher.dispatcher\n        # WSGIO\n        # return self.handler.wsdl()\n        # return self.dispatcher.dispatch(self.path, self.path,\n        return self.handler.wsdl\n    def handler(self, environ,\n       ", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.lock_status(status_id)\n        self.base.mark_status_as_repeated(self.id_, self.account_id, status_id)\n    def lock_status(self, status_id):\n        if self.last_id == status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n            \"status\": Operation.SUCCESS}\n        }\n    def action_move_to_archive_server_id=status_id.decode('UTF-8')\n        return {\n            \"error\": False,\n            \"status\": Operation.", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       # FIXME\n        # return self.trust_managers.getAcceptedIssuers()\n        return None\nclass FakeX509KeyStore(KeyStore):\n    def __init__(self, aliases, key_manager, cert_manager):\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       Map domainInfo = new HashMap();\n        domainInfo.put(\"domain\", domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__encoder = self.__encoder\n\n    def __init__(self)\n    def __setup_encoder_failed.set_event_loop.\n        raise NotImplemented\n    def __init__(self)\n        raise NotImplemented\n    def __init__(", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (iter == null) {\n\t\t\t\t\tLogB.Error(\"iter is null\");\n\t\t\t\t}\n\t\t\t\tif (iter == null) {\n\t\t\t\t\tLogB.Error(\"iter is null\");\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            Arg arg = args[i];\n            if (arg == null) {\n                argValues[i] = null;\n         ]", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(getLoadedData().get(UUID.fromString(stringId)).getId(), create(stringId));\n\t\t\t}\n\t\t},\n\t\tFIRM(UUID.fromString(stringId), new ConcurrentMap<String,", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\taddField(new ShortcutFieldEditor(AUDIO_FILE_CACHE_LENGHT_KEY,\n\t\t\t\t\"Audio file cache length (in seconds)\", getFieldEditorParent()));\n\t\taddField(new\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.EndAction(typeof(ArchProtectionSpell));\n            }\n        }\n\t\tpublic override void OnCast()\n\t\t{\n\t\t\tCaster.SendAsciiMessage(\"Targeting...\");\n\t\t}\n\t}\n\tprivate static Dictionary", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_for_session.\n        \"\"\"\n        \"\"\"\n        def flush()\n        \"\"\"\n        self.\n        \"\"\"\n        def _get_bind(self,\n        \"\"\"\n        def _connection_for_bind(self,\n        def get_bind(self,", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\treturn newInstanceNames(fields.getKey(fields);\n\t\t\n\t\t\n\t\t\n\t\treturn fields.\n\t\t\n\t\t\n\t\t\n\t */\n\t\n\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   self.redirect(self.get_argument(self.set_header(self.get_body(self.data_received(self.data_received(self.data_received(self.data_received(self.redirect(self.redirect(self.redirect(self", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View v in Views) {\n\t\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.download()\n    wigle_downloader.download(\n        lat1, lat2, lon1, lon2,\n        max_", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 150)\n                {\n                    if (i.SkillBonuses.HitPhysicalAttack)\n                    {\n                    return GetNameForAttribute(i);\n                }\n            }\n            if (i == \n                if", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(build, builds=platforms))\n    else:\n        builds = android_builds(build, builds=platforms)\n    # Build the button\n    if not simple:\n        if small:\n            button_html = jinja2", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectTypeBL.isAllowedByProjectTypeIDs(projectID, issueTypeID)) {\n\t\t\tstateBeansList = StatusBL.loadAll();\n\t\t} else {\n\t\t\tstateBeansList = StatusBL.loadByProjectID(project", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if ( argument.Parent is VariableDeclarationStatementSyntax ) {\n                    argument.WithoutPositional = true;\n                    argument.WithoutModifiers = true;\n                    argument.WithoutType = true;\n                ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test_usage_key, self.split_test_usage_key, '2)\n        self.assert_children(self.assert_children(self.split_test_usage_key, self.assert_children", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfName(\"Encoding\", encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = cgn.depth + 1;", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n      return null;\n    }\n    public Bitmap getBitmap() {\n      Util.assertMainThread();\n      if (bitmapReference == null) {\n        bitmapReference = new Soft", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: Add a link to the policy profiles table\n    # TODO: Add a link to the policy profiles table\n    # TODO: Add a link to the policy profiles table\n    # TODO: Add a link to the policy profiles table\n    # TODO: Add a link to the policy profiles table", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           if (Enabled)\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            else\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            base.Render(", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\ndamageCooldown = 8;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n}\n\n/**\n * @see FreeColGameObjectType\n */\npublic class Scope extends FreeColGameObjectType {\n    /**\n     * Deliberately empty constructor.\n     */", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.first()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0],", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if self._interactive:\n        self.plot_3d\n                # TODO:\n                # no_times, z_min, z_name, z_min, z_max, zmin, zmin, cmap, cmap,\n                if self._interactive:\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.StartsWith(rootFolder.Path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Count > 0)\n            {\n                _scanDebouncer.Execute();\n            }\n        }", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn write(key, computed);\n\t}\n\t@Override\n\tpublic E computeIfAbsent(Object key, Function<? super Object, ? extends E> mapper) {\n\t\treturn read(key, mapper.apply(key));\n\t}\n\t@Override\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid'):\n            if self.request.has_key('inreply'):\n        if self.request.has_key('inreplyindex):\n            if self.request.has_key('inreply):\n        if", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset\n\t\t\t{\n\t\t\t\tif ( x < 0 || y < 0 )\n\t\t\t\treturn null;\n\t\t}\n\t}\n\t}\n\t}\n\tpublic static Tile[] GetTile\n\t{\n\t\t\tif", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = land.GetChannelUri(channel_uri);\n                // - if we have a channel_uri\n                // - if we don't have a channel_uri,\n                // - we return \"undef\"\n                // - if we don't have a channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttextDateStart.Text=textDateStart.Text;\n\t\t\t\ttextDateStop.Text=textDateStop.Text;\n\t\t\t\ttextDate", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       # Read the column headings\n        # Read the column headings\n        header_name = column_headings = column_headings\n        column_heading_column_headings\n        headings = [\n            'X', 'Y',\n        # Read the data\n        #", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return {'success': True}\n    # Check if user is allowed to create groups\n    if not authz.is_authorized('group_create', context, data_dict):\n        return {'success': False, 'msg': _('User %s not authorized to create groups') %", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\tint parentOutcome = node.getPartitionId(parentIndex);\n\t\t\tdouble parentConfidence = (double) confidences[parentIndex] / (double) numberOfPartitions;\n\t\t\t// assigning outcomes\n\t\t\tfor (int i = ", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (strlen < strlen) {\n         }\n      }\n      }\n   }\n   static int match(StringValue string, int strlen, int offset, int min, int _range,\n   }\n   }\n   }\n   @Override\n   @Override\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = getSampleDAO();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        String existingStudyFormName = sample.getStudyFormName();\n        if (existingStudyFormName ==", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != null && handshake", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tcoll.add(new CatsReferralPendingEmergencyNonEDAdmissionListVoBean(beans[0]));\n\t\tfor(int x = 1; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(new", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(localtxt1, local", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot type\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var defense in Info.DefenseQueues)\n\t\t\t{\n\t\t\t\tif (defense == \"Defense\")\n\t\t\t\t\tcontinue;\n\t\t\t\tvar defenseActor = self.World.Actors.Where(a => a", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutput_columns(plan.columns.getColumns());\n        catalogStmt.setOutput_columns_index(plan.columns.getIndex());\n        catalogStmt.setOutput_columns_size(plan.columns.getSize());\n        catalogStmt.set", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.ServiceFound);\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t\t\tthis.comboBox1.Items.AddRange(new object[] {\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.StopBits = (StopBits)bits;", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_cobranding(self.user)\n        cobranding = Cobranding.objects.get(self.user)\n        self.assertTrue(cobrand.is_active)\n        self.check_edit_user_view(self.user)", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    # print \"Keep tempdir:\", _keep_tempdir\n    # print \"Config file is:\", CF_FILE\n    # print \"Config file contents:\", cf", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.rescancel.append(self.buildEntry(self.list, self.list)\n\t\tself.updateList = self.list\n\t\tself.updateList = self.list\n\t\tself.wlist = self.list\n\t\tself.updateAPList", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = font.GetWidthPoint(fCode, size);\n                float x = x + fontX + fontX + fontX * (size - font.GetWidthPoint(fCode, baseline));\n                float y = font.GetAscent(font) + fontY;", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  The list may include whitespace, e.g.:\n   *    property1 = value1, value2, \"a value with spaces", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-49.99, +49.99, 23.07)\n        # The latitude slice is a bit smaller than the source cube, so we\n        # need to use a smaller cube.\n        xmin, xmax", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (toolStripButtonSave.Enabled)\n            {\n                SaveLogPack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # ======================\n    print 'pkl_file_dirs\n    # save the data to wav_dirs\n    # ======================\n    # save the data to wav_dirs\n    # =======================\n    return 0\n    def slice_", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public int GetRefCount(TK", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.Controls.Add", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _NullFunctionPointer = ctypes.PYEXCLAMATIONMARK\n    def nullFunction( \n        functionName, dll=None,\n        resultType=ctypes.c_int,\n        argTypes=(),\n        doc = None, argNames = (),\n       ", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.getSize);\n        }\n        }\n        if (hasEmptyStreams) {\n        }\n        {\n        }\n        if (hasEmptyStreams) {\n            writeFilesInfo(header);\n        }\n        }", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (255.0 * (1.0 - (System.currentTimeMillis() - start) / rampDelay));\n                if (alphaLevel < 0)\n                    alphaLevel = 0;\n                if (alphaLevel > 2", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            }\n        }\n    }\n        }\n        [Test]\n        public void\n        public void\n        {\n            GivenGlobalSeedLimits();\n        }\n        [Test]\n        public void\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\nawait RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinaberry);\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       for i in range(1, len(ComP)\n\n\ndef SersicMain(AdExpdisk, \n        ParamDict[AdComp][1] = [1]\n        ParamDict[AdComp][2]\n        ParamDict[AdComp][3] = \n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x01:\n                    /* B", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        if self._course_key is None:\n            raise FixtureError(u\"Course key not set.\")\n        course_data =", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\tif(chance < 0) chance = 0;\n\t\treturn", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        if not os.path.exists(config_directory):\n            os.makedirs(config_directory)\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.TabControl();\n        this.chkPrivacy.TabIndex = 6;\n            this.chkPrivacy.Size = new System.Drawing.Size(15,\n            this.chkPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive_type_log_file()\n    def __init__(self.archive_path\n        self.ui_log.info(\"\")\n        self.archive.add_archive_type_file(self.archive.add_file(plugname, self.archive.add", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionFossil):\n    def getAllMaterialList(self):\n        \"\"\" Session List of all material \"\"\"\n    getAllMaterialList.result = ILocalFileExtendedFossil\n    getAllMaterialList.name = \"material\"\n    def", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.err.println(\"ClientException: \" + e.getMessage());\n                        } catch (MessageImportInvalidPathException e) {\n                            System.err.println(\"MessageImportInvalidPathException: \" + e.getMessage());\n                        } catch (MessageImportInvalidPathException e", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tif (value instanceof SortObject) {\n\t\t\t\t\t\t\tlayer = ((SortObject)value).getLayer();\n\t\t\t\t\t\t}\n\t\t    \t}\n\t\t}\n\t\treturn layer;\n\t} catch (Exception e", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void onCompleted(JSONObject object, GraphResponse response) {\n                if (response.getError() != null) {\n                    // An error", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tfor (int[] influence : emotion.influences) {\n\t\t\t\tsum += influence[1];\n\t\t\t}\n\t\t}\n\t\tif (sum == 0){\n\t\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at': constants.SPLITED_AT_STARTED,\n            'finished_at': constants.SPLITED_AT,\n            'started_at': constants.SPLITED_AT,\n            'started_at': constants.SP", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   phi1 = atan(e * phi1 / ((1-eccSquared/2 - 5*eccSquared*eccSquared/179)*sin(phi1) - 5*eccSquared*cos(phi1)/", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[user.username]))", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action\n    @property\n    @property\n    @property\n    @property\n    def _sort_series_review_license_approved\n    \"\"\"\n    @property\n    @property\n    @property\n    def _license_info\n    \"\"\"\n    @property", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic static KPTranslation Load(string strFile, IXmlSerializerEx xs)\n\t\t{\n\t\t\tKPTranslation kpTrl = null;\n\t\t\tusing(FileStream fs =", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public byte[] getByteArray()\n    {\n        return writeByteArray();\n    }", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           if flag == 'include':\n                new_positional_tags_list.append(TagRegex(True, regex))\n            elif flag == 'remove':\n                new_positional_tags_list.append(TagRegex(False, regex))\n            else:\n                raise", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n        }\n    }\n}\n\n\n## Your task:Implement the `GetProperty` method in the `GenericParameter` class to return a `PropertyInfo` object that represents a property of the generic parameter. The method should take into account the `Binding", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# NOP\n\nfrom scapy.layers.obc import OBD_PID00, OBD_PID01, OBD_PID02, OBD_PID03, OBD_PID04, OBD_PID05, O", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            {\n                AddSpell(typeof(IncantItem, 10443600, 11, 1044200, 10429, 11, 104200, 110", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.session.remove()\n        if exc is not None:\n            reraise(*exc)\n        reraise(*exc, exc_info=True)\n    def _pop(self, exc=None):\n        if exc is None:\n            exc = sys.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_columns=False)\ndef _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef pubsub_id(session, cluster_id, needs_columns=False):\n    def_pubsub_", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       phi = np.arctan2(src_radius * np.sin(angles),\n                         src_radius * np.cos(angles) - angles)\n    else:\n        phi = np.arctan2(src_radius * np.sin(angles) * np.", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url = 'http://'\n    if self.providerType == GenericProvider.TORRENT\n    def _buildURL(self, url):\n        \"\"\"\n        Builds the URL for the given url\n        \"\"\"\n        if self.url:\n        \"\"\"\n        if", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic override string", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].Type, Is.EqualTo(TokenType.String));\n\t\tAssert.That(obj.Properties[0].Value[\"In this test\"].Type, Is.EqualTo(TokenType.String));\n\t", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, this.isToroid ? \"http://wandora.org/si/cylinder-toroid\" : null);\n                Topic b = getVertexTopic(h, this.isToroid ? \"http://wandora", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = i1.get_default()\n    assert np.allclose(data[0][0],\n    [4.16e+00]\n    assert np.allclose(data[0][0], [1.0800e+00]\n", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       AbstractTripleStore expected = new LocalTripleStore(args[0], new File(args[1]),\n                new File(args[2]), new File(args[3]), new File(args[4]),\n                new File(args[5]), new File(args[6]), new", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the presence of the files in the installation directory.\n\t * \n\t * @return true if all files are present, false otherwise\n\t */\n\tprivate", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.glDeleteVertexArrays(1, vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteProgram(shader.Handle);\n\t\t\tOpenGL.CheckGLE", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_inverse\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat_error\n    @property\n    def x_model_cov_mat_inverse(self):\n        return self._project_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString(this, new ToStringStyle());\n    }\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = owningAccount.getAccountId(),\n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _folderSystem.Folders.FoldersChanged += value; }\n            remove { _folderSystem.Folders.FoldersChanged -= value; }\n        }\n        #endregion\n        #region Private Methods\n        private void Initialize()\n        {\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplateParameters parameters = new VmTemplateParameters(template);\n        ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        doReturn(true).when(command", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetSensitivity(10);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetIncrement(10);\n\t\t\tthis.spinbuttonCheckPeriod.Adjustment.SetPage", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.system['NZBLOCK_FILE_NAME] = self.system\n        #\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\tilgen.Emit(OpCodes.Ldarg_0);\n\t\t\tilgen.Emit(OpCodes.Ldnull);\n\t\t\tilgen.Emit(OpCodes.St", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   }\n    public static Builder MergeFrom(global::bnet.System.System.Runtime.System.IO.StreamingSize;\n    {\n      return size;\n    }\n    {\n      int size;\n    }\n    public int SerializedSize {\n      get", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVertex(getQuadIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code>.\n     * \n     * @param i\n     *            the quad index to", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (getProperty(columnName)\n        {\n            if (m_useAttachments\n        }\n        }\n        }\n        if (m_useLanguages)\n        }\n        }\n        return getColumns();\n    }\n    }\n    public List<", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = new Vector2 (placeholderRect.sizeDelta.x, placeholderRect.sizeDelta.y);\n\t\t\t}\n\t\t\tyield return new WaitForSeconds (animationDuration);", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = GetBestWidth();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (lastUser.Length > 0)\n            {\n                Users.Add(lastUser);\n            }\n            else\n            {\n                Users.Add(TAppSettingsManager.GetValue(\"DataChecks", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (VerificationControlsData.Count, VerificationTable.Row.Row.DiscountC < 100)\n            {\n                // get the data from the table\n                if (VerificationControls.Count, VerificationControls.GetNumber, VerificationControlsData.Row.Row", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementsRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n\n\n## The execution log of the code above is:\n\n---\n2019-09-11 14:01:", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t\t\t\tNotifyPropertyChanged(\"CustomRangeStart\");\n\t\t\tNotifyPropertyChanged(\"CopyRangeStart\");\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeEnd\");\n\t\t}\n\t\t}\n\t\t}\n\t\t\t\t\n\t}\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: BugInstance has no source line: \" + bugInstance);\n            }\n        }\n    }\n    /**\n     * @return the reportHistory\n     */\n    public boolean", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\tpublic override void GetContextMenuEntries( Mobile from,\n\t{\n\t}\n\t}\n\tpublic override void Deserialize( GenericReader )\n\t{\n\t\t\treader.Read( )\n\t}\n\t}\n\tpublic override void Serialize(", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"JungleClearR\") &&\n            {\n                if (Menu.GetSlider(\"JungleClearR\")\n                {\n                    if (Menu.GetSlider(\"JungleClearR", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn GridBagConstraints.get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n}\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        root = xml.etree.ElementTree.fromstring(fb)\n        warnings = []\n        for warning in root.findall('./gds:Warnungen/gds:Warnung', self._warning_", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite'),\n            Model_parser.model_definitions('testsuite')\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var stmtTextCreate(namedWindow\n                    : \"create window MyInfraCreate#keepall\n                :\n                var path = new RegressionEnvironment.CompileDeployDeployDeploy(\n                    \"\n                    : \"\n                    \"\n                    : \"\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   if self.simulation\n        self.simulation\n        if self.simulation.simulation\n            if not None\n            clibrebound.reb_orbit_orbit\n        self.simulation = o\n        clibrebound.reb_orbit\n        self.simulation", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = self.browse(cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n    }\n    private static final String documentBaseKey = \"html.document.base\";\n    private static final String property", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_reference", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmapping.SqlLoader.NamedQuery = namedQueryReference;\n\t\t}\n\t\t}\n\t\tpublic void Load(string namedQuery", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count );\n\t\t\tfor ( int i = 0; i < m_FactionItems.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   private void pushGraph() {\n        invocationQueue.add(new GraphInvocationQueue.\n    }\n        return invocationQueue.add(new InlineInfo(methodInvocation.callee().getInvoke().getInlineInfo(methodInvocation.callee());\n        }\n    }\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.create_log_path = self.args['log_path']\n        self.pytest_bindings = self.args.get('log_path', self.log_path)\n        self.pytest_name\n        self.pytest_name = self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(virtual, stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(virtual, stamp);\n                    }\n                    phi.setPhiValue(get", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(event);\n    }\n    /** @see Connection.VideoProvider#handleCallDataEvent */\n    public void handleCallDataEvent(int event, int dataType, int dataValue) {\n        if (mCallback != null) {\n            try {\n               ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1159659, \"\", 0x22 ); // You are too far away to use the map.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.add_to_class(Bibxxx)\n    Record.add_to_class(BibrecBibxxx)\nfor m in models:\n    m.add_to_class(BibrecBibxxx)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set('all_users', set())\n        self.module.set('all_sessions', set())\n\n    def datetime_to_timestamp(self, dt):\n        return int(pytz.utc.localize(dt).timestamp())\n    def timestamp", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.header = self.header = ''\n        self.header = ''.\n    # }}}\n    _BaseFile.__init__()\n    def __str__str(self, header, self.header = ''\n    __repr__ = ''\n    MOFile {\n   ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to get transformation problematics\", res['Message'] )\n      return res\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'Valid", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\n\t\t\t\n\t\t// FIXME\n\t\t// FIXME\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t\n\t//\n\t\t//\n\t\t//\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            self.buildbot_results,\n            [\n                {\n                    'name': 'build-1',\n                    'result': 'PASS',\n                    'timestamp': build_start_time,\n                    'duration': 1,\n                ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.scheme = 'http://schemas.google.com/gdata/colaborator'\n    self.category.term = 'colaborator'\n    self.assert", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: this.\n        // TODO: this is a method receiver type\n        // TODO: this is a placeholder type\n        // TODO:\n        // TODO: this is a placeholder type\n        // TODO:\n        // TODO: this is a placeholder\n        // TODO\n        // TODO", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = mat.use_shadeless = mat.use_shadeless and mat.use_shadeless = mat.use_transparency = mat.use_transparency\n        if mat.use_transparency:\n        iface = mat.use_transpar", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            mapper16_IRQEnabled = mapper16_IRQEnabled = map64_IRQEnabled;\n            mapper16_latch1 = mapper1_latch1 = mapper1_latch1 = mapper1_latch2", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(m_jPopupMenu);\n            m_jPopupMenu.addSeparator();\n            m_jPopupMenu.add(m_jMenuBar.getInspectorMenuBar().getInspectorMenuItem());\n            m_", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70025, 1); // Party Quest Scroll [10 Red Bears]\n\t\t// Page 2\n\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Wol", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME\n    # from apps.twitter.models import TwitterCrossPublication\n    # self.twitter_pubs.create(announcement=self.announcement, tweet_id=self.tweet_id)\n    # FIXME\n    # from", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(startinline=True,\n                         builtinpath=['sphinx/pygments_lexer.py'])\n# Enable highlighting for PHP code between <?php ... ?>\nlexers['php-annotations'] = Php", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   ''', (i,))\n    print \"GroupID is: \", i\n    print \"Max altitude is: \", max_altitude\n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table_create('snapshots').run()\n        conn.table_create('snapshots_active').run()\n        conn.table_create('snapshots_deleted').run()\n        conn", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t\tdefault\n\t\t\tbreak;\n\t\t}\n\t}\n\t\t}\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;\n\tbreak;", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   responses = {}\n    responses = {}\n    def resolve(self, rescode, resstr, resstr, datalines):\n        \"\"\"\n        \"\"\"\n        self.resolve(cmd, rescode, resstr, resstr, resstr, datalines):\n        self.resolve", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, finish, result):\n        self.uuid = uuid\n        self.name = name\n        self.finish = finish\n        self.result =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(context, CrappalinksActivity.class);\n                intent.putExtra(\"url\", uri);\n                startActivity(intent);\n            }\n        }\n    }\n}\n}\n\n\n## Your task:With the given code, identify and correct the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary) == 0):\n        raise AssertionError(\"primary.xml contains packages\")\n@behave.when(u\"primary in \\\"{path}\\\" doesn't have any packages\")\ndef step_impl(context, path):\n    check_context_table", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       build_ext = self.get_finalized_command('build_ext')\n        inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -------------------------------------------------\n    # (called by outs", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--output=' + log_name,\n        '--error=' + log_name,\n        '--qsub-cmdline',\n        '--qsub-args',\n        ]\n    cmd_arg = [\n        request['job_run_cmd'],\n        ]\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0}{1}\", prefix, menu.DisplayName));\n            }\n            foreach (var child in menu.Children)\n            {\n                HandleMenu(child, indent + 1);\n            }\n            Builder.AppendLine();\n           ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\ndef handlePremium(self):\n    self.logDebug(\"Premium handling\")\n    if self.isPremium():\n        self.logDebug(\"Premium account\")\n        self.logDebug(\"Getting premium url\")\n        res = self.load(", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// Find the closest harvestable cell:\n\t\t\tCPos closestHarvestableCell = self.Location;\n\t\t\tdouble closestDistanceSquared = double.MaxValue", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcp service failed\")\n                       return False\n                    self.logger.info(\"restarting dhcp service\")\n                    utils.subprocess_call(self.logger, service_restart, shell=True)\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                //\n                state.Successor = state;\n                state.Successor = state.SuccessiveState = state.\n                state.\n                state.Successor = (state.Successor;\n                state.Successor = state.SuccessiveSuccess(state.", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        });\n        /// <summary>\n        /// The SQvr VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\t\n\tprotected string selectedEventName = \"\";\n\tprotected string testName = \"\";\n\tprotected string testName = \"\";\n\tprotected string testName;\n\tprotected string testName;\n\tprotected string selectedDescription;\n\tprotected string selectedDescription;\n\tprotected", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.assertRaises\n\n    def test_insert_after_middle(self):\n        self.failUnlessEqual(b'a'abcdefghij', self.read(self.file(b'abcdefghij'))\n        self.failUnlessEqual(b", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylabel('%s' % stat)\n    plt.plot(cr['combined'][app][VC]['stats'][stat]['mean'],\n            'o-', label='Mean')\n    plt.plot(cr['combined'][app][VC]['stats']", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(\n        self.test_GID\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        L{util.runAsEffectiveUser(self, startUID, startGID, euid, gid, euid, gid", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(bDrawCross ? Color.GRAY : Color.LIGHT_GRAY);\n\t\t\t\t\tg.drawLine(x, y, x + controlSize - 1, y);\n\t\t\t\t\tg.drawLine", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " knn.learn(v[6], 0)\n  knn.learn(v[7], 0)\n  knn.learn(v[8], 0)\n  knn.learn(v[9], 1)\n  knn.learn(v[", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = offset - headerSize();\n        final Object array = ArrayAccess.readArray(value.asKind(), index);\n        if (array instanceof Object[]) {\n            final Object[] arrayElements = (Object[]) array;\n            for (int i = 0; i < array", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            return FileUtils.CombinePaths(Path.GetDirectoryName(this.FilePath), relativePath);\n        }\n        /// <summary>\n        /// Resolves", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % args\n    # %args is not supported\n    # return string % dict_format(args)\n    # dict_format() is not implemented\n    # return string % kwargs\n    # kwargs are not supported\n    return string\n\ndef str_format(*args,", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i1 = i1, i1, i1, i16, i16, i1, i17, i16, i16, i16, i15, i16, i1, i1, i1, i16, i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Transitions: \\n\";\n\t\t\tforeach( Transition t in this.graph.Transitions ) {\n\t\t\t\tstr += \"\\t\" +", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                Slot = SpellSlot.W,\n                    Radius = 10,\n                    Radius = 10,\n                    Delay = 250,\n                    Range = 150,\n                    Radius = ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n\t/**\n\t * Stubs the codelist service.\n\t *\n\t * @param codelistServiceStub\n\t */\n\t@Before", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            subprocess.Popen,\n            ['/bin/false'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataCategory (\"Data\")]\n\t\t[DataCompilationCondition (typeof (ConstraintCollection).IsDefined(typeof (ConstraintCollection), \"IsInitialized\"))]\n\t\t[Browsable (", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout.setLayout(self, QtWidgets.setLayout(QtWidgets.verticalLayout.setObjectName(\"verticalLayout\")\n        self.verticalLayout.addWidget(self.verticalLayout.setObjectName(\"verticalLayout\")\n\n        self.verticalLayout.addWidget", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return;\n            }\n            // We have the station with TAF\n            String wxType = wxs.getString( wxs.getColumnIndex( Awos1.WX_SENSOR_TYPE ) );\n            String wxIdent = wxs.getString( wxs.get", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tAssert.Throws<AssertionException>(() => s.CreateQuery(\"from Continent\").List().Count());\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, stats.Query", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctab[((uiCRCITTSum >> 16) ^ uiByteValue) & 0x0000FFFF];\n            }\n            uiCRCITTSum = reflect", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisplacementModule();\n\t}\n\t}\n\t/**\n\t*\n\t*\n\t*\n\t* @return\n\t*\n\t*\n\t*\n\t* @return\n\t*\n\t}\n\tgetDisp\n\treturn getDisplacement", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller),\n                    new CeylonReferencesHyperlinkDetector(controller),\n                    new CeylonSourceHover(editor, editor.getSourceViewer()),", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.button.setEnabled(True)\n        self.connect(self.button)\n        self.mainLayout.setEnabled(True)\n        self.connect(self.button)\n        self.connect(self.l.setGeometry(self.button)\n        self.", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\tcase 3: // Set location\n\t\t\t\t{\n\t\t\t\t\tshouldSet = true;\n\t\t\t\t\tshouldSend = true;\n\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location.X, m_Mobile.", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n              ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\n\t\t\t\n\t\t\tif (true)\n\t\t\treturn true;\n\t\t}\n\t\t\n\t}\n\t\t\n\t}\n\t}\n\t\n\t}\n\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found that contains the unpriced line\n                                if (unpricedLine.Key < orderPurchaseESD.data", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic IParameterInspector ClientParameterInspector {\n\t\t\tget { throw", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       }\n        {\n        // TODO\n        // TODO\n        //assertTrue(false);\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        // TODO\n        //", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewportSize)\n\t\t{\n\t\t\treturn v * (viewportSize.X, viewportSize.Y);\n", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key:\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n        self", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                List<ActivityBucket> listActivity = convertToActivityBucketList(list);\n                notifyActivityReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, listActivity);\n            }", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " if is_method:\n    print \"    Class* object;\"\n  else:\n    print \"  return nullptr;\"\n  print \"};\"\n  print ''\n  # The single use helper function\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        mimetype='application/json'\n    )\n    return response\n\ndef range_item_dict(item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n            final JoinGroupNode serviceNode = new JoinGroupNode();\n            serviceNode.setService", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.object.is_active:\n            return HttpResponseRedirect(self.get_success_url())\n        return self.get(request, *args, **kwargs)\n    def get(self, request, *args, **kwargs):\n        if self.object.is_", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Solve the system\n            double tol = _iterator.GetConvergenceTolerance();\n            double maxIterations = _iterator.GetMaxIterations();\n            double residual = _iterator.GetResidual();\n            double norm = _iterator.GetNorm", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\t\n\t\tApfloat median = median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           # A)\n    # Compute the nearest neighbours\n    # Compute the nearest neighbours\n    # Compute the number of\n    # nodes in the focal\n    # Compute the number_of_samples\n    # Compute the number_of_samples\n    # Comput", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       result['mapping'] = mapping_json\n        return result\n    def test_raw_to_enrich(self):\n        self.maxDiff = None\n        self.enrich_backend = self.connectors[self.connector][2]()\n        self.enrich_", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.IsNull)\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\tif (slot.Value.IsBot)\n\t\t\t\t\t\t\t\t\t{", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" (\" + _status + \")\";\n\t\t\t}\n\t\t\treturn base.ToString() + \" (\" + _status + \")\";\n\t\t}\n\t\tpublic override string GetTypeName()\n\t\t{\n\t\t\treturn", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass HeaderFrame(Frame):\n    frame_type = FrameType.HEADERS\n    defined_flags = FrameFlag.create_flag_set('END_HEADERS')\n    def __init__(self, stream_id, headers", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull == null)\n                throw new MsaglException(\"Cluster \" + cluster.DebugId + \" has no rectangular boundary\");\n            foreach (var node in cluster.Nodes)\n                if (node.RectangularHull", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKinWorld.f(m_jumping()\n{\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tNBTTagCompound nbttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tnbttagcompound.setInteger(\"color\",", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = typeAttribute.Value;\n\t\t\t\t_returnType = _returnType.Trim();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Ori", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t(Collections.singleton(instrumentationApplier);\n\t\t}\n\t\tverify(instrumentationCache(Matchers.any());\n\t\tverify(searchNarrower", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn this.clone();\n\t}\n\t\n\t\n\t/**\n\t\t\t\n\t\t\n\t\t*/\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t/**\n\t\t *", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           float pS = r.score;\n            if (pS < threshold) {\n              continue;\n            }\n            int min2 = wideLExtent[end][r.leftChild];\n            if (min2 > end - start) {\n              continue;\n            }\n", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           '--shell=False, env=None,\n            stdout=PIPE, stderr=PIPE,\n            env=None,\n            stdout=False,\n            preexec_fn=mock.ANY\n            select_mock\n        ]\n        pipe.stdin.write.", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvoid DbgProcessThreadsThreads_ThreadsThreads;\n\t\t\t\t}\n\t\t\tvoid DbgProcessThreads(object, object) {\n\t\t\t\tif (enable)\n\t\t\t\treturn;\n\t\t}\n\t\tvoid D", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", \"color\", String.valueOf, \"color\", String.valueOf( \"color\", \"r\", \"g\", \"b\", \"a\", \"value\"\n\twriter.endTag( null, name, \"set\", \"type\", \"sval\",", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nif (reject_wall + reject_jump) > 0:\n  print(\"Number of rejected timesteps : %s\" %(reject_wall + reject_jump))\n  sys.exit()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # We need to check_remove_useless_slice(node, None, None)\n    if node.op.set_idx_list(node, None\n    return node.inputs[0]\n    if node.fgraph.shape_op(node.outputs[0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple\n    self.fields['groups'].label = \"Select the groups you want to be a member of:\"\n    self.fields['groups'].help_text = \"Select the", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               event.listen(event_key.dispatch(event.listen(query)\n        def before_compile(query)\n        def before_compile(retval=True\n        def before_compile(query)\n        def before_compile(retval=True\n        \"\"\"\n        \"\"\"\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(resource_fs)\n\n\ndef load_xblock_class(class_path):\n    \"\"\"\n    Load a module class from a string.\n    \"\"\"\n    module_path, class_name = class_path", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       data_model_changes.append(global_changes)\n    def get_filter(self):\n        return self.current_filter\n    def set_filter(self, data, bg_value, filter):\n        self.current_filter = filter\n        self.update_filtered", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\t{\n\t\t\t\tpublic sealed class Ldref : Instruction\n\t\t\t{\n\t\t\t\t{\n\t\t\t}\n\t\t\tpublic sealed class Ldref : Instruction\n\t\t{\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n    }\n    /**\n     * Sets up the {@code CSVFormat} to be used to", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.getItemStackId() == BotaniaAPI.internalHandler.getItemId(BotaniaAPI.internalHandler.getManaItem())) {\n\t\t\tif(player instanceof EntityPlayer)\n\t\t\t\tplayer.getMana().add(knownMana", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   if not v1 in flags[flagname]:\n                        logger.info(\"ERROR: Document %s: Expected flag %s but can not find it\" % (str(docid), str(flagname)))\n            except Exception as e:\n                logger.info(\"ERROR: Document", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return exDateList;\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @param date the java.util.Date to convert.\n   * @return a Dat", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceComponent = SourceComponent;\n\t\tsourceEventBinding.SourcePropertyName = SourceProperty;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       Gson config.getSpanPortsName(String spanPortName, @RequestParam(required = false) String nodeName = (containerName)\n        if (DaylightWebUtil.getContainerName(String containerName = containerName, String name = (String)\n        String userName =", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\tCoreForms;\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\tCore;\n\t\t\t\tCoreForms", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static OMEData instance() {\n        return OMEData.instance(new Random(seed));\n    }\n    public static OMEData instance(Random rnd) {\n        OMEData omedata = new", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_equivalence(old_pred_uuids.append(old_pred_uuuids)\n\n\n\n\n        return_pred_uuu\n        \"\"\"\n        return_uuids = old_pred_uuids\n        for old", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\"alignment_options = \").Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes[byteIndex] = (ch >= 0xFF61 && ch <= 0xFF9F) ?\n\t\t\t\t\t\t(ch - 0xFF60) + 0x", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# 00 00 00 ~off2(4) a(4) ]\", m(4) ]\", mnemonic=\"LD_B\", mode=\"Short-offset\")\n@ispec=\"32<[ ~off2(4) ~off1(6)", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tpropertiesMap = new Properties();\n\t\t\tpropertiesMap.load(stream);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void AceFlagsAndAceFlagsAreSetToNone", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, releases, error)\n    def __process(self, releases, error):\n        if error:\n            print_w(\"[acoustid] Acoustid lookup error: \" + error)\n        return releases\n    def __idle(self", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.CurrentSettings.photonSetupState = PhotonEditor.Current.HostingOption = ServerSettings.HostingOption.ServerSettings = ServerSettings.Current.HostingOption.HostingOption.ServerSettings.photonHostingOption.ServerSettings.\n        }\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_repto = rootLayout.findViewById(R.id.full_repto);\n        full_repto.setText(Html.fromHtml(message.repto));\n        full_repto.setMovementMethod(LinkMovementMethod.getInstance());\n        full", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis] *\n                              self.ibzk_kc[k, np.newaxis, :])\n            psit_G = np.einsum", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       @Test\n    }\n    private String intygsTyp = \"luse\";\n        @Test\n    public void createUtkast() {\n        intygsTyp = \"luse\";\n        @Test\n        AuthoritiesConstants.PRIVILEGE_INTYG\n       ", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t// FlattenBasicBlocks\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tfor (int i = 0; i < block.Body.Add(\n\t\t\t\t\t\t\t\t\t\n\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t    {\n\t\t\t\t//TODO\n\t\t//\t//TODO\n\t\t//\n\t\t//\t//\n\t\t//\n\t\t//BodyPart.\n\t\tOverrideMovementMode(\n\t\t\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture\"\n        self.top = ClassFactory(InterpolatedNodeSet)\n        self", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)((num >>> 16) & 0xff);\n        out[outOff + 2] = (byte)", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    private final Map<String, PatternNode> labelToNode;\n\t    private final", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['@from'] = value\n    elif key == 'fin':\n        node_json['@to'] = value\n    elif key == 'NODE':\n        for child_xml_", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n    }\n    }\n  }\n  public final void remove(InternalFrame frame) {\n    if (frame!=null) {\n      if (buttons.containsKey(frame))", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\nfrom astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME + \" = \" + Db.Table1.TABLE_NAME + \" WHERE \" + Db.Table1._ID + \" = \" + newId, null, null);\n\t\t\t\t", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(Guid));\n                Marshal.FreeHGlobal(m_ptr);\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        public void Dispose()\n        {\n            Dispose(true", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL_HANDLER_\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tif (queue.Count > numberToCancel)\n\t\t\t\tqueue.RemoveRange(numberToCancel, queue.Count - numberToCancel);\n\t\t\tif (queue.Count", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.treeView.setRootIndex(self.treeView.root)\n        self.treeView.setRootIndex(self.fileSystemModel.setRootIndex\n        self.fileSystemModel.setRootIndex\n        self.treeView.setModel.setRootIndex\n       ", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       self.bld.bld.posted\n        for x in self.targets:\n        if getattr(self, self.create_task\n        self.bld.posted,\n        self.create_task\n        self.path.set_attrs\n        self", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #rospy.loginfo(\"This is the result of PlanExecutorServer:\")\n        #rospy.log", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + 1 ] - chemical[ 0 ][ idx + reactorExtent ]\n\t\t\t\t\t\t\t\t\t, hdiv0 );\n\t\t\t\t\t\tdelta[ 1 ][ idx", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern)));\n                break;\n            case ColumnType.", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t}\n\t\tpublic object\n\t\t{\n\t\t\tget {\n\t\t\t{\n\t\t\t\tthrow new MyType();\n\t\t}\n\t\tpublic override\n\t\tget {\n\t\t\treturn (new MyType());\n\t}\n\t}\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_enable\n        if self.authentication == 'enable' and self.ntp_auth_enable\n        self.module.\n    def config_ntp_auth_keyid\":\n        \"\"\"\n        if self.ntp_auth_enable\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assert_edit_info_send_course_key,\n            )\n        self.assertEqual(\n            self.store.get_item,\n        )\n        # Verify that the draft_published_published,\n        self.assertEqual(self.store.", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((TEXT_CODE & 0xff) << 24));\ndigest.update((byte) ((TEXT_CODE & 0xff) << 16));\ndigest.update((byte) ((TEXT_CODE & 0xff) <<", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['start'], dict['end'], dict['inclusive'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // If the action has a return type, we can use it as the type for the sample.\n            Type returnType = api.ActionDescriptor.ReturnType;\n            if (returnType != null)\n            {\n                formatters = new Collection<MediaTypeFormatter>();\n                formatters.", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           self.on_quit_cell(record, column.name, value, callback=callback)\n        else:\n            gobject.idle_add(self.set_cursor, path, column, True, callback)\n        return False\n    def _key_up(self, path", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegalConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanFactory.getBean(beanFactory.getBeanDefinition(beanName).getBeanName());\n    }\n    /**\n     * Returns the name", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f.readlines():\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e),\n                            changed=False)", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetService(\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid riid,\n            [Mar", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return spm.addSecurablePrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = ROLES + { ROLE_ID },\n            produces = MediaType.APPLICATION_", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        This verifies the tag name and namespace prefix of the element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   nodeType = nodeType = node.nodeType = node.nodeType = node.node = node.nodeType = Node.nodeType(nodeType = node.nodeType\n        if node.nodeType == Node.DOCUMENT_NODE_NODE_NODE\n        if node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\tvalidateEMSSc\n\t\t\t\t\t\t(EMSSc\n\t\t\t\t\t\t\t(EMSSceneSection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscenePatientCount\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t(decoder.getLength() = encoder.getLength() = encoder.getLength() = decoder.getLength() = decoder.getOffset = decoder.getSignatureLocator.setLength = decoder.getOffset() = decoder.getOffset()\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the player's location on the server\n        send(myPlayer.getUpdate());\n", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( colorValue );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n            .addPlayer( action );\n        GameEngine.model().getGame().getRegistration( GameEngine.model().getGame() )\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error %d: %s\" % (r.status, r.data.decode(\"utf-8\")))\n    else:\n        if progress:\n            log.debug(\"Downloading %s (%d bytes)\", url, r.headers.get(\"content-length", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRunMergedOrder == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailureReason = \"Merge", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Cannot determine weight of reactions with multiple metabolites.\")\n    return reaction.metabolites[0].elements\ndef _find_carbon_sources(model: \"Model\") -> List[\"", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(store__path=pootle_path).filter(~Q(state=UNTRANSLATED))\n    def get_for_path(self, pootle_path, user):\n        return self.get_for_path(", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='city',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.dstmac_cache[dstip] = arp.sha\n                self.logger.debug(\"ARP request: {} -> {}\".format(arp.sha, arp.spa))\n                self.logger.debug(\"ARP request: {} -> {}\".format(arp.", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      removeOldest();\n    m_RecentItems.add(item);\n    if (m_RecentItems.size() > 0)", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.IsFriend(src))\n                return false;\n            if (target.IsInHouse(src))\n                return false;\n            if (target.IsInRange(src, 10))\n                return false;\n            if (target.IsInRange", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public Date getTradePeriod() {\n    }\n    }\n    @Nullable\n    public void setDepositTx() {\n    }\n    public void onState getState() {\n    }\n    public void onStateChanged() {\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\t\tmStream.ReadData(ReadReportType.ReadMemoryReportType(0);\n\t\t\t\tmRead(mStream.ReadDataReportType.WriteReport(mReadDataReportType);\n\t\t\t\t\tmReadData(this, byte[] reportType,", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order, caseInsensitive);\n\t\t}\n\t\t@Override\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n\t\t\tif(direction == -1)\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _indx2Units[i1]\n            _heap[_heapStart]\n        }\n        }\n        }\n        }\n        public int AllocateUnits(int indx)\n        {\n            if (i == i1)\n            {\n               ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       return rate\n    @classmethod\n    def create_all(cls, descriptions):\n        \"\"\"Create all rates in the UI\n        Args:\n            descriptions (list): list of rate descriptions\n        \"\"\"\n        for description in descriptions:\n            view = RatesView", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Shadow buffer is not supported.\" );\n\t\t\t}\n\t\t\tif ( _scratchToScratch )\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = \"single_transponder\"\n\t\t\tself.tuning_sat.system.value = self.scan_sat.system.value = self.scan_sat.system.system.value = self.scan_sat.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CNT:\n            tcpKeepAliveCnt = (Integer) opt", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               int p = \n                }\n                while (true;\n                    PdfDictionary dic = new PdfObject(tokens.ReadPredictor(predictor = \n                    int k = \n                    int p = \n                    int p = \n                    int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ('foo', 'bar'))\n        self.assertEqual(s.get_interface_decomposed(), ('foo', 'bar'))\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def p_operator(self, xx, pos_xx, pos_xx):\n        if not self.get_p_dual_flag():\n        if self.get_p_dual_flag():\n        if self.get_options().get_options().get_deg", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.ParseError\n        }\n        }\n        }\n        }\n        }\n        }\n        }\n        [Test]\n        {\n        ///\n        [Test]\n        ///\n        [Test]\n        public void TestAllFields()\n        {\n            {", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object remove(Object key) {\n\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object getFirstKey() {\n\t\treturn map.keySet().iterator().next", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    @api.model\n    def _get_default_next_action(self):\n        return 'hr_attendance.action_check_in'\n    @api.model\n    def _get_default_next_action_name(self):\n       ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(form.grdResults().getRows().size() - 1);\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tgrdResultsRow newRow = form.grd", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt.x = c.ReadInt32();\n                pt.y = c.ReadInt32();\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The index of this item\n        /// </summary>\n", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_new_tab(cwd, profile)\n        self.set_title(self.title.new_title(self))\n        self.set_position(self.position)\n        self.set_role(self.title.get_role())\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo = new MarshalInfo(\n                    managedType = managedType,\n                    arraySizeArray = nameArray.Equals( nameFragmentTypeFragmentTypeName(\n                    StructType = managedType\n                    arraySize = arraySize\n                    MarshalType = managedType", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type.IsValueType; }\n\t}\n\t\t}\n\t\t}\n\t}\n\t}\n\tpublic bool IsValueType {\n\t\tget {\n\t\t\tif (TypeAttributes.ValueType)\n\t}\n\t}\n\tset", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #region private\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        private void", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self.context.set_options(\n            OpenSSL.SSL.OP_NO_SSLv2 |\n            OpenSSL.SSL.OP_NO_SSLv3 |\n            OpenSSL.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\tthis.vbox6 = new global::Gtk.Box.Box.Child\n\t\t\n\t\tw6.Position = 0;\n\t\tw6.Position = 1;\n\tw6.Expand = false;\n\t\tw6.Position = 0;", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.connect_notify_all()\n    \n    # Connect\n    #\n    #\n    #\n    #\n    #\n    #\n    \n    # The tab\n    \n    #\n    #\n    #\n    #\n    #\n    #\n   ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-next-line\",\n    \"Go-to-line\": QKeySequence(Qt.Key_Navigate,\n    \"Go-to-line\": QKey_N\n    \"Locate-on-this-line\": \"Locate-on-this-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderClassName='\" + persistenceProviderClassName + '\\'' +\n\t\t\t\t\", transactionType=\" + transactionType +", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void refreshVisuals()\n  {\n    if (isSelected)\n    {\n      if (isHighContrast())\n      {\n        setFont(getFont().derive(Font.BOLD, Font.ITAL", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(882, 656);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(88,", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (sb != null)\n        {\n            sb.append(string.substring(i + 1));\n        }\n        if (sb != null)\n        {\n            return sb.toString();\n        }\n        return \"\";\n    }\n}\n\n}\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t//\tbyte[] digest = new byte[] { 0x0a, 0x9f, 0x0b, 0x0e, 0x9f, 0x1f, 0x63, ", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_sum;\n\t    \n\t    current_sum = 0;\n\t    \n\t    if (this.intVal != 0)\n\t    {\n\t        current_sum += 4;\n\t    }\n\t    \n\t    current_align", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n      return java.GetValue(\"JavaSoft\\Java_Home\").ToString();\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome == null)\n      {\n        javaHome = FindJdkInRegistry", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if job == l.split()[0]:\n                    return True\n            else:\n                m = re.match(r'^%s(.*)$' % shlex.quote(name), l)\n                if m:\n                    return True\n        return False\n    def find", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier_json = None\n\n\nclass MeshModifier(mesh_json, json=modifier_json)\n\n\nclass MeshModifier(mesh_data_vertex_group_tex_map_tex_map_tex_map_map_tex_", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            likelihoods = rankCounts;\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                likelihoods[i] = rankCounts[i];", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       while (vertex.neighbors().hasNext()) {\n            neighbors.add(vertex.neighbors().next().getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.packet = self.cap[int(self.choice)-1]\n                self.packet.show()\n            except (ValueError, IndexError):\n                print(self.fatal+\"[!] Invalid packet number. Try again.\"+self.blk)\n               ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'object_name': 'django.db.models.fields.related.ForeignKey', [], {'to': 'main.Document', 'to': 'main.Document'}},\n            'related_name': [], '", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               returnType\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    private void processComplexTypes(QName, SDOTypeHelperContext, SDOTypeHelper, SDOTypeHelperContext);\n    }\n    private void processComplexTypes", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.holidates_id\n        self.onchange_status(cr, uid, ids, ids, context)\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        if ids:\n            self.holidays.add_resource_id,", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set {\n            set {\n        }\n        }\n        /// <summary>\n        ///\n        ///\n        ///\n        /// <returns>\n        /// <returns>\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        /// <returns>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name;\n        }\n    }\n}\n\n}\n}\n\nCan anyone help me to complete the code?\n\nA: I've completed the code.\n\nA: Here is the completed code:\nusing System;\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            notify_build_done(elapsed)\n        return status\n\n    def build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble score = this.getOptimisticScore(score);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashes.Items.Clear();\n                foreach (var gitStash in gitStashes)\n                {\n                    Stashes.Items.Add(gitStash);\n                }\n                Stashes.SelectedIndex = 0;\n            }\n            Apply.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item_to_item_to_item_to_item_to_item_to_item_to_item_to_item_to_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n        }\n    }\n    public class AddNumbers : System.Web.WebServices.WebServices.WebServices.EndPointAttribute(\"System.Web.Services.WebServices.WebServices.WebServices.Services.Add(new System.Web.WebServices.WebServices.Add", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \", \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = (EClassifier)value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this,", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.func == list_index:\n        args.func(args, archive_index)\n    elif args.func == change_password:\n        args.func(args, archive_index)\n    elif args.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.cmd_ss, self.ss,\n        #\n        # TODO\n        #\n    def decode_cmd_reply(self, cmd, self.cmd_ss", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      // [, line 167\n      // (, line 6:\n      // (, line 68\n      //, line 6\n      v_6:\n      // (, line 6:\n      // (, line 7\n      // (, line", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = dins.readObject();\n            } catch (IOException ex) {\n                System.out.println(\"IO error: \"+ex);\n            } catch (ClassNotFoundException ex) {\n                System.out.println(\"Class error: \"+ex);\n            }\n            if (", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   # crypto.cert.get_subject_key_usage_to_name(self.cert.get_extension_ocsp_utilization_certificate_key_usage_occur_key_usage_ocsp_key_usage_get_certificate_usage_ocsp_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (ScopedConnectionList::ScopedConnectionListIterator i = _slots.begin(); i != _slots.end(); ++i) {\n\t\t\t\t\tif (*i == *i) {\n\t\t\t\t\t\tstill_there = true;", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   front_seq = unicode_to_utf16(unicode_to_utf16(X.begin)[0:1])\n    back_seq = unicode_to_utf16(unicode_to_utf16(X.end - 1)[0:1])", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 11) {\n\t\t\t\tGet();\n\t\t\t\tGraph g2;\n\t\t\t\tTokenExpr(out g2);\n\t\t\t\tif (la.kind == 12) {\n\t\t\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_qty\n            edi_doc['product_uom_id'] = line.product_id.uom_id.id", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<PermissionEntry>();\n        }\n        }\n        permissions = new VirtualUserPermissions(virtualNodeRef,\n                                     PermissionService.setPermissionService.getPermissionService.getPermissionService.getPermissionService.getPermission(virtualNodeRef,\n                                    ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_subsystem('input')\n        )\n        assert devices\n    def test_list_devices_with_match(self, context):\n        devices = list(context.list_devices().match(\n            subsystem='input',\n            ID_INPUT=", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId, floorId)\n    data = user.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    outlines = [\n        if (index_elements[1]\n        if (index_elements[0]\n        if (index_elements[2]\n        if index_elements[3]\n        'stokes' = index_elements[4]\n        if (index_", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = (uint)_Resource.ItemID;\n\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> tunerList = tunerList.getTuners();\n        }\n        }\n        // DRS \n        // DRS 2012\n        // DRS 2019\n        // DRS 2012\n       ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_OPT_OUT) {\n      jobs.put(Version.USER_OPT_OUT, new UserOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.USER_OPT_IN) {\n      jobs.", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file has a line with less than two columns: \" + line);\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String regex : split[1].split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.AppendENVPath('BIBINPUTS', os.path.join(env['BIBINPUTS'], n))\n            #env.AppendENVPath('BSTINPUTS', os.path.join(env['BSTINPUTS'], n))\n            #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return Feature,\n    @classmethod\n    def features(cls):\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        def features(cls):\n        \"\"\"\n        Return an iterable of Feature\n        \"\"\"\n        def features(self, features, point_geometry_by_index", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.port\n        def port\n        self.port\n        return self.port\n        self.update\n        return self.port\n        self.description\n    @property\n    def port(self):\n        if self._value\n        if self._value\n        if self._value", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait_displayed()\n    self.validate_button.click()\n    self.validate_button.wait", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Action class not found in configuration\");\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return this.getActionObject(className);\n    }\n    public IAction getActionObject(String className, ConfigLoader config) throws", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.assert_equal(self.test_update_thread_id)\n    self.assert_thread_id)\n    self.assert_thread_id)\n    def test_delete_thread_id):\n        self.assert_thread_id):\n    self.assert_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return embedManifestDllAction(target, source, env)\n        else:\n            raise SCons.Errors.StopError(\"Manifest file %s does not exist\" % manifestSrc)\n    else:\n        return 0\ndef embedManifestDllCheck(target,", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           MultiStatus errors = execute(getSelection(), new SubProgressMonitor(getShell(), 100));\n        } catch (OperationCanceledException e) {\n            // The user canceled the operation\n        } catch (CoreException e) {\n            MultiStatus problems = record", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\tif (meta.getAggregateType()[0]==null)\n\t\t\treturn super.init(smi, sdi);\n\t\t\n\t\tif (meta.getAggregateType()[0]==AggregateRowsMeta.TYPE_", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regressions\n    assert f(2014,12:30, 12,12,31, 12,31, 12,1, 12,12,12, 12,31,12,", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int dmintime = dmintime = dmintime;\n            }\n            }\n            }\n            int z = int z = int(z)\n            }\n            {\n                int z = int(z)\n            }\n            {\n                int m", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest suspend failed\")\n    @error_context.context_aware\n    def verify_guest_suspend_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(service.invokeAny(new Future<Integer>[] {pub, sub}, 1000));\n        assertThat(rc.get(), is(1));\n        service.shutdown();\n    }\n}\nprivate static int receive(ZMQ.", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                this.owner.getDecorator().setOnSendRequestAfterParameters(res, r, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x7F * 2)\n\t\t\t\treturn 2;\n\t\t\telse if (value <= 0xFFFF * ", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.endswith('.ranger.get_file.path.path\n        if self.fm.thisdir.path\n        self.fm.env.path.path.get_dirs.get_selection()\n        self.fm.thisdir.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_Type()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest));\n\t\t\tAssert.IsInstanceOfType (objCOMTest, typeof (COMTest));", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 2)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.cmd.execute(self.control_message\n        \"\"\"\n        \"\"\"\n        self.send_message(self.control_socket\n        \"\"\"\n        self.control_socket.send_control_messages\n        self.", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n/**\n * Send a message to all group members\n */\npublic static void send", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\nclass Token(object):\n    def __init__(self, ttype, value):\n        self.ttype = ttype\n        self.value = value\n\nclass TokenType(object):\n    def __init__(self, name):\n        self.name = name\n    def __", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column.quantity_selection_column.set_cell_data_func(None,\n                                                                 self._get_selection_data,\n                                                                 None,\n                                                                 tree_model,\n                                                                 tree_iter)\n        column.quantity_selection", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tGridColumn gridcolumn = (GridColumn) grid.getChild(0);\n\t\tif (gridcolumn != null) {\n\t\t    if (values != null) {\n\t\t", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry[] Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    InventoryEntry invEntry = new InventoryEntry();\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\tm_Keys.Add(i);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i]);\n\t\t}\n\t\t\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t// Argon2k\n\t\t\t//[0x00, 0, 0x00, 0x2, 0x00, 0x3, 0x08, 0x3, 0x3F, 0", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, true) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" should have {0} LEDs)\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t\n\t\t\t\t\tLayer nextFrameClone = NextFrame.Clone ();\n\t\t\t\t\t// Copy the", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            }\n            if (ret = responseInts(p);\n            }\n            num = r = \n            case RIL_REQUEST_GET_CALL_LIST_CALL_LIST: ret =  responseInts(p);\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.getName().equals(LicenceBean.LICENCE_CC_BY_SA)) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t} else if (", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = newVertices[y * xSizeP + x];\n            newNormals[y * xSizeP + x] = newNormals[y * xSizeP + x];\n            newUV[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tObject testResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (testResult != null)\n\t\t\t{\n\t\t\t\tresult = testResult.toString();\n\t\t\t}\n\t\t\t\n\t\t\tLog.", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic int getBlockSelectionStart()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getBlockSelectionEnd()\n\t\t\t{", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name + \" not found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0;\n            pixel_y = 0;\n            sx = 0,\n            j = 0;\n            j = 0;\n            pixel_x = 0;\n            pixel_y = 0;\n            color_code = ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n            {\n                }\n                List<CollisionObject.CollisionObject = spell.CollisionObjects.YasuoWallCastPosition\n            {\n                {\n                    var collisionObjects = spell.CollisionObject.Any(\n                    {\n                    foreach (\n                       ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph == null) throw new IllegalArgumentException();\n        List<Node> allNodes = graph.getNodes();\n        List<Node> measured = new ArrayList<>();\n        for (Node node : allNodes) {\n            if (node.getNodeType() == NodeType.", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop.Children[i] is Drawable)\n                        plcs.Push(pop.Children[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        #region Methods\n        /// <summary>\n        /// Find an element", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            return;\n                    }\n                    if (mobiles.Count == 0)\n                        return;\n                    foreach (Mobile m in mobiles)\n                    {\n                        if (m == from", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(new KeyValuePair<PlayerMobile, WorldChatMessage>(user, msg));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getComponentIdsForUser(String sUserId, String sCompoName) {\n    return mock.getComponentIdsForUser(sUserId", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        if (file.isDirectory()) {\n                            final File[] filesInDir = file.listFiles();\n                            if (filesInDir != null && filesInDir.length > 0", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.j.writeLock().lock();\n    try {\n        this.i.clear();\n    } finally {\n        this.j.writeLock().unlock();\n    }\n}\n    public void close() {\n        this.channel.close();\n    }\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               num_per = len(all_periods)\n                z_dict = self.all_periods\n                z_index_list = t_index_list = [t_dict['z_dict = z_dict = [z_dict = [z_dict = [z_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              String.format(context.getString(resourceTwo),\n                                           String.join(\", \",\n                                                       recipients.stream()\n                                                       .map", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK_BUILD\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, test_items in iteritems(type_paths):\n                for test in test_items:\n                    if isinstance(test, dict):\n                        test = test_cls.from_json(tests_root, test)\n                    tests[test.source_file", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private BindingContext createBindingContext() {\n        return new BindingContext(new BindingSpecification(), new ImportCustomizer(), new", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override getting a timeout for a wrapped client adapter\n        /// </summary>\n        /// <returns>The timeout in milliseconds</returns>\n        protected virtual int ClientGetTimeout()\n        {\n            throw new NotSupportedException();\n        }", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     transformed_grad = np.reshape(transformed_grad, (-1,3))\n      transformed_grad = np.asarray(transformed_grad)\n      return transformed_grad\n  return transformed_grad\n  # untransform_grad\n  # grad_var = 1", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t{\n\t\t\tif(this.ordinvcurrentstatus != null && obj instanceof OrderInvestigationForStatusChangeVo)\n\t\t\t{\n\t\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInv", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, stacks);\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        stacks[0].getTags().addAll(asList(\"search-tag1\", \"search-tag2\"));\n        stacks[", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depth = new ParameterImpl();\n        depth.setParameterFamilyCode(pf);\n        depth.setParameterCode(\"depth\");\n        depth.setParameterValue(Integer.valueOf(depth));\n        crawlParameters.add(depth);\n        //EXCLUSION REGEXP", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNode sub = LNodeFactory(candidate, sub);\n\t\t\t\t(candidate, sub);\n\t\t\tLNode _\n\t\t\tsub = null;\n\t\t\t\tsub = null;\n\t\t\t\treturn null;\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = colisionList.Count;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                }\n                if (extendedWill", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t}\n\tprotected boolean isValidateContext(FormBridge.getFormBridge, ims.framework.ControlBridgeBridge, ims.framework.getFormBridge, UI, ims.framework.getFormLoader, ims.framework.getControl, skipContext, skip", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   # print(package_name + \" is in the frozen list, so it will be uninstalled.\")\n    # print(package_name + \" is in the frozen list, so it will be uninstalled.\")\n    # print(package_name + \" is in the frozen list,", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs.value, 2)\n        self.assertEqual(r.subs.value, 2)\n        self.assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, t, (x, t, b, c, (x, b)) == Sum(x, t, c, b))\n    assert Sum(x, t, c, b)) == Sum(x, t, c, b))\n    assert Sum", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tSystem.Text.Encoding a2;\n\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._oldStartingIndex = startingIndex;\n\n            this._newStartingIndex = startingIndex;\n\n            this.InitializeAdd(action, changedItems, startingIndex);\n        }\n        private void InitializeAdd(NotifyCollectionChangedAction action, IList changedItems, I", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           XMLStreamReaderReader staxReader = XMLStreamReaderReader;\n            staxReader = new XMLStreamReaderReader(new XMLStreamReaderReader);\n        }\n        }\n        }\n        }\n        }\n        assert(null != null);\n        if(null) {\n           ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus2:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//read the size\n\t\t\t\t\ticonSize = new Size (iconSize = (int) iconSize;\n\t\t\t\t\t\t\t// read the rest of the iconDirEntry (iconDir.ID\n\t\t\t\tif (iconSize (iconSize", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.successor != null) {\n                l.next = JSR\n            }\n            }\n            l.next = null;\n    }\n    }\n    }\n    // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __domain, __mStack);\n            var", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t}\n\t\n\tprivate void setBlockOutline(LineStyle lineStyle) {\n\t\tif(lineStyle == null)\n\t\t\tbtnShowLables.setEnabled(false);\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self, \"Image\"\n        self._getCurrentValue( driver, \"Image\"\n        self._getCurrentValue( driver, \"Channel value\n        self\n        self._", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.host_key = self.kexgss_continue\n        self.old_host = self.x = self.x = self.x = self.f\n        self.p = self.x = self.x = self.x = self.old_style =", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(connectionData.getConnectionName(), connectionData);\n            if (tree.getRootNode() == null) {\n                tree.setRootNode(node);\n            } else {\n                DefaultMutableTreeNode rootNode = (DefaultMutable", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           )\n                return result\n        class SalaryRule(BrowsableObject):\n\"\"\"            a class that will be used into the python code, mainly for usability purposes\"\"\"\n            def _sum(self, from_date, to_date, code):\n                result = ", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf = np.zeros\n   \n    for i in range(0, cosmo_h\n    #Mass function\n    #Mass function\n    mf = np.array([mfracToMfrac(m)\n    mf = MfracToMfracToM", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (font.getStringBounds(getText(), font).getWidth() + 10);\n        d.height = 10;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container=np.zeros(self.container)\n        self.container.resize(1,0)\n        self.container.resize(0,0)\n        self.container.fill(np.zeros(0)\n        # -0,0,0,0", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t\twindow.Show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t}\n\t\tprivate void OnOrdersClick(object sender, RoutedEventArgs e)\n\t\t{", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D, _Hist3D, _Hist(name, title)\n        _Hist3D)\n        if params[0]['bins'] is None,\n        params[0][0]\n        if params[0]['bins', params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getQuery());\n        }\n    }\n    public Query next(Query query) {\n        synchronized (queries) {\n            for (Query nextQuery : queries) {\n                if (nextQuery.getQuery", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2R)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.isEmpty())\n\t\t\t\t\tbreak;\n\t\t\t\tret.remove(0);\n\t\t\t}\n\t\t}\n\t\treturn ret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    else:\n        yield", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionLost(Throwable cause) {\n\t\tlog.error(\"Connection lost: \" + cause.getMessage(), cause);", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       return self.dispatch(environ, start_response)\n    def dispatch(self, environ, start_response):\n        path = environ.get('PATH_INFO', '')\n        for prefix, app in self.apps:\n            if path.startswith(prefix):\n                environ['PATH", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (CraftResources.IsStandard(resType))\n                chance += CraftResources.GetStandardInfo(resType).AttributeBonus;\n            if (chance > 0)\n            {\n                chance =", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a new RDLType\n        self.assign_field_el\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n       ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                    MessageBox.Show(\"No FOG Services found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                this.Close();\n            }\n        }\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n            {\n                return (object)this.ViewState[\"SubmitText\"]\n                obj\n            }\n            }\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n            }\n        }\n        }\n        }\n        }\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(textureArray.get(textureHash[textureHash];\n                this.vertexBuffer.length];\n                this.vertexBuffer.clear();\n                this.vertexBuffer.clear();\n                this.vertexBuffer.f\n                this.texCoordBuffer", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\n\n@require_staff_or_admin\ndef track_view(request, usage_key_string):\n    \"\"\"\n    Track a usage_key_string.\n   ", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if not inverse_center, center,\n        # units, radius,\n        # If the radius and upper_left_extent, radius=None,\n        # If radius is given in center, radius,\n        center = new_center,\n        radius = _convert_units,", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setInitialState(Starting.STATE)\nQUEST.set(\"chosen\", \"? ? ? ? ? ? ? ? ?\")\nQUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\n\n# Quest N", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\t\tempty = new PlayTime(new PlayTime(null);\n\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t{\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection();\n            Textures = new Dictionary<String, TextureInfo>();\n            Uniforms = new Dictionary<String, int>();\n            _sCurProgram = null;\n        }\n        public ShaderProgram(ShaderProgram other)\n            : this()", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self._metabolites = self\n        self._reactions = self\n        self._genes = self\n        self._compartments = self\n    # A list of all reactions in", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new DecelerateInterpolator(1.0f));\n        mListView.setLayoutTransition(set);\n    }\n\t\n\t/**\n\t * Fill the list with the data.\n\t */\n\tprivate void fillData() {\n", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    ARow.SetFieldKey(row.FieldKey);\n                    ARow.SetFieldKeyNull();\n                    break;\n                }\n                else\n                {\n                    ARow.Set", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(i);\n\t\t}\n\t\t\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
