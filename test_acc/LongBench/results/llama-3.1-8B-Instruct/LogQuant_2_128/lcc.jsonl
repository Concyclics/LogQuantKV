{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.SendGump( new DuelContextGump(", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tA_ = self.best(M, e_u, e_v, A, e_key, e_data)\n\t\t\t# print ('***',e_u,e_v,e_key,e_data)\n\t\t\t# print ('***',A", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Read some frames\n        buff = a.read_frames(1024)\n        # Seek to the beginning\n        a.seek(0)\n        # Read some frames\n        buff2 = a.read_frames(102", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_unfollow_all(self):\n    return self.is_element_visible(self._UNFOLLOW_ALL)\n    def displays_unfollow_all(self):\n        return self.is_element_visible(self._UNFOLLOW_ALL)\n    def displays_unfollow_all(self):\n        return self.is_element_visible(self._UNFOLLOW_ALL)\n    def", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:current\", olStyle.getCurrent());\n\t\t\t\t\twriter.addAttribute(\"ol:default\", olStyle.getDefault());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\treturn null;\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(dbname)\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select category from questions\")\n    ret = []\n    for r in dbconn.fetchall():\n        ret.append(r[0])\n    return ret\n    dbconn.close", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 2:\n                    mob.SendMessage(\"Target a location to mark:\");\n                    mob.CloseGump(typeof(SR_Runebook));\n                    mob.SendGump(new SR_RunebookGump(mob, RuneAcc));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Target a location to mark:\");\n                   ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(\"  \");\n                cert.print(s);\n                s.println();\n            }\n            s.println(\"***\");\n        }\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** Certificate chain\");\n        if (debug!= null", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\tRedButton btnInfo = new RedButton(Messages.get(Alchemize.class, \"info\") {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t\towner.showInfo(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbtnInfo.setRect", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        response = self.server.dispatcher.dispatch(request, environ['PATH_INFO'])\n        self.send_response(200)\n        self.send_header('Content-type', 'text/xml')\n        self.end_headers()\n        self.wfile.write(response)\n        return\n    def do_GET(self):\n        return self.do_GET()\n    def do_POST", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    self.statuses = self.base.get_status(status_id)\n    self.webview.update_status(status_id)\n    self.webview.update_status(status_id)\n    self.webview.update_status(status_id)\n    self.webview", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return self.get_process_data(CreateArchive, {\n                \"login\": login.decode('UTF-8'),\n                \"password\": password.decode('UTF-8'),\n                \"params\": byte_to_unicode_dict(params),\n                \"session\": byte_to_unicode_dict(session)\n            })\n    def action_copy(self, login, password,", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tIPermission c = a.Union (b);\n\t\t\tAssert.IsTrue (c is ZoneIdentityPermission);\n\t\t\tAssert.IsTrue (c is SecurityPermission);\n\t\t}\n\t\t}\n\t}\n} // class ZoneIdentityPermissionTest\n} // namespace MonoTests.System.Security.Permissions\n``` \nThe code provided is", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_key_manager(keyfile, certfile, ca_certs):\n    key_managers = []\n    if keyfile:\n        key_managers.append(_get_key_manager(keyfile))\n    if certfile:\n        key_managers.append(_get_key_manager(certfile))\n    if ca_certs:\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n} \n``` \nThe code is a part of a web application that handles domain administration tasks. The `doDomainInfo` method is incomplete and needs to be completed. The method is supposed to retrieve", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__data_pump = asyncio.StreamWriter(\n            self.__datastream_address,\n            loop=self.__event_loop,\n            server=self.__server)\n        self.__data_pump_task = self.__event_loop.create_task(\n            self.__data_pump_main())\n", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tstring [] myStringFull = store.GetValue (iter, 1).ToString().Split(new char[] {' '});\n\t\t\t\t\tstring jump = myStringFull[1];\n\t\t\t\t\tstring jumpPercent = myStringFull[0];\n\t\t\t\t\tstring jumpType = myStringFull[2];\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            MessageResources resources = defaultMessages;\n            String msg = null;\n            String msgBundle = null;\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), FIRM(new ConfigFile<UUID, Firm>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Firm create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new Firm(string, conf);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String getSave", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save transcription\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(AUDIO_FILE_CACHE_LENGHT,\n\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n        }\n\t}\n}\nPlease complete the code given above. \n\nThe code is incomplete and has several errors. Here is the corrected code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Server.Network;\nusing Server.Items;\nusing Server.Engines.PartySystem;\nusing Server.Engines", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._enable_transaction_accounting = False\n        self._is_active = False\n        self._is_active = False\n        self._is_active = False\n        self._is_active = False\n        self._is_active =", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getSignature();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\tnamed = new ArrayList<IField>(fields.size());\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \n```python\nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  It is not intended to be used directly.\n    \"\"\"\n    def __", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n```\nThe code is a part of the ASP.NET framework and is used to manage a collection of views in a MultiView control. The code is written in C# and is part of the System.Web.UI.WebControls namespace.\n\nThe code is well-structured and", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Downloading the remaining {0} intervals.'.format(len(self.REMAINING_INTERVALS))\n\n# This is the end of the code. Please let me know if you need any further assistance. \n# I will be happy to help you. \n# I hope this helps. \n# Best regards", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                // SkillGroup3 replace SkillGroup3\n                if (mod == 41)\n                {\n                    if (i.SkillBonuses.GetSkill(0) > 0)\n                        return GetNameForAttribute(i.SkillBonuses.GetSkill(0));\n                }\n                // SkillGroup4 replace SkillGroup4\n", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform, platform_info in platforms.items():\n            builds.append({\n                'locale': locale,\n                'locale_pretty': locale,\n                'locale_pretty': locale,\n                'locale': locale,\n                'locale_pretty': locale,\n                'locale': locale,\n                'locale_pretty': locale,\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tTProjectBean projectBean = LookupContainer.getProjectBean(projectID);\n\t\t\tif (projectBean!=null) {\n\t\t\t\tInteger projectTypeID = projectBean.getProjectType();\n\t\t\t\tif (projectTypeID!=null) {\n\t\t\t\t\tstateBeansList = StatusBL.load", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Expression.Kind() == SyntaxKind.IdentifierName && memberList.Any(m => m.Identifier.Text == argument.Expression.ToString())) {\n                    toReplace.Add(argument, argument);\n                }\n            }\n            return finalScript.ReplaceNodes(toReplace.Values, (node)", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        self._assert_split_test(self.split_test_usage_key, self.course_usage_key)\n        # Set to second group configuration.\n        self._assert_split_test(self.split_test_usage_key, self.chapter_usage_key)\n    def _assert_split_test(self, split_test_usage_key, parent_usage_key):\n        \"\"\"\n        Helper method", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference cidRef = null;\n            PdfIndirectReference fontRef = null;\n            PdfIndirectReference toUnicode = null;\n            PdfIndirectReference fontDescriptor = null;\n            PdfIndirectReference cidFont = null;\n            PdfIndirectReference subsetFont = null;\n            PdfIndirect", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\t// if the cell is not in the graph, add it\n\t\t\t\t\t\tif (graphNodes.get(cell) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgraphNodes.put(cell, new GraphNode());\n\t\t\t\t\t\t\tgraphNodes", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        bitmapReference = new SoftReference<>(null);\n        return task;\n      }\n    }\n    public void setBitmap(Bitmap bitmap) {\n      bitmapReference = new SoftReference<>(bitmap);\n      task = null;\n    }\n    public void setTask(ListenableFutureTask", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    @Override\n    public void keyReleased(final KeyEvent ke)", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It should be a class that inherits from NodeDetailsView and has a property that returns a boolean indicating whether the view is displayed. The property should check if the user is logged in, if the navigation is set to 'Compute', 'Containers',", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onSequence(timestamp, sequence);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, skeleton);\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                writer.Write(\"<button id=\\\"\" + ClientID + \"\\\" type=\\\"button\\\" style=\\\"background-image:url('\" + Page.ResolveUrl(ImageUrl) + \"');\");\n                writer.Write(\">\");\n                base.Render(writer);\n                writer.Write(\"</button>\");\n            }\n            else\n            {\n                base.Render(writer);\n            }\n       ", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\t\n\t\tNBTTagCompound ench = new NBTTagCompound();\n\t\tench.setShort", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // Scopes\n    /**\n     * A scope that limits this effect to a certain type of object.\n     */\n    public static class Scope extends FreeColGameObjectType {\n        /**\n         * The tag name of", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 0\n    i = store.handle_indicators", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        p = Person.objects[0].select_related()\n        o = Organization.objects[0].select_related()\n        self.assertEqual(p.owns[0].owner, o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0].employer, o)\n        self.assertEqual(p.owns[0", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_ind=None):\n    \"\"\"\n    Plot a waveform at a given time index.\n    :param x: Name of a 1D-variable\n    :param y: Name of another 1D-variable\n    :param ref_ind: Reference", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path))\n                {\n                    _logger.Debug(\"Ignoring {0} as it was reported as a change in progress\", path);\n                    continue;\n                }\n                if (_tempIgnoredPaths.TryGetValue(path, out var ignoredCount))\n                {\n                    if (ignoredCount > 1)\n                    {\n                       ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.merge(key, write(key, value), remappingFunction));\n\t}\n\t@Override\n\tpublic E merge(K key, E value,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                replydict = []\n                reply", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = (sbyte)value; }\n\t\t}\n\t}\n}\n} \n```\nThe final answer is: \n\n```csharp\npublic void", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get the channel URI\n                    //m_log.DebugFormat(\"[FreeSwitchSLVoice][PROVISIONVOICE]: region \\\"{0}\\\" land channel {1} channel {2} agent {3}: {4}\", \n                    //              scene.RegionInfo.RegionName, land.Channel, land.Channel, agentName, path);\n", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.Text;\n\t\t\tPayPeriods.Save();\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void but", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Build a time coordinate.\n    def read_header(file_handle):\n        # Read the header lines.\n        header = {}\n        for line in file_handle:\n            # Skip blank lines.\n            if line.strip() == '':\n                continue\n            # Split the line into key and value.\n            key, value = line", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    group_id = data_dict['group_id']\n    group = model.Group.get(group_id)\n    if not group:\n        return {'success': False,'msg': _('Group not found')}\n    return", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = confidences[resultIndex];\n\t\t\t\tdouble confidence = confidences[resultIndex];\n\t\t\t\tdouble outcome = confidences[resultIndex];\n\t\t\t\tdouble[] confidences = confidences;\n\t\t\t\tint[] outcomes = outcomes;\n\t\t\t\tint[] depths = depths;\n\t\t\t\tdouble[] confidences = confidences;\n\t\t\t\tint[] depths =", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n        #region Properties\n        /// <summary>\n        /// Gets a value indicating whether this language direction supports the <see cref=\"P:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.TranslationProviderLanguageDirection\"/>\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            codePoint = (ch << 10) + ch;\n         }\n         if (codePoint >= _range.getMin() && codePoint <= _range.getMax()) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n      @Override\n      int", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (accessionNumber == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (studyFormName.equals(accessionNumber)) {\n            return ValidationResults.SUCCESS;\n        } else {\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendData(newConn, message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= LobbyInfo.GlobalSettings.Mod)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Invalid mod\";\n\t\t\t\t\tSendData(newConn, message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//#############################################################################\n//EOH\n//#############################################################################\n//EOH\n//#############################################################################\n//EOH\n//EOH\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelif prnum == 'watchlist':\n    # script.watchlist()\nelif prnum == 'random':\n    # script.randomitems()\nelif prnum == '':\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// <summary>\n        /// <summary>\n        /// <summary>\n        /// <summary>\n        /// <summary>\n", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\ndef getPlotData( self ):\n  try:\n    params = self.__parseFormParams()\n    if not params[ 'OK' ]:\n      return params\n    pD = params[ 'Value' ]\n    repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager : BaseBuilderQueueManager\n\t{\n\t\t// Add code here", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        catalog.getClusters().get(\"cluster\").getDatabases().get(\"database\").getProcedures().get(\"basename\").getStatements().get(\"stmt-0\").getPlan();\n        return plan;\n    }\n    public List<AbstractPlanNode> compile(String sql)\n    {\n        return compile(sql, 0", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(12, 104);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n\t\t\tthis.textBox2.Size = new System.Drawing.Size(120, 20);\n\t\t\tthis.textBox2", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (uint)parity;\n\t\t\tdcb.StopBits = (uint)bits;\n\t\t\tdcb.fDtrControl = (uint)hs;\n\t\t\tdcb.fRtsControl = (uint", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    \"\"\"\n    Test that the user's cobranding is properly set.\n    \"\"\"\n    self.user.get_profile().cobrand = Cobranding.objects.create()\n    self.user.save()\n    self.assertEquals(self.user.get_profile().cobrand.user, self.user)\n    self.assertEquals(self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',\n                        help='Print more output')\n    args = parser.parse_args()\n    if args.verbose:\n        #", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tnewListIndex = None\n\t\t\tfor ap in newList:\n\t\t\t\tbssid = ap[1]\n\t\t\t\tessid = ap[0]\n\t\t\t\tif bssid == self.oldlist[ap]['bssid']:\n\t\t\t\t\tnewListIndex = ap\n\t\t\t\t\tbreak\n\t\t\tif newListIndex is not None:\n\t\t\t\tself", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                return new Rectangle(fontX * 10, (fontY + barHeight * 10) * 3);\n            }\n        }\n        \n        /**", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   */\n  public static String[] getStringArray(Properties props, String key) {\n    return getStringArray(props, key, false);\n  }\n  /**\n   * Loads a comma", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\n# Define the test data\ncubes = iris.load(tests.get_data_path([\"PP\", \"COLPEX\", \"theta_and_orog_subset.pp\"]))\n``` \nThis code is a continuation of the previous code snippet, which is a part of the Iris library's test suite. It appears to be", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket packet = GetCurrentPacket();\n            if (packet!= null)\n            {\n                byte[] bytes = packet", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\nprint '\\033[0m'\n    else:\n        print 'color error'\n    return 0\ndef get_mfcc_diy(wav_dir):\n    #", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} /// <summary> reference-counting set based on a HashMap implementation that stores keys and a reference count for each key. </summary>\n/// <summary> The set is a reference-counting set, where each key is associated with a reference count. </summary>\n/// <summary> The set", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            // \n            // treeView1\n            // \n            this.treeView1.Location = new System.Drawing.Point(0, 0);\n            this.treeView1.Name = \"treeView1\";\n            this.treeView1.Size = new System.Drawing.Size(245, 300);\n            this.treeView1.TabIndex", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef copyBaseFunction( self, functionName, dll, argNames, resultType, argTypes, extension=None, doc=None, name=None, deprecated=False, log=None, logOnFail=None, logOnSuccess=None, logOnWarning=None, logOnError=None, logOnWarningWith=None,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeEmptyStreams(header, baos);\n            header.write(baos.toByteArray());\n            header.write(NID.kEmptyStream);\n        }\n    }\n    private void writeEmptyStreams(final DataOutput header, final ByteArrayOutputStream baos) throws IOException {\n        final BitSet emptyStreams = new BitSet(files.size());\n        for (int i", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (alphaLevel < 255)\n                        alphaLevel = 255;\n                    else\n                        alphaLevel = 0;\n                }\n                else\n                {\n                    if (alphaLevel < 255)\n                        alphaLevel = 255;\n                    else\n                        alphaLevel = 0;\n                }\n                if (", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.Status.Should().Be(DownloadItemStatus.Downloading);\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n    }\n}\n}\n```\nThe final answer was not provided in a box as the question was", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, razz, ItemId.ItemRazzBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n            }\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x01) << 2);\n                    i += ((b & 0x20) << 5);\n                    i += ((b & 0x10) << 3);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _configure_course(self):\n        \"\"\"\n        Configure the course with the course details\n        \"\"\"\n        self._configure_course(self._course_dict)\n    def _configure_course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif (splitNumber.length == 2) {\n\t\t\tchance = Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance/100 * Integer.parseInt(splitNumber[0]);\n\t}\n}\nPlease note that I have not tested the code. The code is provided as is. You", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function is used to download a certificate from the api host\n    # It returns a boolean indicating whether the request was successful\n    # and the contents of the file\n    response, info = http_request(module, name,", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy = new System.Windows.Forms.Label();\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(200, 13);\n            this.lblPrivacy.TabIndex = 0;\n            this", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (plug, plugname, optname, optparm in self.all_options:\n            plug.set_option(optname, optparm)\n        for (plug, plugname, optname, optparm) in self.all_options:\n            plug.set_option(optname, optparm)\n        for (plug, plugname", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" List of speakers \"\"\"\n    def getSpeakerList(self):\n        \"\"\" List of speakers \"\"\"\n        return self.getSpeakerList()\n    getSpeakerList.name = \"speakers\"\n    def getSpeakerList(self):\n        \"\"\" List of speakers \"\"\"\n        return self.getSpeakerList()\n    get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText(), null);\n            }\n            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Number) {\n\t\t       \t\t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t\t} else if (value instanceof String) {\n\t\t       \t\t\t\tlayer = Integer.parseInt((String) value);\n\t\t       \t\t}\n\t\t    \t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n            Session.StatusCallback callback = new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n\tpublic void normalize() {\n\t\tnormalize();\n\t}\n\tpublic void normalize() {\n\t\tnormalize();\n\t}\n\tpublic void normalize() {\n\t\t", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2,\n                'property2': 3,\n               'stages': [\n                    {\n                        'duration': 2,\n                        'name':'stage1',\n                       'started_at': constants.SPLIT_TIMESTAMP1,\n                       'stages': [\n                            {\n                                'duration': 5", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n\"\"\"\ndef meters_to_furlongs(meters):\n    \"\"\"\n    Converts meters to furlongs\n    \"\"\"\n    # 1 furlong = 201.168 meters\n    furlongs = meters / 201.168\n    return furlongs\ndef meters_to_furlongs(m", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\n        form = ReportUserForm(request.POST)\n```\nshould be\n```\n        form = ReportUserForm(request.POST)\n```\n```\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = Report", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(ReturnToReferrerMixin, ProductConfigureBase):\n    \"\"\"A view to add a project to a product set.\"\"\"\n    label = \"Add a project to a product set\"\n    field_names = [\n        \"project\",\n        \"title\",\n        \"summary\",\n        \"programminglang\",\n        \"", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t\tpublic KPTranslation()\n\t\t{\n\t\t\tm_vStringTables = new List<KPStringTable>();\n\t\t\tm_vForms = new List<KPStringTable>();\n\t\t}\n\t}\n}\nThe bug", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n} \n```\nThe code is a Java class that represents a variable-length number in the ID3 tag format. It extends the AbstractDataType class and implements the read and write methods for the number. The class has a minimum and maximum length", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags_list.append((TagRegex(flag, regex),)\n            return new_positional_tags_list\n    def default_build_dir(build_dir):\n        if not build_dir:\n            build_dir = os.path.join(absdirpath(__file__), 'build')\n        return (build_dir,)\n    def default_test_threads", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class Type\n    {\n        public Type (Type type)\n        {\n        }\n        public Type (string name)\n        {\n        }\n        public Type (string name, Type type)\n        {\n        }\n        public Type (string name, Type type, Type[] typeArguments", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_OBDStandardsThisVehicleCompliesWith\"\n    fields_desc = [\n        FlagsField('data', 0, 8, [\n            'OBD-I',\n            'OBD-II',\n            'OBD-", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListSessions')\n\t\tself.add_prompt(SecretPrompt(self, None, None, None, None)\n\t\tself.add_session(SecretSession(self, None, None, None))\n\t\tself.add_collection(SecretCollection(self,", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n            }\n        }\n    }\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._after_this_request()\n        if self._after_request_functions:\n            self._after_request_functions = []\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()\n            app_ctx = self._implicit_app_ctx_stack[-1]\n            if app_ctx is not None:\n                app", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_consumer_list(session, cluster_id, topic_name, needs_columns=False):\n    \"\"\" All pub/sub consumers.\n    \"\"\"\n    return session.query(\n        PubSubConsumer).\\\n        filter(Cluster.id==cluster_id).\\\n        filter(PubSubConsumer.is_active).\\\n        filter(P", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n}\n```\nThe final answer is: \n```java\npublic Set<ResourceEntity> getConsumedResourceRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Compute the distance from the rotation axis to the pixel\n        distance = np.sqrt((angles[0] * np.cos(angles[1]) + det_radius)\n    else:\n        # Compute the distance from the rotation axis to the pixel\n        distance = np.sqrt((angles[0] * np.cos", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _get_search_string(self, search_string, search_mode='eponly', epcount=0, season=None, episode=None, season_count=None, episode_count=None, show=None, show_name=None, show_id=None, show_type=None, show_air_by_date=None, show_air_by_date=None, show", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic string ToString (string format)\n\t\t{\n\t\t\treturn unit.ToString (format);\n\t\t}\n\t\tpublic string ToString (string format, IFormatProvider provider)\n\t\t{\n\t\t\treturn unit.ToString (format, provider);\n\t\t}\n\t\tpublic string ToString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tBigInteger crypted = new BigInteger(block1);\n\t\t\tBigInteger", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t}\n\t}\n}\t\n\t}\n}\nThis is a test suite for the JSON parser. The test cases cover various scenarios, including parsing of valid and invalid JSON strings, as well", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    edges.add(new T2(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<T2> getEdges() {\n            return getEdges();\n        }\n        @Override\n        public Collection", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    data = iso.get_default().get(col1=\"area_um\", col2=\"deform\", lut_identifier=\"LE-2D-FEM-19\", channel_width=30, flow_rate=0.16, viscosity=15, add_px_err=True, px_um=0.34)\n    # test the", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, subscription):\n    \"\"\"Return the lowest spot price for a given zone.\"\"\"\n    zone = subscription['zone']\n    region = subscription['region']\n    instance_type = subscription['instance_type']\n    zone_history = [h for h in history if h['AvailabilityZone'] == zone and h['", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Downloads the latest version of Yarta and installs it.\n\t * \n\t * @return true/false\n\t */\n\tprivate boolean performDownloadAndInstallation() {\n\t\tString downloadedJarFile = performDownload();\n\t\tif (download", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inv\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.x\n    @", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n           ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAdmin();\n                } else {\n                  // If the account is deleted, transfer the ownership to eucalyptus admin\n                  // If the account is deleted, transfer the ownership to eucalyptus admin\n                } else {\n                  // If the account is", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component\n        public void Initialize()\n        {\n\t\t\t// check initialized\n\t\t\tif (IsInitialized)\n\t\t\t\treturn;\n\t\t\t// start the timer to", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        ImportVmTemplateDao mockVmTemplateDao = mock(ImportVmTemplateDao.class);\n        doReturn(mockVmTemplateDao).when(command).getVmTemplateDao();\n    }\n} \npackage org.ovirt.engine.core.bll;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnit", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table.TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.status\n        self.system['SCRIPTSTATUS'] = self.scriptstatus\n        self.system['PARSTATUS'] = self.parstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[] returnTypes, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name, attribs,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getIndex(i, x));\n            }\n        }\n    }\n    public void write(JmeExporter e) throws IOException {\n        super.write(e);\n        OutputCapsule capsule = e.getCapsule();\n        capsule.writeFloatArray(\"vertices\", get", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (!showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of columns that are hidden in the document list view.<p>\n     * \n     *", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds(0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tinputField.ActivateInputField();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinputField.DeactivateInputField();\n\t\t\t}\n\t\t}\n\t}\n\t}\n} //  namespace MaterialUI\n} // ", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF textSize = GetLargeTextSizeF();\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            Users = Users.Distinct().ToList();\n            foreach (string AUserId in Users)\n            {\n                SendEmailToUser(AUserId, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.Y < EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Up;\n\t\t\tif (Viewport.Last", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 3)\n            {\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(PcConferenceTable.GetConferenceKey(), PetraErrorCodes.E_DISCOUNT_CRITERIA_CODE_NOT_UNIQUE), ValidationColumn, ValidationControl);\n                // Handle", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\ndef _apply_payload_requirements(self, requirements):\n    #... (rest of the method implementation)\n```\nThis is the implementation of the `_apply` method for the `PayloadRequirements` class. The method is called when the `apply` method is called on the `PayloadRequirements` object. The method", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getLineNumber() == -1) {\n                throw new RuntimeException(\"BugInstance \" + bugInstance + \" has no line number\");\n            }\n        }\n    }\n    public void reportBug(BugInstance bugInstance) {\n        if (applySuppressions) {\n            bugInstance = bugInstance.apply", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffin : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Muffin() : base( 0x9f0 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 2;\n\t\t}\n\t\tpublic Muffin( Serial serial )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.MinionCount >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    else if (Menu.GetBool(\"LaneClearQ\") && Menu.GetSlider(\"LaneClearQCount\") >= 2)\n                    {\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\ndirectory = 'gds/specials/forecasts/germany'\n```\nThis is the last line of the code. The file is not complete, but it seems to be a plugin for a home automation system, specifically for fetching weather data from the German weather service DWD. The code is", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n    def test_get_producer_rules(self):\n        \"\"\"JSONAlchemy - get producer rules\"\"\"\n        self.assertEquals(\n            get_producer_rules('testsuite')['title']['rules'],\n            Field_parser.field_definitions('testsuite')['title']['rules']\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"E1\", \"E1?\"});\n                // widen to int\n                // widen to int\n                env.CompileDeploy(\n                    \"create index MyInfraWIndex1 on MyInfraW(f1)\",\n                    path);\n                env.CompileDeploy(\n                    \"create index My", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n        c = self.__mul__(other)\n        return c\n    \n    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, cr, uid, id_or_xml_id, values=None, engine='ir.ui.view', context=None):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #...", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = new Renderer(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    private static View createFactory() {\n        return new BasicEditorKit();\n    }\n    private static BasicEditorKit getFactory() {\n        return (BasicEditorKit)createFactory();\n   ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename)\n    assert not s.name_is_non_test\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_reference\n    assert not s.name_is_worker\n    assert not s.name_is_window\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t}\n\t\t#endregion\n\t}\n}\npublic class FilterMapper : IFilterMapper\n{\n\tprivate readonly HbmFilter filter;\n\tpublic FilterMapper(System.Type ownerType, System.Type keyType, System.Type valueType, HbmMap mapping, HbmMapping mapDoc)\n\t\t: this(ownerType", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) m_FactionItems.Count", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n    }\n    private void moveForward() {\n        if (invocationQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.peek().isRoot()) {\n            return;\n        }\n        if (invocationQueue.peek().isRoot()) {\n            return;\n        }\n        if", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            elif self.args['pr']:\n                self.args['pytest'] = self.args['pytest']\n            else:\n                self.args['pytest'] = self.args['pytest']\n        if self.args['pr']:\n            self.args['pr'] = self.args['pr']\n        if", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    materializePhi(key, states, states.get(0).readCache, materializedPhis);\n                }\n                states.get(0).readCache.put(key, entry.getValue());\n            }\n        }\n        private void materializePhis(List<ReadEliminationBlockState> states)", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore and continue\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#requestCameraCapabilities */\n    public abstract CameraCapabilities requestCameraCapabilities();\n   ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\nPlease complete the code given above. Here is the completed code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Server;\nusing Server.Items;\nusing Server.Mobile;\nusing Server.Network;\nusing Server.Engines", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\nclass Bibxxx(db.Model, BibxxxMixin):\n    \"\"\"Bibxxx table.\"\"\"\n    __tablename__ = 'bib{0:02d}xx'.format(100)\n    # Add fields here\n```\nThis code is a continuation of the previous code. It defines a new model `B", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_random_password(self): \n    return ''.join([chr(ord('a') + i % 26) for i in range(8)])  # 8 random lowercase letters\n    def get_random_password(self):\n        return ''.join([chr(ord('a') + i % 26) for i in", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        # save the file\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', [", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of transformation %s to ValidatedOutput\" % transID )\n      else:\n        gLogger", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"POST\")) {\n\t\t\t\t// @see bug #2456\n\t\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t\treturn processURI(action, null, null, true, false);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn processURI(action, null, null,", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self.TEST_PROJECT, self.TEST_REVISION,\n                                                self.TEST_BUILD_NUMBER, self.TEST_PROJECT,\n                                                self.TEST_REVISION, self.TEST_BUILD_NUMBER)\n        gsp.sendCodeReview = Mock()\n        gsp.sendCodeReview.return_value = defer.succeed(None", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  \n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'text'\n    self.category.label = 'test'\n    self.assert_(self.category.term == 'test')\n    self.assert_(self.category.scheme == 'text')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = r1;\n            if (r2!= null) {\n                for (Map.Entry<String, AnnotationMirror> entry : r2.entrySet()) {\n                    String key = entry.getKey();\n                    AnnotationMirror value = entry.getValue();\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_game_settings(MaterialButtonsPanel, Panel):\n    bl_label = \"Game Settings\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            _jMnuRoot.add(getInspectMenuItem(\"Inspect\"));\n            _jMnuRoot.add(getSourceCodeMenuItem(\"Source Code\"));\n            _jMnuRoot.add(getInvokeMenuItem(\"Invoke\"));\n            _jMnuRoot.add(getHelpMenuItem(\"Help\"));\n            _jMnuRoot.add(getHelpMenuItem", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Other\n\t\t//----------------\n\t\tAdd(\"Windmill\", 70026); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70027); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70028); // Windmill [1000]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t{\n\t\t\tint width = min;\n\t\t\tif (Frame.W > min) {\n\t\t\t\twidth = Frame.W;\n\t\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def get_announcement_cross_publication(announcement, twitter_api):\n    \"\"\"\n    Return the cross-publication marker for the given announcement and Twitter API.\n    :param announcement: The announcement to be cross-published\n    :param twitter_api: The Twitter API to be used\n    :return: The cross-publication", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(startinline=True)\n# The suffix of source files.\n#source_suffix = ['.rst', '.md']\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The encoding of output files.\n#output_encoding = 'utf-8'\n# The encoding", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\nThe code you provided is a Python script that appears to be designed to process flight log data from a SQLite database. It seems to be doing the following:\n\n1. Creating tables in the database if they do not exist.\n2. Processing flight log data to determine if each flight is a valid flight (i.e", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        rethinkdb_cursor = conn.cursor()\n        rethinkdb_cursor.execute(\"update projects set last_snapshot = {timestamp} where project_id = '{project_id}'\".format(timestamp=timestamp_to_timestamp(timestamp), project_id=project_id))\n        rethinkdb_cursor.close()\n        conn.close()\n    conn.close()\n    # Close the", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"You're a bit too curious for your own good.\");\n\t\t\t}\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know where the School is, right?<br/>It's right next to the School.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know where the School is", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteRemovedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n        \"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REMOVED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    def __init__(self, host_uuid, host_name, status, result):\n        self.uuid = host_uuid\n        self.name = host_name\n        self.start = None\n        self.finish = None\n        self.status = status\n        self.task = task_data\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\n//... (rest of the code remains the same)\n```\nPlease complete the code by adding the following lines:\n```java\n//... (rest of the code remains the same)\n```\nPlease complete the code by adding the following lines:\n```java\n//... (rest of the code remains the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    #... (rest of the function remains the same)\n    return\ndef xml_parse_repodata(context, path, ns, name):\n    # This is a helper function to parse repodata.xml\n    # and return a dictionary of packages\n   ", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # -- Utility methods ------------------------------------------------\n    def _get_finalized_command (self, cmd_name):\n        \"\"\"Return the command object for the given command name.  If the command\n        is", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyTableNumbers.Length; j++)\n\t\t\t{\n\t\t\t\tint tableNumber = GetSubclassTableNumber(lazyPropertyNames[j]);\n\t\t\t\tint[] columnNumbers = subclassColumnNumbers[lazyPropertyNumbers[j]];\n\t\t\t\tint[] formulaNumbers = subclassFormulaNumbers[lazy", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'wall=%d:00:00' % request['job_max_vmem'],\n        '-l','mem=%d' % request['job_max_vmem'],\n        '-l', 'h_rt=%d:00:00' % request['job_max", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"DelegateList\", model);\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveDelegateEvent\")]\n        public ActionResult SaveEventDelegate(int id, int[] items)\n        {\n            var result = service", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    return item.ToString();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n            return string.Empty;\n        }\n        private static void HandleMenu(Menu menu)\n        {\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\ndef handlePremium(self):\n    self.logDebug(\"handlePremium\")\n    self.load(self.URLS[1])\n    self.load(self.URLS[1])\n    self.load(self.URLS[2])\n    self.load(self.URLS[3])\n    self.load(self.URLS[4])\n    self.load", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, return the first harvestable cell on the path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstHarvestableCell = path[0];\n\t\t\t\tif (firstHarvestableCell!= harv.LastHarvestedCell)\n\t\t\t\t\tharv.LastHar", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"failed to restart dhcp service\")\n                    return False\n                else:\n                    self.settings.restart_dhcp = \"1\"\n                    self.settings.save()\n                    self.settings.restart_dhcp = \"0\"\n                    self.settings.save()\n                return True\n        else:\n            return True\n    def write_dhcp", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder().setSource(source).setSeqNo(seqNo.incrementAndGet());\n    }\n    @Override\n    public void flushEventBuffer() {\n        flushEventBuffer(true);\n    }\n    @Override\n    public void flushEventBuffer(boolean startNewSequence) {\n        flushEventBuffer(startNewSequence);\n   ", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            for (PpmContext currentContext = context.Suffix; currentContext!= PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics == 0)\n                {\n                    goto LoopEntry;\n                }\n                if (currentContext.NumberStatistics == 0)\n                {\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Unsigned Long VR.\n        /// </summary>\n        public static readonly DicomVr ULvr = new DicomVr(\"UL\", false, false, false, 4, true,'', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tSqliteSession.SelectAll(false, Sqlite.SessionOrder_by.sessionID);\n\t\t}\n\t}\n\tprivate void on_button_delete_type_clicked (object o, EventArgs args)\n\t{\n\t\t//if we are deleting a test type\n\t\t//we need to check if there are any tests of this type", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 8, 8)\n        self.assertEquals(b'\\x00' * 8 + b'ij', self.read(o))\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n  <tr>\n    <td>Mac</td>\n    <td>\n      <a onClick=\"return onDownload(this)\" id=\"mac-bundle\" href=\"<?cs var:sdk.mac_bundle_download?>\">\n        <?cs var:sdk.mac_bundle_download?> bytes\n      </a>\n    </td>\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    ax.plot(cr['combined'][app][test]['durations'], label='Individual %s' % (stat))\n    ax.plot([cr['combined'][app][test]['stats']['intervals'][0]['interval'][0],\n             cr['combined'][app][test]['stats']['intervals'][0]['interval", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _FancyEqMixin(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return self.a == other.a\n    def __ne__(self, other):\n        return self.a!= other.a", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\tif(bDrawCheck){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawLine(x + controlSize / 2, y + controlSize / 2", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef getNumTestPatterns(self, short = 0):\n```\n```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Returns the number of test patterns and the number of classes \"\"\"\n  if short == 0:\n    return 100, 10\n  elif short", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        final int elementIndex = index;\n        final int elementOffset = offset;\n        final int elementSize = kind.width.numberOfBytes;\n        final int elementDisplacement = elementOffset - headerSize();\n        final int elementDisplacementIn", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = ResolveFromFolderList(GacCache.GetAssemblyFolders(), relativePath);\n            return assemblyFile;\n        }\n        /// <summary>\n        /// Resolves the assembly reference.\n        /// </", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(string, *args, **kwargs):\n    #... (your code here)\n    return string\n\"\"\"\nUtilities\n\"\"\"\n#... (rest of the code remains the same)\n\"\"\"\nUtilities\n\"\"\"\n#... (rest of the code remains the same)\n\"\"\"\nUtilities\n\"\"\"\n#... (rest of the code", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 =", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t}\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n}", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n```\n\nThe code provided is a JUnit test class for a Java EE application. It uses the CdiUnit framework to run the tests in a CDI (Context and Dependency Injection) environment. The class is annotated with `@RunWith(CdiRunner.class)` to enable CDI support. The `", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['non-existent-command'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        self.assertRaises(subprocess.CalledProcessError, proc.wait)\n    @testlib.with_context\n    def test_popen_returns_correct_returncode(self, context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (insert code here)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grunwald", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the table of this constraint.\")]\n\t\tpublic virtual DataTable Table {\n\t\t\tget { return Table; }\n\t\t}\n\t}\n}\n} // System.Data.Constraint\n```\nThe code is a C# class definition for a System.Data.Constraint object. The class is abstract and has several", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_kernels_groupBox)\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.formLayout_3 = QtWidgets.QFormLayout(self.settings_kernels_groupBox)\n        self.formLayout_3.setLabelAlignment(QtCore.Qt", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.STATION_ID ) );\n            mStationId = stationId;\n            mLastForecast = getTaf( wxs );\n            mLocation = mLocation;\n            mLocation = getStationLocation( wxs );\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts = sf.OpenSession();\n\t\t\t\t//... rest of the test code\n\t\t\t}\n\t\t}\n\t}\n\t}\n} \n}\n```\nThe final answer is:\n\n```csharp\n[Test]\npublic void IncrementQueryExecutionCount_WhenExplicitQueryIsExecuted()\n{\n    using (IStatistics stats", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uint)((uiCRCITTSum ^ (uiCRCITTSum & 0xFF) >> 8);\n                uiCRCITTSum ^= uiByteValue;\n                for (int i = 0; i < 8; i++)\n                {\n                    uiCRCITTSum = (ui", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic static class SentryMode {\n\t\tpublic static final SentryMode CAMOUFLAGE_HP = new SentryMode(\"camouflagEHP\", \"securitycraft:camouflagEHP\", false, true);\n\t\tpublic static final SentryMode CAMOUFLAGE_HP_HP = new Sentry", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new JavaHyperlinkDetector(),\n                new CeylonHyperlinkDetector(),\n                new CeylonNativeHeaderHyperlinkDetector(),\n                new CeylonJavaBackendHyperlinkDetector(),\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(VerticalSpacer(self))\nself.l.addWidget(Object3DProperties.__init__(self))\nself.l.addWidget(Object3DProperties.__init__(self))\nself.l.addWidget(Object3DProperties.__init__(self))\nself.l.addWidget(Object3DProperties.__init__(self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Use location\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Prev\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile.SendGump( new SetPoint2DGump( m_Property, m_Mobile", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String valueChoiceStr = selectConverter.convert(valueChoice);\n                        if (valueChoiceStr.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n               }\n            }\n            else\n            {\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t\tsb.append(\"\\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> line in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the line\n                                int orderIndex = line.Key;\n                                //get the index of the line in the purchase order\n                                int lineIndex = line.Value;\n                                //get the", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n} // namespace System.ServiceModel.Dispatcher\n// Copyright (C) 2005 Novell, Inc.  http://www.novoell.com\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupOwnerId = 1;\n        final int groupMode = 0100;\n        final int groupOwnerId2 = 2;\n        final int groupMode2 = 0200;\n        final int groupOwnerId3 = 3;\n        final int groupMode3 = 0400;\n        final int", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v *", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats(XDRStruct):\n    __slots__ = ['packets', 'bytes']\n    def __init__(self, packets=None, bytes=None):\n        self.packets = packets\n        self.bytes = bytes\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\t#endregion\n\t\t#region \"xml parsing\"\n\t\t/// <summary>\n\t\t/// parses the received xml message\n\t\t/// </summary>\n\t\t/// <param name=\"received_text\">xml message</", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessFitnessThread.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessFitnessThread.ExecutionStatus.Success, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   Class object,'\n  for i in xrange(bind_count):\n    print'   A%d a%d,' % (i, i)\n  for i in xrange(bind_count):\n    print'   A%d a%d,' % (i, i)\n  for i in xrange", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items],\n            mimetype='application/json'\n        )\n    )\ndef range_json(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs) from shoop.admin.views import UserDetailView from shoop.admin.views import UserDetailView from shoop.admin.views import UserDetailView from shoop", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of persisted resources in the assembly.\n    /// </summary>\n    public IEnumerable<IFileReference> Resources {\n      get { return this.ResolvedAssembly.Files; }\n    }\n    /// <summary>\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            for (int i = 0; i < input.Count; i++)\n            {\n                // Precondition the matrix\n                _preconditioner.Precondition(matrix, r);\n                // Initialize the residual\n                d[i] = r[i];\n                // Initialize the residual\n                uodd[i] = r[i", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                for k in range(j + 1, K):\n                    A[j, k] = np.inf\n                v = reference_sets[j]\n                for u in v:\n                    A[j, reference_set_map[u]] = np.inf\n                v = v & reference_sets[j]\n                for u in v:\n                   ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        result = self._test_raw_to_enrich(sortinghat=True, projects=False)\n        return result\n    def test_sortinghat(self):\n        \"\"\"Test SortingHat\"\"\"\n        self._test_raw_to_enrich(sortinghat=True, projects=False)\n    def test_projects(self):\n        \"\"\"Test projects\"\"\"\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar team = slot.Value.Team;\n\t\t\t\t\t\t\t\t\t\t\tvar player = orderManager.LobbyInfo.Slots[team];\n\t\t\t\t\t\t\t\t\t\t\tif (player.Value!= null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar playerWidget = Ui.LoadWidget(\"LOBBY_PLAYER_TEMPLATE\", lobby.Get(\"PLAYER_PANEL", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString() + string.Format(\" NTSTATUS: {0}\", _status);\n\t\t}\n\t}\n}\n}\nnamespace WinrtCifs.Util\n{\n    public class NtStatus\n    {\n        public static readonly int NtStatusUnsuccessful = 0x00000001;\n       ", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes\n    def parse(self, stream_id, flags=None):\n        return self.deserialize(self.serialize(stream_id, flags))\n    def parse(self, stream_id, flags=None):\n        return self.deserialize(self.serialize(stream_id, flags))\n    def parse(self, stream_id, flags=None):\n       ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            var rect = cluster.RectangularBoundary;\n            if (rect == null)\n                throw new InvalidOperationException(\"Rectangular boundary is null\");\n            if (rect!= cluster.BoundaryCurve.BoundingBox)\n                throw new InvalidOperationException(\"Rectangular boundary is not equal to the bounding box\");\n            foreach (var c in cluster.Clusters", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setGravityScale(double gravityScale)\n{\n\tm_gravityScale = gravityScale;\n}\nvoid btKinematicCharacterController::setWalkSpeed (double walkSpeed)\n{\n\tm_walkSpeed = walkSpeed;\n}\nvoid", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null &&!initializers.isEmpty()) {\n            AnnotatedTypeMirror atype = atypeFactory.getAnnotatedType(node);\n            if (atype.hasAnnotation(Unique.class)) {\n                if (node.getTree().getKind() == Kind.EXPRESSION_STATEMENT) {\n                    // If the", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound!= null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1!= null)\n\t\t\t\t{\n\t\t\t\t\tNBTTagCompound nbttagcompound2 = nbttagcompound1.getCompoundTag(\"", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// init return type\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\tContext,\n\t\t\t\t\t\tParentScope,\n\t\t\t\t\t\tCommentXmlDocument,\n\t\t\t\t\t\tCommentXmlDocument.SelectSingleNode(\"return\"),\n\t\t\t\t\t\t\"return\");\n\t\t\t\t\t// init return type value\n\t\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar())\n\t\t\t{\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\tmyTrackBar.Height = 100;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\tmyTrack", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\t//... (rest of the test method remains the same)\n}\nThe code is a test class for the ClassCacheInstrumentation class. It contains several test methods for different scenarios. The test methods are annotated with @Test and contain assertions to verify the behavior of the ClassCacheInstrumentation class. The test methods", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathCache!= null) {\n\t\t\tif (other.pathCache == null)\n\t\t\t\treturn false;\n\t\t\tif (!this.path", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideRExtent[start][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2 = narrowLExtent[end][r.leftChild];\n            int max", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude=pg_data', '--exclude=pg_data',\n                '--exclude=pg_data','src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n```\n\t\t// DbgManager thread\n\t\tvoid DbgProcess_DelayedIsRunningChanged(object? sender, EventArgs e) {\n\t\t\tvar p = (DbgProcess)sender;\n\t\t\tvar state = p.GetOrCreateData<Process", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, \"color\" );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification for the given object.\n\t *\n\t * @param   object  Object to be written.\n\t *\n\t * @return", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null || this.getClass()!= aThat.getClass() ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Object thisId = this.getId();\n\t\tfinal Object thatId = ((Contact) aThat).getId();\n\t\tif ( thisId == null && thatId == null ) {\n\t\t\treturn", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t\tstatus = 'w'\n\t    else:\n\t\tstatus = 'a'\n\t    with open(name, 'a') as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n\t\t  orientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        idx, = cdata[0]\n        if not isinstance(idx, (T.Slice, T.AngularSlice):\n            return\n        # We don't need to check the inputs as we know that the inputs are in the graph\n        # and we know that the shape of the inputs are known\n       ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community instance\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args, **", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _get_query_context(self, query, context):\n    \"\"\"Return the :class:`.QueryContext` object associated with the given\n    :class:`.Query` object.\n    \"\"\"\n    return context\n\ndef _get_query_context(self, query, context):\n    \"\"\"Return the :class:`.QueryContext", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\n            xml_object.set('show', ';'.join(self.show_tag_list))\n```\n```python\n            xml_object.set('show', ';'.join(self.show_tag_list))\n```\n            return xml_object\n    def get_children(self):\n        \"\"\"Return a list of children of this module.\"\"\"\n        return", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis == Axis.ALL:\n                self.current_filter = {}\n            else:\n                self.change_filter(change.axis, change.labels, change.key)\n            self.update_filter(change.axis, change.labels, change.key)\n            self.update_filter(change.axis, change.labels, change.key)\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Method!= null)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Method == null)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method == null)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (Method == null)\n\t\t\t{\n\t\t\t\treturn false", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 48);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(64, 16);\n\t\t\tthis.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, [\"buildbot/changes/freshcvs.py\"])\n        self.assertEqual(c.comments, \"update freshcvs.py to use the new syncmail parser\\n\")\n", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isBlank(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(!isPassiveFlower()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(!world.isRemote) {\n\t\t\tsupertile.getWorld().setBlockState(supertile.getPos(), supertile.getDefaultState());\n\t\t\tsupertile.getWorld().setBlockState(supertile.getPos().offset(EnumFacing", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private float getRepresentativity(Node n, Community c) {\n        return this.getRepresentativity(n, c);\n   ", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the old bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2)", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void computerMenuConnect_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//connect to computer\n\t\t}\n\t\tprivate void computerMenuDisconnect_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//disconnect from computer\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  private PeriodList anICalPeriodListForEvent(EventDetail event) {\n    PeriodList periodList = new PeriodList();\n    if", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t}\n\t#endregion\n\t#region Private runtime methods\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDontSave | HideFlags.HideInInspector;\n\t\ttargetEventBinding.sourceComponent = DataSource.Component;\n\t\ttarget", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName);\n            Status result = switchManager.addSpanConfig(new SpanConfig(config, switchManager));\n            if (result.isSuccess()) {\n                resultBean.setStatus(true);\n                resultBean.setMessage(\"Added span port successfully\");\n               ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images getImages()\n\t\t{\n\t\t\tif(images == null)\n\t\t\t\timages = new Images();\n\t\t\treturn images;\n\t\t}\n\t\tprivate transient ims.framework.utils.Image[] images = null;\n\t\tprivate final class Images extends ims", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setProperties(String[] files) {\n        this.files = files;\n        init();\n    }\n    public void setProperties(String[] files,", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n```\nThis is the start of a new method, which is similar to the `make_naa_annotations` method in the `make_naa_annotations` method. The new method will make NAA annotations for a", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrink  = \").Append(IndentionOptions)\n               .Append(\"\\n\");\n            buffer.Append(\"         .mergecells  = \").Append(IndentionOptions)\n               .Append(\"\\n\");\n            buffer.Append(\"         .indent  = \").Append(IndentionOptions)\n               .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x0080 && ch <= 0x00FF) {\n\t\t\t\t// Latin 1 characters that can be mapped to double-byte code points.\n\t\t\t\t++charCount;\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[b]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[b]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString propName = e.nextElement();\n\t\t\t\tString propValue =", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        public static WorldSettings.GameType getID(int id)\n        {\n            return GameType.values()[id];\n        }\n        public static WorldSettings.GameType getID(String name)\n        {\n            for (WorldSettings.GameType type : values())\n            {\n                if (type", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case to check that the default ACE is removed when the DiscretionaryAcl is set to null.\n\t\t\t// This is a regression test for the bug that was fixed in Mono 2.10.8.\n\t\t\t// The test is not needed in Mono 2.10.", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __run(self):\n    \"\"\"Run the lookup thread\"\"\"\n    self.__thread = AcoustidLookupThread(self.__queue)\n    self.__thread.start()\n    self.__thread.join()\n```\nThis code is part of a class named `AcoustidLookupThread` and is used to start and", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    public static void OnGUI()\n    {\n        // this is called when the window is shown\n        // this is called when the window is shown\n        // this is called when the window is shown\n        // this is called when the window is shown\n        // this is called", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // TODO: implement here\n            }\n        });\n        return rootLayout;\n    }\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(np.linalg.inv(self.symmetry.op_cc[k]), psit_G)\n    def get_count(self):\n        \"\"\"Return number of k-point/spin combinations on this CPU.\"\"\"\n        return self.mynks\n    def get_offset(self):\n        \"\"\"Return offset of k-point/spin combinations on this CPU", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 256));\n        Response response = utk", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\tILBasicBlock block = (ILBasicBlock)child;\n\t\t\t\t\t\t// Add the block to the flatBody\n\t\t\t\t\t\tflatBody.Add(block.EntryLabel);\n\t\t\t\t\t\tforeach (ILNode node in", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll!= ragdoll) {\n\t\t//set the ragdoll state\n\t\tIsRagdoll = ragdoll;\n\t\t//set the delay\n\t\t//if we're going from a non-ragdoll to a ragdoll\n\t\t//we need to set the", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Fracture layer\"\"\"\n    def __init__(self, config={}):\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.surface = ClassFactory(Surface)\n        \"\"\"Surface of the layer\"\"\"\n        self.surface_id =", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter() {\n                public String[] getValues( String label )\n                {\n                    PatternNode pNode = objectVariables.get( label );\n                    if ( pNode == null )\n                    {\n                        return new String[ 0 ];\n                    }\n                    return new SimpleRegexValueGetter( objectVariables,\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    slice_json['rate'] = transform_value_xml_json_to_json(scalar_xml_json)\n    return slice_json\nelif key == 'TRANCHE':\n    comments.append(value)\n    return transform_slice_xml_json_to_json(slices_xml_json)\nelif key == 'type':\n    slice", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setSelected(true);\n            frameToClose = null;\n          }\n          if (SwingUtilities.isRightMouseButton(e)) {\n            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose = null;\n          }\n         ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# Define the functions that we will be using\n#... (rest of the code remains the same)\n```\nThe code is a client for a server that provides various services, such as getting a random light curve, getting a light curve for a specific object, and getting a list of objects. The", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi), Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi));\n    for (int z = 0; z < p.getDepth(); z += 0.1)\n    {\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.update(Db.Table1.TABLE_NAME, ContentValues, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, ContentValues, Db.Table4.ID_GROUP + \" = \" + deleteId, null);\n                }\n                act.finish();\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeHGlobal(m_ptr);\n                }\n            }\n        }\n        public IntPtr Value\n        {\n            get { return m_ptr; }\n        }\n        #endregion\n    }\n}\n    }\n}\n```\nThe code is missing the", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# CORE             #\n#-------------------#\nDEBUG = True\n# Whether to send a 500 error page for internal server errors, or a 500 error\n# page with debug information.\n# DEBUG = True\n# Whether to send", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\t// If we're building a unit, we need to refund the cost of the unit\n\t\t\tvar item = queue[0];\n\t\t\tif (item.Item == null)\n\t\t\t{\n\t\t\t\t// If we're building a building,", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n        \n        if self.activeTreeview==0:\n            self.currentDirInfo.setText(infoText)\n        elif self.activeTreeview==1:\n            self.currentDirInfo2.setText(infoText)\n            \n        self.currentDir", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.env.get(self, r'\\1'), code)\n        self.outputs[0].write(code)\n        self.bld.install_files(self.path, self.outputs)\n    def __init__(self, *k, **kw):\n        self.ext_in = self.ext_out = self.ext_in", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(\"ipa_pars/knowledge/\"+knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 1 ] - 4 * chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx + reactorExtent - 2 ] );\n\t\t\t\t\tidx = y *", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(dateFormatFactory.getTimestampFormat(pattern, timestampFormatConfiguration.getTimestampFormat(dateLocale)));\n                break;\n            case ColumnType.TIMESTAMP:\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdentifier(object component, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetCom", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        xml_str = CE_NC_MERGE_NTP_AUTH_KEYID % (self.key_id, self.auth_type, self.auth_type, self.auth_type, self.auth_type)\n        ret_xml = set_nc_config(self.module, xml_str)\n        self.check_response(ret_xml, \"NTP_AUTH_KEYID_CONFIG\")\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        # Change the child, then check that the parent has been updated\n        child = self.store.get_item(component.location)\n        self.assertEqual(child, self.store.get_item(component.location))\n        # Change the child, then check that the parent has been updated\n        self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0;\n        digest.update((byte) 0);\n        addToCharBuff(ch, start, length);\n    }\n    public void processingInstruction(String data) throws SAXException {\n        digest.update((", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict['start'], dict['end'], dict['step'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['type'], dict['value'])\ndef mkcomparison(dict):\nNext line of code:\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            string typeKey = new HelpPageSampleKey", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_create_line()\n            self.set_cursor(path, column)\n            self.set_value()\n            self.set_cursor(path, column)\n            self.set_value()\n            self.set_cursor(path, column)\n            self.set_value()\n            self.set_cursor(path, column)\n            self.set", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            return beanProperties;\n        }\n        else\n        {\n            // If the bean already references global-properties, we don't need to do anything\n            return null;\n        }\n    }\n    /*\n     * (non", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            lines = f.readlines()\n            if any(line.strip() == '' for line in lines):\n                module.fail_json(msg=\"Password file %s contains blank lines\" % path)\n        finally:\n            f.close()\n    if module.check_mode:\n        return module.exit_json(changed=False, msg=\"Check mode, no", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventId,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventCategory,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventSubType", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        return userDirectoryService.addUserToRole( userId, role );\n    }\n    @Override\n    public EnumSet<Permission> getPermissions() {\n        return EnumSet.of( Permission.READ, Permission.WRITE );\n    }\n    @Override\n    public EnumSet<Permission> getRequiredPermissions() {\n        return Enum", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        if child_elements is None:\n            return True\n        for child in child_elements:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This will check", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tagname(self, node, name):\n    # This is a helper function for getElementsByTagName\n    # It returns a NodeList of all elements with the given name\n    # in the given node\n    rc = NodeList()\n    for child in node.childNodes:\n        if child.nodeType == Node.D", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEM", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to handle the case where the keyLocator is a digest?\n\t\t\t// TODO: Do we need to handle the case where the keyLocator is a digest?\n\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\t// TODO: Do", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for (int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon w = ActiveWeapons.get(i);\n            w.update(delta);\n            if(w.isDead()){\n                ActiveWeapons.remove(i);\n            }\n        }\n        //Updates the active weapons\n        for (int i = 0; i", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( colorValue );\n        GameEngine.model().getGame().join( action );\n        hide();\n        // update game board\n        GameEngine.model().getGame().updateBoard();\n        // update game registration\n        GameEngine.model().getGame().updateRegistration();\n        // update game teams\n        Game", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"error\"])\n    r.read()\n    if r.status == 200:\n        headers = r.info()\n        if \"content-disposition\" in headers:\n           ", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetOrderDetailResponse.Order;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if len(reaction) > 1:\n        raise ValueError(\"More than one metabolite in reaction\")\n    return [met.id for met in reaction]\n    #... (rest of the code remains the same)\n```  #... (rest of the code remains the same)\nThis code is a part of the", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            store__is_locked=False,\n            store__is_deleted=False,\n            store__is_resurrected=False,\n            store__is_submitted=False,\n            store__is_reviewed=False,\n            store__is_commented", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('city', models.ForeignKey(to='events.City')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, primary", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.process_packet(poxpkt, portnum)\n                else:\n                    self.logger.warn(\"Switch {} received ARP request for unknown IP {}->{}\".format(self.name, dstip, srcip))\n            elif poxpkt.payload.opcode == pktlib.icmp.ECHO_REQUEST:\n                self.logger.debug", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (!m_IgnoreChanges) {\n      m_RecentItems.add(item);\n      m_RecentItems = new ArrayList<T>(new HashSet<T>(m_RecentItems));\n      writeProps();\n      notifyRecentItemListenersOfAdd(item);\n    }\n  }\n  /**\n   * Removes the item from the list.\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return false;\n        }\n    }\n}\npublic class ShadowRevealingAction : Mobile.RevealingAction\n{\n    public ShadowRevealingAction(Mobile m) : base(m) { }\n    public override void OnRevealed(Mobile m)\n    {\n        m.SendLocalizedMessage(500814); //", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray LeadingSet(Node p) {\n\t\tBitArray s = new BitArray(Symbol.nonterminals.Count);\n\t\twhile (p!= null) {\n\t\t\tif (p.typ == Node.any", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tBeginAsyncRead();\n\t\t\tLastReadStatus = LastReadStatus.Read;\n\t\t\tLastReadAddress = address;\n\t\t\tLastReadSize = size;\n\t\t\tLastReadBuff = new byte[REPORT_LENGTH];\n\t\t\tLastReadBuff[0] = 0x00;\n\t\t\tLastReadBuff", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = order == SortOrder.DESCENDING? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo obj1, MskJointVo obj2)\n\t\t{\n\t\t\tint result = 0;\n\t\t\tif (obj1!= null)\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetCrashReportPath()\n\t\t{\n\t\t\tstring root = GetRoot();\n\t\t\treturn Combine( root, \"CrashReport.log\" );\n\t\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N1 + N2 + N3; i++)\n            {\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __getitem__(self, name):  # noqa\n    \"\"\"Get a field by name\"\"\"\n    # Add code here\n    return self.fields.get(name)\n```\n\nThis code is a part of the CFME (CloudForms Management Engine) project, which is a web-based interface for managing cloud and virtualized", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( discardWholeBuffer )\n\t\t\t// {\n\t\t\t//     // glBufferData\n\t\t\t// }\n\t\t\t// else\n\t\t\t{\n\t\t\t\tif ( _lockedToScratch )\n\t\t\t\t{\n\t\t\t\t\t// if ( _scratchOffset == 0 && _scratchSize == sizeInBytes", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\ndef __init__(self, session):\n```\nExplanation:\nThe code is a plugin for the Enigma2 media center, which is a Linux-based media center software. The plugin is called \"Satfinder\" and it is used to scan for satellite TV channels. The code is written in Python and uses the", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (optval instanceof String) {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(Arrays.asList(new String[]{(String) optval}));\n            }\n            else if (optval instanceof List) {\n                List<String> filterList = (List<String>) optval;\n                for (String filter", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Copy the data to the output stream\n                for (int i = 0; i < curr.Length; ++i) {\n                    curr[i] = (byte)(curr[i] + i);\n                    if (i == 0) {\n                        curr[i] = (byte)(curr[i] + i", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), None)\ns = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\nself.assertEqual(s.get_interface(), None)\nself.assertEqual(s.get_interface(), None)\nself.assertEqual(s.get_interface(), None)\nself.assertEqual(s.get_interface(), None)\nself.assertEqual(s.get_interface(),", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_cohomology(self, level, position, options):\n    return self.get_E_2_page().get_cohomology(self, level, position, options)\n    def get_cohomology(self, level, position, options):\n        return self.get_E_2_page().get_cohom", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n        }\n        [Test]\n        public void ParseMessageSet()\n        {\n            TestMessageSet.Builder builder = TestMessageSet.CreateBuilder();\n           ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic int size() {\n\t\treturn map.size();\n\t}\n\t@Override\n\tpublic boolean containsKey(Object key) {\n\t\treturn map.containsKey( key );\n\t}\n\t@Override\n\tpublic boolean containsValue(Object value) {\n\t\treturn map.containsValue( value );\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member viewing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\n@api.constrains('pin')\ndef _verify_pin(self):\n    if self.pin and not self.pin.isdigit():\n        raise exceptions.ValidationError(_('The PIN must be a sequence of digits.'))\n```\nThis code is a constraint on the `pin` field of the `hr.employee` model. It checks", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public int Image\n        {\n            get\n            {\n                return sw.SendGetItemRect(index).iImage;\n            }\n            set\n            {\n               ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker = Factory()\n        self.terminator.new_tab(cwd, profile, debugtab, _param1, _param2)\n    def on_destroy_event(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        self.set_urgency_hint(False)\n        self.set_urgency_hint(False)\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    string name = nametypeFragments[1];\n                    string typePart = nametypeFragments[0];\n                    return new StructTypeInfo( name, typePart, managedType, arraySize );\n                }\n                else {\n                    throw new UnknowTypeException( typePart );\n                }\n            }\n            return toReturn;\n", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsValueType {\n\t\t\tget {\n\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type!= null && base_type.Is", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the rules and evidence. The code is written in C# and uses the System.Collections.Generic namespace for the Dictionary and List data structures. The code is a part", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._protocol = protocol\n        self._connection = None\n        self._connection = self._create_connection()\n    def _create_connection(self):\n        return self._protocol.create_connection(\n            self._get_verify_mode(),\n            self._get_verify_depth(),\n            self._get_ciphers(),\n            self._get", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label7 = new global::Gtk.Label ();\n\t\t\tthis.label7.Name = \"label7\";\n\t\t\tthis.label7.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White spaces:\");\n\t\t\tthis.hbox3.Add (this.label7);\n\t\t\tglobal::Gtk.Box.BoxChild w27 = ((global", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.set_current_page(old_num)\n                headbook.set_current_page(new_num)\n                headbook.set_current_page(old_num)\n                headbook.set_current_page(new_num)\n                headbook.set_current_page(old_num)\n                headbook.set_current_page(new_num)\n                headbook.set_current_page(old_num)\n               ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Open-File-Explorer\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_F),\n    \"Open-File-Explorer-Reverse\": QKeySequence(Qt.CTRL + Qt", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", mapping", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editor = getEditor();\n    if (editor!= null)\n    {\n      IFile file = editor.getEditorInput().getFile();\n      if (file!= null)\n      {\n        return file.isReadOnly();\n      }\n    }\n    return false;\n  }\n  \n  protected IAction[] doGetActions(Object", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach.Autosize = true;\n\t\t\tthis.butAttach.BtnShape = OpenDental.UI.enumType.BtnShape.Rectangle;\n\t\t\tthis.butAttach.BtnStyle = OpenDental.UI.enumType", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as getting the marked", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, result);\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        case option_3:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String)java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String javaHome, String resinHome)\n    {\n      if (javaHome!= null)\n        return", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n                for l in self.lines:\n                    if l.startswith('#'):\n                        continue\n                    if l.startswith('%s' % self.ansible):\n                        if l == '%s%s' % (self.ansible, name):\n                            return self._update_job(name, job)\n                        else:\n                            return", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\ndef _to_json_spec(cls, modifier_json, modifier):\n    modifier_json['data'] = modifier.data\n    modifier_json['use_deform'] = modifier.use_deform\n    modifier_json['use_deform_cache'] = modifier.use_deform_cache\n    modifier_json['use_deform_cache_format", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                // if no data for this allele, just use the fraction of total positives for the peptide length\n                double likelihood = minEmptyPepLenLikelihood(peptideLength, totalPositivesCount, totalBuckets);\n                mAlleleLikelihoodMap.put(allele", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.get_packet(self.choice)\n                    self.print_packet(self.packet)\n                except Exception as e:\n                    print(self.fatal+str(e)+self.blp)\n                    self.get_input('...')\n                    self.print_usage()\n                    self.get_input('...')\n                    self.print_usage()\n                    continue\n                except ValueError", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 61);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            this.rptComboBox.SelectedIndexChanged += new System.EventHandler(this.rptComboBox_SelectedIndexChanged);\n            this.rpt", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'to': 'auth.User'}),\n            'document': ('django.db", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n    private void processGlobalAttributes(Schema schema) {\n        processGlobalAttributes(schema.getGlobalAttributes());\n    }\n    private void processGlobalAttributes(java.util.List globalAttributes) {\n        if (globalAttributes == null", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.message_post(cr, uid, ids, 'validate', context=context)\n        self.message_post(cr, uid, ids, 'validate', context=context)\n        return self.write(cr, uid, ids, {'state': 'validate'}, context=context)\n    def holidays_first_validate_notificate(self, cr, uid,", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a part of a larger framework and is used to create a grid that can be used to display business objects. The code is written in C# and is part of the Habanero framework. The", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line: {0} ({1}) - {2}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.szName);\n        }\n    }\n    public enum MixerLineComponentType\n    {\n        /// <summary>\n        /// Undefined\n        /// </summary>\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID());\n\t\t}\n\t\t// If this is a stale object then do not set the value as it is no longer needed\n\t\tif (domainObject.getIsRI", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=self.build_env(),\n            verbose=verbose)\n        if status:\n            return status\n        # Build the servo binary\n        with cd(self.get_target_dir()):\n            status = call([\"cargo\", \"build\"] + opts, env=self.build_env(), verbose=", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getOptimisticScore(new double[] { estP, 0 }, this.getOptimisticScore(new double[] { 0, n }));\n\t\t}\n\t}\n\t@Override\n\tpublic Model learn(ExampleSet exampleSet) throws OperatorException", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                StashedSelectedIndexChanged(this, null);\n            }\n        }\n        private void StashedSelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (Stashes.SelectedItem is not null)\n            {\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=24,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope other = (AuthScope) o;\n        return this.match(other) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s;\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"many\" : \n\t\t\t\t\tMany = (bool)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"required\"", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\n    archive_index = load_archive_index(args.index_file)\n```\nThis line of code is used to load the archive index from the given file path. The `load_archive_index` function is defined in the `load_archive_index` function in the `encrypted_archive_index` module. This function is used to", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.state = 'IDLE'\n        self.cmd_str = ''\n        self.cmd_str = self.cmd_str + self.cmd_str\n        self.cmd_str = self.cmd_str +''\n        self.cmd_str = self.cmd_str + self.cmd_str\n        self.cmd_str = self.cmd_str +''\n        self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_1;\n          limit_backward = cursor;\n          return false;\n        }\n        // (, line 201\n        // (, line 201\n        // (, line 201\n        // (, line 201\n        // (, line 201\n        // (", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls!= null)\n                {\n                    o = cls.newInstance().read(dins);\n                    if (o == null)\n                        System.out.println(\"null object\");\n                    else\n                        cd.nreceived++;\n                }\n                else\n                    System.out.println(\"unknown channel: \"+cd.fingerprint);\n                if (cd", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            return None\n    def _get_key_usage(self):\n        # The extension is not critical, so we can't use the extension\n        # to get the key usage. Instead, we have to parse the extension\n        # manually.\n        ext = self.cert.get_extension_count()\n        result", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tfor (%s; i!= _slots.end(); ++i) {\" % comma_separated([\"++i\", \"++i\", \"++i\"])\nprint(\"\\t\\t\\t\\tif (i->first->signal_ == this) {\")\nprint(\"\\t\\t\\t\\t\\t/* We are", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #     -- The first value is the first value of the interval\n    #     -- The second value is the last value of the interval\n    return [X, X]\ndef do_sm(sm):\n    \"\"\"Splits the state machine into a list of state transitions. The state machine is\n       modified in", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\twhile (StartOf(7)) {\n\t\t\t\tSym(out sym);\n\t\t\t\tif (StartOf(9)) {\n\t\t\t\t\tGet();\n\t\t\t\t\twhile (StartOf(10)) {\n\t\t\t\t\t\tGet();\n\t\t\t\t\t}\n\t\t\t\t\tExpect(27);\n\t\t\t\t} else {\n\t\t\t\t\tSynErr(46);\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            # force the product_id to be the product_id of the product\n            edi_doc = self._edi_import_product(cr, uid, edi_doc, context=context)\n            # force the product_uom to be the product_uom of the product\n            edi_doc = self._edi_import_product_uom(cr,", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpService, httpService, httpService, httpService, httpService,", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n            return nameMap;\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUpTestPermissions();\n        List<PermissionEntry> permissions", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device.subsystem is not None\n    def test_list_devices_with_match_subsystem", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\nimport HttpUtils\nfrom HttpUtils import App, buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                elif (index_elements[0] == \"Antennas\"):\n                    # We have a new source.\n                    src = { 'name': index_elements[1], 'calcode': index_elements[2], 'ra': float(index_elements[3]), 'dec': float(index_elements[4]) }\n                    rd", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n        public virtual void OnItemPropertyInvalidate()\n        {\n            base.OnItemPropertyInvalidate();\n            if (m_Keys.Count == 0)\n            {\n                base.Delete();\n            }\n        }\n        public virtual void OnItemPropertyInvalidate()\n        {\n            base.On", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added\n            String model = \"\";\n            if (liveModelMap!= null && liveModelMap.containsKey(device)) {\n                model = \"\" + liveModelMap.get(device", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.PIN_OPT_OUT) {\n      jobs.put(Version.PIN_OPT_OUT, new PinOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.SYSTEM_AVATAR) {\n      jobs.put(Version.SYSTEM_AVATAR, new SystemAvatarMigrationJob());\n    }\n   ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.error(\"RegexNER mapping file has a line with less than 2 arguments: \" + line);\n        continue;\n      }\n      // log.info(\"LINE = \" + line);\n      // log.info(\"LINE = \" + line);\n      // log.info(\"", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for abspath in sub_path[include[1]]:\n                if os.path.exists(abspath):\n                    return (include[1], abspath)\n            # if not, try the path in env['TEXINPUTS']\n            for abspath in sub_path[include[1]]:\n                if os.path.exists(abspath", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\nclass _Symbol(Symbol,_injector):\n    def __init__(self, *args, **kwargs):\n        Symbol.__init__(self, *args, **kwargs)\n    def __repr__(self):\n        return \"", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def _set_destination(self, destination):\n    if self.want.port is None:\n        self.want.update({'port': destination.split(':')[1]})\n    if self.want.ip is None:\n        self.want.update({'ip': destination.split(':')[0]})\n    return self.want\ndef set_destination(self, destination):\n    if self.want", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n        this._config = new ConfigLoader", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = self.client.post(reverse(\"update_thread\", kwargs={\"thread_id\": \"dummy\", \"course_id\": unicode(self.course.id)})\n            self.assertEqual(response.status_code, 400)\n            self.assertTrue(mock_request.called)\n            self.assertEqual(mock_request.call_count, 1)\n            self.assertEqual(mock_request.call_args[", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsShlink(target, source, env, for_signature):\n    \"\"\"Shared library emitter for Windows.\"\"\"\n    return windowsShlink(target, source, env, for_signature)\ndef windowsLdmod(target, source, env, for_signature):\n    \"\"\"Loadable module emitter for Windows.\"\"\"\n    return _dllTargets(target", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job.getJobManager().beginRule(null);\n            List resources = new ArrayList();\n            resources.addAll(getSelectedResources());\n            IStatus result = execute(resources, new ProgressMonitorWrapper(getShell()));\n            if (result.isOK()) {\n                return;\n            }\n            displayError(result.getMessage());\n        } catch (CoreException", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Long[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\treturn true;\n\t}\n} \n``", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            else if (smaxtime.Contains(\"s\"))\n                maxtime = TimeSpan.FromSeconds(dmaxtime);\n            else if (smaxtime.Contains(\"m\"))\n                maxtime = TimeSpan.FromMinutes(dmaxtime", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            logging.info(\"Guest is running after resume\")\n        else:\n            raise exceptions.TestFail(\"Guest is not running after resume\")\n    def _session_close(self, session):\n        try:\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        final Callable<Boolean> sub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                ZMQ.Context context = ZMQ.context(1);\n                ZMQ.Socket socket = context.socket(SocketType.SUB);\n                socket.setReceiveTimeOut(3000);\n                socket.bind(\"tcp://", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).onSendRequest(r, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing dnlib.DotNet;\nusing dnlib.DotNet;\nusing dnlib.DotNet.MD;\nusing dn", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(ExtractHere(au_flags=au_flags, descr=descr, original_path=original_path, refresh=refresh)\n        self.fm.thisdir = self.fm.thisdir\n        self.fm.thisfile = self.fm.thisfile\n        self.fm.execute_console(self.line)\n        self.fm.execute_file", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringStringString ()\n\t\t{\n\t\t\t// Add code here\n\t\t}\n\t}\n}\n// The following class is used to test the Activator.CreateInstance overload that takes a string and a string and a string\npublic class ActivatorTestStringStringString : COMTest\n{\n\t//", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        pl = Locale.objects.get(code='pl')\n        self._setup(locale=pl, after=Action.ACCEPTED, before=None)\n        self.assertEqual(repo.changesets.count(), 2)\n        self.assertEqual(repo.changesets.count(), 2)\n        self.assertEqual(repo.changesets.count(), 2)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"userstate : %s\", userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            cmd.response = True\n            self.commands(PYMUMBLE_CLBK_USERSTATE,", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new PlayerGroupUpdateEvent(group, player));\n        }\n    }\n    private static class PlayerGroupInvite {\n        private final Player inviter;\n        private final Player invited;\n        public PlayerGroupInvite(Player inviter", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if colsz is not None:\n            if isinstance(colsz, dict):\n                for c in range(self.ncols):\n                    if c in hidden_c:\n                        continue\n                    if c in hidden_c:\n                        self.toks = self.toks[:self.ncols]\n                        self.toks.append((Token.Hide,", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _setup_column(self, index, model_value):\n    column = self._column_class(index)\n    tree_model = self._create_tree_model()\n    tree_model.add(self._create_tree_store(index, model_value))\n    return column, tree_model, tree_model.get_iter_first()\ndef _create_tree_model(self):\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\t((Grid) parent).addColumn(column);\n\t    }\n\t} while (parent!= null);\n\treturn Tag.EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn Tag.EVAL_PAGE;\n    }\n    @Override\n   ", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    }\n                    nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                    Dialog = new DialogEntry();\n                    for (int i = 0; i < nl.Count; i++) {\n                        XmlNode n = nl[i];\n                        Dialog.Add((DialogID)Enum.Parse(typeof(DialogID), n.Attributes[\"ID\"].InnerText,", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t}\n\t\t\t\tfrom.SendLocalizedMessage( 1072677 ); // You have been given the keys to the realm!\n\t\t\t\tfrom.SendLocalizedMessage( 107267", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n// EOJ\n// EOJ\n// EOJ\n// EOJ\n// EOJ\n// EOJ\n//", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(7, new int[]{6, 18, 28, 32, 34, 36, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = new byte[32];\n\t\t\tpb = kdf.ComputeHash(pb, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// Computed using the official Argon2 reference", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to the player.\n\t * @param manaToDispatch How much mana is to be sent.\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nThis is the next line of code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount));\n\t\t\t// Add the frame to the end of the queue\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\tQueue<Layer> queue = new Queue<Layer> ();\n\t\t\tqueue.Enqueue (NextFrame", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = p.readInt();\n            dc.type = p.readInt();\n            dc.time = p.readInt();\n            dc.isMpty = p.readInt();\n            dc.isMultiparty = p.readInt();\n            dc.isVideo = p.readInt();\n            dc.earliestConnection = p.readInt();\n            dc.latestConnection = p.readInt", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int n = y * xSizeP + x;\n                // Set position\n                Vector3 pos = new Vector3((x - 0.5f) * 2f + leftBottomCorner.x, (", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t// The API method \"add\" is used for connection testing\n\t\t\t// The \"add\" method is expected to return a string containing the result of the call\n\t\t\t// The result of the call is expected to be a string containing the value of the \"testInt1\" parameter\n\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t}\n\t\t@Override\n\t\tpublic void setBlockSelection(int i, int i1)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic void setBlockSelection(int i, int i1, int i2)\n\t\t{\n\t\t}\n\t\t@Override\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static class ExportedObject {\n        public int identifier;\n        public Object object;\n    }\n    private static class Export", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n            }\n            /* Draw the console stuff */\n            pixel_x = 0;\n            pixel_y = 0;\n            /* Draw a sight */\n            drawgfx(bitmap, Machine", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position) <= spell.Range &&\n                                        minionPrediction.Hitchance >= spell.MinHitChance)\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            result.Add(minion);\n                        }\n                    }\n                    return result;\n                }\n            }\n            return new List<Obj_AI_Base>();\n        }\n        public", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.isInducedPath(x, y);\n    }\n    public static boolean existsInducingPathInto(Graph graph, Node a, Node b, Node c) {\n        if (graph.isAdjacentTo(a, b) && graph.isAdjacentTo(b, c)) {\n            return true;\n        }\n        return", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public virtual void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        m_Item = mobiles[i];\n                        m_Item.RevealingAction();\n                        m_Item.Delete();\n                    }\n                }\n                public override void Stop()\n                {\n                    base.Stop();\n                    m_Item = null;\n                }\n                public override void Start()\n                {\n                    base.Start();\n                    m_Item = new InternalItem", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (user.AccessLevel < Access)\n\t\t\t{\n\t\t\t\tif (message)\n\t\t\t\t{\n\t\t\t\t\tInternalMessage(user, \"You do not have sufficient access to", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailComponentIds(String sComponentId, String sUserId) {\n    return mock.getAvailComponentIds(sComponentId, sUserId);\n  }\n  @Override\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), \"ZipDialog\");\n                    return true;\n                case R.id.actiondetails:\n                    for (int", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.preparing = false;\n    this.channel = null;\n    this.l = null;\n    this.preparing =", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                z_arr = np.array([z_dict[z_key][per])\n                z_arr[0, 0] = z_arr[0, 0] + 1j*z_arr[0, 1]\n                z_arr[1, 0] = z_arr[1, 0] + ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceTwo);\n    }\n  }\n  public static @Nullable String getIdentityKeyDescription(@NonNull Context context, @NonNull List<Recipient> recipients) {\n    if (recipients.isEmpty()) return null;\n    if (recipients.size", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = path.pathsep.join(extra_path + [env[\"PATH\"]])\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = path.pathsep.join(extra_lib + [env[\"LD_LIBRARY_PATH\"]])\n        if self.config[\"tools\"][\"rust-root\"]:\n            # This is for when rust", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(self._data):\n    for test in test_list:\n        if test[\"type\"] == test_type:\n            tests.append(test)\n        elif test[\"type\"] == \"reftest\":\n            reftests.append(test)\n        elif test[\"type\"] == \"reftest", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            return 0;\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True if we can timeout, false otherwise</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotSupportedException();\n        }\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        grad_Etf = grad_var[i]\n        grad_Etf = grad[i]\n        grad_Etf = grad_Etf - grad_var\n        transformed_grad.append(grad_Etf)\n      transformed_grad = np.array(transformed_grad)\n      return transformed_grad\n  def un", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(caseInsensitive)\n\t\t{\n\t\t\treturn this.id.toString().toLowerCase().compareTo(obj.toString().toLowerCase());\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.id.toString", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 2);\n    }\n    @Test\n    public void shouldThrowEventWhenUpdatingStack() throws Exception {\n        final StackImpl stack = stacks[0];\n        stackDao.update(stack);\n        final StackDaoTestEvent event = eventService.waitForEvent(StackDaoTestEvent.class, 1000", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParamName(\"depth\");\n        depthParameter.setParamValue(String.valueOf(depth));\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParamName(\"exclusion", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t{\n\t\t\t\t// [..] is a special case\n\t\t\t\tif (sub == \"..\")\n\t\t\t\t{\n\t\t\t\t\t// [..] is a special case\n\t\t\t\t\tif (candidate.Kind == LNodeKind.List)\n\t\t\t\t\t{\n\t\t\t\t\t\t// [..] matches a list of nodes\n\t\t\t\t\t\tforeach (", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        extendedWillHit = MinionManager.GetMinions(shadows.Position, q.Range).Count();\n                        break;\n                    }\n                    else\n                    {\n                        extendedWillHit = MinionManager.GetMinions(shadows.Position, q.Range).Count();\n                    }\n                }\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.ContextMenuFactory.instance().createMenuStart(context, factory.getUIEngine(), factory.getTheme());\n\t}\n\t\t// Grid Controls\n\t\tthis.grdResultGrid = factory.getUIEngine().createGridBridge(new ims.framework.controls.GridControl(), new ims.framework.controls.GridRow(0), new ims", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall the Python prerequisites.\n\"\"\"\n\"\"\"\n@task\n@timely\ndef install_python_prereqs():\n    # Install the Python prerequisites\n    for req_file in PYTHON_REQ_FILES:\n        pip_install_req_file(req_file)\n\"\"\"\n\"\"\"\n@task\n@timely\ndef install_python_prereqs():\n    #", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "            'name': \"Parent\"\n        })\n        with self.env['test_testing_utilities.parent'].Form(r) as f:\n            with f.subs.edit(index=0) as s:\n                self.assertEqual(s.name, \"Parent\")\n                s.name = \"Parent2\"\n                self.assertEqual(s.name, \"Parent2", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, 2)\n    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int newStartingIndex,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            testXMLDocument(writer.toString());\n        }\n    }\n    public void testXMLDocument() throws Exception {\n        Object objectToWrite = getWriteControlObject();\n        XMLMarshaller marshaller = createMarshaller", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  width: {0}\", ide.width);\nConsole.WriteLine (\"  height: {0}\", ide.height);\nConsole.WriteLine (\"  colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  bytesInRes: {0}\", ide.bytesInRes);\nConsole.WriteLine (\"  imageOffset: {0}\",", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                l.successors = l.successors;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null)", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(ptr_of_this", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition.add(\"Inside\");\n\t\t\tcomboLabelPosition.add(\"Outside\");\n\t\t\tcomboLabelPosition.select(0);\n\t\t}\n\t\tprivate Position getPosition() {return settingsSeries.getSeriesLabelPosition();}\n\t\tprivate void", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode!= null) {\n                DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName);\n                populateNode(databaseNode, node);\n                if (treeModel!= null) {\n                    treeModel.reload(databaseNode);\n                }\n                if", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            self.pool = self.env['hr.payslip']\n            self.employee_id = self.employee_id\n            self.localdict = localdict\n            self.localdict['categories'] = self.env['hr.contract.category']\n            self.localdict['rules'] = self.env['hr.payslip.rule']\n            self.local", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin), np.log(mmax), mspace)\n        #marr = np.exp(lnmarr).astype(np.float64)\n        #marr = marr * rcrit", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public void addModelListener() {\n        if (properties!= null) {\n            for (String property : properties) {\n                addModelListener(property);\n           ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='right_triangle',phi=np.pi/2,dr=[0,0,0]):\n        #flag 'right_triangle' means the p2 is the middle point of the edge\n        #flag 'off_center' means the", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsLoaded)\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Show();\n\t\t\t}\n\t\t}\n\t\tprivate void ShowHideWindow(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window == _securities", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n            params[0]['bins'].append(params[0]['low'] + i * step)\n            params[0]['low'] = params[0]['low'] + step\n            params[0]['high'] = params[0]['low'] + step\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getReference());\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.getQueryId().equals(queryId)) {\n                    return query;\n                }\n            }\n            return null", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im1.convert(\"L\", rgb2r)\n            h1 = im1L.histogram()\n        else: \n            #im1.mode == \"L\":\n            h1 = im1.histogram()\n        # compute the transform\n        # compute the histogram of image 0\n        # compute", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[] aid) {\n\t\tapp.setProperty(SPEC.PROP.APPLICATION_ID, aid);\n\t}\n\tprotected void", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Block of type %u\" % self[\"block_type\"].value\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDesc(self):\n        return self._description\n    def createDesc(self):\n        return self._description", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is a property change event that is fired when the connection state\n\t * changes.\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Connected: \" + connected;\n\t}\n\t/**\n\t * This is a property change event that", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, a in self.apps:\n            if path.startswith(p):\n                return a(environ, start_response)\n        return self._not_found(environ, start_response)\n    def _not_found(self, environ, start_response):\n        \"\"\"Return 404", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, sys.argv[ 2 ] )\n\t\tmodel.score()\n\t\tprint \"Model score = %s\" % model.score()\n\telif len( sys.argv ) == 2 :\n\t\tdata =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n```\nThe final answer is: \n\n```csharp\npublic static void CheckResult(ref EnhanceResult res, int chance)\n{\n    if", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Create a field component for each enumeratedValue\n            for child in self.iterelements(enumeratedValue):\n                # Create a field component for each enumeratedValue\n                field = self.parse_field(child)\n                if field is not None:\n                    self.add_child(C, field)\n            # Create a field component", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (alModules.Count > 0)\n            {\n                for (int i = 0; i < alModules", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int i = 0; i < this.trianglesUsed[textureHash]; i++)\n                {\n                    if(i == 0)\n                    {\n                        this.vertexBuffer = this.vertexArray[textureHash];\n                        this.colorBuffer = this.colorArray[textureHash];\n                        this.texCoordBuffer = this.tex", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\ndef require_staff(request):\n    \"\"\"\n    Helper function to check if the user is a staff member.\n    \"\"\"\n    if not has_access(request.user,'staff'):\n        return HttpResponse('You are not a staff member", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.IdleSince > now.AddMinutes(-1))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n    }\n}\n} \n``", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    return _round_poles(center, units, p, crs)\n```python\ndef _round_poles(center, units, p, crs):\n    \"\"\"Round center to the nearest pole if it is close to the pole.\n    \"\"\"\n    # Check if center is a list or a tuple.\n    if", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n```\nThe code is incomplete. The code is a part of a game server, specifically a Lineage II server. The code is written in Python and uses the Jython library. The code is for a quest called \"StolenDignity", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)seconds1.Value / 60);\n\t\t\t\t\tdouble? nullable1 = this.Seconds;\n\t\t\t\t\tint num3 = (int)Math.Floor((double)nullable1.Value - (double)num2);\n\t\t\t\t\tdouble?", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _attributes.Add(new AttributeInfo(this, \"position\", 0, 3, 0, 0, VertexAttribPointerType.Float));\n            _attributes.Add(new AttributeInfo(this, \"color\", 0, 4, 0, 0, Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tif(beans.get(x) instanceof ims.oncology.configuration.vo.TumourGroupListVo)\n\t\t\t{\n\t\t\t\tcoll.add((ims.clinicaladmin.vo.TumourGroupListVo)beans.get(x));\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t}\n\t\t\t\treturn current;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Highlights a section of lines\n\t */\n\tpublic Rectangle setHighlightedLines(int[] cx, int[] cy, int[] cx2, int[] cy2, int[] cx3, int", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.startAnimation(controller);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Category = cmbPPartnerInterestInterestCategory.GetSelectedString();\n            ARow.Interest = cmbPPartner", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.addWindowToDataset(pssm, i, protein.getStructure());\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset.\n\t * \n\t * @param pssm", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
