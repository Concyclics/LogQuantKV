{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\t((PlayerMobile)p.Players[j].Mobile.CloseGump( types, defs );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void Close", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Read some frames\n        buff = a.read_frames(1024)\n        # Seek to the beginning\n        a.seek(0)\n        # Read some frames\n        buff2 = a.read_frames(102", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_upload_subtitles(self):\n    return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    # Add the following methods to the class\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def displays_upload_subtitles(self):\n        return self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:color\", olStyle.getColor());\n\t\t\t\t\twriter.addAttribute(\"ol:opacity\", olStyle.getOpacity());\n\t\t\t\t\twriter.addAttribute(\"ol:visible\", olStyle.getVisible());\n\t\t\t\t\twriter.addAttribute(\"ol:legend\", olStyle.getLegend());\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(dbname)\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select distinct category from questions\")\n    ret = []\n    for r in dbconn.fetchall():\n        ret.append(r[0])\n    return ret\n    dbconn", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 3:\n                    mob.CloseGump(typeof(SR_Gump));\n                    mob.SendGump(new SR_RunebookPrompt(RuneAcc));\n                    break;\n                case 4:\n                    mob.CloseGump(typeof(SR_Gump));\n                    mob.SendGump(new SR_RunebookPrompt(RuneAcc", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(\"  \" + cert.getSubjectDN());\n                s.println();\n            }\n            s.println();\n            s.print(\"  \");\n            for (byte[] cert : encodedChain) {\n                s.print(\"Certificate length = \" + cert.length + \", \");\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\tRedButton btnAlchemize = new RedButton(Messages.get(Alchemize.class, \"alchemize\") {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        response = self.server.dispatcher.dispatch(request, environ['PATH_INFO'])\n        self.send_response(200)\n        self.send_header('Content-type', 'text/xml')\n        self.end_headers()\n        self.wfile.write(response)\n        return\n    def do_GET(self):\n        return self.do_get(self.path)\n    def", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    self.statuses = self.base.get_statuses(self.account_id, self.id_, self.last_id)\n    self.statuses = self.base.get_statuses(self.account_id, self.id_, self.last_id)\n    self.status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return self.get_process_data(UploadFile, {\n                \"login\": login.decode('UTF-8'),\n                \"password\": password.decode('UTF-8'),\n                \"params\": byte_to_unicode_dict(params),\n                \"session\": byte_to_unicode_dict(session)\n            })\n        except Exception as e:\n            result =", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tIPermission c = a.Union (b);\n\t\t\tAssert.IsTrue (c is ZoneIdentityPermission);\n\t\t\tAssert.IsTrue (c is SecurityPermission);\n\t\t}\n\t}\n} // class ZoneIdentityPermissionTest\n} // namespace MonoTests.System.Security.Permissions\n// Copyright (c) 2004 Nov", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_trust_manager(ca_certs, ca_certs_trust_manager, ca_certs_trust_manager2):\n    trust_managers = [ca_certs_trust_manager, ca_certs_trust_manager2]\n    return CompositeX509TrustManager(trust_managers)\ndef _get_com", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        request.setAttribute(\"domain\", domain);\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n        request.setAttribute(\"domainAdmin\", domainInfo.getAdmin());\n        request.setAttribute(\"domainAdmin\", domainInfo.getAdmin());\n        request.setAttribute(\"domainAdmin\", domainInfo.get", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__data_pump = asyncio.StreamWriter(\n            self.__datastream_address,\n            loop=self.__event_loop)\n        self.__data_pump.__datastream_fd = os.open(\n            self.__datastream_address, os.O_RDWR | os.O_CREAT |", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tstring jump = (string) store.GetValue (iter, 1);\n\t\t\t\t\tstring jumpPercent = (string) store.GetValue (iter, 2);\n\t\t\t\t\tstring jumpKg = (string) store.GetValue (iter, 3);\n\t\t\t\t\tstring jumpKgNew = (string", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        MessageResources resources = getMessageResources(application, request);\n        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n```\nThe code is a data management system for a Minecraft plugin. It has several data storage methods, including temporary data, timed data, and server data. The code is written in Java and uses the CensoredLib library for data storage and retrieval", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG, \"Show mini mode dialog\",\n\t\t\t\t\t\tgetFieldEditorParent()));\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n            protected override void OnTargetFinish(Mobile from)\n            {\n                m_Owner = null;\n                base.OnTargetFinish(from);\n            }\n            protected override void OnTargetCancel(Mobile from)\n            {\n                m_Owner = null;\n                base.OnTargetCancel(from);\n            }\n            protected override void", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t//... (rest of the code remains the same)\n\t}\n\t/**\n\t * Returns a pretty-print String representation of the given IR.\n\t * @return a pretty-print String representation of the given IR.\n\t */\n\tpublic static String prettyPrint(IR ir) { \n\t\treturn prettyPrint(ir, 0", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \n```python\nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  It is not intended to be used directly.\n    \"\"\"\n    def __", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n// End of class MultiView\n// End of namespace System.Web.UI.WebControls\n// End of file System.Web.UI.WebControls.MultiView.cs\n```\nThe code is almost complete, but there is a small issue with the `UpdateViewVisibility` method. The", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Downloading {0} {1} {2} {3}'.format( lat1, lat2, lon1, lon2 )\n\n# I have removed the line that was causing the bug. The line was:\n# self.REMAINING_INTERVALS = self.INTERVALS[:]\n# This", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                }\n                // = SkillGroup3 replace SkillGroup3\n                if (mod == 41)\n                {\n                    if (item is BaseJewel)\n                    {\n                        BaseJewel i = item as BaseJewel;\n                        if (i.SkillBonuses.GetBonus(0) > ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds.append({\n            'platform': 'os_windows',\n            'locale': locale,\n            'locale_pretty': locale,\n            'locale_pretty_short': locale,\n            'locale_pretty_long': locale,\n            'locale_pretty_short': locale,\n            'locale_pretty_long': locale,\n            '", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tList<TStateBean> stateBeans = StatusBL.loadByProjectTypeIssueType(projectID, issueTypeID);\n\t\t\tif (stateBeans!=null &&!stateBeans.isEmpty()) {\n\t\t\t\tstateBeansList = new ArrayList<TStateBean>(stateBeans", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax invocation && invocation.Expression is IdentifierNameSyntax identifier && memberList.Any( m => m.Identifier.Text == identifier.Identifier.Text )) {\n                    toReplace[argument] = argument.WithExpression(SyntaxFactory.IdentifierName(identifier.Identifier.Text));\n", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        self._update_partition_id(0)\n        # Set to second group configuration.\n        self._update_partition_id(1)\n        # Verify that the children are updated.\n        self._assert_children(2)\n    def test_create_split_test(self):\n        \"\"\"\n        Test that a split_test module is created with the", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference cidRef = null;\n            PdfIndirectReference fontRef = null;\n            PdfIndirectReference toUnicode = null;\n            PdfIndirectReference fontDescriptor = null;\n            PdfIndirectReference fontDescriptorRef = null;\n            PdfIndirectReference fontDescriptorRef2 = null;\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// place the cell at the top\n\t\t\t\t\t\t\tcgn.x = 0;\n\t\t\t\t\t\t\tcgn.y = 0;\n\t\t\t\t\t\t\tcgn", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        return bitmap;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try {\n        return loadPageFromStream(model.getSprite());\n      } catch (IOException e) {\n        throw e;\n      }\n    }\n    private Bitmap loadPageFromStream(EmojiPageModel.Sprite sprite) throws IOException {\n     ", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                // Command history down\n                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Not implemented.\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It is a view that is displayed when a user navigates to the details of a Node object. The view has a property `is_displayed` that checks if the view is currently displayed. The view also has a property `title` that", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\t\tlistener.onSequence(timestamp, getCurrentSequence());\n\t\t\t}\n\t\t}\n\t\tpublic void notifyPoseListeners(BigInteger timestamp, FlSkeleton skeleton) {\n\t\t\tfor (IJSequence", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                base.Render(writer);\n            }\n            else\n            {\n                writer.Write(\"<div style=\\\"display:none;\\\">\");\n                base.Render(writer);\n                writer.Write(\"</div>\");\n            }\n        }\n    }\n}\n#endregion\n```\nThe code is missing the implementation of the `ToolbarButton` class. The `ToolbarButton`", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\tcompound.setInteger(\"Damage\", damage);\n\t}\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\tcompound.setInteger(\"Damage\", damage);\n\t}\n} \nPlease complete the code", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // Static methods\n    /**\n     * Create a new <code>Effect</code> with the given probability and\n     * scopes.\n     *\n     * @param probability The probability.\n     * @param", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n    i = store.handle_indicators", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_x, ref_y):\n    \"\"\"\n    Plot a waveform at a given time index.\n    :param x: Echo sample index\n    :param y: Waveform\n    :param ref_x: Reference echo sample index\n    :param", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.TryGetValue(path, out _))\n                {\n                    _logger.Debug(\"Ignoring path {0} as it's being watched for changes\", path);\n                    continue;\n                }\n                if (ignored.TryGetValue(rootFolder, out _))\n                {\n                    _logger.Debug(\"Ignoring path {0} as it's being", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, internalMap.computeIfPresent(key, transform(remappingFunction)));\n\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.merge(key, write(key, value),", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            resbrain = resbrains[0]\n            contobj = resbrain.getObject()\n            contobj = aq_inner(contobj)\n            if contobj.is", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = (sbyte)value; }\n\t\t}\n\t}\n\tpublic class TileList : List<Tile>\n\t{\n\t\tpublic TileList()\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get channel_uri\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri: {1}\", scene.RegionInfo.RegionName, channelUri);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri:", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs e) {\n\t\t\tDialogResult=DialogResult.Cancel;\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Read the lines of data.\n        data = []\n        for line in file_handle:\n            # Split the line into columns.\n            cols = line.split(',')\n            # Add the columns to the data list.\n            data.append(cols[4:])\n        # Convert the data to a numpy array.\n        data_array =", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    group_id = data_dict['group_id']\n    group = model.Group.get(group_id)\n    if not group:\n        return {'success': False,'msg': _('Group not found')}\n    return", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = confidences[resultIndex];\n\t\t\t\tdouble confidence = conf;\n\t\t\t\tdouble predictedLabel = exampleSet.getAttributes().getLabel().getMapping().map(exampleSet.getLabel());\n\t\t\t\tdouble predictedConfidence = exampleSet.getAttributes().getLabel().getMapping().map(exampleSet.getConfidence());\n\t\t\t\t// updating", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n        #region Properties\n        /// <summary>\n        /// Gets a flag which indicates whether the provider supports\n        ///             <see cref=\"M:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.AddTranslationUnits(Sdl", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            codePoint = ch;\n            if (Character.isSurrogate(ch) && Character.isHighSurrogate(ch)) {\n               _range = new IntRange(_range);\n               _range.add(codePoint);\n               return _range.match(string, strlen, offset, state);\n            }\n        ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        if (studyFormName.equals(IActionConstants.TRUE)) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (studyFormName.equals(IActionConstants.FALSE)) {\n            return ValidationResults.REQUIRED_FAIL", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendData(newConn.Socket, new ServerOrder(\"ServerError\", message).Serialize());\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.MaxPlayers <= 0)\n\t\t\t\t{\n\t\t\t\t\tvar message = \"Server requires at least one player\";\n\t\t\t\t\tSendData(newConn.Socket, new Server", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n} \n//EOE\n```\nThe code is a Java class that extends `ims.vo.ValueObjectCollection` and implements `", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelif prnum == '': \n    dialog = xbmcgui.Dialog()\n    dialog.ok('Error', '", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\ndef getPlotData( self ):\n  try:\n    params = self.__parseFormParams()\n    if not params[ 'OK' ]:\n      return params\n    pD = params[ 'Value' ]\n    repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        catalog.getClusters().get(\"cluster\").getDatabases().get(\"database\").getProcedures().get(\"basename\").getStatements().get(\"stmt-0\").getPlan();\n        // Update the current plan\n        m_currentPlan = m_currentPlan = new CompiledPlan(plan);\n        return plan.getPlan();\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(59, 64);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n\t\t\tthis.textBox2.Size = new System.Drawing.Size(100, 20);\n\t\t\tthis.textBox2", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.Parity = (uint)parity;\n\t\t\tdcb.StopBits = (uint)bits;\n\t\t\tdcb.fDtrControl = (uint)dtr;\n\t\t\tdcb.fRtsControl = (uint", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    # This test is a bit of a hack, but it's the best way to test the\n    # cobranding functionality.  We create a cobrand, then make sure\n    # that the user can see the cobrand's profile page.\n    cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    args = parser.parse_args()\n    if args.configfile is None:\n        write_config_file = True\n    else:\n        write_config_file = False\n    if write_config_file:\n        write", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tcurrentListIndex = self[\"list\"].getSelectionIndex()\n\t\t\tcurrentListIndex = currentListIndex\n\t\t\tcurrentListIndex = currentListIndex\n\t\t\tcurrentListIndex = currentListIndex\n\t\t\tcurrentListIndex = currentListIndex\n\t\t\tcurrentListIndex = currentListIndex\n\t\t\tcurrentListIndex = current", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum)\n                    fCode = fCode + GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (textAlignment == Element.ALIGN_CENTER)\n                    fontX = fontX / 2;\n                return new Rectangle(fontX, font", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String[] results = MetaClass.cast(props.getProperty(key), String[].class);\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\nself.assertArrayAllClose(test_cube.data, expected, rtol=2.0e-7)\n``` ```python\nself.assertArrayAllClose(test_cube.data, expected, rtol=2.0e-7)\n``` ```python\nself.assertArrayAllClose(sample_points[0][1", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (IsFrameModified())\n            {\n                _packets[_index] = _packets[_index].ClonePacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\n    else:\n        print '\\033[1;31;40m'\n    return 0\ndef get_mfccs(wav_dir):\n    # get the mfccs\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} /// <summary> reference-counting set based on a HashMap implementation that stores keys and a reference counter for each unique key. </summary>\n/// <summary> Each time a key is added, the reference counter is incremented. Each time a key is removed, the reference counter is decremented.", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            // \n            // treeView1\n            // \n            this.treeView1.Location = new System.Drawing.Point(0, 0);\n            this.treeView1.Name = \"treeView1\";\n            this.treeView1.Size = new System.Drawing.Size(245, 300);\n            this.treeView1.TabIndex", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef copyBaseFunction( self, functionName, dll, resultType, argTypes, doc = None, argNames = None, extension = None, deprecated = False ):\n```\n```python\n    def copyBaseFunction( self, functionName, dll, resultType, argTypes, doc = None,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n           ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = 0;\n                    inRamp = true;\n                }\n                if (inRamp)\n                {\n                    if (alphaLevel < 255)\n                    {\n                        alphaLevel++;\n                        if (alphaLevel == 255)\n                            inRamp = false;\n                    }\n                }\n                else\n               ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_idletime_not_configured()\n        {\n            GivenGlobalSeedLimits();\n            PrepareClient", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPineappleBerry);\n                }\n            }\n        }\n    }\n}\n        }\n    }\n}\n        }\n    }\n}\n        }\n    }\n}\n        }\n    }\n}\n        }\n   ", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1 = no oversampling)\\n']\n        f.writelines(['  F) 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 5);\n                    i += ((b & 0x02) << 2);\n                    i += ((b & 0x01) << 3);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _configure_course(self):\n        \"\"\"\n        Configure the course with the course details\n        \"\"\"\n        self._configure_course(self._course_dict, self._course_details)\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\t}\n\t}\n}\npackage de.tink.minecraft.plugin.safari;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.Server;\nimport org.bukkit.ServerManager;\nimport org.bukkit.ServerManagerImpl;\nimport org.bukkit.ServerManagerListener;\nimport org.bukkit.ServerManagerListenerImpl;\nimport org.bukkit.ServerManagerImpl;\nimport org.bukkit", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function is used to download the certificate files from the api host\n    # It is used in the create_meter function\n    # The function returns a boolean indicating whether the request was successful\n    # The function also returns the", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy = new System.Windows.Forms.Label();\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(200, 13);\n            this.lblPrivacy.TabIndex = 1;\n            this", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (name, plugin) in self.loaded_plugins:\n            try:\n                self.ui_log.info(\" %s\" % (name))\n                self.ui_log.info(\" %s\" % (plugin.get_description()))\n                self.ui_log.info(\" %s\" % (plugin.get_msg()))\n                self.ui_log.info(\"\")\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" Session Speaker List \"\"\"\n## Step 1: Define the fossil interface for the session speaker list\nclass ISessionSpeakerListFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Speaker Id \"\"\"\n    def getFirstName(self):\n        \"\"\" Session Speaker First Name \"\"\"\n    def get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText());\n            }\n            if (result.getMessagesImported() > 0) {\n               ", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof String) {\n\t\t       \t\t\tString layer = (String) value;\n\t\t       \t\t\tif (layer.equals(\"all\")) {\n\t\t       \t\t\t\tlayer = null;\n\t\t       \t\t\t}\n\t\t       \t\t\tif (layer!= null) {\n\t\t       \t\t\t\tif (layer instanceof Number) {\n\t\t       \t\t\t\t\tlayer = ((Number)", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null) {\n            if (currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n                Session API.getGraphObject(currentSession, REQUEST_FIELDS, new Session.GraphObjectCallback() {\n                    @Override\n                    public void onCompleted(Graph", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tpublic void setChance(String emotionName, float chance) {\n\t\tfor (Emotion emotion : emotions)", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2,\n                'property2': 3\n            }],\n            self.build.stages.stages\n        )\n        self.build.stages.stages\n    def test_to_xml(self):\n        \"\"\"Test exporting as xml\"\"\"\n        # read and parse sample file\n        self.build = BuildJob", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n\"\"\"\n    def UTMtoLL(ReferenceEllipsoid, northing, easting, zone):\n    \"\"\"\n    converts UTM to lat/long.  Equations from USGS Bulletin 1532\n    Lat and Long are in decimal degrees\n    Written by Chuck Gantz- chuck.gantz", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\nform = ReportUserForm(request.POST)\n```\nThis line of code is missing the `instance` argument, which is required for the `ChangeUserForm` class. The corrected line of code should be:\n```\nform = ReportUserForm(request.POST, instance=user)\n```\nThis will ensure that the", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductConfigureBase(ReturnToReferrerMixin, LaunchpadFormView):\n    \"\"\"Base class for product configuration views.\"\"\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n\t}\n#endif\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @param value\n     */\n    public void setValue(Object value)\n    {\n        this.value = value;\n    }\n} \nPlease complete the code given above. I am unable to complete the code as I am not sure", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags = []\n            for flag, regex in self._config['tag-regexes']:\n                if flag == 'include':\n                    new_positional_tags.append((flag, regex))\n                else:\n                    new_positional_tags.append((flag, regex))\n            return new_positional_tags\n    def default", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class Type\n    {\n        public Type (Type type)\n        {\n        }\n        public Type (string name)\n        {\n        }\n        public Type (string name, Type type)\n        {\n        }\n        public Type (string name, Type type, Type[] genericType", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1C(OBD_Packet):\n    name = \"PID_1C_OxygenSensor1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 128., unit=\"%\", offset=-100.0)\n    ]\n    #... (rest of the code", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListCollections')\n\t\t#... (rest of the code remains the same)\n```\nThis is a Python script that implements a SecretService class, which is a D-Bus service that provides a secret collection and session", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044360, 1, 1044361);\n                this.AddRes(index, typeof(SulfurousAsh), 1044362, 1, 1044363);\n                this.AddRes(index, typeof(MandrakeRoot), 104", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._after_this_request()\n        self._implicit_app_ctx_stack = None\n        self._after_request_functions = None\n        self._implicit_app_ctx_stack = None\n        self._implicit_app_ctx = None\n        self._preserved_exc = None\n        self._after_request_functions = None\n       ", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_producer_list(session, cluster_id, topic_name, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public List<ResourceEntity> getConsumedResourcesByResourceGroupAndRelease(@NotNull ResourceEntity resource, @NotNull ReleaseEntity release) {\n        List<ResourceEntity> result =", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Compute the distance from the rotation axis to the pixel\n        det_init = ray_trafo.geometry.det_init\n        det_final = ray_trafo.geometry.det_final\n        # Compute the distance from the rotation axis to the pixel\n        det_init = ray_trafo.geometry.det_init\n        det_final = ray", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _getProxy(self, name):\n    \"\"\"\n    Returns the proxy URL for the given provider name\n    \"\"\"\n    if name in self.urls:\n        return self.urls[name]\n    else:\n        return None\n```python\ndef _getProxy(self, name):\n    \"\"\"\n    Returns the proxy URL for the given", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic string ToString (string format)\n\t\t{\n\t\t\treturn unit.ToString (format);\n\t\t}\n\t\tpublic string ToString (string format, IFormatProvider provider)\n\t\t{\n\t\t\treturn unit.ToString (format, provider);\n\t\t}\n\t\tpublic string ToString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tBigInteger crypted = new BigInteger(block1);\n\t\t\tBigInteger", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((JObject)((J", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < size; w++) {\n                    edges.add(new T2(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<T2> getVertices() {\n            return getEdges();\n        }\n        @Override\n        public String", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds.config[\"setup\"][\"channel width\"] = 20\n    ds.config[\"setup\"][\"flow rate\"] = 0.04\n    ds.config[\"setup\"][\"viscosity\"] = 15\n    ds.config[\"setup\"][\"area_um\"] = 1.0\n    ds.config[\"setup\"][\"deform", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, subscription):\n    \"\"\"Return the lowest spot price for a given zone.\"\"\"\n    # code to find the lowest spot price for a given zone\n    # and return it\n    #... (rest of the code)\n    return spot_price\n    pass\n    return None\n    return lowest", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Installs the application.\n\t * \n\t * @return\n\t */\n\tpublic boolean uninstall() {\n\t\tboolean hasUI = true;\n\t\ttry {\n\t\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\tStrings.Inst", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.VertexPosAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDelete", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inv\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.x\n    @", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n           ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAdmin();\n                } else {\n                  // If the account is deleted, transfer the ownership to eucalyptus admin\n                  // If the account is deleted, transfer the ownership to eucalyptus admin\n                  // If the account is deleted, transfer the", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), new VmTemplate());\n        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        final String expectedName = name.substring(0, 100);\n       ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table.TableChild w11\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus!= TOTAL_STATUS.SUCCESS:\n            self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['TOTALSTATUS'] = self.totalstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, MethodAttributes methodAttributes, Type[] parameterTypes, Type[] returnTypes, Type[] typeConstraints, Type[] interfaceConstraints, Type[] genericParameterAttributes)\n\t\t{\n\t\t\treturn DefineMethod(name,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return this;\n    }\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public static partial class SendInvitationRequestTypes {\n     ", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                vertices[x].set(getIndexBuffer().get(getVertIndex(i, x));\n            }\n        }\n    }\n    public void write(JmeExporter e) throws IOException {\n        super.write(e);\n        e.writeField(\"indexBuffer\", indexBuffer);\n        e.write", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (!showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATECREATED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of columns that are hidden in the document list view.<p>\n     * \n     *", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds(0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tCalculateHeight();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCalculateHeight();\n\t\t\t}\n\t\t}\n\t\tvoid CalculateHeight ()\n\t\t{\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tif (input", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF textSize = GetLargeTextSizeF();\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            Users = Users.Distinct().ToList();\n            foreach (string AUserId in Users)\n            {\n                SendEmailToUser(AUserId, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t\tpublic override void DrawEdgeCursors()\n\t\t{\n\t\t\tvar edge = worldRenderer.Viewport", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count > 1)\n            {\n                // display a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(PcDiscountTable.GetDiscountPercentageMax()));\n                // Handle addition to/removal from TVerificationResultCollection\n", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n} \n``` \nPlease complete the code given above. The code is incomplete and has some errors. Here is the corrected code:\n\n```csharp", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\nself.add_groups([\"kernel\", \"kernel-modules\"], \"required for kernel installation\", True)\n```\nThis line of code adds a group requirement for the kernel and kernel-modules. The reason for the requirement is \"required for kernel installation\" and the strong flag is set to True. This means that the kernel", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyRangeEnabled; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string SessionManagerPath {\n\t\t\tget { return Constants.SessionManagerInterfacePath; }\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation line = (SourceLineAnnotation) bugAnnotation;\n                if (line.getLineNumber() < 0) {\n                    throw new IllegalArgumentException(\"Invalid bugInstance: \" + bugInstance);\n                }\n            }\n        }\n    }\n    public void setReport", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffin : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Muffin() : base( 0x1A0 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\tpublic Muffin( Serial serial )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.IsValidTarget(E.Range))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    else if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && Menu.GetSlider(\"LaneClearQCount\") >= 2)\n                    {\n                        var q", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\ndirectory = 'gds/specials/forecasts/tables/germany'\n```\nThis is the last line of the code. The file is a continuation of the previous code. The file is a Python script that fetches weather data from the German Weather Service (DWD) using FTP.", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite')['test_base']['fields'],\n            Model_parser.model_definitions('testsuite')['test_model']['fields']\n        )\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite')['test_base']['fields'],\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"E1\", \"?E1?\"});\n                // widen to int\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __init__(self, simulation=None, particle=None, m=None, x=None, y=None, z=None, vx=None, vy=None, vz=None, primary=None, a=None, P=None, e=None, inc=None, Omega=None, omega=None, pomega=None, f=None, M=None", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            html = text;\n            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    private static String html;\n    private static View view;\n    private static ViewFactory factory;\n    private static BasicEditorKit kit;\n    private static BasicEditor", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename)\n    assert s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items[0].url == \"/html/test", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t\tmapping.SqlLoader = new HbmSqlLoader { name = namedQueryReference };\n\t\t}\n\t\tpublic void Loader(System.Type loaderType)\n\t\t{\n\t\t\tif (loaderType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"loaderType\");\n\t\t\t}\n\t\t\tif (!typeof (I", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\t{\n\t\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t\t{\n\t\t\t\t\tif ( m_Members[i].Mobile!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Members[i].Serialize( writer );\n\t\t\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        graphQueue.push(new MethodInvocation(methodInvocation, methodInvocation.invokeProbability(), methodInvocation.invokeRelevance(), methodInvocation.getFreshlyInstantiatedArguments());\n    }\n    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.isEmpty()) {\n            return;\n       ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    materializePhi(key, states, mergeBlock);\n                }\n            }\n        }\n        private void materializePhis(List<ReadEliminationBlockState> states) {\n            for (Map.Entry<CacheEntry<?>, ValueNode> entry : states.get(0).readCache.entrySet", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore and continue\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public abstract void onSetPauseImage(String", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\n        }\n        public EodonianPowerCoil : KotlPowerCore\n        {\n            public KotlPowerCore()\n            {\n                base(40147);\n            }\n        }\n        public class EodonianPowerCoil : KotlPowerCore\n        {\n            public EodonianPowerCoil", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\nclass Bibxxx(db.Model, BibxxxMixin):\n    \"\"\"Bibxxx table.\"\"\"\n    __tablename__ = 'bib{0:02d}'.format(idx)\n    id = db.Column(db.MediumInteger(8, unsigned=True,\n                                    db.ForeignKey(Record.id),\n                                    primary_key=True,\n                                   ", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_user_status(self, username, domain): \n    user = '%s@%s' % (username, domain)\n    data = self.module.get(user)\n    if data is None:\n        raise UserNotFound(username, domain)\n    else:\n        return data['last_status']  # <--- return the", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        # save the file\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', [", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of transformation %s to ValidatedOutput\" % ( transID ) )\n      else:\n       ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"POST\")) {\n\t\t\t\t// @see bug #2451\n\t\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif(method.equals(\"GET\")) {\n\t\t\t\t\treturn processURI(action, null, true, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self.TEST_PROJECT, self.TEST_REVISION,\n                                                self.TEST_BUILD_NUMBER, self.TEST_PROJECT,\n                                                self.TEST_REVISION, self.TEST_BUILD_NUMBER)\n        gsp.sendCodeReview = Mock()\n        gsp.sendCodeReview.return_value = defer.Mock()\n       ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n    self.category.text = 'test'\n    self.category.scheme = 'http://www.google.com'\n    self.category.label = 'test'\n    self.category.uri = 'http://www.google.com'\n  def testCategoryToAndFromString(self):\n    self.assert_(self.category.ToString()", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                return super.visitDeclared(type, p);\n            }\n        }\n        @Override\n        public Void visitExecutable(AnnotatedDeclaredType type, Void p) {\n            return super.visitExecutable(type, p);\n        }\n        @Override\n        public Void visitExecutable(AnnotatedDeclaredType type, Void p) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_subsurface_scattering(MaterialButtonsPanel, Panel):\n    bl_label = \"Subsurface Scattering\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n       ", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //Mapper1\n            mapper1_mirroringFlag = map1.MirroringFlag;\n            mapper1_mirroringFlag = map1.MirroringFlag;\n            mapper1_prgAddress = map1.PrgAddress;\n            mapper1_prgAddress = map1.PrgAddress;\n            mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspector", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// General Items\n\t\t//----------------\n\t\tAdd(\"Windmill\", 70026); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70027); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70028); // Windmill [1000", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n```\nThe bug is in the `AddViews` method. The method is supposed to add multiple views to the RelativeLayout, but it does not handle the case where the child is not a View. It will throw a `Java.Lang.JavaException` if the child is not", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def __init__(self, *args, **kwargs):\n    \"\"\"\n    Initialize the model.\n    :param args: For super()\n    :param kwargs: For super()\n    \"\"\"\n    # Initialize the model\n    super(Announcement, self).__init__(*args, **kwargs)\n    # Initialize the model fields", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer()\n# Add any paths that contain custom static files (such as style sheets and\n# images) here, relative to this directory.  They are copied after the\n# builtin static files, so a file named \"default.css\" will override the\n# builtin \"default.css", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\nThe code you provided is a Python script that appears to be designed to process flight log data from a SQLite database. The script is divided into three phases:\n\n1.  Phase 1: This phase checks the minimum flight time and processes the flight log data based on this minimum time.\n2.  Phase ", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        r = conn.table('projects').get(project_id).update({'last_snapshot': timestamp_to_timestamp(timestamp)}\n        r.execute()\n        conn.close()\n        return\n    conn.close()\n    return\ndef time_to_timestamp(tm):\n    return datetime.datetime.strptime(tm, TIMESTAMP_FORMAT)\ndef time_to_datetime(tm):\n    return", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"You know, I've been thinking about that a lot lately.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know, I've been thinking about that a lot lately.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know, I've been thinking about that a", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteRevokedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n        \"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REV", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    \"\"\"\n    Data about a host.\n    \"\"\"\n    def __init__(self, uuid, name, status, result):\n        self.uuid = uuid\n        self.name = name\n        self.status = status\n        self.start = None\n        self.host_data = result\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\nprivate String getRedirect(String url) {\n    //... (rest of the code remains the same)\n}\n```\nThis method is called from the `doInBackground` method, and it's supposed to return the final URL after following all redirects. However, the code is not returning the final URL correctly.", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be moved there\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def _get_build_dir (self, build_dir):\n        \"\"\"Return the build directory, or None if it doesn't exist.\"\"\"\n        if os.path.isdir(build_dir", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t//NH-1234\n\t\t\t// we need to check if the property is a subclass property\n\t\t\t// and if so, get the table number\n\t\t\tint tableNumber = GetSubclassTableNumber(lazyPropertyNames[lazyPropertyNumbers[i]);\n\t\t\t// we need to check if the", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'wall=%d:00:00' % request['job_max_vmem'],\n        '-l','mem=%d' % request['job_max_vmem'],\n        '-l', 'h_rt=%d:00:00' % request['job_max", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"DelegateList\", model);\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(int id, int[] items)\n        {\n            var result = service", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    return item.ToString();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n            return string.Empty;\n        }\n        private static void HandleMenu(Menu menu)\n        {\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n            Builder.AppendLine();\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\ndef handlePremium(self):\n    self.load(self.URLS[1])\n    self.load(self.URLS[1], post={\"username\": self.user, \"password\": self.account.getAccountData(self.user)['password'], \"file_id\": self.file_id})\n    self.load(self.URLS[1], post={\"", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, move to the first harvestable cell on it.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstHarvestableCell = path[0];\n\t\t\t\tif (firstHarvestableCell == harv.LastHarvestedCell)\n\t\t\t\t{\n\t\t\t\t\t//", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"Error restarting dhcpd service\")\n                    return False\n                elif restart_dhcp == \"1\":\n                    self.settings.restart_dhcp = \"1\"\n                    self.settings.save()\n                    self.settings.restart_dhcp = \"0\"\n                    self.settings.save()\n                    self.write_dhcp()\n                    self.settings.restart", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n    @Override\n    public void flushEventBuffer() {\n        if (flusher!= null) {\n            flusher.cancel();\n            flusher = null;\n        }\n        if (originalEvent!= null) {\n            sendEvent(originalEvent);\n            originalEvent = null;\n        }\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            }\n            #endregion\n        }\n        #region Private Methods\n        private static void Swap(PpmState state)\n        {\n            state[0].Frequencies = state[-1].Frequencies;\n            state[0].Frequencies = state[-1].Frequencies;\n            state[-1].Frequencies =", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Long String VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false, false, 0, false,'', ", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tSqliteSession.DeleteTestType(tFull[0], tFull[1], tFull[2], tFull[3]);\n\t\t}\n\t}\n\t\n\tvoid on_button_delete_type_clicked (object o, EventArgs args)\n\t{\n\t\t//if we are deleting a test type\n\t\t//we", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 8, 8)\n        self.assertEquals(b'\\x00' * 8 + b'ij', self.read(o))\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n    <td><?cs var:sdk.win64_bundle_checksum?> bytes</td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"mac-bundle\"\n     href=\"http://dl.google", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][test]['durations'], label='%s (%s)' % (app, test))\n    plt.plot(csi_95[0], label='95%% CI')\n    plt.legend()\n    plt.show()\n    return cr\ndef plot_app_vc(cr, app, test=", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _TestProcessProtocol(ProcessProtocol):\n    def processEnded(self, reason):\n        \"\"\"\n        A process ended, so fire a Deferred with the reason.\n        \"\"\"\n        self.transport.loseConnection()\n        self.transport = None\n        self.finished.callback(reason)\n    def processExited(self, reason):\n        \"\"\"\n        A", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlDarkShadow());\n\t\t\t\t\tg.drawLine(x + 1, y + 1, x + controlSize - 2, y + controlSize - 2);\n\t\t\t\t\tg.drawLine(x + 1, y + controlSize - 2, x + controlSize - 2,", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef testKNNClassifierLong(self):\n    self.runTestKNNClassifier(2)\n```\nExplanation:\nThe `testKNNClassifierLong` method is a test case that runs the `runTestKNNClassifier` method with the `short` parameter set to 2, which means it will", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        final int elementIndex = index;\n        final int offsetInCell = (offset - headerSize()) % kind.width.numberOfBytes;\n        final int elementIndexInCell = offsetInCell / kind.width.numberOfBytes;\n        final int", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = ResolveFromFolderList(GacCache.GetAssemblyFolders(), fileName);\n            if (assemblyFile!= null) {\n                return assemblyFile;\n            }\n            return ResolveFromFramework(fileName);\n       ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(*args, **kwargs):\n    \"\"\"\n    A wrapper around str.format() that allows for the use of the % operator\n    \"\"\"\n    #... (your code here)\n    return str_format(*args, **kwargs)\ndef str_format(*args, **kwargs):\n    #... (your code here", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i18 + i16;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 =", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// A class for holding the control parameters for a state.\n\t/// </summary>\n\tpublic class State {\n\t\t\n\t\tpublic string name;\n\t\tpublic ControlParameters control_parameters;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n```\n\nThe code provided is a JUnit test class for a Java EE application. It uses the CdiUnit framework to run the tests in a CDI (Context and Dependency Injection) environment. The class is annotated with `@RunWith(CdiRunner.class)` to enable CDI support. The `", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        context = testlib.TestContext()\n        self.assertRaises(subprocess.CalledProcessError, context.popen, 'ls', 'nonexistingfile')\n    @testlib.with_context\n    def test_popen_returns_output(self, context):\n        import subprocess\n        proc = context.popen('ls', 'file')\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (code to be completed)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grun", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[Browsable(false)]\n\t\t[DataCategory(\"Data\")]\n\t\tpublic virtual DataTableConstraintDataTable {\n\t\t\tget { return Table; }\n\t\t}\n\t\t}\n\t}\n}\n```\nThe final answer is: \n```csharp\n[Browsable(false)]\n[DataCategory(\"Data\")]\npublic virtual DataTableConstraintDataTable", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                } else {\n                    mStationId = stationId;\n                    mLocation = mLocation;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring query = \"from Continent\";\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount);\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(2, stats.QueryExecutionCount);\n\t\t\t\ts.CreateQuery(query).List", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uiCRCITTSum >> 1) ^ ((uiCRCITTSum & 1) * 0x1021);\n                uiCRCITTSum ^= uiByteValue;\n            }\n            return (ushort)(~uiCRCITTSum & 0xFFFF);\n        }\n        private ulong", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1.0F;\n\t}\n\tpublic static class SentryMode {\n\t\tpublic static final SentryMode CAMOUFLAGE = new SentryMode(\"camouflag\", \"camouflag\", false, false);\n\t\tpublic static final SentryMode CAMOUFLAGE_HP = new SentryMode(\"camouflag_hp", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { new JavaHyperlinkDetector() };\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(),\n                new JavaBackendHyperlinkDetector(),\n                new CeylonJavaBackendHyperlinkDetector(),\n                new C", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(Object3DAspect(self, self))\nself.l.addWidget(Object3DScale(self, self))\nself.l.addWidget(Object3DPropertiesPrivateInterface(self, self))\nself.l.addStretch()\nself.mainLayout = qt.QVBoxLayout(self)\nself.mainLayout.setMargin(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Use current location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = p;\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Use location\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile.SendGump( new SetPoint2DG", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String valueChoiceStr = selectConverter.convert(valueChoice);\n                        if (valueChoiceStr.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n                  }\n               }\n            }\n            else\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t\t}\n\t\tsb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> line in unpricedLine)\n                            {\n                                //get the index of the purchase order that contains the line\n                                int orderIndex = line.Key;\n                                //get the index of the line in the purchase order\n                                int lineIndex = line.Value;\n                                //get the", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n} // namespace System.ServiceModel.Dispatcher\n// Copyright (C) 2005 Novell, Inc.  http://www.novoell.com\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final Group mockGroup =", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v *", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_type(XDRStruct):\n    __slots__ = ['endpoint_stats_type']\n    def __init__(self, endpoint_stats=None):\n        self.endpoint_stats = endpoint_stats\n    def pack(self):\n        packer = xdrlib.Packer()\n        self.pack_into(packer, self)\n        return pack", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\t#endregion\n\t\t#region \"xml parsing\"\n\t\t/// <summary>\n\t\t/// parses the received xml message\n\t\t/// </summary>\n\t\t/// <param name=\"received_text\">xml message</", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  print'   %s' % (method_types, )\n  print'   %s' % (method_types, )\n  print'   %s' % (method_types, )\n  print'   %s' % (method_types, )\n  print'   %s' % (method_types,", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items\n            ],\n        mimetype='application/json'\n    )\ndef range_csv(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        return super(UserDetailView, self).post(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        self.request = request\n        self.user = self.request.user\n        self.object = self.get_object()\n        self.toolbar = UserToolbar(self)\n        return self.get", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKeyToken {\n      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    ///", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var p = new DenseVector(input.Count);\n            // Initialize the solver\n            _iterator = _iterator?? Iterator.CreateDefault();\n            _iterator.Status = new CalculationIndetermined();\n            _iterator.SetMatrix(matrix);\n            _iterator.SetVector(input);\n            _iterator.SetVector(result);\n            _iterator.SetPrecondition", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\tApfloat[] medians = new Apfloat[2];\n\t\t\tmedians[0] = sortedNumbers[left];\n\t\t\tmedians[1] = sortedNumbers[right];\n\t\t\treturn medians;\n\t\t}\n\t}\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                A = np.zeros((ts.num_nodes, K)\n                parent = np.zeros(ts.num_nodes, dtype=int) - 1\n                #... (rest of the code)\n```\nPlease complete the code given above. I have provided the code for the `genealogical_nearest_neighbours` function.", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        # Check if the mapping is correct\n        self.maxDiff = None\n        self.assertEqual(mapping_json[self.enrich_index]['mappings']['properties'], csv_mapping)\n        return result\n    def _test_enrich(self, sortinghat=False, projects=False):\n        \"\"\"Test whether the enriched items are correct\"\"\"\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value!= null && slot.Value.Value!= null && slot.Value.Value.Client!= null && slot.Value.Value.Client.IsReady)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar player = slot.Value.Value.Client;\n\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyPlayer(player, modData, modRules, modData.DefaultRules, modData.DefaultSettings", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\nnamespace WinrtCifs.Util\n{\n\t/// <summary>\n\t/// This class contains the DOS error codes and their corresponding\n\t/// NT status codes.\n\t/// </summary>\n\t/// <remarks>\n\t/// This class contains the DOS error", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes\n    def parse_flags(self, flags):\n        self.parse_flags(flags)\n    def parse_frame(self, frame):\n        self.parse_flags(frame.raw_flags)\n    def parse_stream_id(self, stream_id):\n        self.stream_id = stream_id\n    def parse_stream_id(self, stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.RectangularBoundary!= null)\n#endif\n        }\n    }\n}\n#endif\n}\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif\n}\n#endif", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nbtVector3 btKinematicCharacterController::getGhostObjectPosition()\n{\n\treturn m_ghostObject.getWorldTransform().getOrigin();\n}\nvoid btKinematicCharacterController::setWalkDirection (ref btVector3 walkDirection)\n{\n\tm_walkDirection =", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null &&!initializers.isEmpty()) {\n            AnnotatedTypeMirror atype = atypeFactory.getAnnotatedType(node);\n            if (atype.hasAnnotation(Unique.class)) {\n                if (initializers.get(0).getKind() == Kind.EXPRESSION) {\n                    ExpressionTree exp", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// if the type is a class\n\t\t\t\t\tif (typeAttribute.Value.StartsWith(\"class\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t// create a new class item\n\t\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\t\tContext,\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tCommentXmlDocument,\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n} \n```\nThis code is a test suite for the TrackBar control in the System.Windows.Forms namespace. It tests various properties and methods of the TrackBar control, including its size, orientation, and other settings. The test suite includes several test methods, each of which", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowByClassSensorAssignment(classCache, instrumentationApplier.getSensorAssignment());\n\t\t\tdoReturn(assignment).when(instrumentationApplier).getSensorAssignment();\n\t\t\tdoReturn(assignment).when(searchNarrower).narrowByClassSensor", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathCache!= null) {\n\t\t\tif (this.pathCache.size()!= other.pathCache.size())\n\t\t\t\treturn false;\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > end) {\n              continue;\n            }\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2 =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude=pg_data','src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n        )\n        assert not pipe.stdin.write.called\n        assert not pipe", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.DbgProcessChanged -= DbgProcess_DbgProcessChanged;\n```\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid DbgProcess_DbgProcessChanged(object? sender, DbgProcessChangedEventArgs e) {\n\t\t\t// nothing to do\n\t\t}\n\t\t//", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification.\n\t *\n\t * @param   scene   Scene to be written.\n\t *\n\t * @throws  XMLException if an XML", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t\tstatus = 'w'\n\t    else:\n\t\tstatus = 'a'\n\t    with open(output_name + '.rejected_config', status) as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n\t\t  f_ID.write", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        idx, = cdata[0]\n        if not isinstance(idx, (T.Slice, T.AngularIndex, T.AngularIndex)\n        return\n    # This is a Subtensor\n    # We need to check that the subtensor is not a broadcast\n    #   subtensor(x,", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community to be edited\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _get_query_context(self, query):\n    \"\"\"Return the :class:`.QueryContext` object associated with the given\n    :class:`.Query` object.\n    \"\"\"\n    return query.context\n    def _get_query_context(self, query):\n        \"\"\"Return the :class:`.QueryContext` object", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\ndef parse_sources(xml_element):\n```\nThis function is used to parse the'sources' attribute of the Conditional module. It should return a list of locations of the required modules. The function should be able to handle both the case where'sources' is a string and the case where'sources' is", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis == Axis.SCALAR:\n                self.current_filter = {}\n            else:\n                self.change_filter(change.axis, self.current_filter, change.axis, change.indices)\n            self.current_filter = self.current_filter\n        return global_changes\n    def get_selection(self,", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'class' attribute with 'type' attribute for ldtoken\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tprivate MemberInfo Resolve(CodeContext context, CodeEmitter ilgen)\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 48);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.objYLabel.TabIndex = 1;\n\t\t\tthis.objYLabel.Text = \"", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, [\"buildbot/changes/ChangeLog\"])\n        self.assertEqual(c.comments, \"update ChangeLog\\n\")\n        self.assertEqual(c.isdir, 0)\n        self", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isEmpty(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isCollecting() {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isCollecting(EnumFacing side) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic int getRedstoneSignal() {\n\t\treturn 0;\n\t}\n\t@Override\n\tpublic int", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Community com1, Community com2, Node n1, Node n2) {\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2) remove", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void startProcess(string computer, string process)\n\t\t{\n\t\t\tComputer c=computerMgmt.getComputer(computer);\n\t\t\tProcess p=c.getProcess(process);\n\t\t\tp.start();\n\t\t}\n\t\tprivate void stopProcess(string computer, string process", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  private Period toPeriod(java.util.Calendar date) {\n    return new Period(new DateTime(date.getTime()));\n  }\n  private Datable toDatable(java", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = DataSource.Component;\n\t\tsourceEventBinding.SourceProperty = SourceProperty;\n\t\tsourceEventBinding.SourceEvent = SourceEventName;\n\t\tsourceEventBinding.TargetComponent = DataTarget.Component;\n\t\tsourceEventBinding.TargetProperty = DataTarget.Property;\n\t\tsourceEventBinding.TargetEvent = TargetEventName;\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            Gson gson = new Gson();\n            String container = (request.getParameter(\"container\") == null)? GlobalConstants.DEFAULT.toString() : request.getParameter(\"container\");\n            String userName = request.getUserPrincipal().getName();\n            String nodeId = request.getParameter(\"nodeId\");\n            String spanName = request.getParameter(\"spanName\");\n           ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n\t\t\t{\n\t\t\t\tYesNoDialog = new ImageHelper(102107, \"Images", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setProperties(String[] files) {\n        this.files = files;\n        init();\n    }\n    public void setProperties(String[] files,", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n```\nThis is the start of a new method in the `LinkAnnoManagement` class. This method is intended to make annotations for NAA (Neutron Activation Analysis) attributes in a project. The method", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrink  = \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsLocked  = \").Append(IsLocked)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsHidden = \").Append(IsHidden)\n               .Append(\"\\n\");\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x0080 && ch <= 0x00FF) {\n\t\t\t\t// ASCII characters\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= ", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"ST_A\"  : src = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[a]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString key = e.nextElement();\n\t\t\t\tString value = properties", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        public static WorldSettings.GameType getByID(int id)\n        {\n            return GameType.values()[id];\n        }\n    }\n}\n}\n```\nThe final answer is: \n```java\npublic static WorldSettings.GameType getByID(int id)\n{\n    return GameType", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case to check that the default DACL is removed when the\n\t\t\t// DiscretionaryAcl is set to null.\n\t\t\t// \n\t\t\t// Authors:\n\t\t\t//  James Bellinger  <jfb@zer7.com>\n\t\t\t// \n\t\t\t// Copyright", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __process(self, results):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    protected static void OnGUI()\n    {\n        // this is called when the window is opened\n        if (this.guiState == GUIState.Main)\n        {\n            this.SwitchMenuState(GUIState.Main);\n        }\n        else if (this.guiState == GUIState.Uninitialized)\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(getActivity(), ShareActivity.class);\n                intent.putExtra(\"nodeindex\", message.id);\n                intent.putExtra(\"msgid\", message.id);\n                intent.putExtra(\"msgid\",", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, self.symmetry.op_cc[k])\n        def get_count(self):\n            \"\"\"Return number of k-point/spin combinations on this CPU.\"\"\"\n            return self.mynks\n        def get_offset(self):\n            \"\"\"Return offset of k-point/spin combinations on this CPU.\"\"\"\n            return", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 256));\n        utkastRequest.set", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tforeach (ILNode child2 in child.Body)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Add the child to the parent\n\t\t\t\t\t\t\tflatBody.Add(child2);\n\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb!= null)\n\t\t{\n\t\t    rb.drag = 0.25f;\n\t\t}\n\t}\n\t#endregion\n\t#region Network Specific\n\t#endregion\n\t#region Network Specific\n\t#endregion\n\t#region Network Specific\n\t#endregion\n\t#region Network Specific\n\t#endregion\n\t#region Network Specific", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Geological layer\"\"\"\n    def __init__(self, config={}):\n        self.layer_type = LayerType.fracture\n        \"\"\"Layer type\"\"\"\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.regions = Class", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter()\n            {\n                public String[] getValues( String label )\n                {\n                    PatternNode pNode = objectVariables.get( label );\n                    if ( pNode == null )\n                    {\n                        return new String[ 0 ];\n                    }\n                    return new String[] { pNode.getAssociation().", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    slice_json['rate'] = transform_value_xml_json_to_json(scalar_xml_json_value, xml_json_value_to_json_transformer)\n    return slice_json\ndef transform_slice_xml_json_to_json(scalar_xml_json, xml_json_value_to_json_transformer = None):\n    comments =", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setIcon(false);\n            frameToClose = null;\n            this.revalidate();\n            this.repaint();\n          } else {\n            if (frameToClose==null) {\n              frameToClose = (InternalFrame)buttons.get(btn);\n             ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# Define the functions that we will be using\n#... (rest of the code remains the same)\n```\nThe final answer is: \n```python\n# Define the functions that we will be using\n# The following functions are available\n#   getNearestLC\n#   getLC\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        double", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.update(Db.Table1.TABLE_NAME, ContentValues, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, ContentValues, Db.Table4.ID_GROUP + \" = \" + deleteId, null);\n                }\n                act.finish();\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    // Add code here\n                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}\n```\nThe final answer is: \n```csharp\nusing System;\nusing", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# MIDDLEWARE\n# List of middleware classes to use.  For an explanation of the middleware\n# process, see the set of middleware classes in the\n# django.middleware module.\n# You may not need to use all of", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\t// If we're currently building something, we're done\n\t\t\tif (queue[0].RemainingTime == 0)\n\t\t\t\treturn;\n\t\t\t// If we're currently building something, we're done\n\t\t\tif (queue[", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else \"files", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.bld.pctx.subst, code)\n        self.bld.pctx.write(self.outputs[0], code)\n    def __init__(self, *k, **kw):\n        self.ext_in = ['.in']\n        self.ext_out = ['.pc']\n        self.ext_in", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(\"ipa_pars/knowledge/\"+knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ] );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextDateAdapter().of(pattern, timestampLocale));\n                break;\n            case ColumnType.STRING:\n                if (utf8) {\n                    columnTypes.add(typeManager", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdentifier(object component, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetCom", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.key_id in self.ntp_auth_conf['authentication-keyid']:\n            self.ntp_auth_conf['authentication-keyid'].remove(dict(key_id=self.key_id))\n        if self.auth_type == 'text':\n            self.password = self.password\n        elif self.auth_type == 'encrypt':\n            self.password =", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n            self.store.update_item(child, editing_user)\n            self.store.update_item(sibling, editing_user)\n            # Create a new vertical\n            self.store.create_child(\n                self.user_id,\n                self.course,\n               'vertical',\n                block_id='test_vertical'\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(ch, start, length);\n    }\n    public void processingInstruction(String data) throws SAXException {\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 24) & 0xff);\n        digest.update((byte)", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict)\ndef mkinsertionloc(data):\n    return aetypes.InsertionLoc(data)\ndef mkinsertionloc(data):\n    return a", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            //... (rest of the code remains the", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(path, column, value)\n        elif event.keyval == gtk.keysyms.KP_Enter:\n            if isinstance(entry, gtk.Entry):\n                entry.date_get()\n            self.set_value()\n        elif event.keyval == gtk.keysyms.KP_Delete:\n           ", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            return beanProperties;\n        }\n        return null;\n    }\n    @Override\n    public int getOrder()\n    {\n        return 0;\n    }\n}\n```java\npackage org.alfresco.repo.management.subsystems;\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            lines = f.readlines()\n            f.seek(0)\n            for line in lines:\n                if line.strip() == '':\n                    f.truncate()\n                    f.write(line)\n                    f.flush()\n        finally:\n            f.close()\n    if module.params['state'] == 'present':\n        return module.run_command(path,", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.Interface)] object pUnk\n            );\n    }\n    #endregion\n    #region MediaFoundation\n    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,\n    Guid(\"FA99388F-4383-415A-A930-DD472A8CF6F7", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        return spm.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Override\n    public EnumSet<Permission> getPermissions() {\n        return EnumSet.of( Permission.READ, Permission.WRITE );\n    }\n    @Override\n    public EnumSet<PrincipalType> getPrincipalTypes() {\n        return", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        for child in child_elements:\n            self.verify_element(child)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This will fail the test if the tag does not match what is expected.\n        Arguments:\n        element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tag_name(self, node, name):\n    # This is a helper function for getElementsByTagName\n    # It returns a NodeList of all elements with the given name\n    # in the given node\n    rc = NodeList()\n    for child in node.childNodes:\n        if child.nodeType == Node.D", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for (int i = 0; i < ActiveWeapons.size(); i++) {\n            Weapon weapon = ActiveWeapons.get(i);\n            if (weapon.getCD() == 0) {\n                ActiveWeapons.remove(i);\n                break;\n            }\n        }\n        //Updates the HUD\n        display.update(myPlayer.get", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().join( action );\n        hide();\n        return;\n        }\n        catch( Exception e )\n        {\n          // TODO: error message\n        }\n        }\n      } );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btn", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"errors\"][0][\"msg\"])\n    if r.status == 200:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrder();\n\t\t\t\tfailureReason = response.GetFailureReason();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    def _find_carbon_sources(model: \"Model\") -> List[\"Reaction\"]:\n        \"\"\"Find the carbon sources in the model.\n        Parameters\n        ----------\n        model : cobra.Model\n            The model to find carbon sources in.\n        Returns\n        -------\n        list of cobra.Reaction\n            The carbon", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            unit__pootle_path__startswith=pootle_path,\n            unit__store__isnull=False,\n            store__isnull=False,\n            store__state=PARSED,\n            store__unit__isnull=False,\n            store__unit__id__in=self", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n               ", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.process_packet(poxpaket, portnum)\n                else:\n                    self.logger.debug(\"Switch {} can't find port {} for packet {}\".format(self.name, portnum, poxpkt))\n                return\n            elif poxpkt.type == poxpkt.ARP_TYPE:\n                # self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"\";\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"\";\n    if (item == null)\n      return;\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return false;\n        }\n    }\n}\npublic class ShadowRevealingAction : Mobile.RevealingAction\n{\n    public ShadowRevealingAction(Mobile m) : base(m) { }\n    public override void OnRevealed(Mobile m)\n    {\n        m.SendLocalizedMessage(500814); //", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a!= null) break;\n\t\t\ta = p.down;\n\t\t\tp = p.next;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSynchronisedSets() {\n\t\tBitArray s = new BitArray(Symbol.nonterminals.Count);\n\t\tforeach (Symbol sym in Symbol.nonterm", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t/// <summary>\n\t\t\t/// <param name=\"size\">Length of data to read</param>\n\t\t\t/// <returns>Data buffer</returns>\n\t\t\tprivate byte[] ReadData(int address, short size)\n\t\t\t{\n\t\t\t\tbyte[] buff = new byte[REPORT_LENGTH];\n\t\t\t\tmReadBuff =", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = order == SortOrder.DESCENDING? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tfinal int cmp = this.col.get(x).compareTo(value);\n\t\tif (cmp == 0 && this.caseInsensitive)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t{\n\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetCrashReportPath()\n\t\t{\n\t\t\tstring root = GetRoot();\n\t\t\treturn Combine( root, \"Crash", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3 + N4; i++, k +=", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __init__(self, description, currency=None, fields=None):  # noqa\n    \"\"\"Initialize a new rate\n    Args:\n        description (str): description of the rate\n        currency (str): currency of the rate\n        fields (dict): fields of the rate\n    \"\"\"\n    self.description =", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( discardWholeBuffer )\n\t\t\t// {\n\t\t\t//     // glBufferData\n\t\t\t// }\n\t\t\t// else\n\t\t\t{\n\t\t\t\t// glBufferSubData\n\t\t\t}\n\t\t}\n\t}\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\nself.scan_nim = ConfigSelection(choices = self.scan_nim_list)\n```\nThis line of code is used to create a new ConfigSelection object called self.scan_nim, which is used to select a specific NIM. The choices for this selection are stored in the self.scan_nim_list list.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (filterStr.startsWith(\"tcp://\")) {\n                String[] parts = filterStr.substring(6).split(\":\");\n                if (parts.length!= 2) {\n                    throw new IllegalArgumentException(\"tcp:// address must be in the form tcp://host:port\");\n                }\n                String host = parts[0", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                for (int i = 0; i < a.Length; ++i) {\n                    if (i == 0) {\n                        // first row\n                        for (int j = 0; j < a.Length; ++j) {\n                            a[j] = (curr[j] + (curr[j]", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), None)\ns = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\nself.assertEqual(s.get_interface(), 'foo.bar')\nself.assertEqual(s.get_interface(), 'foo.bar')\nself.assertEqual(s.get_interface().__class__, types.Signature)\nself.assertEqual(s.get_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_cohomology(self, level, position, options):\n    e2 = self.get_E_2_page()\n    return e2.get_cohomology(self.options)[level][position]\n    def get_cohomology(self, filename):\n        self.get_E_2_page().get_cohom", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Object put(Object key, Object value) {\n\t\treturn map.put( key, value );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic int sizeInCache() {\n\t\treturn", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\ndef _compute_attendance_state(self):\n    for employee in self:\n        employee.attendance_state = (\n            employee.last_attendance_id\n            and not employee.last_attendance_id.check_out\n            and 'checked_in' or 'checked_out')\n```\n```python\ndef _compute_attendance_state", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item in the list view.\n        /// </summary>\n        public int Index\n        {\n            get { return index; }\n        }\n        /// <summary>\n        /// The image of this item", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker = Factory()\n        self.terminator.new_tab(cwd, profile, debugtab=debugtab, _param1=_param1, _param2=_param2)\n    def on_destroy_event(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        self.set_urgency_hint(False)\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nametypeFragments[0], nametypeFragments[1], nametypeFragments[2], nametypeFragments[3] );\n                }\n                else {\n                    throw new UnknowTypeException( typePart );\n                }\n            }\n            return toReturn;\n        }\n       ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.GetAttributes ((uint) TypeAttributes.Class | (uint) TypeAttributes.Class | (uint) TypeAttributes.AutoClass | (uint) TypeAttributes.SequentialLayout | (uint) TypeAttributes.ExplicitLayout | (uint) TypeAttributes.ClassSizeMask, (uint) TypeAttributes.ClassSizeMask);\n\t\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the rules and evidence in the engine. The code is written in C# and uses the System.Collections.Generic namespace for the Dictionary class. The code is well-", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._ssl = ssl._create_unverified_context(protocol)\n        self._ssl = OpenSSL.SSL.Context(_openssl_versions[protocol])\n        self._ssl.set_info_callback(self._info_callback)\n    def _info_callback(self, connection, where, retcode):\n        if retcode == OpenSSL.SSL.WANT", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label4 = new global::Gtk.Label ();\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural:\");\n\t\t\tthis.label4.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label4);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook = widgets[\"mainvbox\"].get_children()[0]\n                headbook.set_current_page(page_num)\n                if old_num == 0:\n                    headbook.set_current_page(0)\n                else:\n                    headbook.set_current_page(old_num)\n        notebook = notebook = notebook\n        notebook.connect(\"", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Show-Explorer\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKey", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", mapping", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IFile file = (IFile)getModel().getAdapter(IFile.class);\n    if (file!= null)\n    {\n      return file.isReadOnly();\n    }\n    return false;\n  }\n  protected boolean doUpdateDesign()\n  {\n    return true;\n  }\n  protected void handleZoomChanged()\n  {\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(8, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 5;\n\t\t", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as rendering HTML for", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, result);\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        default:\n\t            current", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String)java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        javaHome = (String)java.GetValue(\"JavaExe\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String Get", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n            if l.startswith('export'+ name):\n                return l\n        return None\n    def do_add_job(self, lines, comment, job):\n        lines.append(\"%s\" % (comment", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\ndef _to_json_spec(cls, modifier_json, modifier):\n    modifier_json['data'] = modifier.data\n    modifier_json['use_deform'] = modifier.use_deform\n    modifier_json['use_deform_cache'] = modifier.use_deform_cache\n    modifier_json['use_deform_cache']", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[pepLenRanks.size()];\n                pepLenRanks.put(peptideLength, rankCounts);\n            }\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[self.choice]\n                    self.print_packet(self.packet)\n                    self.get_input()\n                    self.print_usage()\n                    self.get_input('>>>')\n                    self.print_usage()\n                    self.get_input('>>>')\n                    self.print_usage()\n                    self.get_input('>>>')\n                    self.print_usage()\n                    self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 59);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'content': ('editorsnotes.main.fields.XHTMLField', [], {'null': 'True', 'blank': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            }\n        }\n        return alreadyProcessed;\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.message_post(cr, uid, ids, 'hr_holidays.mt_holidays_approved', context=context)\n        return self.write(cr, uid, ids, {'state': 'validate'}, context=context)\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        \"\"\" This method is called", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a part of a larger framework and is used to create a grid that can display business objects. The code is written in C# and uses various classes and interfaces from the framework. The code is quite", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line: {0} ({1}) - {2} - {3}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.dwLineID);\n        }\n    }\n    public enum MixerLineComponentType\n    {\n        /// <", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID_CareContext());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID());\n\t\tdomainObject", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            verbose=verbose)\n        if path.exists(release_path):\n            notify(\"Servo build\", \"Complete!\")\n        else:\n            notify(\"Servo build\", \"Failed!\")\n        elapsed = time() - build_start\n        notify(\"Serv", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estP = counts[2];\n\t\t\tdouble estN = counts[3];\n\t\t\tdouble p = counts[0];\n\t\t\tdouble n = counts[1];\n\t\t\tdouble score = this.getOptimisticScore(p, n, estP, estN);\n\t\t\treturn score;\n\t\t}\n\t\t}\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                StashedSelectedIndexChanged(this, null);\n            }\n        }\n        private void StashedSelectedIndexChanged(object sender, EventArgs e)\n        {\n            InitializeStashes();\n            Initialize();\n            InitializeSoft();\n        }\n        private void StashedSelectedIndexChanged(object sender, EventArgs e)\n        {\n            InitializeStashes();\n            Initialize", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=0,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(String[] snrs)", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier) value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType) value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\ndef decrypt_archive(archive_index, args):\n    #... (rest of the decrypt_archive function remains the same)\n```\nThis is the correct code. The function name was changed from `decrypt_archive` to `decrypt_archive(archive_index, args)` to match the function signature in the `main`", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.cmd_str = '%s%d' % ('ACMD' if self.is_acmd else 'CMD', cmd)\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE'\n        self.state = 'IDLE'\n        self.state = 'IDLE'\n        self.state = '", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          limit_backward = cursor;\n          return false;\n        }\n        cursor = limit - v_3;\n        limit_backward = cursor;\n        return false;\n      case 2:\n        // (, line 200\n        // or, line 200\n        lab2", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null)\n                    System.out.println(\"Unknown channel: \"+channel);\n                else\n                    System.out.println(\"Received: \"+channel+\" \"+cls.getName());\n                if (cls == null)\n                    return;\n                if (cd == null)\n                    cd = new ChannelData(channel, cls, fingerprint,", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n    def _get_key_usage(self):\n        # TODO: This is not implemented in pyOpenSSL\n        return None, False\n    def _get_extended_key_usage(self):\n        # TODO: This is not implemented in pyOpenSSL\n        return None, False\n    def _get_basic", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tfor (%sSlots::iterator i = s; i!= s.end(); ++i) {\" % typename, file=f)\nprint(\"\\t\\t\\t\\t/* We have to check if the slot is still valid, because we may have just been\n\\t\\t\\t\\t* called by the slot", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    return [Interval(0x10000, X.end), Interval(X.begin, 0x10000)]\n    \ndef do_sm(sm):\n    \"\"\"Splits the state machine into a list of state machines, each of which is a 'contigous' \n       utf16 character set.  The state machine", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr(\"bad string in attributes\");\n\t\t\tSemErr", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            # force the product_id to be the product_id of the product\n            edi_doc = self._edi_import_product(cr, uid, edi_doc, context=context)\n            # force the product_uom to be the product_uom of the product\n            edi_doc = self._edi_import_product_uom(cr,", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\nPlease complete the code given", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermissionAdhereToActualNode() throws Exception\n    {\n        setUpTestPermissions();\n        NodeRef virtualFolderT5", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device.subsystem is not None\n    def test_list_devices_empty(self, context", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\n# coding: utf-8\nimport HttpUtils\nfrom HttpUtils import App, buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                else:\n                    continue\n        elif (index_elements[0] == \"Mode\"):\n            if (index_elements[1] == \"channel\"):\n                rd['mode'] = \"channel\"\n            elif (index_elements[1] == \"time\"):\n                rd['mode'] = \"time\"\n            elif (index", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n    }\n}\npublic class InternalTarget : Target, ITarget\n{\n        public InternalTarget(Mobile from, Item item) : base(from, item)\n        {\n            if (item is KeyRing)\n            {\n                KeyRing keyRing = (KeyRing)item;\n                from", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 'if' statement\n            if (device.contains(\"DVR-\") || device.contains(\"DVR\")) {\n                TunerManager.removeHdhrByUrl", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_PROFILE_SHARING) {\n      jobs.put(Version.USER_PROFILE_SHARING, new UserSharingMigrationJob());\n    }\n    if (lastSeenVersion < Version.MIGRATION_JOB) {\n      jobs.put(Version.MIGRATION_JOB, new MigrationJob());\n    }\n    if", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.warn(\"Skipping line \" + lineCount + \" in RegexNER mapping file: \" + line);\n        continue;\n      }\n      String type = split[0];\n      Set<String> overwritableTypes = new HashSet<String>();\n      if (split.length >", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for abspath in sub_path[include[0]]:\n                if os.path.exists(abspath + os.path.sep + n):\n                    return (abspath + os.path.sep + n)\n            # if not, try the path in env['TEXINPUTS']\n            for abspath in sub_path['TEXINPUTS", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\nclass _Symbol(Symbol,_injector):\n    def __init__(self, *args, **kwargs):\n        self._c__init__(*args, **kwargs)\n    def __repr__(self):\n        return self.symbol", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def update_check(module, want, have):\n    if want['manual_resume'] is None:\n        return None\n    if want['manual_resume'] == 'yes':\n        return 'enabled'\n    return 'disabled'\ndef update_destination(module, want, have):\n    if want['destination'] is None:\n        return", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            // notify listeners of the failure\n            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = self.client.post(\n                reverse(\"update_thread\", kwargs={\"thread_id\": \"dummy\", \"course_id\": unicode(self.course.id)}\n            )\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(mock_request.called)\n        self.assertEqual(mock_request.call_count, 1)\n        self.assertEqual(mock", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsShlink(target, source, env):\n    \"\"\"Shared library emitter for Windows.\"\"\"\n    SCons.Tool.msvc.validate_vars(env)\n    target, source = windowsShlink(target, source, env)\n    return target, source\ndef windowsLdmod(target, source, env):\n    \"\"\"Loadable module", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            errorStatus[0] = execute(getSelectedResources(), new ProgressMonitorWrapper(getShell()));\n        } catch (CoreException e) {\n            displayError(getProblemsMessage());\n        } catch (OperationCanceledException e) {\n            // do nothing\n        }\n        if (errorStatus[0]!= Status.OK", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Double[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Double[meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Spawn Names\n            string spawnnames = \"\";\n            for (int i = 0; i < fakespawnsA.Length; ++i)\n            {\n                if (fakespawnsA", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            return True\n        return False\n    def verify_guest_up(self, **args):\n        session = self._get_session()\n        self._open_session_list.append(session)\n        self._", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        int received = rc.get();\n        assertThat(received, is(5));\n        rc = service.submit(pub);\n        rc = sub.submit(\"test\");\n        rc = sub.submit(\"test\");\n        rc = sub.submit(\"test\");\n        rc", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).onSendRequestAfter(r);\n            }\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" +", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nusing dnlib.DotNet;\nusing dnlib.DotNet;\nusing dnlib.DotNet.MD;\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(au_flags, cwd = self.fm.thisdir.path)\n        self.fm.thisdir = self.fm.thisdir.get_directory(self.fm.thisdir.path)\n        self.fm.thisdir.load_content()\n        self.fm.thisdir.pointed_obj = self.fm.thisfile\n        self.fm.thisfile = self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringString ()\n\t\t{\n\t\t\tObjectHandle obj", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        self.assertDictEqual(\n            flagdata[self.old_av],\n            {'da': ['fx1.0', {Action.ACCEPTED: self.actions[3].id}]\n        )````\n# This is the last line of the given code\n        self.assertDictEqual(flagdata[self.new_av],\n                            {'", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"userstate : %s\", userstate)\n            self.Log.debug(\"send: userstate : %s\", userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        return group;\n    }\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return highlight(\n            [\n                Token.Literal\n                for t in self.toks\n                for x in t\n                if x not in hidden_c\n            ],\n            formatter,\n            outfile,\n        ) + self.separator + highlight(\n            [\n                Token.Literal\n                for t in self.toks\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _setup_column(self, index, model_value):\n    column = QuantityColumn(index, model_value)\n    return column, self._create_tree_model(), self._create_tree_model().get_iter(index)\ndef _create_tree_model(self):\n    return ga_Gtk.TreeStore()\ndef _create_store_map(self, index", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tparent.setColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent!= null);\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public void setTag(PageContext", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    }\n                    nl = element.SelectSingleNode(\"Inventory\").ChildNodes;\n                    for (int i = 0; i < nl.Count; i++) {\n                        XmlNode n = nl[i];\n                        InventoryEntry invEntry = new InventoryEntry();\n                        invEntry.ItemSign = n.Attributes[\"ID\"].InnerText;\n                        invEntry.Count", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t\tm_Keys[i] = m_key[i].GetType();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void Reset()\n\t\t{\n\t\t\tm", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//EOH\n//EOH\n//EOH\n//EOH\n//EOH\n//EOH\n//", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, new int[]{6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t}\n\t\t\t// ======================================================\n\t\t\t// Computed using the official Argon2 reference code package\n\t\t\t// (https://github.com/P-H-C/argon2-cpp)\n\t\t\tpb = new byte[32] {\n\t\t\t\t0x4A, 0x4A, ", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to the player.\n\t * @param manaToSend\n\t * @param remove\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nThis is the last line of code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Add the frame to the end of the queue\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        } else if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage))\n                || (!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = p.readInt();\n            dc.type = p.readInt();\n            dc.time = p.readInt();\n            dc.ams = p.readInt();\n            dc.isMpty = p.readInt();\n            dc.isVoice = p.readInt();\n            dc.isMultiparty = p.readInt();\n            dc.isVoice = p.readInt();\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicence.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int n = y * xSizeP + x;\n                // Set position of vertex\n                Vector3 pos = new Vector3(\n                    (x - 0.5f) * 2f + leftBottom", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\tif (rawResult == null)\n\t\t\t{\n\t\t\t\tswitchToNextServer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (rawResult instanceof Integer)\n\t\t\t\t{\n\t\t\t\t\tif ((Integer) rawResult == test", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t}\n\t\t@Override\n\t\tpublic void setSelection(int i, int i1)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic void setSelection(int i, int i1, int i2)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(\"Unknown object\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static class ExportedObject {\n        public int identifier;\n        public Object object", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 6;\n                pixel_y += 6;\n            }\n            /**\n             * *** Draw the fire beam ****\n             */\n            pixel_x = 0", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position) <= spell.Range &&\n                                        (spell.RangeCheckFrom.To2D().Distance(position) <= spell.Range))\n                            {\n                                result.Add(minion);\n                            }\n                            return result;\n                        case CollisionableObjects.YasuoWall:\n                            if (spell.RangeCheckFrom.To2D().Distance(position)", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.getInducedPath(x, y).size() > 0;\n    }\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n    }\n} // end of class DagToPag\n///////////////////////////////////////////////////////////////////////////////\n//========================PRIVATE METHODS==========================//\n    private void doFinalOrientation(Graph", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public virtual void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (super.matches(other) == false) {\n            return false;\n        }\n        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        m_Item = null;\n                        m_Item = new InternalItem(m_From, m_End, m_MinDamage, m_MaxDamage);\n                        m_Item.MoveToWorld(new Point3D(loc), m_Item.Map);\n                        m_Item.Movable = true;\n                        m_Item.Movable = false;\n                        m_Item.Movable =", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (Available)\n\t\t\t{\n\t\t\t\tif (Users.ContainsKey(user))\n\t\t\t\t{\n\t\t\t\t\tif (message)\n\t\t\t\t\t{\n\t\t\t\t\t\tInternalMessage(user, \"You", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String getAdminSpaceId() {\n    return mock.getAdminSpaceId();\n  }\n  @Override\n  public String getAdminSpaceName() {\n    return mock.getAdminSpaceName();\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), \"ZipDialog\");\n                    return true;\n                case R.id.actionrename:\n                    for (int", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n}\npublic void close(ChatMessage chatmessage) {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel.eventLoop().execute(new Runnable() {\n        public void run() {\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                z_arr = np.array([z_dict[z_key][per])\n                z_arr[kk] = z_arr[kk]\n            for z_key in sorted(z_dict.keys()):\n                for z_index in range(2):\n                    for z_index in range(2):\n                        z_arr[z_index, z_index] =", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceTwo);\n    }\n  }\n  @UiThread\n  public static void markIdentityVerified(Context context, Recipient recipient, boolean verified)\n  {\n    IdentityDatabase identityDatabase = DatabaseFactory.getIdentityDatabase(context);\n    IdentityRecord identity", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = path.pathsep.join(extra_path + [env[\"PATH\"]])\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = path.pathsep.join(extra_lib + [env[\"LD_LIBRARY_PATH\"]])\n        if self.config[\"build\"][\"mode\"] == \"debug\":\n            env[\"R", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(obj[\"paths\"]):\n            self._path_hash[path] = (from_path, test_list)\n        for path, tests in iteritems(obj[\"paths\"]):\n            for test in tests:\n                self._path_hash[path] = (from_path, test)\n        for path", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override setting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <param", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n        # Undo gradient normalization\n       ", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(this.id == null)\n\t\t\treturn -1;\n\t\tif(obj == null)\n\t\t\treturn 1;\n\t\tif(!this.id.equals(obj))\n\t\t\treturn this.id.compareTo", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 2);\n    }\n    @Test\n    public void shouldThrowExceptionWhenUpdatingStackWithNullName() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.setName(null);\n        stackDao.update(stack);\n    }\n    @Test\n    public void shouldThrowExceptionWhen", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParamName(\"depth\");\n        depthParameter.setParamValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParamName(\"exclusionRegexp", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t//... (rest of the code)\n\t\t}\n\t\t#endregion\n\t}\n}\n```\nThe code is a part of the Loyc project, which is a Loyc (Loyc is a.NET library for working with syntax trees, and this code is an extension of the LNode class", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        actionQueue.EnqueueAction(\n                            laneClearQueue,\n                            () => true,\n                            () => true,\n                            () => true);\n                        return;\n                    }\n                    else\n                    {\n                        AIHeroClient target = TargetSelector.GetTarget(\n                            q.Range,\n                            q.D", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.Context Menus = new ims.framework.Context Menus();\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall the prerequisites for the project.\n\"\"\"\n@task\n@timed\ndef install_prerequisites():\n    # Install the prerequisites for the project.\n    # This is a bit of a hack, but we need to install the private requirements\n    # before we can install the rest of the requirements.\n    pip_install", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, [self.env['test_testing_utilities.sub'].create({'name': 'a'}).ids)\n        })\n        f = Form(r)\n        with f.subs.edit(index=0) as s:\n            self.assertEqual(s.name, \"a\")\n            s.name = \"b", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).doit() == Sum(x, (x, 1, 2).doit() == 3\n    assert Sum(x, (x, 1, 2).doit() == Sum(x, (x, 1,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, changedItems, startingIndex, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            streamWriter.close();\n            writer.close();\n            result.close();\n            testObjectToXMLString();\n    }\n    public void testXMLToObject() throws Exception {\n        Object objectToWrite = getWriteControlObject();\n        XMLUnmarshaller unmarshaller = xmlContext.createUnmarshaller();\n        XMLUnmarshallerHandler handler = new XMLUnmarshallerHandler", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgName:\n                    c.OrgName = Token2Csv();\n                    break;\n                case Param.OrgName2:\n                    c.OrgName2 = Token2Csv();\n                    break;\n                case Param.OrgName3:\n                    c", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"width: {0}\", ide.width);\nConsole.WriteLine (\"height: {0}\", ide.height);\nConsole.WriteLine (\"colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"bytesInRes: {0}\", ide.bytesInRes);\nConsole.WriteLine (\"imageOffset: {0}\", ide.imageOffset);\nConsole", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                JSR.successor = l;\n            }\n            if (l.source == null) {\n                l.source = id;\n            }\n            l.source |= id;\n            l.source |= 1;\n            l.source |= 1 << 32;\n            l.source |= 1 << 64;\n            l.source |=", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition.add(\"Inside\");\n\t\t\tcomboLabelPosition.add(\"Outside\");\n\t\t\tcomboLabelPosition.select(0);\n\t\t}\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\n\t\t@Override\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the last image value\n        self._getLastValue( driver, \"Image\")\n        # Find the last", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._set_K_H(K, H)\n        self.transport._set_K_H(K, H)\n        self.transport._set_K_H(K, H)\n        self.transport._set_K_H(K, H)\n        self.transport._set_K_H(K, H)\n        self.transport._set_K_H(K,", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            tree.setNodeTitle(overallNodeName);\n            tree.setDisableTreeSelection(disableTreeSelection);\n            tree.setDatabaseConnection(connectionData);\n        }\n    }\n    /**\n     * Sets the folder.\n     *\n     * @param connection the connection\n     * @param databaseFolder the database folder\n     */\n   ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            self.pool = self.env['hr.payslip']\n            self.employee_id = self.employee_id\n            self.localdict = localdict\n            self.localdict['categories'] = self.env['hr.contract.category']\n            self.localdict['rules'] = self.env['hr.payslip.rule']\n            self.local", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #print 'zi, mmin, mmax, mspace, dlnm, dlnz, dlnk, dlnm, dlnz, dlnk, dlnm, dlnz, dlnk, dlnm, dlnz, omega_b0, omega", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n        d.width = font.getSize() * 2;\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='off_center',phi=np.pi/2):\n        #this is a helper function for the share_edge class\n        #flag 'off_center' means the p2 is at the middle of the edge\n        #flag '", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t}\n\t\t\tif (window.IsVisible)\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Show();\n\t\t\t}\n\t\t}\n\t\tprivate void ShowHideWindow(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window ==", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n    params[0]['bins'].append(params[0]['low'] + i * step)\n            elif params[1]['bins'] is None:\n                step = (params[1]['low'] - self.xedges(1, 0)\n                params[", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getReference());\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.getQueryId().equals(queryId)) {\n                    return query;\n                }\n            }\n            return null", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im0.convert(\"L\", rgb2r)\n            im1L.save(\"output_1_N2.png\")\n            im1L.save(\"output_2_N2.png\")\n            im1L.save(\"output_1_N3.png\")\n            im1L.save(\"output_2_N", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[] aid) {\n\t\tapp.setProperty(SPEC.PROP.APPLICATION_ID, aid);\n\t}\n\tprotected void", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Block of type %u\" % self[\"block_type\"].value\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is a property that is bound to the connected property. It is used to\n\t * notify listeners of the connection state.\n\t */\n\t@Override\n\tpublic String getConnected() {\n\t\treturn Boolean.toString(connected);\n\t}\n\t@Override\n\tpublic", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, a in self.apps:\n            if path.startswith(p):\n                return a(environ, start_response)\n        return start_response('404 Not Found', [], exc_info=None)\n    def __call__(self, environ, start_response):\n        \"\"\"WS", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, model.data.fields )\n\t\tmodel.topological = model.topological\n\t\tmodel.train( model.data )\n\t\tprint \"Model trained\"\n\t\tmodel.score()\n\t\tprint \"Model scored\"\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n            return;\n        }\n    }\n}\n```\nThe final answer is: \n```csharp\npublic static void CheckResult(ref EnhanceResult res, int chance)\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Check for duplicate values\n            for e in self.iterelements(enumeratedValues):\n                if e.localName == \"enumeratedValue\":\n                    if e in enumeratedValues:\n                        self.msg.error(\n                            \"Duplicate enumeratedValue found in <%s>\" % (e.tagName),\n                            self.src_ref\n                       ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (alModules.Count > 0)\n            {\n                for (int i = 0; i < alModules", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int textureHash = 0; textureHash < hashPrime; textureHash++)\n                {\n                    for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                    {\n                        if(this.trianglePoint == -1)\n                            throw new RuntimeException(\"trianglePoint is -1\");\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    return response\ndef get_course_info(request, course_id):\n    \"\"\"\n    This function is used to get course information.\n    \"\"\"\n    course_key = CourseKey.from_string(course_id)\n    return course_key\ndef get_course_info(request, course_id):\n    \"\"\"\n    This function is used to get course information.\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        EnqueueIdle(driver);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n    }\n} \n```\nThis code is", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if not isinstance(var, (list, tuple)):\n        raise ValueError('AreaDefinition must have either area_extent or shape. You provided {0} and {1}'.format(area_extent, shape))\n    # Check if list-like is empty.\n    if len(var) == 0:\n        raise ValueError('AreaDefinition", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n    # Add your code here\n```\nPlease complete the code. \n```python\ndef onKill(self, npc, player, isPet):\n    # Check if the player is in a party\n    partyMember = self.getRandomPartyMember(player", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = new PlayTime(new double?(num * 60 + num1 + num2));\n\t\t\t\t}\n\t\t\t\treturn empty;\n\t\t\t}\n\t\t\tcatch (Exception exception)\n\t\t\t{\n\t\t\t\tErrorMessage.Show(exception, Assembly.GetExecutingAssembly(), MethodBase.GetCurrentMethod());\n\t\t\t\tempty = PlayTime.Empty;\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _attributes.Add(new AttributeInfo(this, \"position\", 0, 3, 0, 0, VertexAttribPointerType.Float));\n            _attributes.Add(new AttributeInfo(this, \"color\", 0, 4, 0, 0, Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n}\npublic class TumourGroupListVo implements ims.vo.ImsCloneable\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate String name;\n\tprivate String description;\n\tprivate String tumourGroupRef;\n\tprivate ims.core.clinical.domain.objects.TumourGroup tumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcy = current.y;\n\t\t\t\tcx = current.x;\n\t\t\t\tcy = current.y;\n\t\t\t\tcx = current.x;\n\t\t\t\t//selectedLine = selectedLine;\n\t\t\t\tcurrent = new Rectangle(cx, cy, current.width, current.height);\n\t\t\t\treturn current;\n\t\t\t}\n\t\t\treturn null;\n\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.startAnimation(set);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Category = cmbPPartnerInterestInterestCategory.GetSelectedString();\n            ARow.Interest = cmbPPartner", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.addWindowToDataset(pssm, i, scoresSol);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset.\n\t * \n\t * @param pssm\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
