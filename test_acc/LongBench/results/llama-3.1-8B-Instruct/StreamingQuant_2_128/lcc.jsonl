{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.SendGump( new DuelContextGump(", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Open the file for writing\n        b = Sndfile('tmp.wav', 'w')\n        # Write some data\n        b.write_frames(a.read_frames(1e3))\n        # Seek to the", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_upload_subtitles(self):\n    return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    # Add the following methods to the class\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def displays_upload_subtitles(self):\n        return self", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:color\", olStyle.getColor());\n\t\t\t\t\twriter.addAttribute(\"ol:opacity\", olStyle.getOpacity());\n\t\t\t\t\twriter.addAttribute(\"ol:visible\", olStyle.getVisible());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic void unmarshal(Object value", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(str(dbname))\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select category from questions\")\n    ret = []\n    for r in dbconn.fetchall():\n        ret.append(r[0])\n    return ret\ndef get_categories", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 2:\n                    mob.SendMessage(\"Target a location to mark:\");\n                    mob.Prompt = new SR_TargetPrompt(mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"Target a location to mark:\");\n                   ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(\"  \" + cert.getSubjectDN());\n                s.println();\n            }\n            s.println();\n            s.print(\"  \");\n            for (byte[] cert : encodedChain) {\n                s.print(\"Certificate: \");\n                s.print(Debug.toHexString(cert));\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\tRedButton btnAlchemize = new RedButton(Messages.get(Alchemize.class, \"alchemize\") {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\t// TODO: implement alchemize\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        return self.server.dispatcher.dispatch(request, environ)\n        # self.server.dispatcher.dispatch(request, environ)\n        # self.server.dispatcher.dispatch(request, environ)\n        # self.server.dispatcher.dispatch(request, environ)\n        # self.server.dispatcher.dispatch(request, environ)\n        # self.server.dispatcher.dispatch(request, environ)\n        # self.server", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    self.statuses = self.base.get_status(status_id)\n    self.webview.update_status(status_id)\n    self.webview.update_conversation(status_id, self.conversations[status_id])\n    self.webview.update", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return self.get_process_data(UploadFile, {\n                \"login\": login.decode('UTF-8'),\n                \"password\": password.decode('UTF-8'),\n                \"params\": byte_to_unicode_dict(params),\n                \"session\": byte_to_unicode_dict(session)\n            })\n    def action_copy(self, login, password", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tIPermission c = a.Union (b);\n\t\t\tAssert.IsTrue (c is ZoneIdentityPermission);\n\t\t\tAssert.IsTrue (c is SecurityPermission);\n\t\t}\n\t\t}\n\t}\n} // class ZoneIdentityPermissionTest\n} // namespace MonoTests.System.Security.Permissions\n``` \nThe code is a", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_trust_manager(ca_certs, ca_certs_trust_manager, ca_certs_trust_manager2):\n    trust_managers = [ca_certs_trust_manager, ca_certs_trust_manager2]\n    return CompositeX509TrustManager(trust_managers)\ndef _get_com", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        List domains = manager.getDomains();\n        request.setAttribute(\"domains\", domains);\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n} \n``` \nThe code is a part of a web application that handles domain administration tasks. It uses the `Mail", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__data_pump = asyncio.StreamWriter(\n            self.__datastream_address,\n            self.__datastream_address,\n            loop=self.__event_loop)\n        self.__data_pump = self.__data_pump.__transport\n        self.__data_pump.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tstring [] myStringFull = store.GetValue(iter, 1).ToString().Split(new char[] {' '});\n\t\t\t\t\tstring jump = myStringFull[0];\n\t\t\t\t\tstring jumpPercent = myStringFull[1];\n\t\t\t\t\tstring jumpType = myStringFull[2];\n\t\t\t\t\tstring", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        MessageResources resources = getMessageResources(application, request);\n        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), UUID.class, new ConfigFile<UUID, Firm>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic Firm create(UUID id, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new Firm(id, conf);\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic String get", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show mini mode dialog\", getFieldEditorParent()));\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n            protected override void OnTargetCancel(Mobile from)\n            {\n                m_Owner.RemoveEntry(from);\n            }\n        }\n        private class InternalTarget : Target\n        {\n            public InternalTarget(Spell spell) : base(spell)\n            {\n            }\n            protected override void OnTarget(Mobile from, object", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor (Map.Entry<String, List<InstanceKey>> entry : nameToKey.entrySet()) { \n\t\t\tfinal List<InstanceKey> named = entry.getValue();\n\t\t\tfinal String name = entry.getKey();\n\t\t\tfinal int size = named.size();\n\t\t\tif (size == 1) { \n\t\t\t\tfield2Name.put", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  You can use this class as a handler in your\n    application to serve static files", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n// End of class MultiView\n```\nThe code is almost complete, but there are a few issues that need to be addressed:\n\n1. The `ViewCollection` class is not defined. It should be a custom class that inherits from `ControlCollection`", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Starting the download process.'\n\n# I have to add the following lines to the code\n# to make it work with the given arguments\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Wigle Downloader arguments')\n    parser.add_argument(\n        '-u',", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                }\n                // SkillGroup3 replace SkillGroup3\n                if (mod == 41)\n                {\n                    if (item is BaseJewel)\n                        return 0;\n                    else\n                        return 0;\n                }\n                // SkillGroup4 replace SkillGroup4\n                if (mod == 42", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds.append({\n            'platform': 'os_windows',\n            'locale': locale,\n            'locale_pretty': locale,\n            'locale_pretty_short': locale,\n            'locale_pretty_long': locale,\n            'locale_pretty_short': locale,\n            'locale_pretty_long': locale,\n            '", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tTProjectBean projectBean = LookupContainer.getProjectBean(projectID);\n\t\t\tif (projectBean!=null) {\n\t\t\t\tInteger projectTypeID = projectBean.getProjectType();\n\t\t\t\tList<TStateBean> stateBeans = StatusBL.loadByProjectType(projectTypeID", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax invocation && invocation.Expression is IdentifierNameSyntax identifier && memberList.Any( m => m.Identifier.Text == identifier.Identifier.Text )) {\n                    toReplace.Add(argument, SyntaxFactory.Argument(SyntaxFactory.IdentifierName(identifier.Identifier.Text));\n               ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        split_test = self._assert_split_test(self.split_test_usage_key)\n        # Set to second group configuration.\n        self._update_child(self.split_test_usage_key, self.split_test_update_url)\n        # Verify the split_test instance has children from the second group configuration.\n        split_test = self.get_item_from_module", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference cidref = null;\n            PdfIndirectReference toUni = null;\n            PdfIndirectReference fontRef = null;\n            PdfIndirectReference subsetRef = null;\n            PdfIndirectReference fontDescriptor = null;\n            PdfIndirectReference fontDescriptorRef = null;\n            PdfInd", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == graphNodes.get(graphCell).depth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmore = true;\n\t\t\t\t\t\t\tfor(Iterator<Library> libIt = Library.getLibraries(); libIt.hasNext", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        return new EmojiPageBitmap(model.getSprite(), decodeScale);\n      }\n    }\n    public void setBitmap(Bitmap bitmap) {\n      bitmapReference = new SoftReference<>(bitmap);\n      task = null;\n    }\n    public void setTask(ListenableFutureTask<Bitmap> task) {\n      this.task = task;\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    @Override\n    public void keyTyped(final KeyEvent ke)", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It should be a class that inherits from NodeDetailsView and has a property that returns a boolean indicating whether the view is displayed. The property should check if the current page is the 'Details' page for the given Node object. \n\n```python", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, skeleton);\n\t\t}\n\t}\n\tpublic void notifySequenceListeners(BigInteger timestamp, LabanSequence sequence) {\n\t\tfor (IJSequence", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                base.Render(writer);\n            }\n            else\n            {\n                writer.Write(\"<div style='position: relative; top: 0px; left: 0px; width: 100%; height: 100%;'>\");\n                writer.Write(\"<img src='\" + Page.ResolveUrl(EnabledImageURL) +", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\t\n\t\tNBTTagCompound ench = new NBTTagCompound();\n\t\tcompound.setTag(\"", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // End of serialization\n    // End of class\n}\n```\nThe final answer is: \n```java\n/**\n *  Copyright (C) 2002-2015   The FreeCol Team\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n    assert i[0]['indicator", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n        self.assertEqual(doc._delta(), ({'Person': 1}, {}))\n    def test_delta_embedded(self):\n        self.test_delta_embedded(Document)\n        self.test_delta_embedded(DynamicDocument)\n    def test_delta_embedded", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_x, ref_y):\n    \"\"\"\n    Plot a waveform at *x* against a reference waveform at *ref_x*.\n    :param x: Name of the waveform to plot\n    :param y: Name of the reference waveform\n", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (_tempIgnoredPaths.TryGetValue(path, out var ignoreCount))\n                {\n                    if (ignoreCount == 0)\n                    {\n                        toScan.Add(path);\n                    }\n                }\n                else\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Any())\n            {\n                _", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.merge(key, write(key, value), remappingFunction));\n\t}\n\t@Override\n\tpublic E merge(K key, E value,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                if viewtype.lower() ==", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = (sbyte)value; }\n\t\t}\n\t}\n\tpublic class TileList : List<Tile>\n\t{\n\t\tpublic TileList()\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get channel_uri\n                    //m_log.DebugFormat(\"[FreeSwitch]: region \\\"{0}\\\": channel_uri: {1}\", scene.RegionInfo.RegionName, channelUri);\n                    //m_log.DebugFormat(\"[FreeSwitch]: region \\\"{0}\\\": channel_uri: {1}\", scene.RegionInfo.RegionName, channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.Text;\n\t\t\t\tif(IsNew){\n\t\t\t\t\tPayPeriods.Add(PayPeriodCur);\n\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Read the lines of data.\n        data = []\n        for line in file_handle:\n            # Split the line into columns.\n            cols = line.split(',')\n            # Add the columns to the data list.\n            data.append(cols)\n    # Complete the code for the function.\n    def _generate_cubes(header", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    group_id = data_dict['group_id']\n    group = model.Group.get(group_id)\n    if group is None:\n        return {'success': False,'msg': _('Group not found')}\n   ", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = confidences[resultIndex];\n\t\t\t\tdouble conf2 = Math.pow(conf, 1d / depth);\n\t\t\t\tdouble conf3 = Math.pow(conf2, 1d / (depth + 1));\n\t\t\t\tdouble conf4 = Math.pow(conf3, 1d / (depth + 2));\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n        #region Properties\n        /// <summary>\n        /// Gets a flag which indicates whether the provider supports\n        ///             <see cref=\"M:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.AddTranslationUnits(Sdl", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            codePoint = ch;\n            if (Character.isSupplementaryCodePoint(ch)) {\n               codePoint = Character.codePointAt(offset);\n            }\n         }\n         return _range.contains(codePoint)? offset : -1;\n      }\n      @Override\n      int match(StringValue", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (accessionNumber == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (accessionNumber.equals(studyFormName)) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendData(newConn.Socket, \"Error\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod!= LobbyInfo.GlobalSettings.Mod)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.Format(\"Invalid mod: {0}\", handshake.Mod);\n\t\t\t\t\tSendData(newConn.Socket,", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//#############################################################################\n//EOH\n// This code was generated by Barbara Worwood using IMS MAXIMS Development Environment (version ", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    dialog = xbmcgui.Dialog()\n    dialog.ok('Error', 'Invalid parameter')\n    xbmc.executebuiltin(\"Notification(\"+localtxt9+\", \"+localtxt", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\n  plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not plotName:\n    return S_ERROR( \"Missing plot name!\" )\n  #Get plotname\n  if not 'plotName' in", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        catalog.getClusters().get(\"cluster\").getProcedures().get(\"basename\").getStatements().get(\"stmt-0\").getPlan();\n        return plan;\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount)\n    {\n        return compile(sql, paramCount, null, null", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// button1\n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// \n\t\t\t// label1\n\t\t\t// \n\t\t\t// \n\t\t\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (uint)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (uint)bits;\n\t\t\tdcb.Handshake = (uint)hs;\n\t\t\tdcb.ReadTotalTimeoutMultiplier = 0;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    \"\"\"\n    Test that the user's cobranding is properly set up.\n    \"\"\"\n    self.user.get_profile().cobrand = Cobranding.objects.create(user=self.user)\n    self.user.save()\n    self.assertEquals(self.user.get_profile().cobrand.user, self.user)\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',\n                        help='Print more output')\n    parser.add_argument('-t', '--test', dest='test',", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tfor ap in newList:\n\t\t\t\tif ap == self.oldlist[ap]['bssid']:\n\t\t\t\t\tcurrentListIndex = ap\n\t\t\t\t\tcurrentListEntry = newList[ap]\n\t\t\t\t\tcurrentListIndex = ap\n\t\t\t\t\tcurrentListEntry = newList[ap]\n\t\t\t\t\tbreak\n\t\t\tif currentListIndex is not None:\n\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum &&!checksumText)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (textAlignment == Element.ALIGN_CENTER)\n                    fontX = fontX / 2;\n                return new Rectangle(fontX,", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String value = props.getProperty(key);\n    if (value!= null) {\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\n# Define the test class\nclass TestTrajectory(tests.IrisTest):\n    def setUp(self):\n        # Load the cube\n        self.cube = iris.load_cube(tests.get_data_path([\"PP\", \"COLPEX\", \"theta_and_orog_subset.pp\"]))\n        # Define the sample", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket packet = GetCurrentPacket();\n            if (packet!= null)\n            {\n                byte[] bytes = packet", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\nprint '\\033[0m'\n    else:\n        print '\\033[0m'\n    return 0\ndef get_mfcc_diy(wav_dir):\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} // end class\n} // end namespace\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            // \n            // treeView1\n            // \n            this.treeView1.Location = new System.Drawing.Point(0, 0);\n            this.treeView1.Name = \"treeView1\";\n            this.treeView1.Size = new System.Drawing.Size(245, 300);\n            this.treeView1.TabIndex", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef copyBaseFunction( self, functionName, dll, resultType, argTypes, doc = None, argNames = None, extension = None, deprecated = False ):\n```\nPlease complete the code. \n```python\n    def copyBaseFunction( self, functionName, dll, resultType, arg", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n           ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    alphaLevel = 0;\n                    inRamp = true;\n                }\n                if (rampDelay > 0)\n                {\n                    if (System.currentTimeMillis() - start >= rampDelay)\n                    {\n                        inRamp = false;\n                        start = System.currentTimeMillis();\n                    }\n                }\n                if (ramp", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n    }\n}\n}\n```\nThe code is a test suite for a Transmission download client. The test suite covers various scenarios for the client's behavior, including item", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, razz, ItemId.ItemRazzBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, razz, ItemId.ItemRazzBerry);\n                }\n                if", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 2);\n                    i += ((b & 0x02) << 3);\n                    i += ((b & 0x01) << 5);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _configure_course(self):\n        \"\"\"\n        Configure the course with the course details\n        \"\"\"\n        self._configure_course(self._course_dict, self._course_details)\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif (splitNumber.length == 2) {\n\t\t\tchance = Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance * 0.01);\n\t}\n}\npackage de.tink.minecraft.plugin.safari;\nimport org.bukkit.Bukkit;\nimport org.bukkit.entity.Player;\nimport", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    response, info = http_request(module, name, apiid, apikey, action=\"certificates\", cert_type=cert_type)\n    if info['status']!= 200:\n        return False\n    else:\n        return response", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(48, 13);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"Privacy:\";\n            this.lblPrivacy", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (name, plugin) in self.loaded_plugins:\n            try:\n                self.ui_log.info(\" %s\" % (name))\n                self.ui_log.info(\" %s\" % (plugin.get_description()))\n                self.ui_log.info(\" %s\" % (plugin.get_msg()))\n                self.ui_log.info(\"\")\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" Session Speaker List \"\"\"\n    def getSpeakerList(self):\n        \"\"\" Session Speaker List \"\"\"\n    getSpeakerList.result = IConferenceParticipationFossil\n    getSpeakerList.name = \"speakers\"\n    def getSpeakerList(self):\n        \"\"\" Session Speaker List \"\"\"\n    getSpeaker", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImportResult.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = MessageImportResult.importMessages(fileTextField.getText());\n            }\n            setCursor(null);\n            if (result.getMessagesImported", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (value instanceof String) {\n\t\t       \t\t\tlayer = Integer.parseInt((String) value);\n\t\t       \t\t}\n\t\t    \t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n            Session.StatusCallback callback = new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n\tpublic void setChance(String emotionName, float chance) {\n\t\tfor (Emotion emotion : emotions)\n\t\t\tif (emotion.name.equals(emotion", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2,\n                'property2': 3\n            }],\n            self.build.stages_to_list()\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        self.build.add_stage(\n            Stage(\n                name='stage1',\n                started_at=constants.SPLIT_TIMESTAMP1,\n               ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n#    phi1 = _rad2deg * (mu + (3*e1/2)*sin(2*mu) + (27*e1*e1/32)*sin(4*mu) + (27*e1*e1*e1/32)*sin(6*mu))\n   ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html', {\n        'form': form", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(ReturnToReferrerMixin, ProductConfigureBase):\n    \"\"\"A view to add a project to a product set.\"\"\"\n    label = \"Add a project to a product set\"\n    implements(IProductSet)\n    def __init__(self, context, request):\n        super(ProductAddStepOne,", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n}\nThe bug is in the last method of the code snippet. The line `form.RightToLeft = RightToLeft.Yes;` is commented out. This line should be uncommented to fix the bug.\n\nHere is the corrected code:\n\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    return arr;\n}\n} \n```\nPlease complete the code given above. The code is incomplete and has some errors. The code is written in Java and is part of the MusicTag library. The code is for a class called Number", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags = []\n            for flag, regex in flag_regex:\n                if flag == constants.isa_tag_type:\n                    if regex not in constants.supported_isa:\n                        raise ValueError('Invalid ISA: %s' % regex)\n                elif flag == constants.variant_tag_type:\n                    if regex not in", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class Type\n    {\n        public Type (Type type)\n        {\n        }\n        public Type (string name)\n        {\n        }\n        public Type (string name, Type type)\n        {\n        }\n        public Type (string name, Type type, Type[] genericType", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1C(OBD_Packet):\n    name = \"PID_1C_OxygenSensor1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 128., unit=\"%\", offset=-100.0)\n    ]\n    #... (rest of the code", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListSessions')\n\t\tself.add_prompt(SecretPrompt(self, None, None, None))\n\t\tself.add_prompt(SecretSession(self, None, None, None))\n\t\tself.add_collection(SecretCollection(self, None,", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddSpell(typeof(EnchantedSwitch), Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._preserved_exc = exc\n        if self._preserved_exc is not None:\n            self._preserved_exc = None\n        if self._preserved_exc is not None and not self.preserved:\n            self._preserved_exc = None\n        if self.preserved:\n            _app_ctx", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_consumer_list(session, cluster_id, topic_name, needs_columns=False):\n    return _pubsub_consumer(session, cluster_id).\\\n        filter(PubSubConsumer.is_active).\\\n        filter(PubSubConsumer.is_active).\\\n        filter(PubSubConsumer.is_active).\\\n       ", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public ResourceEntity getResourceEntityForRelease(@NotNull ResourceGroupEntity resourceGroup, @NotNull ReleaseEntity release) {\n        return getResourceEntityForRelease(resourceGroup.getResources(), release);\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Compute the distance from the rotation axis to the detector\n        det_init = ray_trafo.geometry.det_init_radius\n        # Compute the distance from the rotation axis to the source\n        src_init = ray_trafo.geometry.src_init_radius\n        # Compute the distance from the source to the detector\n        src", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _getProxyURL(self):\n    return self.getProxyURL() \n```python\ndef _getProxyURL(self):\n    return self.getProxyURL()\n```python\ndef _getProxyURL(self):\n    return self.getProxyURL()\n```python\ndef _getProxyURL(self):\n    return self.getProxy", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic string ToString (string format)\n\t\t{\n\t\t\treturn unit.ToString (format);\n\t\t}\n\t\tpublic string ToString (string format, IFormatProvider provider)\n\t\t{\n\t\t\treturn unit.ToString (format, provider);\n\t\t}\n\t\tpublic string ToString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tbyte[] result = new byte[block1.Length];\n\t\t\tArray.Copy", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t}\n\t\t}\n\t}\n}\t\n\t}\n}\t\n}\n}\t\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    edges.add(new T2(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<T2> getEdges() {\n            ArrayList<T2> edges = new ArrayList<>();\n            for (int", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    ds = dclab.new_dataset(ddict)\n    ds.config[\"setup\"][\"flow rate\"] = 0.16\n    ds.config[\"setup\"][\"channel width\"] = 30\n    ds.config[\"setup\"][\"temperature\"] = 23.0\n    ds.config[\"setup\"][\"medium\"] = \"Cell", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, subscription):\n    \"\"\"Return the lowest spot price for a given zone.\"\"\"\n    zone = subscription['zone']\n    region = subscription['region']\n    instance_type = subscription['instance_type']\n    zone_history = [h for h in history if h['AvailabilityZone'] == zone and h['", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Installs the application.\n\t * \n\t * @return true/false\n\t */\n\tpublic boolean uninstall() {\n\t\tboolean hasUI = true;\n\t\ttry {\n\t\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\tString", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inv\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.x\n    @", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n           ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAdmin();\n                } else {\n                  // If canonical ID is missing, use the eucalyptus admin account\n                  LOG.warn(\"Account ID \" + walrusBucket.getOwnerId() + \" does not have a canonical ID. Using eucalyptus admin", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component\n        public void Initialize()\n        {\n\t\t\t// check initialized\n\t\t\tif (IsInitialized)\n\t\t\t\treturn;\n\t\t\t// check if the folder", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), new VmTemplate());\n        parameters.setImportAsCloned(isImportAsNewEntity);\n        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        final", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\t//... (rest of the code)\n\t\t\t// Container child table1.Gtk.Table.TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent.LabelProp = global::", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.status\n        self.system['SCRIPTSTATUS'] = self.scriptstatus\n        self.system['PARSTATUS'] = self.parstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, MethodAttributes attribs2, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name, attribs, attribs2, parameter", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return CreateBuilder().MergeFrom(prototype);\n    }\n    \n    public static Builder CreateBuilder() {\n      return new Builder();\n    }\n    \n    public static Builder CreateBuilder(pb::ICodedInputStream input) {\n      return new Builder(input);\n    }\n    \n    public static Builder CreateBuilder(pb::ICodedInputStream input", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                int index = getVertIndex(i, x);\n                vertices[x].set(getVertex(index));\n            }\n        }\n    }\n    public void write(JmeExporter e) throws IOException {\n        super.write(e);\n        OutputCapsule capsule = e.getCapsule();\n", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (showDateData.equals(\"false\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of columns to hide in the document list view.<p>\n     * \n     * Used", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds(0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tCalculateHeight();\n\t\t\t}\n\t\t}\n\t\tvoid CalculateHeight ()\n\t\t{\n\t\t\tif (inputField.lineType == InputField.LineType.MultiLine)\n\t\t\t{\n\t\t\t\tinputField.textComponent.rectTransform.size", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF textSize = GetLargeTextSizeF();\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            Users = Users.Distinct().ToList();\n            foreach (string AUserId in Users)\n            {\n                SendEmailToUser(AUserId, A", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 3)\n            {\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(PetraErrorCodes.E_DISCOUNTS_NOT_ALL_USED, PetraErrorCodes.E_DISCOUNTS_NOT_ALL_USED", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n*/ \nusing System;\nusing System.IO;\nusing p5.exp;\nusing p5.core;\nusing p5.io.common;\nusing p5", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\nself.add_groups([\"kernel\", \"kernel-modules\"], \"required for kernel installation\", True)\n```python\n```python\nself.add_groups([\"kernel\", \"kernel-modules\"], \"required for kernel installation\", True)\n```\nExplanation:\nThe code is adding a requirement for the \"kernel\" and \"kernel-modules", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getLineNumber() < 0) {\n                throw new RuntimeException(\"BugInstance has invalid annotation: \" + bugAnnotation);\n            }\n        }\n    }\n    public void setReportHistory(boolean reportHistory) {\n        this.reportHistory = reportHistory;\n    }\n    public boolean getReportHistory() {\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Muffin : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Muffin() : base( 0x9f0 )\n\t\t{\n\t\t\tthis.Weight = 1.0;\n\t\t\tthis.FillFactor = 5;\n\t\t}\n\t\t[Constructable]\n\t\tpublic M", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (Menu.GetBool(\"KillStealE\") && E.IsReady() && Args.Target!= null && Args.Target.IsValidTarget(E.Range))\n                        {\n                            E.Cast(Args.Target);\n                        }\n                    }\n                    else if (Menu.GetBool(\"KillStealQ\") && Q.IsReady() && Args.Target", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\n        directory = 'gds/specials/forecasts'\n        files = self._retr_list(\"{0}/{1}_*.xml\".format(directory, region))\n        for file in files:\n            if file.count('12') == 0:\n                continue\n            date = file.split('_')[", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n    def test_get_producer_rules(self):\n        \"\"\"JSONAlchemy - get producer rules\"\"\"\n        self.assertEquals(\n            get_producer_rules('testsuite')['title']['rules'],\n            Field_parser.field_definitions('testsuite')['title']['rules']\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"E1\", \"E1\", \"E1\"});\n                // widen to int\n                // widen to string\n                // test SODA\n                // test SODA\n                // test SODA\n                // test SODA\n                // test SOD", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n        c = self.__mul__(other)\n        return c\n    \n    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            if (c instanceof JEditorPane) {\n                HTMLDocument doc = (HTMLDocument) ((JEditorPane) c).getDocument();\n                if (doc!= null) {\n                    value = new Renderer(c, doc.getDefaultRootElement());\n                }\n            } else {\n                if (c instanceof BasicHTMLRenderer) {\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename, content=content)\n    assert s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items[0].url", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t}\n\t\t#endregion\n\t}\n}\npublic class FilterMapper : IFilterMapper\n{\n\tprivate readonly HbmFilter hbmFilter;\n\tpublic FilterMapper(System.Type ownerType, System.Type keyType, System.Type valueType, HbmMap mapping, HbmMapping mapDoc)\n\t{\n\t\tif", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.Write( (PlayerState) m_Members[i] );\n\t\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n    }\n    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.peek().equals(invocationQueue.peekFirst())) {\n            return;\n        }\n        if", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            else:\n                self.args['pytest'] = self.args['selff']\n            self.args['test_id'] = self.args['pytest']\n            self.args['test_id'] = self.args['test_id'].replace('selff','selff')\n            self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    materializePhi(key, states, mergeBlock);\n                }\n                states.get(0).readCache.put(key, value);\n            }\n        }\n        private void materializePhis(List<ReadEliminationBlockState> states) {\n            for (Map.Entry<CacheEntry<?>,", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore and continue\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public abstract void onSetPauseImage(String", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\nPlease complete the code given above. Here is the completed code:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Server;\nusing Server.Items;\nusing Server.Mobile;\nusing Server.Network;\nusing Server.Engines;\nusing Server.Gumps;\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\nclass Bibxxx(db.Model, BibxxxMixin):\n    \"\"\"Bibxxx table.\"\"\"\n    __tablename__ = 'bib{0:02d}xx'.format(idx)\n    # Add fields here\n```\nThis code is a part of a larger codebase and is used to define a model for", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_user_status(self, username, domain):\n    user = '%s@%s' % (username, domain)\n    data = self.module.get(user)\n    if data is None:\n        return None\n    else:\n        return data['last_status']  # <--- This line is the next line of", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        # save the file\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', self", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      gLogger.info( \"Transformation %s has no problematics\" % transID )\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"GET\")) {\n\t\t\t\treturn processURI(action, null, method, true, false);\n\t\t\t} else {\n\t\t\t\treturn processURI(action, null, method, false, false);\n\t\t\t}\n\t\t} catch (CommentException e) {\n\t\t\tif(logMINOR) Logger.minor(this", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self.TEST_PROJECT, self.TEST_REVISION, self.TEST_BUILD_NUMBER)\n        gsp.sendCodeReview = Mock()\n        gsp.sendCodeReview.return_value = defer.Mock()\n        gsp.sendCodeReview.return_value.addCallback = Mock()\n        gsp.send", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  \n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'text'\n    self.category.label = 'test'\n    self.assert_(self.category.term == 'test')\n    self.assert_(self.category.scheme == 'text')\n   ", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                return super.visitDeclared(type, p);\n            }\n        }\n        @Override\n        public Void visitExecutable(AnnotatedDeclaredType type, Void p) {\n            return super.visitExecutable(type, p);\n        }\n        @Override\n        public Void visitExecutable(AnnotatedDeclaredType type, Void p) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_game_settings(MaterialButtonsPanel, Panel):\n    bl_label = \"Game Settings\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            #endregion\n        }\n        public void SaveState(StateHolder _state)\n        {\n            #region CPU\n            _regA = _state._regA;\n            _regX = _state._regX;\n            _regY = _state._regY;\n            _regS = _state._", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspectorDialog.setSize(400, 300);\n            m_jInspectorDialog.setJMenuBar(getJMenuBar());\n            m_jInspectorDialog.setJMenuBar(getJ", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Training\n\t\t//----------------\n\t\tAdd(\"Training\", 70026); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70027); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70028); // Training Scroll [10 Windmill]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n}\n```\nThe bug is in the `AddViews` method. The method is supposed to add multiple views to the RelativeLayout, but it does not handle the case where the child is not a View. It will throw a `Java.Lang.NoSuchMethodException` if the child", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def __init__(self, *args, **kwargs):\n    \"\"\"\n    Initialize the model.\n    :param args: For super()\n    :param kwargs: For super()\n    \"\"\"\n    # Initialize the model\n    super(Announcement, self).__init__(*args, **kwargs)\n    # Initialize the model fields", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(startinline=True)\n# Add any paths that contain custom static files\n# (that are copied directly from this setup directory to DOCUMENTATION/_static/ and then\n# loaded when build_html is called).\n#html_static_path = ['_static']\n# Add any paths that contain", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\n\nHere is the corrected code:\n\n```python\nimport settings\nimport string\nimport datetime\nimport sqlite3\nimport pytz\nfrom datetime import datetime, timedelta\nimport time\n\n# Connect to the SQLite database\ndb = sqlite3.connect('flogger.sql3')\ncursor = db.cursor()\n\n# Create tables", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        r = rethinkdb.table('projects').get(project_id).update({'last_snapshot': timestamp}).run(conn)\n        print(\"Updated last_snapshot for project {project_id} to {timestamp}\".format(project_id=project_id, timestamp=timestamp))\n    conn.close()\ndef time_to_timestamp(timestamp):\n    return timestamp\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"You're a bit too curious for your own good, aren't you?\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know the School is where you can learn new skills...\");\n\t\t\t\tbreak;\n\t\t\tcase \"school_magnum\":\n\t\t\t\tMsg(\"You know the School is where you", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteRemovedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n        \"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REMOVED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    def __init__(self, host_uuid, host_name, status, result):\n        self.uuid = host_uuid\n        self.name = host_name\n        self.status = status\n        self.start = None\n        self.finish = None\n        self.task = None\n        self", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\n//... (rest of the code remains the same)\n```\nThe final answer is: \n```java\n//... (rest of the code remains the same)\n```java\n```java\n//... (rest of the code remains the same)\n```java\n```java\n//... (rest of", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    # TODO: this is a copy of the function in the previous step\n    #       it should be refactored\n    # repomd.xml is mandatory\n    # repomd.xml is mandatory\n    repomd_path = os", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def _byte_compile (self, files):\n        self.byte_compile(files, optimize=self.optimize, dry_run=self.dry_run)\n    # _byte_compile ()\n   ", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyTableNumbers.Length; j++)\n\t\t\t{\n\t\t\t\tint table = GetSubclassTableNumber(lazyPropertyNames[j]);\n\t\t\t\tint[] colNumbers = subclassColumnNumberClosure[j];\n\t\t\t\tint[] colNumbers = subclassColumnNumberClosure[j];\n\t\t\t\tint[]", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'wall=%d' % request['job_max_vmem'],\n        '-l','mem=%d' % request['job_max_vmem'],\n        '-l', 'h_vmem=%d' % request['job_max_vmem'],\n        '-l',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"EventDelegate\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(int modelId, int[] items)\n        {\n            var", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    return string.Format(\"{0}\", obj);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n            return string.Format(\"{0}\", item);\n        }\n        private static void HandleMenu(Menu menu, int indent = 0)\n        {\n            Builder.AppendLine();\n            Builder", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\nself.load(self.URLS[1], post={\"file\": self.file_id}, decode=True)\n``` ```python\nself.load(self.URLS[1], post={\"file\": self.file_id}, decode=True)\n``` ```python\nself.load(self.URLS[1], post={\"file\": self.file_id", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, return the first harvestable cell on that path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstHarvestableCell = path[0];\n\t\t\t\tif (firstHarvestableCell == self.Location)\n\t\t\t\t\tfirstHarvestableCell = null;\n\t\t\t\treturn", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"Error restarting dhcp service\")\n                    return False\n                elif restart_dhcp == \"1\":\n                    self.logger.info(\"restarting dhcp service\")\n                    self.settings.restart_dhcp = \"1\"\n                    self.settings.save()\n                    self.settings.restart_dhcp = \"0\"\n                    self.settings.save()\n                   ", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n    @Override\n    public void flushEventBuffer() {\n        if (flusher!= null) {\n            flusher.cancel();\n            flusher = null;\n        }\n        if (repeatCounter > 0) {\n            sendEvent(originalEvent);\n            originalEvent = null;\n           ", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            for (PpmContext context = PpmContext.ZERO; context!= PpmContext.ZERO; context = context.Suffix)\n            {\n                if (state.Symbol == context.NumberStatistics)\n                {\n                    state = state.Suffix;\n                    if (state.Symbol == 0)\n                    {\n                        goto Restart;\n                    }\n", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Long VR.\n        /// </summary>\n        public static readonly DicomVr LOvr = new DicomVr(\"LO\", true, true, false, 16, true,'', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tSqliteSession.DeleteTestType(tFull[3]);\n\t\t\tSqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 4, 8)\n        self.assertEquals(b'\\x00' * 4 + b'ij', self.read(o))\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n  <td>Windows</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" class=\"download\" href=\"<?cs var:sdk.win32_download?>\"><?cs var:sdk.win32_bundle_checksum?></a>\n    </td>\n  </tr>\n  <tr>\n    <td", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][test]['durations'], label='%s' % (app))\n    plt.plot(cr['combined'][app][test]['durations'], label='%s' % (app))\n    plt.plot(cr['combined'][app][test]['durations'], label='%s' % (", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _FancyEqMixin(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return self.a == other.a\n    def __ne__(self, other):\n        return self.a!= other.a", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 2, controlSize - 2);\n\t\t\t\t}\n\t\t\t\telse if(bDrawCheck){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + ", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef getNumTestPatterns(self, short = 0):\n```\n```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Returns the number of test patterns and number of classes for the test\"\"\"\n  if short == 0:\n    return 100, 10\n ", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        final int elementIndex = index;\n        final int elementOffset = offset;\n        final int elementLength = readLength(mirror);\n        final int elementSize = elementKind.width.numberOfBytes;\n        final int elementIndexOffset = element", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = ResolveFromFolderList(GacCache.GetAssemblyFolders(), relativePath);\n            return assemblyFile;\n        }\n        /// <summary>\n        /// Resolves the assembly reference.\n        /// </", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format()\n    \"\"\"\n    # Accept whitespace directly inside the tags\n    # Accept whitespace directly inside the tags\n    string = re.compile(r'\\{%\\s+').sub('{%', string)\n    string =", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i18 + i15;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 = i20 + 1;\n        i20 =", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// A state in the layer. Each state is a clip that can be played in the layer.\n\t/// </summary>\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t}\n}\n```\nThe code provided is a JUnit test class for a component that tests the functionality of the model management component. The class is annotated with `@RunWith(CdiRunner.class)` and `@AdditionalClasses` to enable CDI (Context and Dependency Injection) and to include additional classes in the", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['non-existent-command', 'arg1', 'arg2'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        self.assertRaises(\n            OSError,\n            proc.wait)\n    @testlib.with_context\n    def test_popen_with", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (insert code here)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grunwald", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the table of this constraint.\")]\n\t\tpublic virtual DataTable Table {\n\t\t\tget { return Table; }\n\t\t}\n\t}\n} // end class Constraint\n} // end namespace System.Data\n```\nThe final answer is: \n\n```csharp\n[Browsable (true)]\n[", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_kernels_groupBox)\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.formLayout_3 = QtWidgets.QFormLayout(self.settings_kernels_groupBox)\n        self.formLayout_3.setLabelAlignment(QtCore.Qt", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                } else {\n                    // We have the station with TAF\n                    mStationId = stationId;\n                    mLocation = mLocation;\n                    mLocation = new Location( \"\" );\n                    mLocation.setLatitude( wxs.getDouble( wxs.getColumnIndex( Wxs.STATION_LATITUDE_DEGREES ) );\n                   ", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\t// s.CreateQuery(\"from Continent\").List();\n\t\t\t\t// s.CreateQuery(\"from Continent\").List();\n\t\t\t\t// s.CreateQuery(\"from Continent\").List();\n\t\t\t\t// s.CreateQuery(\"from Continent\").List();\n\t\t\t\t// s.CreateQuery(\"from Continent\").List();\n\t\t\t\t// s", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uint)((uiCRCITTSum ^ uiByteValue);\n                for (int i = 0; i < 8; i++)\n                {\n                    uiByteValue = (uint)((uiByteValue << 1) ^ (uiCRCITTSum & 0x8000?", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic static class SentryMode {\n\t\tpublic static final SentryMode CAMOUFLAGE = new SentryMode(\"camouflag\", \"camouflag\", false, false);\n\t\tpublic static final SentryMode CAMOUFLAGE = new SentryMode(\"camouflag\", \"camouflag", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new JavaHyperlinkDetector(),\n                new CeylonHyperlinkDetector(),\n                new CeylonNativeHeaderHyperlinkDetector(),\n                new CeylonJavaBackendHyperlinkDetector(),\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(VerticalSpacer(self))\nself.l.addWidget(Object3DAspect(self))\nself.l.addWidget(Object3DProperties(self))\nself.l.addWidget(Object3DScale(self))\nself.mainLayout = qt.QVBoxLayout(self)\nself.mainLayout.setMargin(0)\nself.mainLayout", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set point\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Prev\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        if (selectConverter.convert(valueChoice).equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  if (chosenObj == null)\n                  {\n                     result = null;\n                  }\n                  else\n                  {\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0 && i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> line in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the unpriced line\n                                int orderIndex = line.Key;\n                                //get the index of the line in the purchase order\n                                int lineIndex = line.Value;\n                               ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int ownerGroup = 0;\n        final int otherUserId = 1;\n        final int otherMode = 0;\n        final int otherUserId2 = 2;\n        final int otherMode2 = 0;\n        final int otherUserId3 = 3;\n        final int otherMode3 =", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.Centre ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.Centre ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, BoundingSphere sphere)\n\t\t{\n\t\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_array(XDRStruct):\n    __slots__ = ['endpoint_stats']\n    def __init__(self, endpoint_stats=None):\n        self.endpoint_stats = endpoint_stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        for i in range(len(obj.endpoint_stats)):\n            endpoint_stats", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// </summary>\n\t\t/// <param name=\"client_number\">client number</param>\n\t\t/// <param name=\"receive_buffer\">receive buffer</param>\n\t\t/// <param name", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  print'   A%d a%d' % (bind_count, bind_count)\n  for i in xrange(bind_count):\n    print'   A%d a%d' % (i, i)\n  for i in xrange(exec_count):\n    print'   Arg%d arg%d' % (i, i)\n ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items],\n        mimetype='application/json'\n    )\ndef range_csv(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items],\n       ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode(\"score\"), new VarNode", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs) def _handle_set_is_active(self):\n        self.object.is_active = not self.object.is_active\n        self.object.save(update_fields=(\"", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the hash of the assembly. This is non empty if the assembly is strongly signed.\n    /// </summary>\n    public IEnumerable<byte> PublicKeyToken {\n      get {", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            for (int i = 0; i < input.Count; i++)\n            {\n                // Precondition the input vector\n                _preconditioner.Precondition(input, d);\n                // Initialize the residual\n                r.Copy(input);\n                // Initialize the residual\n                r.Subtract(matrix * r);\n                //", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n} \nThe code provided is a Java class that contains several statistical functions, including the Gaussian error function, cumulative distribution function, linear regression,", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if sample_count[v, K] == 0:\n                    sample_count[v, K] = 1\n                A = np.zeros((focal, K)\n                for k in range(K):\n                    A[j, reference_set_map[focal[j]] = k\n                A[j, k] = 1", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        result = self._test_raw_to_enrich(sortinghat=True, projects=False)\n        self.maxDiff = None\n        self.assertEqual(result['raw'], csv_mapping.raw)\n        self.maxDiff = None\n        self.assertEqual(result['enrich'], csv_mapping.enrich)\n        return result\n    def _test", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value!= null && slot.Value.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar player = orderManager.LobbyInfo.Slots[slot.Key];\n\t\t\t\t\t\t\t\t\t\t\tif (player!= null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyPlayer(player, botNames, botController, modData, modRules, modData", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString() + \" (\" + NtStatus.NtStatusMessages[_status] + \")\";\n\t\t}\n\t}\n}\n}\nnamespace WinrtCifs.Util\n{\n\t/// <summary>\n\t/// This class contains a list of NTSTATUS codes and their corresponding\n\t/// error messages.\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes\n    def parse(self, stream_id, flags=None):\n        return self.deserialize(stream_id, flags)\n    def parse(self, stream_id, flags=None):\n        return self.deserialize(stream_id, flags)\n    def parse(self, stream_id, flags=None):\n        return self.deserialize(stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            var rect = cluster.RectangularBoundary;\n            if (rect == null)\n                throw new InvalidOperationException(\"Rectangular boundary is null\");\n            if (rect!= cluster.BoundaryCurve.BoundingBox)\n                throw new InvalidOperationException(\"Rectangular boundary is not equal to the bounding box of the boundary curve\");\n            if (cluster.B", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setDuckHeight (double duckHeight)\n{\n\tm_duckHeight = duckHeight;\n}\nvoid btKinematicCharacterController::setDuckSpeed (double duckSpeed)\n{\n\tm_duckSpeed = duck", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null) {\n            for (ExpressionTree initializer : initializers) {\n                if (initializer.getKind() == Kind.EXPRESSION) {\n                    AnnotatedTypeMirror atype = atypeFactory.getAnnotatedType(initializer);\n                    if (atype.hasAnnotation(Unique.class)) {\n                        if", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound!= null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1!= null)\n\t\t\t\t{\n\t\t\t\t\tNBTTagCompound nbttagcompound2 = nbttagcompound1.getCompoundTag(\"", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// init return type\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\tContext,\n\t\t\t\t\t\tParentScope,\n\t\t\t\t\t\tCommentXmlNode,\n\t\t\t\t\t\t_type );\n\t\t\t\t\t// init return type node\n\t\t\t\t\t_returnNode = _returnType;\n\t\t\t\t}\n", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar.Width = 100;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;\n\t\t\t\tmyTrackBar.Width = 100", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\t//... (rest of the test method remains the same)\n}\nThe code is a test class for the ClassCacheInstrumentation class. It contains several test methods for different scenarios. The last test method is incomplete and needs to be completed. The code is written in Java and uses the Mockito library for mocking.", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathCache!= null) {\n\t\t\tif (other.pathCache == null)\n\t\t\t\treturn false;\n\t\t\tif (!this.path", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > end) {\n              continue;\n            }\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2 =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude', 'pg_data',\n                '--exclude', 'pg_data',\n                '--exclude', 'pg_data',\n                '--exclude', 'pg_data',\n               'src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n           ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.DbgProcessChanged -= DbgProcess_DbgProcessChanged;\n```\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid DbgProcess_DbgProcessChanged(object? sender, DbgProcessChangedArgs e) {\n\t\t\t// nothing to do\n\t\t}\n\t\t", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( (int)( 255 * b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification for the given object.\n\t *\n\t * @param   object   Object to be written.\n\t *\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null || this.getClass()!= aThat.getClass() ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact) aThat;\n\t\tif ( this.getContactDate()!= null && that.getContactDate()!= null ) {\n\t\t\tif ( this.getContactDate().", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t\tstatus = 'w'\n\t    else:\n\t\tstatus = 'a'\n\t    with open(name, 'a') as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n\t\t  f_ID.write('%s %s", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        idx, = cdata[0]\n    elif isinstance(node.op, AdvancedSubtensor):\n        idx, = node.op.idx_list\n    else:\n        raise TypeError('Unexpected type of node')\n    # We can't use the shape_feature as it is not initialized yet\n    if not (node.inputs[0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community to be edited\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _listen(cls, target, *arg, **kw):\n    \"\"\"Receive a :class:`.Query` object before it is compiled into a\n    :class:`.Query` object.\n    :param target: the :class:`.Query` object being compiled.\n    :param arg: the :class", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\n            xml_object.append(etree.Element('show'))\n```\nThis line of code is used to add a new tag to the xml_object. The tag is named'show'. This is used to add a new tag to the xml_object. The tag is named'show'. The tag is used to show", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis == 'bg_value':\n                self.current_filter = self.current_filter.copy()\n                self.current_filter['bg_value'] = change.new_value\n            else:\n                self.change_filter(change.axis, change.indices, change.new_value)\n        return global_changes\n    def", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t\telse if (Method!= null)\n\t\t\t{\n\t\t\t\tilgen.Emit(OpCodes.Ldtoken, (MethodInfo)member);\n\t\t\t}\n\t\t\telse if (Field!= null)\n\t\t\t{\n\t\t\t\tilgen.Emit(OpCodes.Ldtoken, (FieldInfo)member);\n\t\t\t}\n\t\t\telse\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 160);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, [\"buildbot/changes/syncmail.py\"])\n        self.assertEqual(c.comments, \"update syncmail.py to use the new syncmail parser\\n\")\n        self", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isBlank(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(!isPassiveFlower() ||!isPassiveFlower()) {\n\t\t\treturn false;\n\t\t}\n\t\tif(!world.isRemote) {\n\t\t\tsupertile.getWorld().setBlockState(supertile.getPos(), supertile.getWorld().getBlockState(supertile.getPos().offset(EnumFacing", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(n, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Community newCom, Community n1, Node n2) {\n        //if the", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2) remove", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void startProcess(string computer, string process)\n\t\t{\n\t\t\tComputer c=computerMgmt.getComputer(computer);\n\t\t\tProcess p=c.getProcess(process);\n\t\t\tp.start();\n\t\t}\n\t\tprivate void stopProcess(string computer, string process", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  private Datable<?> toDatable(Datetime periodStart, Datable<?> startHour) {\n    Datable<?> start = new D", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t// Set the source event binding to raise the target event when the source property is changed\n\t\tsourceEventBinding.OnEventRaised += new dfEventBinding.EventRaisedHandler( sourceEventBinding_OnEventRaised );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName);\n            // Add the rest of the code here\n    }\n    private static String getNodeDesc(String nodeId, String containerName) {\n        String userName = request.getUserPrincipal().getName();\n        String routeName =", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tpublic static final class Images\n\t\t{\n\t\t\tprivate Images()\n\t\t\t{\n\t\t\t}\n\t\t}\n\t\tpublic static class Images\n\t\t{\n\t\t\tpublic static class Core\n\t\t\t{\n\t\t\t\tprivate Core()\n\t\t\t\t{\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n} // end class OMEData\n```\nThe code is a Java class that generates random data for testing purposes. The class is designed to be used with Spring and uses a properties file to store the data. The class has methods to get random numbers, get a random object", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n```\n```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n    \"\"\" make NAA annotations for a project\n    \"\"\"\n    # make NAA annotations by copying", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrink  = \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsLocked  = \").Append(IsLocked)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsHidden = \").Append(IsHidden)\n               .Append(\"\\n\");\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x2010 && ch <= 0x2015) {\n\t\t\t\t// Complement Kanji\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"ST_A\"  : src = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[a]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString propName = e.nextElement();\n\t\t\t\tString propValue =", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        public static WorldSettings.GameType getID(int id)\n        {\n            return GameType.values()[id];\n        }\n        public static WorldSettings.GameType getID(String name)\n        {\n            for (WorldSettings.GameType type : values())\n            {\n                if (type", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case to check that the default Dacl is removed when the user and group are set to null.\n\t\t\t// The test case should be similar to the one in the previous test.\n\t\t\t// The test case should be named something like \"PurgeDefaultDacl\".\n\t\t\t// The", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __run(self):\n    \"\"\"Run the lookup thread\"\"\"\n    self.__stopped = False\n    self.__thread = AcoustidLookupThread(self.__queue)\n    self.__thread.start()\n    self.__progress_cb = None\n    self.__progress_cb = self.__progress_cb\n    self.__", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    #endregion\n    protected static void OnGUI()\n    {\n        // this is called when the window is opened\n        if (this.guiState == GUIState.Main)\n        {\n            // show main menu\n            this.OnGuiMainWizard();\n        }\n        else\n        {\n           ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // TODO: implement here\n            }\n        });\n        return rootLayout;\n    }\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            # Transform wave function to 1. BZ\n            psit_G = np.zeros((self.nspins, self.N_c.shape[0], self.N_c.shape[1], self.N_c.shape[2], 3)\n            for G in range(self.N_c.shape[0]):\n                for k", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 256));\n        Response response = utk", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Flatten the block\n\t\t\t\t\t\tforeach (ILNode child2 in ((ILBasicBlock)child).Body)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Add the child to the parent\n\t\t\t\t\t\t\tflat", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll!= ragdoll) {\n\t\t//set the ragdoll state\n\t\tIsRagdoll = ragdoll;\n\t\t//set the delay\n\t\t//if we're going to a ragdoll, we need to make sure we're not moving\n\t\t//if", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Geological layer with fracture\"\"\"\n    def __init__(self, config={}):\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.surface = ClassFactory(Surface)\n        \"\"\"Surface of the layer\"\"\"\n        self.regions", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter( objectVariables ) );\n        }\n        private static class FilterValueGetter implements FilterValueGetter\n        {\n            private final Map<String, PatternNode> objectVariables;\n            public FilterValueGetter( Map<String, PatternNode> objectVariables )\n            {\n                this.objectVariables =", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    return transform_value_xml_json_to_json(scalar_xml_json, xml_json_value_to_json_transformer)\nelif key == 'TRANCHE':\n    return transform_value_xml_json_to_json(slice_xml_json)\nelif key == 'TRANCHE2':\n    return transform_value_xml_json", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setIcon(false);\n            frameToClose = null;\n            this.revalidate();\n            this.repaint();\n          }\n        }\n      });\n      btn.addMouseListener(new MouseAdapter() {\n        public void mousePressed(MouseEvent e) {\n          if (Swing", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# Define the functions that we will be using\n#... (rest of the code remains the same)\n```\nThe final answer is: \n```python\n# Define the functions that we will be using\n# The following functions are available\n#   getNearestLC\n#   getLC\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        double", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.update(Db.Table1.TABLE_NAME, ContentValues, Db.Table1._ID + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, ContentValues, Db.Table4._ID + \" = \" + deleteId, null);\n                }\n                act.finish();\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}\n```\nThe final answer is: \n```csharp\nusing", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# MIDDLEWARE\n# List of middleware classes to use.  For an explanation of how these classes are used by Django, see:\n# https://docs.djangoproject.com/en/dev/topics/http/middleware/#middleware\nMIDDLEWARE_CLASSES", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\t// If we're building a unit, we need to refund the cost of the unit\n\t\t\tvar item = queue[0];\n\t\t\tif (item.Item == null)\n\t\t\t{\n\t\t\t\t// If we're not building a unit", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n        \n        if self.activeTreeview==0:\n            self.currentDirInfoLabel.setText(infoText)\n        elif self.activeTreeview==1:\n            self.currentDirInfoLabel2.setText(infoText)\n            \n        self", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.bld.pctx.subst_pats, code)\n        self.bld.pctx.subst_pats = re_m4.sub(self.bld.pctx.subst_pats, code)\n        self.bld.pctx.subst_pats = re_m4.sub(self.bld", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(\"ipa_pars/knowledge/\"+knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ] );\n\t\t\t\t\tidx = y * reactorExtent + reactorExtent + reactorExtent - 1;\n\t\t\t\t\tdelta[ 0", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format is required\");\n                }\n                columnTypes.add(typeManager.nextDateAdapter().of(dateFormatFactory.getTimestampFormat(pattern, timestampLocale));\n                break;\n            case ColumnType.TIMESTAMP:\n                // timestamp pattern is required\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object DeepCopy(object component, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdentifier(object component, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetCom", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        xml_str = CE_NC_MERGE_NTP_AUTH_KEYID % (self.key_id, self.auth_type, self.auth_type, self.auth_type, self.auth_type)\n        ret_xml = set_nc_config(self.module, xml_str)\n        self.check_response(ret_xml, \"NTP_AUTH_KEYID_CONFIG\")\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        after_update = datetime.datetime.now(UTC)\n        check_node = namedtuple('check_node', 'location edited_on edited_by')\n        check_node(component.location, after_update, self.user_id)\n        check_node(self.course_location, after_update, self.user_id)\n       ", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n        addToCharBuf(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void processingInstruction(String data) throws SAX", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict['start'], dict['end'], dict['step'])\ndef mkpcrec(data):\n    return aetypes.PCRecord(data)\ndef mkinsertionloc(data):\n    return aetypes.InsertionLocation(data)\ndef mkaealias(data):\n    return a", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            string typeKey = new HelpPageSampleKey", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_create_line(value)\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                entry.handler_block(entry.editing_done_id)\n            self.on_quit_cell(record, column.name, value)\n        elif event.keyval == gtk.keys", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            return beanProperties;\n        }\n        return null;\n    }\n    @Override\n    public int getOrder()\n    {\n        return 0;\n    }\n}\n```java\npackage org.alfresco.repo.management.subsystems;\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            if f.read(1) == \"\\n\":\n                f.seek(0)\n                f.truncate()\n        finally:\n            f.close()\n    if module.params['state'] == 'present':\n        if module.params['create']:\n            return module.fail_json(msg=\"create is not supported with state=present\")\n       ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n            );\n        [PreserveSig]\n        int GetEvent(\n            [In, Out] ref int pnEvent\n            );\n    }\n    [ComImport, Guid(\"FA99388F-4ECD-4B89-8", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        return userDirectoryService.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Override\n    public EnumSet<Permission> getPermissions() {\n        return EnumSet.of( Permission.READ, Permission.WRITE );\n    }\n    @Override\n    public EnumSet<PrincipalType> getPrincipalTypes() {\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        for child in child_elements:\n            self.verify_element(child)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This will fail the test if the tag does not match what is expected.\n        Arguments:\n        element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tag_name(self, node, name):\n    return NodeList()\nclass NodeList(object):\n    __slots__ = ('_list', 'ownerDocument')\n    def __init__(self, seq=()):\n        self._list = list(seq)\n        self.ownerDocument = None\n    def _get_length", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to handle the case where the keyLocator is a digest?\n\t\t\t// TODO: Do we need to handle the case where the keyLocator is a digest?\n\t\t\t// TODO: Do we need to handle the case where the keyLocator is a digest?\n\t\t\t// TODO", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon w = ActiveWeapons.get(i);\n            w.update(delta);\n            if(w.isDead()){\n                ActiveWeapons.remove(i);\n            }\n        }\n        //Updates the HUD\n        display.update(myPlayer.getHealth(), myPlayer.getScore", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().join( action );\n        hide();\n        return;\n      }\n    } );\n    m_panel.add( m_btnOk );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_panel );\n    // add panel to dialog\n    add", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"errors\"][0][\"msg\"])\n    if r.status == 200:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrder();\n\t\t\t\tfailureReason = response.GetFailureReason();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if reaction.id in c_input:\n        raise ValueError(\n            f\"Reaction {reaction.id} is a carbon source, but also a carbon exchange reaction.\"\n        )\n    return [coeff * met.elements.get(\"C\", 0) for met, coeff in reaction.metabolites.items()]\n    if reaction.id in", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__path__startswith=pootle_path,\n            store__units__isnull=False,\n            store__state=PARSED,\n            store__language__in=TMServer.get_languages(user),\n            store__units__isnull=False,\n            store__state=PAR", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('state', models.ForeignKey(to='events.State')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.process_packet(poxpkt, portnum)\n                elif poxpkt.type == poxpkt.ARP_REQUEST:\n                    self.logger.debug(\"Got ARP request: {}\".format(str(poxpkt)))\n                    # self.pox_switch.process_packet(poxpkt, portnum)\n                else:\n                    self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return Server.Spells.SkillMasteries.Shadow.GetDifficulty(target, src);\n        }\n    }\n}\npublic class ShadowTarget : Target\n{\n    public ShadowTarget()\n        : base(12, TargetFlags.None)\n    {\n    }\n    protected override void OnTarget(Mobile src, object targ)\n    {\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (maxTradePeriodDate == null && takeOfferDate!= null)\n            maxTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod());\n        return maxTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompFollowSets() {\n\t\tCompFollowSets();\n\t}\n\t\n\tstatic void CompFollow() {\n\t\tCompFollowSets();\n\t}\n\t\n\tstatic void CompFollows() {\n\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((buff[4] & 0x0f);\n\t\t\t//... (rest of the code)\n\t\t\t//... (rest of the code)\n\t\t\t//... (rest of the code)\n\t\t\t//... (rest of the code)\n\t\t\t//...", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING)? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo instance1, MskJointVo instance2)\n\t\t{\n\t\t\tif (caseInsensitive)\n\t\t\t{\n\t\t\t\treturn String.C", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetCrashReportPath()\n\t\t{\n\t\t\tstring root = GetRoot();\n\t\t\tstring path = String.Format( \"CrashReport.log\" );\n\t\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (i++; i < N1 + N2; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i++; i < N1 + N2 + N3; i++, k += 4)\n            {\n               ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __init__(self, description, currency=None, fields=None):  # noqa\n    \"\"\"This class represents a Compute rate.\n    Example:\n       .. code-block:: python\n          >>> import cfme.intelligence.chargeback.rates as rates\n          >>> rate = rates.ComputeRate(description='Compute Rate',", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( discardWholeBuffer )\n\t\t\t// {\n\t\t\t//     // glBufferData\n\t\t\t// }\n\t\t\t// else\n\t\t\t{\n\t\t\t\tif ( _lockedToScratch )\n\t\t\t\t{\n\t\t\t\t\t// if ( _scratchOffset == 0 )\n\t\t\t\t\t// {\n\t\t\t\t\t//", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\nself.scan_nim = ConfigSelection(choices = self.scan_nim.choices)\n```\nThis line of code is used to create a new ConfigSelection object called self.scan_nim. This object is used to select a transponder from a list of available transponders. The choices for this object are taken from", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (optval instanceof String) {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n                return;\n            }\n            else if (optval instanceof List) {\n                List<TcpAddress.TcpAddressMask> list = (List<TcpAddress.TcpAddressMask>) optval", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Copy the data to the output stream\n                for (int i = 0; i < curr.Length; ++i) {\n                    if (i == 0) {\n                        // first row\n                        for (int j = 0; j < curr.Length; ++j) {\n                            curr[j]", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), None)\ns = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\nself.assertEqual(s.get_interface(), 'foo.bar')\nself.assertEqual(s.get_interface(), 'foo.bar')\nself.assertEqual(s.get_interface().__class__, types.Signature)\nself.assertEqual(s.get_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_cohomology(self, level, position, options):\n    e2 = self.get_E_2_page()\n    return e2.get_cohomology(options)[level][position]\n    def get_cohomology(self, filename):\n        self.get_E_2_page().get_cohomology", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Object put(Object key, Object value) {\n\t\treturn map.put( key, value );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic int sizeInCache() {\n\t\treturn", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\ndef _compute_attendance_state(self):\n    for employee in self:\n        employee.attendance_state = (\n            employee.last_attendance_id\n            and not employee.last_attendance_id.check_out\n            and 'checked_in' or 'checked_out')\n```\nThis code is not complete. It seems like", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker = Factory()\n        maker.new_tab(cwd, profile, debugtab=True)\n    def on_destroy_event(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        self.set_urgency_hint(False)\n        self.set_property('visible', False)\n        self.set_property('destroyed', True)\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    string name = nametypeFragments[1];\n                    string typePart = nametypeFragments[0];\n                    Type managedType = GetManagedType( typePart );\n                    int arraySize = 0;\n                    if ( typePart.Contains( \"[]\", StringComparison.InvariantCultureIgnoreCase ) {\n                        string[] typePartArray", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsInterface {\n\t\t\tget {\n\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn attributes.GetMaskedAttributes ((uint)", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the evidence and models used in the rule engine. The code is written in C# and uses the System.Collections.Generic namespace for the Dictionary classes. The code is", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._ssl = ssl._create_unverified_context(protocol)\n        self._ssl = self._ssl._context\n        self._ssl.set_alpn_protocols([])\n        self._ssl.set_alpn_select_cb(None)\n        self._ssl.set_alpn_protocols([])\n        self._ssl.set_alpn_select_cb", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label7 = new global::Gtk.Label ();\n\t\t\tthis.label7.Name = \"label7\";\n\t\t\tthis.label7.LabelProp = global::Mono.Unix.Catalog.GetString (\"_White spaces:\");\n\t\t\tthis.label7.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label7);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook = widgets[\"window1\"].get_children()[0]\n                headbook.set_current_page(page_num)\n                headbook = widgets[\"window1\"].get_children()[0]\n                headbook.set_current_page(page_num)\n                headbook = widgets[\"window1\"].get_children()[0]\n                headbook.set", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Reload-ide\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_F5)\n}\n###############################################################################\n# CUSTOM SHORTCUTS\n###############################################################################\nCUSTOM_SHORTCUTS = {}\n###############################################################################\n#", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \",", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editor = getEditor();\n    if (editor!= null)\n    {\n      IFile file = ((IFileEditorInput)editor.getEditorInput()).getFile();\n      return file.isReadOnly();\n    }\n    return false;\n  }\n  \n  protected IEditorPart getEditor()\n  {\n    IEditor", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right));\n\t\t\tthis.butAttach.BtnStyle = OpenDental.UI.enumType.XPStyle.Silver;\n\t\t\tthis.butAttach.Location = new System.Drawing", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as rendering HTML for", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, result);\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_sum, 4);\n\t            break;\n\t        case option_3:\n\t            current_sum = 4 + CDRSerializer.alignment(current_sum, 4);\n\t            break", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = java.GetValue(\"JavaHome\") as String;\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome!= null)\n        return", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n                name = re.sub(r'%s' % self.ansible, '', l)\n                if name == name:\n                    return [comment, job]\n                else:\n                    comment = None\n            elif job:\n                if job == l:\n                    return [comment, job]\n                else:\n                   ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\ndef _to_json_spec(cls, modifier_json, modifier):\n    modifier_json['data'] = modifier.data\n    modifier_json['use_deform'] = modifier.use_deform\n    modifier_json['use_deform_cache'] = modifier.use_deform_cache\n    modifier_json['use_deform_cache_format", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[pepLenRanks.size()];\n                pepLenRanks.put(peptideLength, rankCounts);\n            }\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    elif self.choice.lower() == 'help':\n                        self.print_help()\n                    elif self.choice.lower() == 'list':\n                        self.print_list()\n                    elif self.choice.lower() == 'exit':\n                        self.print_exit()\n                    elif self.choice.lower() == 'help':\n                        self.print_help()\n                    elif self.choice", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 59);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            this.rptComboBox.SelectedIndexChanged += new System.EventHandler(this.rptComboBox_SelectedIndexChanged);\n            // \n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': \"'created_scan_set'\", 'to': 'auth", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            }\n        }\n        return false;\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n   ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.message_post(cr, uid, ids,'message_validate', context=context)\n        return self.write(cr, uid, ids, {'state':'validate'}, context=context)\n    def holidays_first_validate_notificate(self, cr, uid, ids, context=None):\n        \"\"\"Send a notification to the employee when the first", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a part of a larger framework and is used to create a grid that can be used to display business objects. The code is written in C# and uses the.NET framework. The code is well", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line: {0} ({1}) - {2}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.szName);\n        }\n    }\n}\n[StructLayout(LayoutKind.Sequential)]\npublic struct MixerLine\n{\n    public int dwLineID;\n    public int", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID());\n\t\tdomainObject.setIsRI", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            verbose=verbose)\n        if status:\n            return status\n        # Build the servo binary\n        with cd(self.get_target_dir()):\n            status = call([\"cargo\", \"build\"] + opts, env=env, verbose=verbose)\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t// 3. Add all positives to the rule, which are not yet considered:\n\t\t\t// 3.1. Add all positives to the rule, which are not yet considered:\n\t\t\t// 3.2. Add all negatives to the rule, which are not yet considered:\n\t\t\t//", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash, gitItemStatuses);\n            }\n        }\n        private void LoadGitItemStatuses()\n        {\n            _asyncLoader.LoadAsync(() => Module.GetStashDiffFiles(Stashes.SelectedItem as GitStash), LoadGitItemStatuses);\n        }\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=0,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope other = (AuthScope) o;\n        return this.match(other) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s;\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tSetEType((EClassifier) value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tSetEType((EGenericType) value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"ordered\" : \n\t\t\t\t\tSetOrdered((bool) value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"unique\"", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\n    archive_index = load_archive_index(args.index_file)\n```\nThis line of code is the next step in the `main` function. It loads the archive index from the file specified by `args.index_file`. If the index does not exist, it will be created. If the index does exist,", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.state = 'IDLE'\n        self.cmd_str = ''\n        self.cmd_str = self.cmd_str +'' + self.cmd_name(self.cmd)\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE'\n        self.state = 'IDLE'\n        self.state = 'ID", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          limit_backward = cursor;\n          limit_backward = limit_backward - 1;\n          cursor = limit - v_3;\n          return false;\n        }\n        // (, line 200\n        // or, line 200\n        // (, line 200\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls!= null)\n                {\n                    if (cd == null)\n                    {\n                        cd = new ChannelData();\n                        channelList.add(cd);\n                        channelMap.put(channel, cd);\n                        channelList.add(cd);\n                        channelList.add(cd);\n                        channelList.add(cd);\n                        channelList.add(cd);\n                       ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            return None, False\n        result = []\n        result.append('CA:{0}'.format('TRUE' if self._get_basic_constraints_ext is not None else 'FALSE')\n        result.append('pathlen:{0}'.format(self._get_basic_constraints_ext.path_length if self._get_basic_constraints", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tfor (%sSlots::iterator i = s.begin(); i!= s.end(); ++i) {\" % typename, file=f)\nprint(\"\\t\\t\\t\\tif (i->first->signal() == this) {\" % file)\nprint(\"\\t\\t\\t\\t\\t/* We are the one", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # The first value is the first value of the interval\n    first_value = X.begin\n    # The second value is the last value of the interval\n    last_value = X.end - 1\n    # The first value is the first value of the interval\n    first_seq = unicode_to_utf16", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\twhile (StartOf(9)) {\n\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t}\n\t\t\tExpect(27);\n\t\t\tif (StartOf(10)) {\n\t\t\t\tGet();\n\t\t\t\twhile (StartOf(9)) {\n\t\t\t\t\tSemErr(\"bad string in attributes\");\n\t\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            # force the product_id to be the product_id of the product\n            edi_doc = self._edi_import_product(cr, uid, edi_doc, context=context)\n            # force the product_uom to be the product_uom of the product\n            edi_doc['product_uom'] = self.edi_m", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n} \nPlease complete the code", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermissionAdhereToActualNode() throws Exception\n    {\n        setUpTestPermissions();\n        NodeRef virtualFolderNodeRef", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device is not None\n    def test_list_devices_empty(self, context):\n       ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\nimport HttpUtils\nfrom HttpUtils import App, buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                elif (index_elements[0] == \"Mode\"):\n                    rd['mode'] = index_elements[1]\n                elif (index_elements[0] == \"Stokes\"):\n                    rd['stokes'] = index_elements[1]\n                elif (index_elements[0] == \"Stokes\"):\n                    rd['", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n        public override void OnItemUse(Mobile from)\n        {\n            if (from.InRange(this, 1))\n            {\n                from.Target = new InternalTarget(this);\n            }\n        }\n        public override void OnItemUse(Mobile from)\n        {\n            if (from", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181025 - Added 'if' statement\n            if (device.contains(\"HD-\")) {\n                // DRS 20181025 - Added 'if' statement\n                if", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.PIN_OPT_OUT) {\n      jobs.put(Version.PIN_OPT_OUT, new PinOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.SYSTEM_STORAGE) {\n      jobs.put(Version.SYSTEM_STORAGE, new SystemStorageMigrationJob());\n    }\n    if (", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.warn(\"RegexNER mapping file has line \" + lineCount + \" with too few fields: \" + line);\n        continue;\n      }\n      String type = split[0];\n      Set<String> overwritableTypes = new HashSet<String>();\n      if (", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for p in path:\n                for e in self.keyword_paths[p]:\n                    abspath = os.path.join(p, n)\n                    if os.path.exists(abspath):\n                        return (include, n)\n            # if not found, try the other paths\n            for p in path:\n                for e in self.keyword", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\ndef _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\ndef _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\ndef _create_datas", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def _set_destination(self):\n    if self.want['ip'] is None:\n        self.want['ip'] = '*'\n    if self.want['port'] is None:\n        self.want['port'] = '*'\n    if self.want['port'] == '*':\n        self.want['ip'] = '*'\n   ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n        this._config = new ConfigLoader", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = self.call_view(\n                mock_request,\n                post_id=\"test_comment_id\",\n                user=self.student\n            )\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(mock_request.called)\n        self.assertEqual(mock_request.call_args[0][0], \"post\")\n        self.assertEqual(mock_request.call", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsShlink(target, source, env, for_signature):\n    \"\"\"Shared library emitter for Windows.\"\"\"\n    return windowsShlink(target, source, env, for_signature)\ndef windowsLdmod(target, source, env, for_signature):\n    \"\"\"Loadable module emitter for Windows.\"\"\"\n    return _dllTargets(target", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job.getJobManager().beginRule(null);\n            List resources = getSelectedResources();\n            IStatus result = execute(resources, new ProgressMonitorWrapper(getShell()));\n            if (result.isOK()) {\n                return;\n            }\n            displayError(result.getMessage());\n        } catch (CoreException e) {\n            displayError", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Double[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.fieldnrs = new int[", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Spawn Names\n            string spawnnames = \"\";\n            for (int i = 0; i < types.Length; ++i)\n            {\n                if (i == 0)\n                    spawnnames =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            return True\n        return False\n    def _session_close(self, session):\n        try:\n            session.close()\n        except Exception:\n            pass\n    def _session_cmd_close(self", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        final Callable<Boolean> sub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                ZMQ.Context context = ZMQ.context(1);\n                ZMQ.Socket socket = context.socket(SocketType.SUB);\n                socket.setReceiveTimeOut(3000);\n                socket.bind(\"tcp://", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\tif (value <= 0x3FFF)\n\t\t\t\treturn 2 + (uint)(value & 0xFF);\n\t\t\treturn 5 + (uint)((value & 0xFFFFF) >> 8);\n\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(au_flags + [one_file for one_file in self.fm.thistab.get_selection()]\n        self.fm.execute_file(au_flags + [one_file for one_file in self.fm.thistab.get_selection()]\n        self.fm.execute_file(au_flags + [one_file for one_file in", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_TypeName ()\n\t\t{\n\t\t\tActivator.CreateInstance (typeof (COMTest));\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_TypeNameString ()\n\t\t{\n\t\t\tObjectHandle handle = (ObjectHandle) Activator.CreateInstance (", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        pl = Locale.objects.get(code='pl')\n        self._setup(locale=pl, before=Action.ACCEPTED, after=Action.ACCEPTED)\n        self.assertEqual(Locale.objects.get(code='pl').repo.changesets.count(), 2)\n        self.assertEqual(Locale.objects.get(code='pl').repo.changes", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"userstate : %s\", userstate)\n            self.Log.debug(\"send: userstate : %s\", userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            cmd", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        return group;\n    }\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if colsz is not None:\n            if colsz == 0:\n                return \"\"\n            if self.ncols > 1:\n                return self.show(\n                    raw=False,\n                    align=align,\n                    fill=fill,\n                    width=width,\n                    width=fill,\n                    width=fill,\n                    width", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _setup_column(self, index, model_value, model_text):\n    column = QuantityColumn(index, model_value, model_text)\n    return column, self._create_tree_model(1), self._create_tree_model(1).get_iter(index)\ndef _create_tree_model(self, index):\n    tree_model =", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tparent.setColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent!= null);\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn EVAL_PAGE;\n    }\n    @Override\n    public int doAfterBody()", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    }\n                    nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                    Dialog = new DialogEntry();\n                    for (int i = 0; i < nl.Count; i++) {\n                        XmlNode n = nl[i];\n                        Dialog.Add((DialogID)Enum.Parse(typeof(DialogID), n.Attributes[\"ID\"].InnerText,", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t}\n\t\t\t\tfrom.SendLocalizedMessage( 1072679 ); // You have been given the keys to the realm!\n\t\t\t\tfrom.SendLocalizedMessage( 107457", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n// EO Class Definition\n// EO ChangeOfServiceVoCollection\n// EO ims.careuk.vo.ChangeOfServiceVoCollection", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(7, new int[]{6, 18, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = new byte[32];\n\t\t\tpb = kdf.ComputeHash(MemUtil.Mid(pb, 0, 32));\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// =================================================\n\t\t\t//", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. Note that this method\n\t * does not automatically remove mana from the item which is exporting.\n\t * @param manaToDispatch How much mana is to be sent", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nshould be replaced with the following code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Add the frame to the end of the queue\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\tNextFrame.Blending = BlendMode;\n\t\t\tOutputQueue.Enqueue (NextFrame", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = p.readInt();\n            dc.type = p.readInt();\n            dc.time = p.readInt();\n            dc.imsi = p.readString();\n            dc.imsi = PhoneNumberUtils.stringFromString(p.readString());\n            dc.imsi = PhoneNumberUtils.stringFromString(p.readString());\n            dc.imsi = PhoneNumberUtils", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int n = y * xSizeP + x;\n                // Set position of mesh\n                Vector3 pos = new Vector3(leftBottomCorner.x + (x / (float) xSizeP * 2 -", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\tif (rawResult == null)\n\t\t\t{\n\t\t\t\tswitchToNextServer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (rawResult instanceof Integer)\n\t\t\t\t{\n\t\t\t\t\tif ((Integer) rawResult == test", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t}\n\t\t@Override\n\t\tpublic void setSelection(int i, int i1)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic void setSelection(int i, int i1, int i2)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(\"Unknown object\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private void logging2(String msg)\n        throws IOException\n    {\n        logging(msg", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 6;\n                pixel_y += 6;\n            }\n            /**\n             * *** Draw the console stuff ****\n             */\n            pixel_x = 0", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position) <= spell.Range &&\n                                        (spell.RangeCheckFrom.To2D().Distance(position) <= spell.Range))\n                            {\n                                result.Add(minion);\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (spell.RangeCheckFrom.To2D().Distance(position) <=", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.getInducedPath(x, y).size() > 0;\n    }\n    public static List<Node> getInducedPath(Graph graph, Node a, Node b) {\n        List<Node> path = new LinkedList<>();\n        path.add(a);\n        path.add(b);\n        return getInducedPath", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public virtual void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null && other.attachmentFile == null) {\n            return true;\n        }\n        if (this.attachmentFile == null || other.attachmentFile == null) {\n            return false;\n        }\n        if (this.attachmentFile.getFileName().equals(other.attachmentFile.getFileName())) {\n            return true", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        m_Item = null;\n                        m_Item = new InternalItem(m_From, m_End, m_MinDamage, m_MaxDamage);\n                        m_Item.MoveToWorld(new Point3D(loc), m_Item.Map);\n                        m_Item.Movable = true;\n                        m_Item.Movable = false;\n                        m_Item.Movable =", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool force = false)\n\t\t{\n\t\t\tif (force)\n\t\t\t{\n\t\t\t\tJoin(user, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (Available)\n\t\t\t\t{\n\t\t\t\t\tif", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {\n    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            final DialogFragment dialog = ZipDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialogsDialog", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n}\npublic void close(ChatMessage chatmessage) {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel.eventLoop().execute(new Runnable() {\n        public void run() {\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                z_arr = np.zeros((2, 2), dtype=np.complex)\n                z_arr[0, 0, 0] = z_dict[z_key][d_index]\n                z_arr[0, 1, 0] = z_dict[z_key][d_index]\n                z_arr[0", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.size() == 2? recipients.get(0).toShortString() + \" and \" + recipients.get(1).toShortString() : recipients.get(0).toShortString() + \" and \" + recipients.size", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = path.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = path.pathsep.join(extra_lib)\n        if self.config[\"tools\"][\"rust-root\"]:\n            # This path is for when rust-root points to an unpacked installer\n            extra_path = [", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(obj[\"paths\"]):\n            self._path_hash[path] = (self._path_hash[path],)\n            self._data[test_type] = type_paths\n        for path, items in iteritems(obj[\"paths\"]):\n            self._path_hash[path] = (self._", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            return 0;\n        }\n    }\n}\n```\nThe code provided is a partial implementation of a network layer for a CANAPE network testing tool. The code is written in C# and uses generics to provide a flexible and extensible framework for implementing network layers. The code includes abstract methods for reading and writing data", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i]\n        grad_Etf = grad_Etf - grad_var*grad_Etf[0]\n        transformed_grad.append(grad_Etf)\n      transformed_grad = np.asarray(transformed_grad)\n      return transformed_grad", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(this.id.compareTo(obj) < 0)\n\t\t\treturn -1;\n\t\tif(this.id.compareTo(obj) > 0)\n\t\t\treturn 1;\n\t\treturn 0", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 3);\n    }\n    @Test\n    public void shouldThrowExceptionWhenUpdatingStackWithNullName() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.setName(null);\n        stackDao.update(stack);\n    }\n    @Test\n    public void shouldThrowExceptionWhen", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setParameterName(\"depth\");\n        depthParameter.setParameterValue(String.valueOf(depth));\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t//... (rest of the code)\n\t\t}\n\t\t#endregion\n\t}\n}\npublic class LoycSyntaxExtensions\n{\n\t/// <summary>Gets the first node in a list that matches a pattern.</summary>\n\t/// <param name=\"list\">A list of nodes to search.</param>\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        extendedWillHit = MinionManager.GetMinions(shadow.Position, q.Range).Count();\n                        break;\n                    }\n                    else\n                    {\n                        extendedWillHit = 0;\n                    }\n                    if (extendedWillHit >= param)\n                    {\n                        actionQueue", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.ContextMenuFactory.instance().createMenuStart(context, factory.getUIEngine(), factory.getTheme());\n\t}\n\t\t// Grid Controls\n\t\tthis.grdResultGrid = factory.getUIEngine().createGridBridge(new ims.framework.controls.GridControl(0, factory.getUIEngine(), context, new String", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall Python prerequisites\n\"\"\"\ndef install_python_packages():\n    \"\"\"\n    Install Python packages\n    \"\"\"\n    # Install the packages\n    for req_file in PYTHON_REQ_FILES:\n        pip_install_req_file(req_file)\n    # Install private packages\n    if PRIVATE_REQS in PYTHON_REQ_FILES:\n        pip_install_req_file", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "            'name': \"Parent\"\n        })\n        with self.env['test_testing_utilities.parent'].Form(r) as f:\n            with f.subs.edit(index=0) as s:\n                self.assertEqual(s.name, \"Parent\")\n                s.name = \"Parent2\"\n                self.assertEqual(s.name, \"Parent2", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).subs(x, y) == Sum(y, (y, 1, 2)\n    assert Sum(x, (x, 1, 2).subs(x, y) == Sum(y, (y, 1, 2)\n", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, changedItems, startingIndex, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            streamWriter.close();\n            result = null;\n            writer.close();\n            streamWriter = null;\n            writer = null;\n            result = null;\n            writer = null;\n            streamWriter = null;\n            result = null;\n            writer = null;\n            streamWriter = null;\n            result = null;\n            writer", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus = Token2Csv();\n                    break;\n                case Param.CampusAge:\n                    c.CampusAge", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"width: {0}\", ide.width);\nConsole.WriteLine (\"height: {0}\", ide.height);\nConsole.WriteLine (\"colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"bytesInRes: {0}\", ide.bytesInRes);\nConsole.WriteLine (\"imageOffset: {0}\", ide.imageOffset);\nConsole", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                l.successors = l.successors;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null)", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(ptr_of_this", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition = new Combo(grpBlockSettings,", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the last image value\n        self._getLastValue( driver, \"Image\")\n        # Find the last", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._set_K_H(K, H)\n        self.transport._activate_outbound()\n        self.transport.gss_kex_used = True\n        self.transport._send_init()\n        self.transport._send_hostkey()\n        self.transport._send_kex()\n        self.transport._send_continue()\n        self.transport._", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode!= null) {\n                DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName);\n                populateNode(databaseNode, node);\n                if (treeModel!= null) {\n                    treeModel.reload(databaseNode);\n                }\n            }\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            self.pool = self.env['hr.payslip']\n            self.employee_id = self.employee_id\n            self.localdict = localdict\n            self.localdict['categories'] = self.env['hr.contract.category']\n            self.localdict['rules'] = self.env['hr.contract.rule']\n            self.localdict['", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin), np.log(mmax), mspace)\n        #marr = np.exp(lnmarr).astype(np.float64)\n        #sigma_m = np.array([cosmo", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n        d.width = font.getSize() * 2;\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='right_triangle',phi=np.pi/2,dr=[0,0,0]):\n        #flag 'right_triangle' means the p2 is the third point of the right triangle\n        #flag'regular_triangle' means", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsLoaded)\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Show();\n\t\t\t}\n\t\t}\n\t\tprivate void ShowHideWindow(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window == null)\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n            params[0]['bins'].append(params[0]['low'] + i * step)\n            params[0]['low'] = params[0]['low'] + step\n        Object.__init__(self, name, title, params[0]['nbins", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getReference());\n        }\n    }\n    public void cancelQuery(XmppConnection connection, Query query) {\n        synchronized (queries) {\n            queries.remove(query);\n        }\n        XmppConnection.removePacket(connection, query.getQueryId());\n    }\n    public void cancelAllQueries(X", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im0.convert(\"L\", rgb2r)\n            im1L = im0.convert(\"L\", rgb2r)\n            im1L = im0.convert(\"L\", rgb2r)\n            im1L = im0.convert(\"L\", rgb2r)\n            im1L", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\ttag.readRecords(sfi, ret);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[]... data) {\n\t\tconfigApplication(app);\n\t\tfor (byte", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Unknown block of type %u\" % self[\"block_type\"].value\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return \"Block %s\" % self._name\n    def createDescription(self):\n        return \"Block %s\" % self._", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is a convenience method that allows the user to send a message to the\n\t * remote engine. The message is sent as a command to the remote engine.\n\t * \n\t * @param command\n\t *          the command to send to", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, a in self.apps:\n            if path.startswith(p):\n                return a(environ, start_response)\n        return self._not_found(environ, start_response)\n    def _not_found(self, environ, start_response):\n        \"\"\"Return 404", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, sys.argv[ 2 ] )\n\t\tmodel.score()\n\t\tprint \"Model score = %s\" % model.score()\n\telif len( sys.argv ) == 5 :\n\t\tdata =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n```\nThe final answer is: \n\n```csharp\npublic static void CheckResult(ref EnhanceResult res, int chance)\n{\n    if", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Create a new enum_type\n            enum_type = self.create_enum_type(\n                self.create_enum_type_definition(),\n                entry_name, entry_value, displayname, desc\n            )\n            # Add the enum_type to the list\n            entries[entry_name] = enum_type\n        return entries\n    #", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (alModules.Count > 0)\n            {\n                for (int i = 0; i < alModules", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int textureHash = 0; textureHash < hashPrime; textureHash++)\n                {\n                    for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                    {\n                        if(this.trianglePoint == -1)\n                            throw new RuntimeException(\"trianglePoint is -1\");\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    return HttpResponse(json.dumps({'exposedHeaders': exposedHeaders + ',' + header})  # lint-amnesty, pylint: disable=http-response-with-json-dumps\n    return response\ndef expose_headers(view_func):\n    \"\"\"\n    This decorator should only be used with views which return a response.\n    \"\"\"\n    @wr", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.IdleSince > (now - settings.ConnectionTimeout * 1000))\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if radius is not None and resolution is not None:\n        # Function 3-A\n        radius = _convert_units(radius, 'radius', units, p, crs, center=area_extent)\n        radius = _validate_variable(radius, radius, 'radius', ['area_extent', 'radius']\n        #", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n```\n# StolenDignity.py\n# by DrLecter\n# StolenDignity.py\n# by DrLecter\n# StolenDignity.py\n# by DrLecter\n# Stolen", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? nullable = this.Seconds;\n\t\t\t\t}\n\t\t\t\tcatch (Exception exception)\n\t\t\t\t{\n\t\t\t\t\tErrorMessage.Show(exception, Assembly.GetExecutingAssembly(), MethodBase.GetCurrentMethod());\n\t\t\t\t\tempty = PlayTime.Empty;\n\t\t\t\t}\n\t\t\t\treturn empty;\n\t\t\t}\n\t\t\treturn empty;\n\t\t}\n\t\tpublic static", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _attributes.Add(new AttributeInfo(this, \"position\", 0, 3, 0, 0, VertexAttribPointerType.Float));\n            _attributes.Add(new AttributeInfo(this, \"color\", 0, 4, 0, 0, Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.TumourGroupListVo bean = (ims.clinicaladmin.vo.TumourGroupListVo)beans.get(x);\n\t\t\tcoll.add(bean);\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(selectedLine<selected.length){\n\t\t\t\t\tcurrent.y = selectedLine[selectedLine].y;\n\t\t\t\t\tcurrent.x = selectedLine[selectedLine].x;\n\t\t\t\t\tcurrent.width = selectedLine[selectedLine].width;\n\t\t\t\t\tcurrent.height = selectedLine[selectedLine].height;\n\t\t\t\t\tif(current.y>0)\n\t\t\t\t\t\tcurrent.y = current", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.startAnimation(set);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.RowState == DataRowState.Added)\n                {\n                    HighestNumber = Math.Max(HighestNumber, PartnerInterestRow.FieldKey);\n                }\n            }\n            if (HighestNumber > 0)\n            {\n                ARow.FieldKey = HighestNumber + 1;\n            }\n            else\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.addWindowToDataset(pssm, i, protein.getStructure());\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset.\n\t * \n\t * @param pssm", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
