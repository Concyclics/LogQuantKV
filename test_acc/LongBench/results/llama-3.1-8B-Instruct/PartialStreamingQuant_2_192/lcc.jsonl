{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tParticipantGump pg = new ParticipantGump( p.Players[j].Mobile, p.Players[j].DuelContext );\n\t\t\t\t\tpm.SendGump", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_u, e_v", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Read some frames\n        buff = a.read_frames(1024)\n        # Seek to the beginning\n        a.seek(0)\n        # Read some frames\n        buff2 = a.read_frames(102", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_upload_subtitles(self):\n    return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    #Add the following methods to the class\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def displays_upload_subtitles_button(self):\n        return", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:color\", olStyle.getColor());\n\t\t\t\t\twriter.addAttribute(\"ol:opacity\", olStyle.getOpacity());\n\t\t\t\t\twriter.addAttribute(\"ol:visible\", olStyle.getVisible());\n\t\t\t\t\twriter.addAttribute(\"ol:legend\", olStyle.getLegend());\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(dbname)\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select distinct category from questions\")\n    ret = []\n    for r in dbconn.fetchall():\n        ret.append(r[0])\n    return ret\n    dbconn", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 3:\n                    mob.CloseGump(typeof(SR_Gump));\n                    mob.SendGump(new SR_RunebookPrompt(RuneAcc));\n                    break;\n                case 4:\n                    mob.CloseGump(typeof(SR_Gump));\n                    mob.SendGump(new SR_RunebookPrompt(RuneAcc", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(\"  \" + cert.getSubjectDN());\n                s.println();\n            }\n            s.println(\"***\");\n        }\n    }\n    Certificate[] getCertificateChain() {\n        Certificate[] chain = new Certificate[encodedChain.size()];\n        for (int i =", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t\tRedButton btnAlchemize = new RedButton(Messages.get(Alchemize.class, \"alchemize\", item) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t}\n\t\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        response = self.server.dispatcher.dispatch(request, environ['PATH_INFO'])\n        self.send_response(200)\n        self.send_header('Content-type', 'text/xml')\n        self.end_headers()\n        self.wfile.write(response)\n        return\n    def do_GET(self):\n        return self.do_get(self.path)\n    def", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    return status_id\n    #self.base.lock_status(self.account_id, status_id)\n    #self.base.lock_status(self.account_id, status_id)\n    #self.base.lock_status(self.account_id, status_id", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return self.get_process_data(UploadFile, {\n                \"login\": login.decode('UTF-8'),\n                \"password\": password.decode('UTF-8'),\n                \"path\": path.decode(\"UTF-8\"),\n                \"session\": byte_to_unicode_dict(session)\n            })\n        except Exception as e:\n            result", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tIPermission c = a.Union (b);\n\t\t\tAssert.IsTrue (c is ZoneIdentityPermission);\n\t\t\tAssert.IsTrue (c is SecurityPermission);\n\t\t}\n\t}\n} // class ZoneIdentityPermissionTest\n} // namespace MonoTests.System.Security.Permissions\n// Copyright (c) 2004 Nov", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_key_manager(keyfile, certfile, ca_certs):\n    key_managers = []\n    if keyfile:\n        key_managers.append(_get_key_manager(keyfile))\n    if certfile:\n        key_managers.append(_get_key_manager(certfile))\n    if ca_certs:\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        List aliases = manager.getAliases(domain);\n        request.setAttribute(\"aliases\", aliases);\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n        request.setAttribute(\"domain\", domain);\n        request.setAttribute(\"domainAdmin\", manager.getDomainAdmin(domain));\n        request.setAttribute(\"", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__datastream_fd = os.open(\n            self.__datastream_address, os.O_RDWR | os.O_CREAT | os.O_EXCL)\n        self.__data_pump_task = self.__event_loop.create_task(self.__data_pump_main())\n    async def", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, 0));\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            MessageResources resources = getMessageResources(request);\n            String msg = args[i].getBundle();\n            if", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n}\n```\nThe code is a data management system for a Minecraft plugin. It has several data storage systems, including a temporary data storage system, a timed data storage system, and a server data storage system. The code is written in Java and uses", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show mini mode dialog\", getFieldEditorParent()));\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n\t\t}\n\t}\n}\npublic class InternalTarget : Target\n{\n    public InternalTarget(Spell owner) : base(owner)\n    {\n    }\n    protected override void OnTarget(Mobile from, object o)\n    {\n        if (o is IPoint3D)\n        {\n            m_Owner.S", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t//... (rest of the code remains the same)\n\t}\n\t/**\n\t * Returns a pretty-print String representation of the given IR.\n\t * @return a pretty-print String representation of the given IR.\n\t */\n\tpublic static String prettyPrint(IR ir) { \n\t\treturn prettyPrint(ir, 0", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \n```python\nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  It is not intended to be used directly.\n    \"\"\"\n    def __", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n// End of file\n```\nThe code is already complete. It's a C# class that represents a MultiView control in ASP.NET. The code is well-structured and follows the standard ASP.NET naming conventions. The class has several properties and methods that", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Downloading {0} {1} {2} {3}'.format( lat1, lat2, lon1, lon2 )\n\n## You can use the following code to test the program\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Wigle Down", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                // SkillGroup2 replace SkillGroup2\n                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(0) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                            if (i", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform, platform_info in platforms.items():\n            builds.append({\n                'locale': locale,\n                'build': build,\n               'version': version,\n                'platform': platform,\n                'locale': locale,\n                'locale_pretty': locale,\n                'platform_pretty': platform_info['platform_pretty", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueType(projectID, issueTypeID);\n\t\t}\n\t\treturn stateBeansList!=null && stateBeansList.contains(new TStateBean(objectID));\n\t}\n} \nPlease help me complete the", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax) {\n                    InvocationExpressionSyntax invocation = (InvocationExpressionSyntax)argument.Parent;\n                    if (invocation.Expression is IdentifierNameSyntax identifierNameSyntax && identifierNameSyntax.Identifier.Text == \"ByRef\") {\n                        to", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        self._update_partition_id(0)\n        # Set to second group configuration.\n        self._update_partition_id(1)\n        # Verify that the children are updated.\n        self._assert_children(2)\n    def test_create_split_test(self):\n        \"\"\"\n        Test that a split_test module is created with the", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference fontRef = new PdfIndirectReference();\n            PdfIndirectReference toUnicode = null;\n            PdfIndirectReference cidToGid = null;\n            PdfIndirectReference cidToGidMap = null;\n            PdfIndirectReference cidToGidMap2 = null;\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\t\tcgn.name = cell.getName();\n\t\t\t\t\t\t\tcgn.clock = 0;\n\t\t\t\t\t\t\tcgn.x =", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        return new ListenableFutureTask<>(callable);\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      return loadPage(model.getSprite(), model.getSpriteWidth(), model.getSpriteHeight());\n    }\n    private Bitmap loadPage(String sprite, int width, int height) throws IOException {\n      return loadPage", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                // Command history down\n                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Not implemented.\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It is a view that is displayed when a user navigates to the details of a Node object. The view has a property `is_displayed` that checks if the view is currently displayed. The view also has a property `title` that", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                writer.Write(\"<script type=\\\"text/javascript\\\">\");\n                writer.Write(\"var toolbarButton = new ClearCanvas.ImageServer.Web.Common.WebControls.ToolbarButton();\");\n                writer.Write(\"toolbarButton.setHoverImageURL('\" + Page.ResolveUrl(HoverImageURL) + \"');\");\n                writer.Write(\"toolbarButton.setDisabledImageURL", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\tcompound.setInteger(\"Damage\", damage);\n\t}\n\tpublic void writeNBT(NBTTagCompound compound)\n\t{\n\t\tstack.writeToNBT(compound);\n\t\tcompound.setInteger(\"Damage\", damage);\n\t}\n} \npackage com.github.lazylazuli.traps.common.block;\nimport net.minecraft.block.Block;\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // End of serialization\n    // End of class\n}\n```\nThe final answer is: \n```java\n/**\n *  Copyright (C) 2002-2015   The FreeCol Team\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    assert i\n    i = json.loads(i)\n    i = i['_source']\n    assert i['indicator'] == 'example.com'\n    assert i['group'] == 'private'\n   ", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(doc._get_changed_fields(), ['owns'])\n        self.assertEqual(doc._get_changed_fields(), ['owns'])\n        self.assertEqual(doc._delta(), ({'owns': [embedded_2]}, {}))\n        self.assertEqual(doc._delta(), ({'owns': [embedded_2]}, {}))\n        doc.owns", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_x, ref_y):\n    \"\"\"\n    Plot a waveform at a given time index.\n    :param x: Echo sample index\n    :param y: Waveform\n    :param ref_x: Reference echo sample index\n    :param", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.TryGetValue(path, out _))\n                {\n                    _logger.Debug(\"Ignoring path {0} as it's being watched for changes\", path);\n                    continue;\n                }\n                if (ignored.TryGetValue(rootFolder, out _))\n                {\n                    _logger.Debug(\"Ignoring path {0} as it's being", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction)));\n\t}\n\t@Override\n\tpublic E merge(K key,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'portal_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                allreplies = self.get", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = (sbyte)value; }\n\t\t}\n\t}\n}\n} \n} \n} \n} \n} \n} \n} \n} \n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get the channel URI\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri: {1}\", scene.RegionInfo.RegionName, channelUri);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs e) {\n\t\t\tDialogResult=DialogResult.Cancel;\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Read the header line.\n        line = file_handle.next().split(',')\n        # Split the line into column headings.\n        column_headings = {}\n        for i, col in enumerate(line):\n            if col:\n                column_headings['X'].append(col)\n            else:\n                column_headings['X']", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    group_id = data_dict['group_id']\n    group = model.Group.get(group_id)\n    if not group:\n        return {'success': False,'msg': _('Group not found')}\n    return", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = confidences[resultIndex];\n\t\t\t\tdouble confidence = conf;\n\t\t\t\tdouble predictedLabel = exampleSet.getAttributes().getLabel().getMapping().mapIndex((int) exampleSet.getAttributes().getLabel().getMapping().mapValue(exampleSet.getAttributes().getLabel().getMapping().mapValue(exampleSet", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n        #region Properties\n        /// <summary>\n        /// Gets a flag which indicates whether the provider supports\n        ///             <see cref=\"M:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.AddTranslationUnits(Sdl", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            if (ch < 0x10000) {\n               codePoint = ch;\n            } else {\n               codePoint = 0x10000 + (ch - 0x10000);\n            }\n         }\n         if (_range.contains(codePoint)) {\n            return offset", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        if (studyFormName.equals(accessionNumber.substring(PROGRAM_START, PROGRAM_END).toUpperCase())) {\n            return ValidationResults.SUCCESS;\n        }\n        return ValidationResults.REQUIRED_FAIL;\n    }\n    private static ValidationResults", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.Map!= handshake.Map)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.IsNullOrEmpty(Settings.Map)? \"No map selected\" : \"Map mismatch\";\n\t\t\t\t\tSendOrderTo(newConn,", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//#############################################################################\n//EOH\n// This code was generated by Barbara Worwood using IMS MAXIMS Development Environment (version ", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()\nelif prnum == '': \n    dialog = xbmc", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\ndef getReport( self ):\n  try:\n    repClient = ReportsClient( \"Accounting/ReportGenerator\" )\n    params = self.__parseFormParams()\n    if not params[ 'OK' ]:\n      return params\n    params = params[ 'Value' ]\n    return repClient.get", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        // Add the plan to the plan graph\n        // Add the plan to the plan graph\n        // Add the plan to the plan graph\n        // Add the plan to the plan graph\n        // Add the plan to the plan graph\n        // Add the plan to the plan graph\n        // Add the", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.Handshake = (byte)hs;\n\t\t\tdcb.ReadTotalTimeoutMultiplier = 0;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    # This test is a bit of a hack, but it's the best way to test the\n    # cobranding system.  We create a cobrand, then make sure that\n    # the user can see the cobrand's profile page.\n    self.login", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    args = parser.parse_args()\n    if args.configfile is None:\n        write_config_file = True\n    else:\n        write_config_file = False\n    if write_config_file:\n        write", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tnewList.append(self.buildEntryComponent(essid, bssid, encrypted, iface, bitrate, signal))\n\t\telse:\n\t\t\tnewList.append(self.buildEntryComponent(essid, bssid, encrypted, iface, bitrate, signal))\n\t\tnewList.append(self.buildEntryComponent(essid, bssid,", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (textAlignment == Element.ALIGN_CENTER)\n                    fontX = fontX / 2;\n                return new Rectangle(fontX, fontY + bar", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value'\n   *    \n   * getStringArray(props, \"property1", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\n# Define the test points\nsample_points = [\n    (\"longitude\", x_points),\n    (\"latitude\", y_points),\n]\n```\nThis line of code is part of the `test_colpex` class in the `TestColpex` class. It defines the sample points for the trajectory interpolation", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (IsFrameModified())\n            {\n                _packets[_index] = _packets[_index].ClonePacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\n    else:\n        print '\\033[1;31;40m'\n    return 0\ndef get_mfcc_diy(wav_dir):\n    # get the mfcc from the", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} /// <summary>\n    /// reference-counted set\n    /// </summary>\n    public class RefCountedSet<TK> : RefCountedSet<TK>\n    {\n        public RefCountedSet()\n        {\n        }\n        public RefCountedSet(\n            IDictionary<TK,", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.treeView1.ExpandAll();\n            this.treeView1.ShowNodeToolTips = true;\n            this.treeView1.ShowPlusMinus = true;\n            this.treeView1.ShowRootLines = true;\n            this.treeView1.ShowLines = true;\n            this.treeView1.ShowPlusMinus = true;\n", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef copyBaseFunction( self, functionName, dll, argNames, resultType, argTypes, extension=None, doc=None, deprecated=False, name=None, log=None, logOnFail=None, logOnSuccess=None, logOnWarning=None, logOnError=None, logOnWarningWith=None,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeUint64(header, emptyStreams.nextClearBit(0));\n            writeUint64(header, emptyStreams.nextClearBit(0));\n            for (int i = 0; i < files.size(); i++) {\n                if (emptyStreams.get(i)) {\n                    writeUint64(header, files.get(i).", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (System.currentTimeMillis() - start >= rampDelay)\n                    {\n                        inRamp = true;\n                        start = System.currentTimeMillis();\n                    }\n                }\n                if (inRamp)\n                {\n                    if (rampUp)\n                    {\n                        alphaLevel = (int) (shield * (255 - (int", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_idletime_not_configured()\n        {\n            GivenGlobalSeedLimits();\n            GivenCompleted", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n        }\n    }\n}\n}\n#endregion\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1 = no oversampling)\\n'])\n        f.writelines([' 0) 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 5);\n                    i += ((b & 0x01) << 2);\n                    i += ((b & 0x02) << 3);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _configure_course(self):\n        \"\"\"\n        Configure the course with the course details\n        \"\"\"\n        self._configure_course(self._course_dict, self._course_details)\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function is used to download the certificate files from the api host\n    # It is used in the create_meter function\n    # The function returns a boolean value, True if the request was successful, False otherwise\n    #", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy = new System.Windows.Forms.Label();\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(200, 13);\n            this.lblPrivacy.TabIndex = 1;\n            this", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (plug, plugname, optname, optparm in self.all_options:\n            self.loaded_plugins.append((plug, plugname))\n        self._set_tunables()\n        self._set_tunables()\n        self._set_tunables()\n        self._set_tunables()\n        self._", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" Session Speaker List \"\"\"\n## Step 1: Define the fossil interface for the session speaker list\nclass ISessionSpeakerListFossil(IFossil):\n    def getId(self):\n        \"\"\" Session Speaker Id \"\"\"\n    def getFirstName(self):\n        \"\"\" Session Speaker First Name \"\"\"\n    def get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter, importServerRadio.isSelected(), importLocalRadio.isSelected(), subfoldersCheckbox.isSelected());\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText(), null,", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (value instanceof String) {\n\t\t       \t\t\tlayer = Integer.parseInt((String) value);\n\t\t       \t\t}\n\t\t    \t}\n\t    \t}\n\t    \treturn layer;\n    \t} catch (Exception e", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null) {\n            if (currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n                Session.StatusCallback callback = new Session.StatusCallback() {\n                    @Override\n                    public void call(Session session, SessionState state, Exception exception", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions){\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tpublic void setChance(String emotionName, float chance) {\n\t\tfor (Emotion emotion : emotions){\n\t\t\tif", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2, 'property2': 3},\n               'stages': [\n                    {\n                        'duration': 2,\n                        'finished_at': constants.SPLIT_TIMESTAMP2,\n                        'name':'stage1',\n                       'started_at': constants.SPLIT_TIMESTAMP1\n                    },\n                    {\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n\"\"\"\n    \"\"\"\n    #================================================================================================\n    # Lat/Long to UTM, UTM to Lat/Long\n    #================================================================================================\n    # Lat/Long to UTM\n    #================================================================================================\n    def latlong_to_utm(lat, lon, zone):\n        \"\"\"\n        Convert Lat", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\nform = ReportUserForm(request.POST)\n```\nThis line of code is missing the `instance` argument, which is required for the `ChangeUserForm` class to work correctly. The corrected line of code should be:\n```\nform = ReportUserForm(request.POST, instance=user)\n```\nThis will", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductConfigureBase(ReturnToReferrerMixin, LaunchpadFormView):\n    \"\"\"Base class for product configuration views.\"\"\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n    label = \"Change project configuration\"\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n\t}\n}\n#endif\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n} \n```\nPlease complete the code given above. I have tried to complete the code but I am not sure if it is correct. Please help me to complete the code. \n\nThe code is incomplete and I am not sure how to", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags = []\n            for flag, regex in self._config['tag-regexes']:\n                if flag == 'include':\n                    new_positional_tags.append((flag, regex))\n                else:\n                    new_positional_tags.append((flag, regex))\n            return new_positional_tags\n    def default", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class Type\n    {\n        public Type MakeByRefType ()\n        {\n            return this;\n        }\n        public Type MakePointerType ()\n        {\n            return this;\n        }\n        public Type MakeArrayType ()\n        {\n            return this;\n        }\n        public Type MakeArrayType (", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_OxygenSensor1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 128., unit=\"%\", offset=-100.0)\n    ]\n    #... (rest of the code", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListCollections')\n\t\t#... (rest of the code remains the same)\n```\nThis is a Python script that implements a SecretService class, which is a D-Bus service that provides a secret collection and session", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddSpell( typeof( RuneSightScroll ), Reg.BlackPearl, Reg.Garlic, Reg.MandrakeRoot, Reg.SulfurousAsh );\n            }\n        }\n    }\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._after_this_request()\n        self._implicit_app_ctx_stack = None\n        self._after_request_functions = None\n        self._implicit_app_ctx_stack = None\n        self._implicit_app_ctx = None\n        self._preserved_exc = None\n        self._after_request_functions = None\n       ", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_producer_list(session, cluster_id, topic_name, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n}\n```\nThe final answer is: \n```java\npublic Set<ResourceEntity> getConsumedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Compute the distance from the rotation axis to the source point\n        src_to_line_distance = src_radius / (1 + (det_radius / (2 * np.pi * q))\n    else:\n        # Compute the distance from the rotation axis to the source point\n        src_to_line_distance = src_radius /", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _get_search_results(self, search_string, search_mode='eponly', epcount=0, age=0):\n    \"\"\"\n    This is a generic search function that can be used by all providers. It will return a list of search results.\n    \"\"\"\n    if self.provider.providerType == GenericProvider.N", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic string ToString (string format)\n\t\t{\n\t\t\treturn unit.ToString (format);\n\t\t}\n\t\tpublic string ToString (string format, IFormatProvider provider)\n\t\t{\n\t\t\treturn unit.ToString (format, provider);\n\t\t}\n\t\tpublic string ToString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tBigInteger crypted1 = new BigInteger(block1);\n\t\t\tB", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)((JValue)obj.Properties[0].Value).Properties[\"The outermost value\"].Value, Is.EqualTo(\"JSON Test Pattern pass3\"));\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (h == 0) {\n                        edges.add(new T2(w, h));\n                    }\n                    if (h == height - 1) {\n                        edges.add(new T2(w, h));\n                    }\n                    if (w", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    data = i1.get(col1=\"area_um\", col2=\"deform\", lut_identifier=\"LE-2D-FEM-19\", channel_width=20, flow_rate=0.04, viscosity=15, add_px_err=True, px_um=0.34)\n    assert np.allclose(data", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, subscription):\n    \"\"\"Return the lowest spot price for a given zone and region.\"\"\"\n    # Find the lowest spot price for the given zone\n    lowest = None\n    for entry in history:\n        if is_match(entry, subscription):\n            if lowest is None or is_older(entry,", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Downloads the jar file and installs it.\n\t * \n\t * @return true/false\n\t */\n\tprivate boolean performInstallation() {\n\t\tString downloadedJarFile = performDownload();\n\t\tif (downloadedJarPath!= null) {\n\t\t\treturn", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.VertexPosAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDelete", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        (projected onto the *y* axis) or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.get_inverse_cov_mat(self.x_model, self.parameter_values)\n    @property\n    def x_model(self):\n        \"\"\"1", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Converts this to a string.\n     *\n     * @return a string representation of this bean\n     */\n    @Override\n    public String toString() {\n        if", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  no\n  }\n} catch (Exception e) {\n    LOG.error(\"Failed to transform Walrus object \" + walrusObject.getObjectKey() + \" to OSG object\", e);\n    return null;\n  }\n  return osgObject;\n}\nprivate static Function<BucketInfo, ObjectEntity> imageToOS", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add\n            {\n                _selectedFolderChanged += value;\n            }\n            remove\n            {\n                _selectedFolderChanged -= value;\n            }\n        }\n        #endregion\n        #region Folder Explorer Component\n        public bool IsInitialized\n        {\n            get { return _initializationState == InitializationState.Initialized", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters parameters = new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), new VmTemplate());\n        doReturn(true).when(command).isVmTemplateDaoValid();\n        doReturn(true).when(command).isVmTemplateDaoValid();\n        do", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table.TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.status\n        self.system['SCRIPTSTATUS'] = self.scriptstatus\n        self.system['PARSTATUS'] = self.parstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[] returnTypes, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)\n\t\t{\n\t\t\treturn DefineMethod(name, attribs,", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return this;\n    }\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public static partial class SendInvitationTypes {\n      public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                int index = getVertIndex(i, x);\n                vertices[x].set(getVert(i, index));\n            }\n        }\n    }\n    public void write(JMEExporter e) throws IOException {\n        super.write(e);\n        OutputCapsule capsule = e.getCaps", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (!showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATECREATED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of columns to hide in the document list view.<p>\n     * \n     * Used", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds(0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tinputField.ActivateInputField();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinputField.DeactivateInputField();\n\t\t\t}\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tinputField.ActivateInputField();\n\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF textSize = GetLargeTextSizeF();\n      SizeF", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            if (Users.Count > 0)\n            {\n                DataTable users = SUserAccess.LoadByUserIds(Users.ToArray());\n                foreach (DataRow", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions;\n\t\t}\n\t\tpublic override void DrawEdgeCursors()\n\t\t{\n\t\t\tvar edge = worldRenderer.Viewport", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count > 1)\n            {\n                // display a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(\n                    PetraErrorCodes.ERR_DISCOUNTS_PER_TYPE_CODE_MUST_BE_UNIQUE));\n                // Handle addition to/rem", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n} \n``` \nPlease complete the code given above. The code is incomplete and has some errors. The code is written in C# and is part", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\ndef _apply_packages(self, packages):\n    \"\"\"Apply packages to the system.\n    :param packages: list of packages to be applied\n    :type packages: list of str\n    \"\"\"\n    # implementation of the method\n    pass\n```\nThis code is a part of the `PayloadRequirements", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t\tpublic string SessionManagerPath {\n\t\t\tget { return Constants.SessionManagerInterfaceName; }\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getBugPattern() == null) {\n                reportBug(bugInstance);\n                return;\n            }\n        }\n    }\n    public void reportBug(BugInstance bugInstance) {\n        if (applySuppressions) {\n            if (bugInstance.getSuppressions().size() > 0)", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Apple : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Apple() : base( 0x1A1 )\n\t\t{\n\t\t\tthis.Weight = 0.1;\n\t\t\tthis.FillFactor = 1;\n\t\t}\n\t\tpublic Apple( int amount ) : base( amount, ", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.IsValidTarget(E.Range))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    else if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && target!= null && target.IsValidTarget(Q.Range))\n                    {\n                        SpellManager.PredCast", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\ndirectory = 'gds/specials/forecasts/tables/germany'\n```\nThis is the last line of the code. The file is a continuation of the previous code. The file is a Python script that fetches weather data from the German Weather Service (DWD) using FTP.", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(\n            field_model_def['rules']['marc']['1']['function'], field_def['rules']['marc']['1']['function']\n        )\n        self.assertEquals(\n            field_model_def['rules']['marc']['1']['args'], field_def['rules']['marc']['1']['args']\n        )\n", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"E1\", \">E1<\"} );\n                // widen to int\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __init__(self, simulation=None, particle=None, m=None, x=None, y=None, z=None, vx=None, vy=None, vz=None, primary=None, a=None, P=None, e=None, inc=None, Omega=None, omega=None, pomega=None, f=None, M=None", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            html = text;\n            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    private static String html;\n    private static View view;\n    private static ViewFactory factory;\n    private static BasicEditorKit kit;\n    private static BasicEditor", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename)\n    assert s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items[0].url == \"/html/test", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t\tmapping.SqlLoader = new HbmSqlLoader { name = namedQueryReference };\n\t\t}\n\t\tpublic void Loader(System.Type loaderType)\n\t\t{\n\t\t\tif (loaderType == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"loaderType\");\n\t\t\t}\n\t\t\tmapping.SqlLoader =", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n}\n```\nThe code is almost complete, but there is a missing line of code in the `Serialize` method. The correct code should be:\n```\nwriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        graphQueue.pop();\n    }\n    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.peek().isRoot()) {\n            return;\n        }\n        if (invocationQueue", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    materializePhi(states, key);\n                }\n            }\n        }\n        private void materializePhis(List<ReadEliminationBlockState> states) {\n            for (Map.Entry<CacheEntry<?>, ValueNode> entry : states.get(0).readCache.entrySet()) {\n               ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public abstract void onSetPauseImage(String uri);\n}\n*/\npackage com", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\n                from.SendGump(new EodonGump(from, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic KotlPowerCore(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\n# Define a new model for Bib001x table\nBib001x = type('Bib001x', (db.Model, BibxxxMixin), {})\n```\nThis code defines a new model for the Bib001x table. The `Bib001x` class is a subclass of `db", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_user_status(self, username, domain):\n    user = '%s@%s' % (username, domain)\n    data = self.module.get(user)\n    if data is None:\n        raise UserNotFound(username, domain)\n    else:\n        return data['last_status']  # <--- This line is", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', [e.__str__(self.wrap", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status of transformation %s to ValidatedOutput\" % ( transID ) )\n      else:\n       ", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"POST\")) {\n\t\t\t\t// POST forms are not allowed to be absolute\n\t\t\t\tif(!action.startsWith(\"/\")) {\n\t\t\t\t\tthrow new CommentException(l10n(\"absolutePOSTForm\"));\n\t\t\t\t}\n\t\t\t\t// @see bug #2450\n\t\t\t\tif(action.startsWith(\"/\")) {\n\t\t\t\t\t//", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self.TEST_PROJECT, self.TEST_REVISION,\n                                                self.TEST_BUILD_NUMBER, self.TEST_PROJECT,\n                                                self.TEST_REVISION, self.TEST_BUILD_NUMBER)\n        gsp.sendCodeReview = Mock()\n        gsp.sendCodeReview.return_value = defer.Mock()\n       ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n    self.category.text = 'test'\n    self.category.scheme = 'http://www.google.com'\n    self.category.label = 'test'\n    self.category.uri = 'http://www.google.com'\n  def testCategoryToAndFromString(self):\n    self.assert_(self.category.ToString()", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                return super.visitDeclared(type, p);\n            }\n        }\n        @Override\n        public Void visitDeclared(AnnotatedDeclaredType type, Void p) {\n            return super.visitDeclared(type, p);\n        }\n    }\n    @Override\n    public AnnotatedDeclaredType getAnnotatedType(Element element) {\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_subsurface_scattering(MaterialButtonsPanel, Panel):\n    bl_label = \"Subsurface Scattering\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    @classmethod\n    def poll(cls, context):\n        mat = context.material\n       ", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //Mapper1\n            mapper1_mirroringFlag = map1.MirroringFlag;\n            mapper1_mirroringFlag = map1.MirroringFlag;\n            mapper1_prgAddress = map1.PrgAddress;\n            mapper1_prgAddress = map1.PrgAddress;\n            mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspector", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// General Items\n\t\t//----------------\n\t\tAdd(\"Windmill\", 70026); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70027); // Windmill [1000]\n\t\tAdd(\"Windmill\", 70028); // Windmill [1000", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (min, Frame.W);\n\t\t}\n\t\tpublic int SizeWidthToFitWith", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def __init__(self, *args, **kwargs):\n    \"\"\"\n    Initialize the model.\n    :param args: For super()\n    :param kwargs: For super()\n    \"\"\"\n    # Call the parent\n    super(Announcement, self).__init__(*args, **kwargs)\n    # Initialize the fields\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(mode='php', banners=['<?php', '?>']\n# Add any paths that contain custom static files\n# (that are copied directly from imports)\n#html_static_path = ['_static']\n# Add any paths that contain custom static files (that are copied after the theme", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\ncursor.execute('''INSERT INTO flights(sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\nVALUES(:sdate,:stime,:edate,:etime,:duration,:src_callsign,:max_altitude, :registration)''', {'sdate':row", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        rethinkdb.table('projects').get(project_id).update({'last_snapshot': timestamp_to_timestamp(timestamp)}\n        conn.close()\n    conn.close()\n    return\ndef update_zpool_status():\n    \"\"\"\n    Update the status of the zpool.\n    \"\"\"\n    run_on_minion(\"zpool status\")\ndef update_z", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"You know, I've been thinking about that a lot lately.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know, I've been thinking about that a lot lately.\");\n\t\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"You know, I've been thinking about that a", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteRevokedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n        attributes:\n        data:\n        \"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.cod", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    \"\"\"\n    Data about a host's results for a single task.\n    \"\"\"\n    def __init__(self, host_uuid, name, status, result):\n        self.uuid = host_uuid\n        self.name = name\n        self.status = status\n        self.start = None\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\nprivate String getRedirect(String url) {\n    //... (rest of the code remains the same)\n}\n```\nThis method is called from the `doInBackground` method. It's used to get the redirect URL from the given URL. The method uses the `getRedirect` method to get the redirect", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #       it should be moved there\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    def _byte_compile (self, files):\n        self._bytecode_filenames = self._byte_compile\n        self._byte_compile(files)\n    def _byte_compile (self, files):\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tint tableNumber = GetSubclassPropertyTableNumber(lazyPropertyNames[j]);\n\t\t\t\tint[] columnNumbers = subclassColumnNumberClosure[lazyPropertyNumbers[j]];\n\t\t\t\tint[] formulaNumbers = subclassFormulaNumberClosure", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'h_rt=%d' % request['job_max_vmem'],\n        '-l', 'h_vmem=%d' % request['job_max_vmem'],\n        '-l', 'h_cpu=%d' % request['job_max_vmem'],\n        '-", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"AddDelegateToEvent\", model);\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel model, int modelId)\n        {\n           ", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    return string.Format(\"{0}\", item.DisplayName);\n                }\n                return string.Empty;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n                return string.Empty;\n            }\n        }\n    }\n}\n#endregion\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\ndef handlePremium(self):\n    self.logDebug(\"handlePremium\")\n    self.handlePremium()\n```\nThis code is a part of a plugin for a file hosting service. The `handlePremium` method is called when the user has a premium account. The `handlePremium` method is not defined in the", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, move to the first harvestable cell on the path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstHarvestableCell = path[0];\n\t\t\t\tif (harv.CanHarvestCell(self, firstHarvestableCell) && claimLayer.CanClaim", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"Failed to restart dhcpd service\")\n                    return False\n                else:\n                    self.settings.restart_dhcp = \"1\"\n                    self.settings.save()\n        return True\n    def write_dhcp(self):\n        self.logger.info(\"writing dhcp files\")\n        self.dhcp.write_dhcp_file()\n   ", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n    @Override\n    public void setLogAllMessages(boolean logAllMessages) {\n        this.logAllMessages = logAllMessages;\n    }\n    @Override\n    public void setFlusher(Timer flusher) {\n        this.flusher = flusher;\n    }\n    @", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            }\n            #endregion\n        }\n        #region Private Methods\n        private void ClearMask()\n        {\n            for (int index = 0; index < 256; index++)\n            {\n                _allocator._baseUnit[index].NumberStatistics = 0;\n            }\n        }\n        private void ClearMask(P", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Unsigned Long VR.\n        /// </summary>\n        public static readonly DicomVr ULvr = new DicomVr(\"UL\", false, false, false, 4, true,'', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t//sessionValues.Add(tFull[3]);\n\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t//if we are deleting a test type\n\t\tif(! testOrDelete) {\n\t\t\t//show confirm dialog\n\t\t\t//show confirm dialog\n\t\t\t//show confirm dialog\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 4, 9)\n        self.assertEquals(b'\\x00' * 4 + b'ij', self.read(o))\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n  <td>Mac OS X (intel)</td>\n  <td>\n    <a onClick=\"return onDownload(this)\" class=\"download\" href=\"<?cs var:sdk.mac_download?>\">\n      <?cs var:sdk.mac_download?> bytes\n    </a>\n  </td>\n  <tr>\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    plt.plot(cr['combined'][app][test]['durations'], label='%s' % (app))\n    plt.plot(cr['combined'][app][test]['stats']['intervals'][0]['interval'],\n              label='95%% CI')\n    plt.legend()\n    plt.show()\n    return cr\ndef plot_app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _FancyEqMixin(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return self.a == other.a\n    def __ne__(self, other):\n        return self.a!= other.a", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlText());\n\t\t\t\t\tg.drawString(\"X\", x + 2, y + 2);\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Return the number of test patterns and classes \"\"\"\n  # code to return the number of test patterns and classes\n```\n```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Return the number of test patterns", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void visitHeader(ObjectCellVisitor visitor) {\n        visitor.visitHeader(this);\n    }\n    @HOSTED_ONLY\n    public void visit", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(*args, **kwargs):\n    \"\"\"\n    A wrapper around str.format() that allows for the use of the % operator\n    \"\"\"\n    return str_format(*args, **kwargs)\n\"\"\"\nUtilities\n\"\"\"\n# Readline\nimport readline\ndef readline_init():\n    \"\"\"\n    Initialize readline\n    \"\"\"\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        n = m + i16 - 1;\n        i20 = i20 + i16;\n        i21 = i20 + i16;\n        i24 = i20 + i16;\n        i26 = i24 + i16;\n        i28 = i28 + i16;\n        i23", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t}\n}\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n} // namespace\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n```\n\nThe code provided is a JUnit test class for a Java EE application. It uses the CdiUnit framework to run the tests in a CDI (Context and Dependency Injection) environment. The class is annotated with `@RunWith(CdiRunner.class)` to enable CDI support. The `", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        context = testlib.TestContext()\n        self.assertRaises(subprocess.CalledProcessError, context.popen, 'ls', 'nonexistingfile')\n    @testlib.with_context\n    def test_popen_returns_output(self, context):\n        import subprocess\n        proc = context.popen('ls', 'file')\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (code to be completed)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grun", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t}\n\t}\n}\n```\nThe final answer is: \n```csharp\n}\n``` \nThis is the end of the code snippet. The code is a part of the System.Data namespace in the System.Data assembly. It defines a base class for constraints in a database. The class is abstract and provides a", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                } else {\n                    mStationId = stationId;\n                    mLocation = mLocation;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n                    mLastForecast = mLastForecast;\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring query = \"from Continent\";\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(1, stats.GetQueryStatistics(query).ExecutionCount);\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(2, stats.GetQueryStatistics(query).ExecutionCount", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uiCRCITTSum >> 1) ^ ((uiCRCITTSum & 1) * 0x1021);\n                uiCRCITTSum ^= uiByteValue;\n            }\n            return (ushort)(~uiCRCITTSum & 0xFFFF);\n        }\n        private ulong", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1.0F;\n\t}\n\tpublic static class Bullet extends Projectile {\n\t\tpublic Bullet(ServerLevel level, LivingEntity owner, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed) {\n\t\t\tsuper(level, owner, x, y, z, xSpeed", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { new JavaHyperlinkDetector() };\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(editor, controller),\n                new JavaHyperlinkDetector(),\n                new CeylonJavaBackendHyperlinkDetector(),\n               ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.addWidget(Object3DAspect(self, self))\nself.l.addWidget(Object3DScale(self, self))\nself.l.addWidget(Object3DPrivateInterface(self, self))\nself.l.addStretch()\nself.l.setSpacing(4)\nself.l.setMargin(0)\nself.l", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Use location\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tPoint2D p = new Point2D( (int) m_Property.GetValue( m_Object, null ), (int) m_Property.GetValue( m_Object, null ) );\n\t\t\t\t\t\tto", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String valueChoiceStr = selectConverter.convert(valueChoice);\n                        if (valueChoiceStr.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n                  }\n               }\n            }\n            else\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0 && i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChanges; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t\treturn sb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> line in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the line\n                                int orderIndex = Array.IndexOf(purchaseOrderESD.dataRecords, line.Key);\n                                //get the index of the line in the purchase order\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n} // namespace System.ServiceModel.Dispatcher\n// Copyright (C) 2005 Novell, Inc.  http://www.novoell.com\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final Group mockGroup = EasyMock.createMock(Group.class);\n        final SecurityManager mockSecurityManager = EasyMock", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.Center ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v *", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_array(XDRStruct):\n    __slots__ = ['endpoint_stats']\n    def __init__(self, endpoint_stats=None):\n        self.endpoint_stats = endpoint_stats\n    def pack(self):\n        packer = xdrlib.Packer()\n        packer.pack_uint(len(self.endpoint_stats))\n        for stats", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// sends a message to all connected clients\n\t\t/// </summary>\n\t\t/// <param name=\"msg\">message to be sent</param>\n\t\tpublic void SendToClient(string msg)\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  print'   %s' % function_name\n  print'   (%s);' % method_name\n  print' }'\n  print' private:'\n  print'   static %s %s;' % (parent_class, function_name)\n  print'   static %s %s;' %", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items\n            ],\n        mimetype='application/json'\n    )\ndef range_json(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        final ASTSearchOptimizer optimizer = new ASTSearchOptimizer();\n        optimizer.optimize(given);\n        final IQueryNode expectedAST = optimizer.getAST();\n        assert expectedAST.equals(expected", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        return super(UserDetailView, self).post(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        self.request = request\n        self.user = self.request.user\n        self.object = self.get_object()\n        return super(UserDetailView, self).dispatch(request, *", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of the assemblies that are referenced by this assembly.\n    /// </summary>\n    public virtual IEnumerable<IAliasForType> Aliases {\n      get { return this.ResolvedAssembly.Aliases;", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            var p = new DenseVector(input.Count);\n            /// <summary>\n            /// The TFQMR algorithm is an iterative method for solving the linear system Ax = b, where A is a square matrix and b is a vector.\n            /// The algorithm is based on the idea of minimizing the residual r = b -", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n} \nThe code provided is a Java class that contains several statistical functions, including the Gaussian error function, cumulative distribution function, linear regression,", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    A[v, reference_set_map[v]] += 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.child\n            if reference_set_map[v]!= -1:\n               ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        # Check if the mapping is correct\n        self.maxDiff = None\n        self.assertEqual(mapping_json[self.enrich_index]['mappings']['properties'], csv_mapping.properties)\n        return result\n    def _test_enrich(self, sortinghat=False, projects=False):\n        \"\"\"Test whether the enriched items are correct\"\"\"\n", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.Key == orderManager.LocalClient.ClientId)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar player = orderManager.LobbyInfo.Slots[slot.Value.Key];\n\t\t\t\t\t\t\t\t\t\t\tif (player!= null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyPlayer { Name = player.Name, Color = player.Color, Team = player.Team", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString() + string.Format(\" NTSTATUS: {0}\", _status);\n\t\t}\n\t}\n}\nnamespace WinrtCifs.Util\n{\n\t/// <summary>\n\t/// This class contains a list of NTSTATUS codes and their corresponding\n\t/// error messages.\n\t/// </summary", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes\n    def parse_flags(self, flags):\n        self.parse_flags(flags)\n    def parse_frame(self, frame):\n        self.parse_flags(frame.raw_flags)\n    def parse_stream_id(self, stream_id):\n        self.stream_id = stream_id\n    def parse_stream_id(self, stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            if (cluster.RectangularBoundary!= null &&!cluster.RectangularBoundary.RectangularHull().Equals(cluster.BoundaryCurve))\n                throw new Exception(\"Rectangular boundary and boundary curve are inconsistent\");\n            foreach (var c in cluster.Clusters)\n                CheckClusterConsistency(c);\n        }\n#endif\n    }\n}\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlope(double slopeRadians)\n{\n\tm_maxSlopeCos = btCos(m_maxSlopeRadians = slopeRadians);\n}\nvoid btKinematicCharacterController::setMaxSlopeCosine(double slopeCos", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null &&!initializers.isEmpty()) {\n            AnnotatedTypeMirror atype = atypeFactory.getAnnotatedType(node);\n            if (atype.hasAnnotation(Unique.class)) {\n                if (initializers.get(0).getKind() == Kind.EXPRESSION) {\n                    // If the", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// init return type\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\tContext,\n\t\t\t\t\t\tParentScope,\n\t\t\t\t\t\tCommentXmlNode,\n\t\t\t\t\t\tCommentNode,\n\t\t\t\t\t\ttypeAttribute.Value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (Form myForm = new Form()) {\n\t\t\t\tmyForm.Controls.Add(myTrackBar);\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Horizontal;\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(searchNarrower).narrowByClassSensorAssignment(classCache, instrumentationApplier.getSensorAssignment());\n\t\t\tdoReturn(assignment).when(instrumentationApplier).getSensorAssignment();\n\t\t\tdoReturn(assignment).when(searchNarrower).narrowByClassSensor", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isAbstractionActive()!= other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathCache!= null", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > narrowLExtent[end][r.leftChild]) {\n              min = narrowLExtent[end][r.leftChild];\n            }\n            int max1", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude', 'pg_data','src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n        )\n        assert not pipe.stdin.write.called\n        assert not", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.DbgManager.Dispatcher.VerifyAccess();\n```\n\t\t// DbgManager thread\n\t\tvoid DbgManager_ProcessesChanged(object? sender, ProcessChangedEventArgs e) {\n\t\t\tDbgManager_ProcessesChanged(sender, e);\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( (float)( 1.0 - ( 1.0 - b ) );\n\t\twriter.endTag( null, \"color\" );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification for the given object.\n\t *\n\t * @param", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t\tstatus = 'w'\n\t    else:\n\t\tstatus = 'a'\n\t    with open(output_name + '.' + ID + '.rejected_config', status) as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if cdata == (None,):\n            return\n        if cdata == (None,):\n            return\n        if cdata[0] == (None,):\n            return\n        if cdata[0][0] == 0:\n            return\n        if cdata[0][0]", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community to be edited\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _get_query_context(self, query):\n    \"\"\"Return the :class:`.QueryContext` object associated with the given\n    :class:`.Query` object.\n    \"\"\"\n    return query.context\n    def _get_query_context(self, query):\n        \"\"\"Return the :class:`.QueryContext` object", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\ndef parse_sources(xml_element):\n```\nThis function should parse the xml_element and return a list of locations. The function should be able to handle the case where the xml_element is a string, not an xml object. It should also be able to handle the case where the xml_element is a list of", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for key, (old_value, new_value) in data_model_changes.items():\n            if key in self.current_filter:\n                if self.current_filter[key]!= old_value:\n                    self.current_filter[key] = old_value\n                if self.current_filter[key]!= new_value:\n                    self.current_filter[key] =", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t\telse if (type!= null)\n\t\t\t{\n\t\t\t\tilgen.Emit(OpCodes.Ldtoken, type);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlUnableToResolveOpCode, ToString());\n\t\t\t}\n\t\t\tilgen.Emit(OpCodes.Ldtoken,", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 48);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, [\"buildbot/changes/ChangeLog\"])\n        self.assertEqual(c.comments, \"update ChangeLog\\n\")\n        self.assertEqual(c.isdir, 0)\n        self", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isEmpty(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\tpublic int getMana() {\n\t\treturn mana;\n\t}\n\tpublic int getMaxMana() {\n\t\treturn 0;\n\t}\n\tpublic int getColor() {\n\t\treturn 0;\n\t}\n\tpublic int getColor() {\n\t\treturn 0;\n\t}\n\tpublic int getColor() {\n\t\treturn 0", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Community com1, Community com2, Node n1, Node n2) {\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2) remove", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void startProcess()\n\t\t{\n\t\t\t//Process p = computerMgmt.getComputer(tvComputerCluster.SelectedNode.Text.ToString()).getProcess();\n\t\t}\n\t\tprivate void stopProcess()\n\t\t{\n\t\t\t//Process p = computerMgmt.get", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  private Datable anOccurrenceOf(EventDetail event, Datable startDate, Datable endDate) {\n    return new Datable(startDate, endDate);\n", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t/// <summary>\n\t/// The event that will be raised when the source property is changed\n\t/// </summary>\n\tpublic string SourceEventName;\n\t/// <summary>\n\t/// The event that will be raised when the target property is changed\n\t/// </summary>\n\tpublic string TargetEventName;\n\t#endregion", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            Gson gson = new Gson();\n            Map<String, String> config = new HashMap<String, String>();\n            config.put(\"nodeId\", getNodeDesc(nodeId, containerName));\n            config.put(\"nodeName\", getNodeName(nodeId, containerName));\n            config.put(\"tier\", tier);\n            config.put(\"nodePort", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n\t\t\t{\n\t\t\t\tAlert = new ImageHelper(102228, \"Resources/Images/", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setProperties(String[] files) {\n        this.files = files;\n        init();\n    }\n    public void setProperties(String[] files,", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_uuid):\n```\nThis method is used to make NAA annotations for a project. It is similar to the `make_naa_annotations` method, but it is used to make NAA annotations for a specific project. The method", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrink  = \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsLocked  = \").Append(IsLocked)\n               .Append(\"\\", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x8E00 && ch <= 0x9FA5) {\n\t\t\t\t// Complement Kanji\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"ST_A\"  : src = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[a]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString key = e.nextElement();\n\t\t\t\tString value = properties", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        public static WorldSettings.GameType getID(int id)\n        {\n            return GameType", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case for PurgeDefaultDacl\n\t\t}\n\t}\n}\n```\nThe code is a set of test cases for the Mono framework's implementation of the `CommonSecurityDescriptor` class. The test cases cover various scenarios, including the default behavior of the class, serialization and deserialization,", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __process(self, queue):\n    #... (rest of the code remains the same)\n```\nThis line of code is a continuation of the `__process` method in the `AcoustidLookupThread` class. The `__process` method is responsible for processing the results of the lookup", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    public static void OnGUI()\n    {\n        // this is called when the window is opened\n        // this is called when the window is opened\n        // this is called when the window is opened\n        // this is called when the window is opened\n        // this is called", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(getActivity(), DraftEditor.class);\n                intent.putExtra(\"nodeindex\", message.id);\n                intent.putExtra(\"task\", \"new_in_echo\");\n                intent.putExtra(\"", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(np.exp(2j * np.pi * self.i1bzk_k[k, np.newaxis, :].T,\n                            psit_G)\n    def get_count(self):\n        \"\"\"Return number of k-point/spin combinations on this CPU.\"\"\"\n        return self.mynks\n    def get_offset", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 256));\n        utkastRequest.set", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tforeach (ILNode child2 in child.Body)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (child2 is ILLabel)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Add a goto to", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb!= null)\n\t\t{\n\t\t    rb.drag = 0.25f;\n\t\t    rb.angularDrag = 0.25f;\n\t\t}\n\t}\n\tpublic void SetRagdoll(bool ragdoll, float delay)\n\t{\n\t    if (rb!= null)\n\t\t{\n\t\t    rb.drag", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Geological layer with fracture\"\"\"\n    def __init__(self, config={}):\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.surface = ClassFactory(Surface)\n        \"\"\"Surface of the layer\"\"\"\n        self.regions", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter()\n            {\n                public String get( String label )\n                {\n                    PatternNode pNode = objectVariables.get( label );\n                    if ( pNode == null )\n                    {\n                        return null;\n                    }\n                    return pNode.getAssociation().getId().toString();\n                }\n            } );\n       ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    slice_json['rate'] = transform_value_xml_json_to_json(value)\n    if value == '0':\n        slice_json['is_zero'] = True\n    elif value == '1':\n        slice_json['is_one'] = True\n    elif value == '0.5", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setIcon(false);\n            frameToClose = null;\n            this.revalidate();\n            this.repaint();\n          } else {\n            if (SwingUtilities.isRightMouseButton(e)) {\n              frameToClose = (InternalFrame)buttons.get(btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# Define the functions that we will be using\n#... (rest of the code remains the same)\n```\nThe final answer is: \n```python\n# Define the functions that we will be using\n# This is a list of the functions that we will be using\n# We will be using", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        if", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    cv.clear();\n                    cv.put(Db.Table4.ID_GROUP,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeHGlobal(m_ptr);\n                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is almost complete, but there is a small", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# MIDDLEWARE\n# List of middleware classes to use.  For the available classes and their\n# documentation, see\n# http://docs.djangoproject.com/en/dev/topics/http/middleware/#module-django.middleware\n# This list", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\tvar item = queue[0];\n\t\t\tqueue.RemoveAt(0);\n\t\t\tif (item.NumberToBuild > 1)\n\t\t\t\tFinishProduction();\n\t\t\telse\n\t\t\t\tFinishProduction();\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else \"files", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.env.get(self.mappings[x], self.mappings[x].__name__, code)\n        self.outputs[0].write(code)\n        self.bld.install_files(self.install_path, self.outputs)\n    def __init__(self, *k, **kw):\n        self.mappings", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(\"ipa_pars/knowledge/\"+knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent - 1 ] + chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ] );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] +", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern, timestampLocale));\n                break;\n            case ColumnType.STRING:\n                columnTypes.add(typeManager.nextStringAdapter", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdentifier(object component, ISessionFactoryImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Get", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.key_id in ntp_auth_conf:\n            self.key_id_exist = True\n        if self.auth_type == 'text':\n            if self.auth_type == 'text':\n                auth_type = 'text'\n            else:\n                auth_type = 'encrypt'\n            if self.auth_type == 'text':\n               ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        # Change the child, then check that the parent has been updated\n        child = self.store.get_item(self.child)\n        child.display_name = 'new name'\n        self.store.update_item(child, editing_user)\n        # Change the child, then check that the", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(ch, start, length);\n    }\n    public void processingInstruction(String target, String data) throws SAXException {\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 24) & 0xff);\n        digest.update", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict['start'], dict['end'])\ndef mktype(data, formodulename):\n    # If we have been told the name of the module we are unpacking aedescs for,\n    # we can attempt to create the right type of python object from", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            //... (rest of the code remains the", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(path, column, create, value)\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                entry.handler_block(entry.editing_done_id)\n            self.on_quit_cell(record, column.name, entry.get_text())\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_PROPERTIES, newLocation);\n            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            beanProperties.addPropertyValue(Legacy", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            lines = f.readlines()\n            f.seek(0)\n            for line in lines:\n                if line.strip() == '':\n                    f.truncate()\n                    f.write(line)\n                    f.flush()\n        finally:\n            f.close()\n    if state == 'present':\n        if module.params['create']:\n            return module.load", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Interface)] object pUnk\n            );\n        [PreserveSig]\n        int GetEvent(\n            [In] MediaEventType met,\n            [In, Out] ref int dwFlags\n            );\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        return null;\n    }\n}\n```\nThe final answer is: \n```java\n@Timed\n@Override\n@RequestMapping(\n        path = USERS + ADD,\n        method = RequestMethod.POST,\n        consumes = MediaType.APPLICATION_JSON_VALUE\n)\npublic SecurablePrincipal addPrincipalToPrincipal( @RequestBody Principal principal ) {\n   ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        for child in child_elements:\n            self.verify_element(child)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        Arguments:\n        element Element object.\n        \"\"\"\n        # Check if the tag is in the expected data", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tag_name(self, node, name):\n    # This is a helper function for getElementsByTagName\n    # It returns a NodeList of all elements with the given name\n    # in the given node\n    rc = NodeList()\n    for n in node.childNodes:\n        if n.nodeType == Node.D", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for (int i = 0; i < ActiveWeapons.size(); i++) {\n            Weapon weapon = ActiveWeapons.get(i);\n            if (weapon.isOffCooldown()) {\n                ActiveWeapons.remove(i);\n                break;\n            }\n        }\n        //Updates the HUD\n        display.update(delta);\n        //Updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().join( action );\n        hide();\n      }\n    } );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btnOk );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btnOk );\n    //", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"errors\"][0][\"msg\"])\n    if progress:\n        log.info(\"Downloading %s\", url)\n    return r.data\ndef post_url_toml", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrder();\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    def _find_carbon_sources(model: \"Model\", reactions: List[\"Reaction\"]) -> List[\"Reaction\"]:\n        \"\"\"Find the carbon sources in the model.\n        Parameters\n        ----------\n        model : cobra.Model\n            The model to find carbon sources in.\n        reactions : list of cobra.Reaction\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path=pootle_path,\n            store__user=user,\n        )\n    def get_for_store(self, store):\n        return self.get_queryset().filter(store=store)\n    def get_for_store_and_unit(self, store, unit):\n        return self", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('city', models.ForeignKey(to='events.City')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.process_packet(poxpkt, portnum)\n                else:\n                    self.logger.debug(\"Switch {} can't find port {} for IP {}->{}\".format(self.name, portnum, srcip, dstip))\n            elif poxpkt.type == poxpkt.ARP_TYPE:\n                self.logger", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (m_IgnoreChanges)\n      return;\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if (m_PropertyPrefix == null)\n      m_PropertyPrefix = \"recent\";\n    if", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return false;\n        }\n    }\n}\npublic class ShadowRevealingAction : Mobile.RevealingAction\n{\n    public ShadowRevealingAction(Mobile src, Mobile trg) : base(src, trg)\n    {\n    }\n    public override void OnReveal(Mobile src, Mobile trg)\n    {\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a!= null) break;\n\t\t\ta = p.down;\n\t\t\tp = p.next;\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSynchronisedSets() {\n\t\tBitArray s = new BitArray(Node.nodes.Count);\n\t\tNode p = Node.r;\n\t\twhile (p", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t//... (rest of the code)\n\t\t}\n\t\t/// <summary>\n\t\t/// Read data from a register\n\t\t/// </summary>\n\t\t/// <param name=\"address\">Address to read from</param>\n\t\t/// <param name=\"size\">Length to read</param", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(caseInsensitive, order);\n\t\t}\n\t\tpublic MskJointVoComparator(MskJointVoComparator another)\n\t\t{\n\t\t\tthis(another.direction, another.caseInsensitive);\n\t\t}\n\t\tprivate MskJointVoComparator(int direction, boolean caseInsensitive)\n\t\t{\n\t\t\tthis.direction = direction;\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t{\n\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetCrashReportPath()\n\t\t{\n\t\t\tstring root = GetRoot();\n\t\t\tstring path = String.Format( \"Cr", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true).List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t\t{\n", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N1 + N2 + N3; i++)\n            {\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __init__(self, description, currency=None, fields=None):  # noqa\n    \"\"\"Initialize a new instance of the class\n    Args:\n        description: Rate description\n        currency: Rate currency\n        fields: Rate fields\n    \"\"\"\n    self.description = attr.ib(default=description)\n    self.currency", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// lock the buffer\n\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );\n\t\t\tGLESConfig.GlCheckError( this );\n\t\t\tOpenGL.UnmapBuffer( All.ElementArrayBuffer );\n\t\t\tGLESConfig.GlCheckError( this );\n\t\t\t// write data\n\t\t\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\ndef __init__(self, session):\n```\nThis is the correct code to complete the given code. The `__init__` method is a special method in Python classes that is automatically called when an object of the class is created. It is used to initialize the attributes of the class. In this case", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (filterStr.startsWith(\"tcp://\")) {\n                String[] parts = filterStr.substring(6).split(\":\");\n                if (parts.length!= 2) {\n                    throw new IllegalArgumentException(\"tcp:// address must be in the form tcp://host:port\");\n                }\n                String host = parts[0", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                // Copy the data to the output stream\n                for (int i = 0; i < curr.Length; ++i) {\n                    if (i == 0) {\n                        // first row\n                        for (int j = 0; j < curr.Length; ++j) {\n                            curr[j]", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), 'foo.bar')\n    def test_message_type(self):\n        s = lowlevel.SignalMessage('ab', 'foo.bar', 'baz')\n        self.assertEqual(s.get_signature(), 'ab')\n        self.assertEqual(s.get_signature().get_signature(), 'ab')\n        self.assertEqual(s.get_signature().", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_cohomology(self, level, position, options):\n    e2 = self.get_E_2_page()\n    return e2.get_cohomology(options)[level][position]\n    def get_cohomology(self, level, position, options):\n        e2 = self.get_E_2", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t} else {\n\t\t\tmap.clear();\n\t\t}\n\t}\n\t@Override\n\tpublic int sizeInCache() {\n\t\treturn map.size();\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\ndef _compute_attendance_state(self):\n    for employee in self:\n        employee.attendance_state = (\n            employee.last_attendance_id\n            and not employee.last_attendance_id.check_out\n            and 'checked_in' or 'checked_out')\n```\n```python\ndef _compute_attendance_state", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item in the list view.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n        /// The image index of this item.\n        ///", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker.make_term(self, cwd, profile, debugtab, _param1, _param2)\n        self.set_urgency_hint(False)\n        self.set_urgency_hint(True)\n    def on_destroy_event(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        self.set_urgency_hint", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nametype ) );\n                }\n            }\n            return toReturn;\n        }\n        public Variant DllCall( string function, Variant[] paramtypen, Variant dll ) {\n            return DllCallAddress( function, paramtypen, dll );\n        }\n        public Variant Dll", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn attributes.GetAttributes ((uint) TypeAttributes.Class | (uint) TypeAttributes.Class | (uint) TypeAttributes.AutoLayout | (uint) TypeAttributes.SequentialLayout | (uint) TypeAttributes.ExplicitLayout | (uint) TypeAttributes.ClassSizeMask, (uint) TypeAttributes.ClassSizeMask);\n\t\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the rules and evidence in the engine. The code is written in C# and uses the System.Collections.Generic namespace for the dictionary data structures. The code is well", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._ssl = self._create_context(protocol)\n    def _create_context(self, protocol):\n        return OpenSSL.SSL.Context(protocol)\n    def load_verify_locations(self, cafile, capath):\n        return self._ssl.load_verify_locations(cafile, capath)\n    def load_verify_locations(self, cafile", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label4 = new global::Gtk.Label ();\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural:\");\n\t\t\tthis.label4.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label4);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.reorder_child(child, new_num)\n        headbook.connect(\"page_reordered\", page_reordered, headbook)\n    \n    # The dock\n    \n    # The dock\n    \n    # The dock\n    \n    # The dock\n    \n    # The dock\n    \n    # The dock\n    \n    # The dock\n    \n    # The", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Show-Explorer\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_E),\n    \"Show-Explorer-Reverse\": QKey", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", mapping", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IFile file = (IFile)getModel().getAdapter(IFile.class);\n    if (file!= null)\n    {\n      return file.isReadOnly();\n    }\n    return false;\n  }\n  protected void handleZoomChanged()\n  {\n    getViewer().getEditDomain().getEditor().getEditorSite().", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Click += new System.EventHandler(this.butAttach_Click);\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(8, 23);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82, 20);\n\t\t\tthis.butAttach.TabIndex = 5", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as getting the marked", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t}\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        default:\n\t            current", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String)java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        javaHome = (String)java.GetValue(\"JavaExe\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String Get", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        return None\n    def find_env(self, name):\n        # attempt to find environment variable by name\n        for l in self.lines:\n            if l.startswith('export'+ name):\n                return l\n        return None\n    def _update_job(self, name, job, do", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\ndef _to_json_spec(cls, modifier_json, modifier):\n    modifier_json['data'] = modifier.data\n    modifier_json['use_deform'] = modifier.use_deform\n    modifier_json['use_deform_cache'] = modifier.use_deform_cache\n    modifier_json['use_deform_cache_format", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[pepLenRanks.get(peptideLength).size()];\n                pepLenRanks.put(peptideLength, rankCounts);\n            }\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[self.choice]\n                    self.print_packet(self.packet)\n                    self.get_input()\n                    self.print_usage()\n                    self.get_input('...')\n                    self.print_usage()\n                    self.get_input('...')\n                    self.print_usage()\n                    self.get_input('...')\n                    self.print_usage()\n                    self.get_input('", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 61);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'content': ('editorsnotes.main.fields.XHTMLField', [], {'null': 'True', 'blank': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            }\n        }\n        return alreadyProcessed;\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n    }\n    private void processSchema(Schema schema) {\n        processSchema(schema);\n", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate'}, context=context)\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        return self.write(cr, uid, ids, {'state':", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a part of a larger framework and is used to create a grid that can be used to display business objects. The code is written in C# and uses the.NET framework. The code is well", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line {0} - {1} - {2}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.dwLineID);\n        }\n    }\n    public enum MixerLineComponentType\n    {\n        /// <summary>\n        /// Undefined\n        /// </summary", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID());\n\t\t}\n\t\t// If this is a stale object, do not update the value of the field\n\t\tif (domainObject.getIsRIE().boolean", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            cwd=base_path,\n            verbose=verbose)\n        if status:\n            return status\n        elapsed = time() - build_start\n        notify(title=\"Servo build\", text=\"Complete in %0.2fs\" % elapsed)\n", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn this.getOptimisticScore(new double[] { estP, 0 }, new double[] { 0, n });\n\t\t}\n\t\t}\n\t\t// return the best score of the best rule\n\t\treturn this.getOptimisticScore(new double", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                StashedSelectedIndexChanged(this, null);\n            }\n        }\n        private void StashedSelectedIndexChanged(object sender, EventArgs e)\n        {\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n            Initialize();\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=0,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(String[] snrs)", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tSetEType((EGenericType)value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nPlease complete the code", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\ndef decrypt_archive(archive_index, args):\n    #... (rest of the function remains the same)\n```\nThis is the correct code. The function name was changed to `decrypt_archive` to match the action name in the `actions` dictionary. The rest of the function remains the same. \n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.cmd_str = '%s%d' % ('ACMD' if self.is_acmd else 'CMD', cmd)\n        self.state = 'IDLE'\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE'\n        self.state = 'GET RESPONSE R1'\n        self.state", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          // (, line 200\n          // not, line 200\n          if (!r_R1()) {\n            return false;\n          }\n          break lab1;\n        } while (false);\n        cursor = limit - v_3;\n        limit_backward = cursor", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null) {\n                    // handle the case where the class is not found\n                }\n                //... rest of the code\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n        }\n    }\n    class HzThread extends Thread\n    {\n       ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            return None, False\n        except cryptography.x509.ExtensionNotFound:\n            return None, False\n    def _get_key_usage(self):\n        # TODO: This is not implemented in pyOpenSSL\n        return None, False\n    def _get_ocsp_must_staple(self):\n", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tif (i->first->signal() == this) {\", file=f)\nprint(\"\\t\\t\\t\\t/* This slot is connected to us, so we can call it directly */\", file=f)\nprint(\"\\t\\t\\t\\tboost::bind (slot, event_loop, event_loop,", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #     -- The first value is the first value of the interval\n    #     -- The second value is the last value of the interval\n    #     -- The first value of the interval is the first value of the interval\n    #        (utf16 representation of the first value of the interval)\n   ", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t\tSemText(out sym);\n\t\t\t}\n\t\t\tExpect(29);\n\t\t\tif (la.kind == 30) {\n\t\t\t\tGet();\n\t\t\t\tSemText(out sym);\n\t\t\t}\n\t\t\tif (la.kind == ", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            #edi_doc['product_uom'] = edi_doc.pop('product_uom')\n            #edi_doc['product_uom_qty'] = edi_doc.pop('product_uom')\n            #edi_doc['product_uom'] = edi_doc.pop('product_uom')\n            #edi_doc['product_uom']", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\nPlease note that the code", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUpTestPermissions();\n        // virtual node permissions should be the same as the virtual", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device is not None\n    def test_list_devices_empty(self, context):\n       ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\n# coding: utf-8\n# coding: utf-8\n# coding: utf-8\n# coding: utf-8\n# coding: utf-8\n# coding: utf-8\n# coding: utf-8\n# coding: utf-", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                else:\n                    continue\n        elif (index_elements[0] == \"Antennas\"):\n            for i in xrange(0, len(outlines[i])):\n                ant = { 'number': int(index_elements[0]),\n                        'coord_x': float(index_elements[1]),\n                        'coord_y': float(index", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n        public override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n            AddCraftedProperties(list);\n            AddNameProperty(list);\n            AddResourceProperty(list);\n            AddQualityProperty(list);\n            AddWeightProperty(list);\n        }\n        public override void", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181103 - Added 'if' statement\n            if (device.contains(\"HDHR\")) {\n                TunerHdhr tuner = new TunerHdhr(device, add", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.USER_PROFILE_SHARING) {\n      jobs.put(Version.USER_PROFILE_SHARING, new UserSharingMigrationJob());\n    }\n    if (lastSeenVersion < Version.MIGRATION_JOB) {\n      jobs.put(Version.MIGRATION_JOB, new MigrationJob());\n    }\n    if", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.error(\"RegexNER mapping file has a line with less than 2 arguments: \" + line);\n        continue;\n      }\n      String type = split[0];\n      Set<String> overwritableTypes = new HashSet<String>();\n      if (split.length >", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for abspath in sub_path[include[0]]:\n                if os.path.exists(abspath + os.path.sep + n):\n                    return (include[0], n)\n            # if not, try the path in env['TEXINPUTS']\n            for abspath in sub_path['TEXINPUTS']:\n                if", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\nclass _Symbol(Symbol,_injector):\n    def __init__(self, *args, **kwargs):\n        self._c__init__(*args, **kwargs)\n    def __repr__(self):\n        return self.symbol", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def update_check(module, want, have):\n    result = {}\n    if want['name']!= have['name']:\n        result['name'] = want['name']\n    if want['description']!= have['description']:\n        result['description'] = want['description']\n    if want['parent']!= have['", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            // notify listeners of the failure\n            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = self.client.post(\n                reverse(\"update_thread\", kwargs={\"thread_id\": \"dummy\", \"commentable_id\": \"i4x-MITx-999-course-Robot_Super_Course\",\n                data={\"body\": \"foo\", \"title\": \"foo\", \"commentable_id\": \"i", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsShlink(target, source, env, for_signature):\n    \"\"\"Windows shared library emitter.\n    \n    This is the emitter for shared libraries on Windows.\n    \n    :param target: The target node(s) to be created.\n    :param source: The source node(s) to be used to create the target", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            errorStatus[0] = execute(getSelectedResources(), new ProgressMonitorWrapper(getShell()));\n        } catch (CoreException e) {\n            displayError(getProblemsMessage());\n        } catch (OperationCanceledException e) {\n            // do nothing\n        }\n        if (errorStatus[0]!= Status.OK", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Long[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.fieldnrs = new int[", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Walking Range\n            int swalkingrange = Utility.ToInt32(swalkingrange);\n            if (swalkingrange == 0)\n                swalkingrange = 0;\n            //Home Range\n           ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            return True\n        return False\n    def verify_guest_up(self, **args):\n        session = self._get_session()\n        self._open_session_list.append(session)\n        # Wait", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        rc = sub.unsubscribe(\"test/\");\n        assertThat(rc, is(true));\n        rc = sub.unsubscribe(\"test/\");\n        assertThat(rc, is(true));\n        sub.close();\n        service.shutdownNow();\n        service.awaitTermination", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger.info(\"[FAULT] \" + this.ownerID + \" : FAILURE OF \" + destination.getID() + \" : \" + e.getMessage());\n            UniversalBody newDestination = this.communication", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing dnlib.DotNet;\nusing dnlib.DotNet;\nusing dnlib.DotNet.MD;\nusing dn", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(self.line[1:])\n        self.fm.execute_file(self.line[1:])\n        self.fm.execute_file(self.line[1:])\n        self.fm.execute_file(self.line[1:])\n        self.fm.execute_file(self.line[1:])\n        self.fm.execute_file(self.line[1:])\n        self.fm.execute", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString_WithArgs ()\n\t\t{\n\t\t\t// Add code here\n\t\t}\n\t}\n}\n// The following code is used to test the Activator.CreateInstance overload that takes a string and a string array\npublic class TestActivator\n{\n\tpublic static void Main (string[] args", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        self.assertEqual(\n            _actions4appversion(self.old_av, {da.id}, None, 100),\n            ({Action.PENDING: 1}, {da.id})\n        self.assertEqual(\n            _actions4appversion(self.new_av, {da.id}, None, 100),\n            ({Action.ACCEPT", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"self_record\" in cmd.parameters:\n                userstate.self_record = cmd.parameters[\"self_record\"]\n            if \"self_record\" in cmd.parameters:\n                userstate.self_record = cmd.parameters[\"self_record\"]\n            if \"self_record\" in cmd.parameters:\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new PlayerGroupUpdateEvent(group, player));\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup2();\n    }\n    public static PlayerGroup getGroup(int team", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return highlight(\n            [(Token.Literal, s) for s in self.show(self.toks, formatter, outfile)\n        )\n        return highlight(\n            [(Token.Literal, s) for s in self.show(self.toks, formatter, outfile)\n        )\n        return highlight(\n            [(Token.Literal,", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _create_store_map(index, has_virt, virt_only, quantity, children):\n    return {\n        'virt_only': has_virt,\n        'virt_only_text': virt_only,\n        'quantity': quantity,\n        'children': children\n    }\ndef _setup_column(self):\n    column = QuantityColumn", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\t((Grid) parent).addColumn(column);\n\t    }\n\t} while (parent!= null);\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    nl = element.SelectSingleNode(\"Inventory\").ChildNodes;\n                    for (int i = 0; i < nl.Count; i++) {\n                        XmlNode n = nl[i];\n                        InventoryEntry invEntry = new InventoryEntry();\n                        invEntry.ItemSign = n.Attributes[\"ID\"].InnerText;\n                        invEntry.CountMin =", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t\tfrom.SendLocalizedMessage( 1072684, m_key[i].Name ); // ~1_NAME~ key\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//EOH\n//EOH\n//EOH\n//EOH\n//EOH\n//EOH\n//", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(1, new int[]{6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6, 18, 6", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t}\n\t\t\t// ======================================================\n\t\t\t// Computed using the official Argon2 reference code package\n\t\t\t// (https://github.com/P-H-C/argon2-cpp)\n\t\t\tpb = new byte[32] {\n\t\t\t\t0x4A, 0x3A, ", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory, taking into account IManaDiscountArmor items.\n\t * @param manaToDispatch How much mana is to be dispatched.\n\t * @param remove If true, the", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nThis is the last line of code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Update the queue with the new frame\n\t\t\tQueue.Enqueue (NextFrame);\n\t\t\t// If the queue is empty, we don't need to do anything else\n\t\t\tif (Queue.Count == 0)\n", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.number = PhoneNumberUtils.stringFromCdmaSS(p.readString());\n            dc.type = p.readInt();\n            dc.time = p.readInt();\n            dc.uptime = p.readInt();\n            dc.number = PhoneNumberUtils.stringFromCdmaSS(p.readString());\n            dc.ssn = p.readInt();\n            dc.uroot =", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                // Set position of vertex\n                newVertices[y * xSizeP + x] = new Vector3(x * xPixelsPerTile, y * yPixelsPerTile, 0);\n                // Set normal of vertex", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\tint testInt3 = rand.nextInt(5000);\n\t\t\tint testInt4 = rand.nextInt(5000);\n\t\t\tint testInt5 = rand.nextInt(5000);\n\t\t\tint testInt6 = rand.nextInt(5000);\n\t\t\tint testInt", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t}\n\t\t@Override\n\t\tpublic void setBlockSelection(int[] intArray)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic void setBlockSelection(int i, int i1)\n\t\t{\n\t\t}\n\t\t@Override\n\t\tpublic void setBlockSelection", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeBoolean(false);\n            out.writeUTF(\"Unknown object name\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.methods.length);\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private void logging2(String msg)\n       ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x,\n                    pixel_y,\n                    Machine.visible_area,\n                    TRANSPARENCY_NONE,\n                    0);\n                pixel_x += 6;\n                /* Draw the page B stuff */\n                char_number = stactics_videoram_b[offs];\n                color_code =", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position.To2D()) <= spell.Range &&\n                                    (spell.RangeCheckFrom.To2D().Distance(position) <= spell.Range))\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (spell.RangeCheckFrom.To2D", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.getInducedPath(x, y).size() > 0;\n    }\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n    }\n} // end of class DagToPag\n///////////////////////////////////////////////////////////////////////////////\n//========================PRIVATE METHODS==========================//\n    private void doFinalOrientation(Graph", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n        }\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (super.matches(other)) {\n            return true;\n        }\n        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        m_Item.m_From = m_Item.m_From;\n                        m_Item.m_MinDamage = m_Item.m_MinDamage;\n                        m_Item.m_MaxDamage = m_Item.m_MaxDamage;\n                        m_Item.m_End = m_Item.m_End;\n                        m_Item.m_Timer = m_Item.m_Timer;\n                        m_Item.m_Item", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tInvokeUserMessage(channel, user, message);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (user.AccessLevel < Access)\n\t\t\t{\n\t\t\t\tif (message)\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String getAdminSpaceId() {\n    return mock.getAdminSpaceId();\n  }\n  @Override\n  public String getAdminSpaceName() {\n    return mock.getAdminSpaceName();\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                    for (", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.channel = null", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                if z_key in z_dict.keys():\n                    for z_index in z_dict[z_key].keys():\n                        z_arr[p_index, kk, :] = z_dict[z_key][z_index]\n                        z_err_arr[p_index, kk, :] = z_dict[z_key][z_index+2]\n                        \n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceTwo);\n    }\n  }\n}\nPlease complete the code given above. The code is written in Java and uses Android and Android Support libraries. The code is part of the Signal Private Messenger app. The code is related to identity verification", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = path.pathsep.join(extra_path + [env[\"PATH\"]])\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = path.pathsep.join(extra_lib + [env[\"LD_LIBRARY_PATH\"]])\n        if self.config[\"build\"][\"mode\"] == \"debug\":\n            env[\"R", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(obj[\"paths\"]):\n            self._path_hash[path] = (from_path, test_list)\n        for path, items in iteritems(obj[\"items\"]):\n            for item in items:\n                self._path_hash[path] = (from_path, item)\n        self._", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return createBindingForCompilation();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBinding", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override writing for a wrapped server adapter\n        /// </summary>\n        /// <param name=\"", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        grad_Etf = grad[i]\n        grad_Etf = grad_Etf - grad_var*grad_Etf[0]\n        transformed_grad.append(grad_Etf)\n      transformed_grad = np.asarray(transformed_grad)\n      return transformed_grad\n    elif self.transform_X:\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(this.id == null)\n\t\t\treturn -1;\n\t\tif(obj == null)\n\t\t\treturn 1;\n\t\tif(!this.id.equals(obj))\n\t\t\treturn -1;\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 2);\n    }\n    @Test\n    public void shouldThrowExceptionWhenUpdatingStackWithNullName() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.setName(null);\n        stackDao.update(stack);\n    }\n    @Test\n    public void shouldThrowExceptionWhen", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParamName(\"depth\");\n        depthParameter.setParamValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParamName(\"exclusionRegexp", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t//... (rest of the code)\n\t\t}\n\t\t#endregion\n\t}\n}\n```\nThe code is a part of the Loyc project, which is a.NET library for working with abstract syntax trees (ASTs). The code provides various extension methods for working with LNode objects, which represent", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    extendedWillHit += colisionList.Count;\n                    extendedFarmLocation = objAiBase.Position;\n                }\n                int param = zedMenu.GetParamSlider(\"koreanzed.laneclear.useqif\");\n                if (extendedWillHit >= param)\n                {\n                    List<Obj_AI_Base> minions", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.Context context = this.context;\n\t\tims.framework.Context globalContext = this.context;\n\t\tims.framework.form.FormContext formContext = this.context;\n\t\tims.framework.Context localContext = this.context;\n\t\tims.framework.Context context = this.context;\n\t\tims.framework.Context globalContext = this", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall the prerequisites for the project.\n\"\"\"\n\"\"\"\nInstall the prerequisites for the project.\n\"\"\"\n@task\n@timed\ndef install_prerequisites():\n    # Install the prerequisites for the project\n    # This is a bit of a hack, but we need to install the private requirements\n    # before we can install", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "            'name': \"Parent\"\n        })\n        with self.env['test_testing_utilities.parent'].Form(r) as f:\n            with f.subs.edit(index=0) as s:\n                s.name = \"New name\"\n                with self.assertRaises(AssertionError):\n                    s.name = \"New name\"\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).doit() == Sum(x, (x, 1, 2).doit() == 3\n    assert Sum(x, (x, 1, 2).doit() == Sum(x, (x, 1,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, changedItems, startingIndex, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            testDocument = parser.parse(writer);\n            objectToXMLDocumentTest(testDocument);\n    }\n    public void testXMLToObject() throws Exception {\n        Object objectToWrite = getWriteControlObject();\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.OrgType:\n                    c.OrgType = Token2Csv();\n                    break;\n                case Param.OrgType2:\n                    c.OrgType2 = Token2Csv().ToInt();\n                    break;\n                case Param.OrgType3:\n", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"width: {0}\", ide.width);\nConsole.WriteLine (\"height: {0}\", ide.height);\nConsole.WriteLine (\"colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"planes: {0}\", ide.planes);\nConsole.WriteLine (\"bitCount", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                JSR.successor = l;\n            }\n            // adds the JSR block to the list of successors of the RET blocks\n            // that are reachable from l\n            for (Label block = l.successor; block!= null; block = block.successor) {\n                if ((block.status & Label.P", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(StackObject.To", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition.add(\"Inside\");\n\t\t\tcomboLabelPosition.add(\"Outside\");\n\t\t\tcomboLabelPosition.select(0);\n\t\t}\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\n\t\t@Override\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the decrement by one button on the Image Animator Tape Deck\n        self._getFirstValue( driver, \"Image\" )\n        # Find the decrement by one button on the Image Animator Tape Deck\n        self._getFirstValue( driver, \"Image\" )\n        # Find the decrement by one button", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._parse_kexgss_complete(m)\n        self.transport._", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            tree.setNodeTitle(overallNodeName);\n            tree.setDisableTreeSelection(disableTreeSelection);\n            tree.setDatabaseConnection(connectionData);\n        }\n    }\n    /**\n     * (non-Javadoc)\n     *\n     * @see com.sldeditor.extension.filesystem.database.DatabaseReadProgressInterface#populateComplete(com.s", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            #~ self.pool.get('hr.payslip')._get_payslip_lines(self.employee_id, self.contract_id, self.date_from, self.date_to)\n            #~ self.pool.get('hr.payslip')._get_payslip_lines(self.employee_id, self.contract_id, self.date_from,", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin/mmax), np.log(mmax/mmin), mspace)\n        #marr = np.exp(lnmarr).astype(np.float64)\n        #marr = m", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n        d.width = font.getSize() * 2;\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='off_center',phi=np.pi/2):\n        #this is a helper function for the share_edge class\n        #flag 'off_center' means the p2 is at the middle of the edge\n        #flag '", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\t}\n\t\t}\n\t\tprivate void ShowOrHideWindow(Window window)\n\t\t{\n\t\t\tif (window == null)\n\t\t\t\tthrow new ArgumentNullException(\"window\");\n\t\t\tif (window.IsLoaded)\n\t\t\t\tShowOrHide(window);\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowOrHideWindow", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n    params[0]['bins'].append(params[0]['low'] + i * step)\n            elif params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low']) / float(params[1]['", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getReference());\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.getQueryId().equals(queryId)) {\n                    return query;\n                }\n            }\n            return null", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im1.convert(\"L\", rgb2r)\n            h1 = im1L.histogram()\n        else: \n            #im1.mode == \"L\":\n            h1 = im1.histogram()\n        # compute the transform\n        if channel == \"I\":\n            # compute the transform for", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[] aid) {\n\t\tapp.setProperty(SPEC.PROP.APPLICATION_ID, aid);\n\t}\n\tprotected void", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Block of type %u\" % self[\"block_type\"].value\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t// /**\n\t// * clean up the socket adapter\n\t// */\n\t// private void cleanSocketAdapter()\n\t// {\n\t// if (socketAdapter!= null)\n\t// {\n\t// socketAdapter.close();\n\t// socketAdapter = null;\n\t// }\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, app in self.apps:\n            if path.startswith(p):\n                return app(environ, start_response)\n        return [b'404 Not Found']\n    def __init__(self, path_map):\n        \"\"\"Initialize path info WSGI dispatcher.\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, sys.argv[ 2 ] )\n\t\tmodel.score()\n\t\tprint \"Model score = %s\" % model.score()\n\telif len( sys.argv ) == 5 :\n\t\tdata =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n```\nThe code is a part of a crafting system in a game, and it's used to enhance items. The code is incomplete and needs", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Create a new field component\n            C = self.instantiate_field(\n                self.create_field_definition(),\n                d['name'], d['bitOffset'], d['bitWidth']\n            )\n            # Collect properties and other values\n            if 'displayName' in d:\n                self.assign_property(C, \"name\",", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnDone_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnBack_Click_1(object sender, EventArgs e)\n        {\n            this", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int i = 0; i < this.trianglesUsed[textureArray[textureHash]] * 3; i++)\n                {\n                    // code here\n                }\n            }\n        }\n        return this;\n    }\n    public static void main(String[] args)\n    {\n        RenderingStream rs = Rendering", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    return HttpResponse(json.dumps({'exposedHeaders': exposedHeaders + ','+ header})  # lint-amnesty, pylint: disable=http-response-with-json-dumps\n    return response\ndef get_course_info(request, course_id):\n    \"\"\"\n    Returns course information in JSON format.\n    \"\"\"\n    course_key = Course", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        EnqueueIdle(driver);\n                        break;\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n    }\n} \n```\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if not isinstance(var, (list, tuple)):\n        raise ValueError('AreaDefinition must have either area_extent or shape. You provided {0} and {1}'.format(area_extent, shape))\n    # Check if list-like is empty.\n    if len(var) == 0:\n        raise ValueError('AreaDefinition", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n    # Add your code here\n```\nPlease complete the code given above. \n\n```python\ndef onKill(self, npc, player, isPet):\n    # Check if the player is in a party\n    partyMember = self.getRandomParty", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)seconds1.GetValueOrDefault() / 100);\n\t\t\t\t\tempty = string.Format(\"{0:D2}:{1:D2}:{2:D2}\", num, num1, num2);\n\t\t\t\t}\n\t\t\t\telse\n", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _attributes.Add(new AttributeInfo(this, \"position\", 0, 3, 0, 0, VertexAttribPointerType.Float));\n            _attributes.Add(new AttributeInfo(this, \"color\", 0, 4, 0, 0, Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\treturn coll;\n\t}\n}\npublic class TumourGroupListVo implements ims.vo.ImsCloneable\n{\n\tprivate static final long serialVersionUID = 1L;\n\tprivate String name;\n\tprivate String description;\n\tprivate String tumourGroupRef;\n\tprivate ims.core.resource.people.vo.StaffMemberRefVo staffMember;\n\tprivate", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcy = current.y;\n\t\t\t\tcx = current.x;\n\t\t\t\t}\n\t\t\t\treturn current;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * Highlights a section of the page\n\t */\n\tpublic Rectangle setHighlightedArea(int x, int y, int width,", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.startAnimation(controller);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Category = cmbPPartnerInterestInterestCategory.GetSelectedString();\n            ARow.Interest = cmbPPartner", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.addWindowToDataset(pssm, i, scoresSol);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset.\n\t * \n\t * @param pssm\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
