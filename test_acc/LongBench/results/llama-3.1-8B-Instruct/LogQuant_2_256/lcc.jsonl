{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.SendGump( null );\n\t\t\t\t\t\tpl.SendG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\tgraph = self.graph.copy()\n\t\t\tgraph.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tgraph, Y, Z, root = self.next(graph, Y, Z, root)\n\t\t\tP = self.get_priority", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Read some frames\n        buff = a.read_frames(1024)\n        # Seek to the beginning\n        a.seek(0)\n        # Read some frames\n        buff2 = a.read_frames(102", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_unfeature_video(self):\n    return self.is_element_visible(self._VIDEO_TAB)\n    def displays_unfeature_video(self):\n        return self.is_element_visible(self._VIDEO_TAB)\n    def displays_unfeature_video(self):\n        return self.is_element_visible(self._VIDEO_TAB)\n    def displays_unfeature_video(self):\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:default\", olStyle.getDefault());\n\t\t\t\t\twriter.addAttribute(\"ol:default\", olStyle.getDefault());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\t\t\t\treturn null;\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(str(dbname))\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select category from questions\")\n    ret = []\n    for r in dbconn.fetchall():\n        ret.append(r[0])\n    return ret\ndef get_categories", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 3:\n                    mob.SendMessage(\"Target a location to mark:\");\n                    mob.Prompt = new SR_TargetPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 4:\n                    mob.SendMessage(\"Target a location to", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert.getSubjectDN());\n            }\n            s.println(\"***\");\n        }\n    }\n    @Override\n    void print(PrintStream s) throws IOException {\n        s.println(\"*** Certificate chain\");\n        if (debug!= null && Debug.isOn", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t\tRedButton btnInfo = new RedButton(Messages.get(Alchemize.class, \"info\") {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\towner.showInfo(item);\n\t\t\t\t\t\tconsumeAlchemize();\n\t\t\t\t\t\thide();\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        return self.server.dispatcher.dispatch(request, environ)\n        log.debug('do_post: %s', request)\n        self.server.dispatcher.dispatch(request, environ)\n        self.server.dispatcher.dispatch(request, environ)\n        self.server.dispatcher.dispatch(request, environ)\n        self.server.dispatcher.dispatch(request, environ)\n        self.server.dispatcher.dispatch(request", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    self.statuses = self.base.get_statuses(self.account_id, self.id_, self.last_id)\n    self.last_id = self.statuses[-1].id_\n    self.statuses = self.base.get_statuses(self", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"traceback\": traceback.format_exc()\n            }\n            return result\n    def action_copy(self, login, password, status_id, params, session):\n        try", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (c, b), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!ReferenceEquals1\");\n\t\t\tZoneIdentityPermission d = (ZoneIdentityPermission)", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_key_manager(keyfile, certfile, ca_certs):\n    key_managers = []\n    if keyfile:\n        key_managers.append(_get_key_manager(keyfile))\n    if certfile:\n        key_managers.append(_get_key_manager(certfile))\n    if ca_certs:\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n} \n``` \nPlease complete the code given above. The code is incomplete and has some errors. Here is the completed code:\n\n```java\npackage jamm.webapp;\n\nimport java.util.List;\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__datastream_fd = os.open(\n            self.__datastream_address, os.O_RDWR | os.O_CREAT | os.O_EXCL)\n        self.__data_pump_task = asyncio.create_task(\n            self.__data_pump_task, loop=self.__event", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tstring jumpIDString = (string) store.GetValue (iter, 0);\n\t\t\t\t\tjumpID = Convert.ToInt32(jumpIDString);\n\t\t\t\t\t//update jump in database\n\t\t\t\t\t//TODO: implement this\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            MessageResources resources = getMessageResources(request);\n            if (args[i].isResource()) {\n                arg", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new TimedData(id, conf);\n\t\t\t}\n\t\t\t@Override", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\", getFieldEditorParent()));\n\t\t\t\taddField(new IntegerFieldEditor(AUDIO_FILE_CACHE_LENGHT, \"Cache lenght\",", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base( owner )\n            {\n                m_Owner = owner;\n            }\n            protected override void OnTarget(Mobile from, object o)\n           ", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor (final IField field : fields) { \n\t\t\tfinal String name = field.getName();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named == null) { \n\t\t\t\tnamed = new ArrayList<IField>(3);\n\t\t\t\tname2Field.put(name, named);\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \n```python\nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  It is not intended to be used directly by\n    application code.\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n// End of file\n```\nThe code is already complete. It's a C# class that represents a MultiView control in ASP.NET. The code is well-structured and follows the standard ASP.NET naming conventions. The class has several properties and methods that", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Starting the download process.'\n\n# I have tried to follow the PEP 8 style guide for the code.\n# I have also tried to follow the PEP 257 for the docstrings.\n# I have also tried to follow the PEP 257 for the docstrings.\n# I", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                }\n                // = SkillGroup3 replace SkillGroup3\n                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                           ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        builds.append({\n            'os': 'os_windows',\n            'os_pretty': 'Windows',\n            'locale': locale,\n            'locale_pretty': locale,\n            'download_link': make_download_link(product, version, platform, locale,\n                                              force_direct=force_direct,\n                                              force_full_installer=", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tTProjectBean projectBean = LookupContainer.getProjectBean(projectID);\n\t\t\tif (projectBean!=null) {\n\t\t\t\tInteger projectTypeID = projectBean.getProjectType();\n\t\t\t\tif (projectTypeID!=null) {\n\t\t\t\t\tstateBeansList = StatusBL.load", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Expression.IsKind(SyntaxKind.IdentifierName)) {\n                    var identifier = (IdentifierNameSyntax)argument.Expression;\n                    var parameter = memberList.FirstOrDefault(m => m.ParameterName == identifier.Name);\n                    if (parameter!= null) {\n                        toReplace", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        self._assert_children(2)\n        # Change to second group configuration.\n        self._update_partition_id(1)\n        self._assert_children(2)\n    def test_create_duplicate(self):\n        \"\"\"\n        Test that duplicate of a split_test module is created with the correct display name.\n        \"\"\"\n        # Create", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference descendant = new PdfIndirectReference();\n            PdfIndirectReference toUnicode = null;\n            PdfDictionary cdic = new PdfDictionary();\n            cdic.Put(PdfName.FONTNAME, new PdfName(fontName));\n            cdic.Put(PdfName.FONTDESCRIPTOR, fontDescriptor);\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\t// find the depth of the cell\n\t\t\t\t\t\tint depth = cgn.depth;\n\t\t\t\t\t\t// find the x position\n\t\t\t\t\t\tdouble x = 0;\n\t\t\t\t\t\tif (depth > 0)\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    public EmojiPageBitmap get() {\n      return this;\n    }\n    public EmojiPageBitmap setBitmap(Bitmap bitmap) {\n      bitmapReference = new SoftReference<>(bitmap);\n      return this;\n    }\n    public EmojiPage", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * The chat area has a right click menu,", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It should be a class that inherits from NodeDetailsView and has a property that returns a boolean indicating whether the view is displayed. The property should check if the current page is the 'Details' page for the given Node object. \n\n```python", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onSequence(timestamp, getCurrentSequence());\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, skeleton", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                writer.Write(\"<button\");\n                writer.Write(\" id=\\\"\");\n                writer.Write(ClientID);\n                writer.Write(\"\\\"\");\n                writer.Write(\" class=\\\"\");\n                writer.Write(\"toolbarbutton\");\n                writer.Write(\"\\\"\");\n                writer.Write(\" style=\\\"\");\n                writer.Write(\"background-image:url(\");\n                writer.Write(Page.Resolve", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tif (compound.hasKey(\"DamageCooldown\"))\n\t\t{\n\t\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");\n\t\t}\n\t}\n\tpublic void writeDataToNBT(NBTTagCompound compound)\n\t{\n\t\tItemStack stack = inventory.get(0);\n\t\t\n\t\tcompound.setTag(\"ToolDamage\", stack.getTagCompound());\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // End of serialization\n    // End of class\n}\n```\nThe final answer is: \n```java\n/**\n *  Copyright (C) 2002-2015   The FreeCol Team\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = i['_source']\n    assert i['indicator'] == 'example.com'\n    assert i['group'] == 'private'\n    assert i['tags", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(doc._delta(), ({'owner': person}, {}))\n        self.assertEqual(doc._delta(), ({'owner': person}, {}))\n    def test_delta_2(self):\n        class Person(Document):\n            name = StringField()\n            employer = ReferenceField('Organization')\n        class Organization(Document):\n            name =", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_ind=None):\n    \"\"\"\n    Plot a waveform at a given time index.\n    :param x: Name of the waveform variable\n    :param y: Name of the reference variable\n    :param ref_ind: Index of the reference waveform", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path))\n                {\n                    _tempIgnoredPaths.AddOrUpdate(path, 1, (key, value) => value + 1);\n                    continue;\n                }\n                if (_tempIgnoredPaths.TryGetValue(path, out var count))\n                {\n                    if (count > 1)\n                    {\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction));\n\t}\n\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                self.fetchcomments(uid,itemindex", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = (sbyte)value; }\n\t\t}\n\t}\n\tpublic class TileList : List<Tile>\n\t{\n\t\tpublic TileList()\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get the channel URI\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": get channel URI for {1}\", scene.RegionInfo.RegionName, agentID);\n                    //m_log.DebugFormat(\"[FreeSwitch][PARCELVOICE]: region \\\"{0}\\\": get channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.Text;\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(object sender, System.EventArgs", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Convert the time to python datetimes.\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):\n            dt = datetime.datetime.strptime(t, NAMEII_TIMESERIES_DATETIME_FORMAT)\n            new_time_column_header.append(dt)\n        column_headings['Time'] = new", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    return _group_or_org_member_create(context, data_dict)\ndef group_member_update(context, data_dict):\n    return _group_or_org_member_create(context, data_dict)\ndef group_member_delete(context, data_dict):\n    return _group_or_org_member_create(context, data", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = example.getConfidence(predictionAttribute);\n\t\t\t\tdouble conf2 = conf;\n\t\t\t\t// recursively applying the model\n\t\t\t\tperformPredictionRecursivly(applySet, node.getChild(predictionAttribute.getMapping().map(example.get(predictedLabel)), confidences, outcomes, depths, depth + 1,", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n    }\n}\n// ---------------------------------\n// <copyright file=\"AbstractTrados2007TranslationProvider.cs\" company=\"SDL International\">\n// Copyright  2011 All Right Reserved\n// </copyright>\n// <author>Kostiantyn Lukianets", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            codePoint = Character.codePointAt(offset - 1, ch);\n         }\n         if (_range.contains(codePoint)) {\n            return offset;\n         } else {\n            return -1;\n         }\n      }\n      @Override\n      int minLength() {\n         return 1;\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        if (studyFormName.equals(accessionNumber.substring(PROGRAM_START, PROGRAM_END)) {\n            return ValidationResults.SUCCESS;\n        } else {\n            if (existingRequired) {\n                return ValidationResults.REQUIRED_FAIL;\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.Name!= LobbyInfo.GlobalSettings.Name)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.Format(\"Server name mismatch: {0}!= {1}\", Settings.Name, LobbyInfo.Global", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tif(beans[x]!= null)\n\t\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//#############################################################################\n//EOH\n//EOH\n//EOH\n//", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate()\nelif prnum == 'watchlist':\n    #-------------------\n    # script.watchlist\n    #-------------------\n   ", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\ndef __getUniqueKeyValues( self, typeName ):\n  #... (rest of the method remains the same)\n```\nThis is the corrected code. The method name was changed from `__getUniqueKeyValues` to `__getUniqueKeyValues` to match the original code. The rest of", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager : BaseBuilderQueueManager\n\t{\n\t\t// Add code here", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        catalog.execute(\"add /clusters[cluster] databases database\");\n        catalog.execute(\"add /clusters[cluster] databases database\");\n        catalog.execute(\"add /clusters[cluster] databases database\");\n        catalog.execute(\"add /clusters[cluster] databases database\");\n        catalog.execute(\"add /clusters[cluster] databases database", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(59, 144);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n\t\t\tthis.textBox2.Size = new System.Drawing.Size(100, 20);\n\t\t\tthis.textBox2.TabIndex = 3", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n\t\t\tdcb.fDtrControl = (byte)hs;\n\t\t\tMarshal.Write (Marshal.AllocHGlobal", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    \"\"\"\n    Test that the user's cobrand is displayed on their profile page.\n    \"\"\"\n    self.user.get_profile().cobrand = self.make_cobrand()\n    self.user.save()\n    page = self.get_page(self.user.get_profile().get_url())\n    self.assertEquals", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-c', '--configfile', dest='configfile',\n                        help='Path to config file')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true')\n    args = parser.parse_args()\n    if args.verbose:\n        #print \"args are\", args\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tfor entry in newList:\n\t\t\t\tif entry[0] == ap:\n\t\t\t\t\tnewListIndex = newList.index(entry)\n\t\t\t\t\tcurrentListEntry = entry\n\t\t\t\t\tcurrentListIndex = newListIndex\n\t\t\t\t\tbreak\n\t\t\tif currentListIndex is not None:\n\t\t\t\tif currentListEntry[0] == self.oldlist[", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum)\n                    fCode = fCode + GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (textAlignment == Element.ALIGN_CENTER)\n                    fontX = fontX / 2;\n                return new Rectangle(fontX, bar", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",\"another quoted value\"\n   *    \n   * getStringArray(props, \"property1", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\n# Define the test class\nclass TestTrajectoryInterpolation(tests.IrisTest):\n    def setUp(self):\n        # Load the cube\n        cube = iris.load_cube(tests.get_data_path([\"PP\", \"COLPEX\", \"theta_and_orog_subset.pp\"]))\n        # Define the sample", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (IsFrameModified())\n            {\n                _packets[_index] = _packets[_index].ClonePacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\nprint '\\033[0m'\n    return 0\ndef get_mfcc_diy(wav_dir):\n    # get the mfcc from the wav file\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} /// <summary>\n    /// reference-counting set based on a HashMap implementation that stores keys and a reference count for each key.\n    /// </summary>\n    public class RefCountedSet<TK, TV> : RefCountedSet<TK>\n    {\n        private readonly IDictionary<TK", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            this.treeView1.ImageIndex = 0;\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView1.Location = new System.Drawing.Point(0, 0);\n            this.treeView1.Name = \"treeView1\";\n            this.treeView1.Size = new System.Drawing.Size(", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef nullFunction( self, functionName, dll, resultType, argTypes, doc = None, argNames = (), extension = None, deprecated = False ):\n```\nThis is the last part of the code. The function is used to create a null function. The null function is a function that does", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeUint64(baos, emptyStreams.nextSetBit(0));\n            writeUint64(baos, 0);\n            writeUint64(baos, 0);\n            writeUint64(baos, 0);\n            writeUint64(baos, 0);\n            writeUint64(baos, 0", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (System.currentTimeMillis() - start > rampDelay)\n                    {\n                        inRamp = true;\n                        alphaLevel = rampUp? 255 : 0;\n                        start = System.currentTimeMillis();\n                    }\n                }\n                if (rampUp)\n                {\n                    alphaLevel = (int) (shield * (", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_return_status_as_completed()\n        {\n            GivenGlobalSeedLimits(1.0);\n            GivenCompletedItem();\n            var", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n            }\n        }\n    }\n}\n}\n#endregion\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                      'for convolution\\n'])\n        f.writelines([' 1) sersic \\n'])\n        for i in range(1, AdComp + 1):\n            FitDict = {}\n            FitDict = FitDict.fromkeys(FitDict)\n            FitDict[1] = [1, 1]\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 5);\n                    i += ((b & 0x02) << 2);\n                    i += ((b & 0x01) << 3);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self._create_course(self._course_dict)\n    def _create_course(self, course_dict", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif ( splitNumber.length == 2 ) {\n\t\t\tchance = Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance * 0.01);\n\t}\n}\npackage de.tink.minecraft.plugin.safari;\nimport org.bukkit.Bukkit;\nimport org.bukkit.entity.Player;\nimport", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function is used to download a certificate from the api host\n    # It is used to download the key and cert files\n    # The cert_type is either 'key' or 'cert'\n    # The function returns the", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy = new System.Windows.Forms.Label();\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(200, 13);\n            this.lblPrivacy.TabIndex = 0;\n            this", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (plug, plugname, optname, optparm in self.all_options:\n            plug.set_option(optname, optparm)\n        self._set_plugin_options()\n        self._set_tunables()\n        self._set_plugin_options()\n        self._set_tunables()\n        self._set_plugin_options", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" List of speakers \"\"\"\n    def getSpeakerList(self):\n        \"\"\" List of speakers \"\"\"\n        return self.getSpeakerList()\n    getSpeakerList.name = \"speakers\"\n    getSpeakerList.result = IConferenceParticipationFossil\n    getSpeakerList.name = \"speakers", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText());\n            }\n            setCursor(null);\n            if (result!= null) {\n                message", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Number) {\n\t\t       \t\t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t\t} else if (value instanceof String) {\n\t\t       \t\t\t\tlayer = Integer.parseInt((String) value);\n\t\t       \t\t\t}\n\t\t    \t}\n\t    \t}\n\t    \treturn layer;\n    \t} catch (Exception e", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n            Session.StatusCallback callback = new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions){\n\t\t\tsum += emotion.chance;\n\t\t}\n\t\tfor (Emotion emotion : emotions){\n\t\t\temotion.chance /= sum;\n\t\t}\n\t}\n\tpublic void setChance(String emotionName, float chance) {\n\t\tfor (Emotion emotion : emotions){\n\t\t\tif", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2, 'property2': 3}\n        },\n        self.build.stages.stages\n    def test_to_xml(self):\n        \"\"\"Test exporting to xml\"\"\"\n        # read and parse sample file\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test xml\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n\"\"\"\ndef meters_to_furlongs(meters):\n    \"\"\"\n    Converts meters to furlongs\n    \"\"\"\n    # 1 furlong = 201.168 meters\n    furlongs = meters / 201.168\n    return furlongs\ndef furlongs_to_meters", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\n        form = ReportUserForm(request.POST)\n```\nshould be\n```\n        form = ReportUserForm(request.POST)\n```\n```\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username])\n       ", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(ReturnToReferrerMixin, ProductConfigureBase):\n    \"\"\"A view to add a project to a product set.\"\"\"\n    label = \"Add a project to a product set\"\n    implements(IProductSet)\n    def __init__(self, context, request):\n        super(ProductAddStepOne,", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n*/\nPlease complete the code given above. Here is the completed code:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n} \npackage org.jaudiotagger.tag.datatype;\nimport org.jaudiotagger.tag.id3.AbstractTagFrameBody;\nimport org.jaudiotagger.tag.id3.ID3Tags;\nimport org.jaudiotagger.tag.id3", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags = []\n            for flag, regex in flag_regex:\n                if flag == constants.isa_tag_type:\n                    if regex not in constants.supported_tags[constants.isa_tag_type]:\n                        raise ValueError('Invalid ISA tag: %s' % regex)\n                elif flag == constants.variant_tag_type", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class EmptyTypes : Type[]\n    {\n        public static readonly EmptyTypes Empty = new EmptyTypes ();\n        public EmptyTypes ()\n        {\n            Array.Resize (ref this, 0);\n        }\n    }\n    public class EmptyProperties : PropertyInfo[]\n    {\n        public static readonly", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_EngineOilTemperature\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 4, unit=\"deg. C\", offset=-40.0)\n    ]\n    pass\n```\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListSessions')\n\t\tself.add_prompt(SecretPrompt(self, None, None, None))\n\t\tself.add_prompt(SecretPrompt(self, None, None, None))\n\t\tself.add_collection(SecretCollection(self, None,", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044360, 1, 1044361);\n                this.AddRes(index, typeof(SulfurousAsh), 1044361, 1, 1044362);\n                this.AddRes(index, typeof(SulfurousAsh), 104", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._preserved_exc = exc\n        if self._implicit_app_ctx_stack:\n            self._implicit_app_ctx_stack.pop()\n        if self._after_request_functions:\n            self._after_request_functions.extend(self._app_ctx_stack._get_current_app().app_ctx_stack.top._after_request_functions)\n        _request", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_producer_list(session, cluster_id, needs_columns=False):\n    \"\"\" All pub/sub producers.\n    \"\"\"\n    return session.query(\n        PubSubProducer.id,\n        PubSubProducer.is_active,\n        PubSubProducer.is_active,\n        PubSubProducer.is_active,\n        PubSubProducer", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public ResourceEntity getResourceEntityForRelease(@NotNull Collection<ResourceEntity> resources, @NotNull ReleaseEntity release) {\n        return getResourceEntityForRelease(resources, release);\n    }\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Find projection of rotation axis on the detector\n        axis_proj = _rotation_direction_in_detector(ray_trafo.geometry)\n        # Compute the Parker weighting\n        parker_weight = (1 + q * (1 - np.cos(2 * np.pi * angles / (2 * alen)))\n    else:\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _get_search_string(self, search_string, show, episode, season, episode_numbers, season_numbers, episode_numbers_str, season_numbers_str, search_mode, search_type, search_mode_str, search_type_str, search_mode_fallback, search_type_fallback, search_mode_fallback_str, search_type_fallback", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn unit.ToString ();\n\t\t}\n\t\tpublic string ToString (CultureInfo culture)\n\t\t{\n\t\t\treturn unit.ToString (culture);\n\t\t}\n\t\tpublic string ToString (CultureInfo culture, IFormatProvider provider)\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tbyte[] result = new byte[block1.Length];\n\t\t\tArray.Copy", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t}\n\t}\n}\t\n}\t\n}\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n}\t\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < width; w++) {\n                    if (h == 0) {\n                        if (w == 0) {\n                            edges.add(new T2(w, w));\n                        }\n                        if (w == width - 1) {\n                            edges.add(new T2(w", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    data = i1.get(col1=\"area_um\", col2=\"deform\", lut_identifier=\"LE-2D-FEM-19\", channel_width=30, flow_rate=0.16, viscosity=15, add_px_err=True, px_um=0.34)\n    assert np.allclose(data", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, zone, region, instance_type):\n    \"\"\"Return the lowest spotprice for a given zone, region and instance type.\"\"\"\n    history = sorted(history, key=lambda x: x['SpotPrice'])\n    for entry in history:\n        if entry['AvailabilityZone'] == zone and entry['Product", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Downloads the latest version of Yarta and installs it.\n\t * \n\t * @return true/false\n\t */\n\tprivate boolean performDownloadAndInstallation() {\n\t\tString downloadedJarFile = performDownload();\n\t\tif (download", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.VertexPosAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDeleteVertexArrays(1, new IntPtr(Shader.TexCoordAttributeIndex));\n\t\t\tOpenGL.glDelete", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inverse\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.x\n    @", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n           ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  adminUser = getEucalyptusAdmin();\n                } else {\n                  // Get the account info\n                  try {\n                    adminUser = Accounts.lookupUser( walrusObject.getOwnerId() );\n                    no( walrusObject.getOwnerId() );\n                    no( walrusObject.getOwnerId() );\n                    no(", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        ImportVmTemplateCommand command = new ImportVmTemplateCommand(new ImportVmTemplateParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), new VmTemplate());\n        command.setImportAsCloned(isImportAsNewEntity);\n        command.setValidateNameSize(isImportAsNewEntity);\n       ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\t// Container child table1.Gtk.Table.TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent.LabelProp = global::Mono.Unix.Catalog.GetString (\"% of CPU", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['STATUS'] = self.status\n        self.system['SCRIPTSTATUS'] = self.scriptstatus\n        self.system['PARSTATUS'] = self.parstatus\n", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[] returnTypes, Type[] typeConstraints, Type[] interfaceConstraints, Type[] genericParameterAttributes)\n\t\t{\n\t\t\treturn DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                int index = getVertIndex(i, x);\n                vertices[x].set(getVertices()[index * 3], getVertices()[index * 3 + 1],\n                        getVertices()[index * 3 + 2]);\n            }\n        }\n    }\n   ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (!showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATECREATED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of the document list columns that are sortable.<p>\n     * \n     * Used by", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tinputField.ActivateInputField();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinputField.DeactivateInputField();\n\t\t\t}\n\t\t\tCalculateHeight();\n\t\t}\n\t\tvoid CalculateHeight ()\n\t\t{\n\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    #region PRIVATE ROUTINES\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF textSize = GetLargeTextSizeF();\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            if (Users.Count > 0)\n            {\n                DataTable users = SUserAccess.LoadByUserIds(Users.ToArray());\n                DataTable usererrors", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 3)\n            {\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(PetraErrorCodes.ERR_DISCOUNTS_NOT_ALL_USED));\n                // Add to collection\n                VerificationResultCollection", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n} \n``` \nPlease complete the code given above. The code is incomplete and has some errors. The code is written in C# and is part", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\ndef _add(self, req_type, ids, reason, strong):\n    for id in ids:\n        if id not in self._reqs[req_type]:\n            self._reqs[req_type][id] = PayloadRequirement(id, reason, strong)\n        else:\n            self._reqs", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t}\n}\n}\nnamespace org.gnome.SessionManager\n{\n\tpublic class SessionManager\n\t{\n\t\tpublic static readonly string Constants.SessionManagerInterfaceName = \"org.gnome.SessionManager\";\n\t\tpublic static readonly string Constants.SessionManagerPath = \"/org/gnome/SessionManager", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getLineNumber() == -1) {\n                reportBug(bugInstance);\n            }\n        }\n    }\n    public void reportBug(BugInstance bugInstance) {\n        if (applySuppressions) {\n            if (bugInstance.getPriority() == BugPriority.EXP_PRIORITY) {\n                // Suppress", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Apple : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Apple() : base( 0x1A5 )\n\t\t{\n\t\t\tthis.Weight = 0.1;\n\t\t\tthis.FillFactor = 1;\n\t\t}\n\t\tpublic Apple( int amount ) : base( amount, ", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.MinHit >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    else if (Menu.GetBool(\"LaneClearE\") && E.IsReady() && eMinions.Count > 0)\n                    {\n                       ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\ndirectory = 'gds/specials/forecasts/tables/germany'\n```\nThis is the last line of the code. The code is a plugin for a home automation system, and it fetches weather data from the German weather service DWD. The plugin fetches data from the D", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Field_parser.field_definitions('testsuite')['title_title']['rules'],\n            Field_parser.field_definitions('testsuite')['title']['rules']\n        )\n        self.assertEquals(\n            Field_parser.field_definitions('testsuite')['title_title']['rules'],\n            Field_parser", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"10\", \"E1\"}});\n                // widening to int\n                // widening to int\n                // widening to int\n                // widening to int\n                // widening to int\n                // widening to int\n                // widening to int\n                // widening to int\n               ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __rmul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        clibrebound.reb_particle_imul.restype = c_double\n        clibrebound.reb_particle_imul(byref(self), c_double(other))\n        return self\n    \n    def", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, cr, uid, id_or_xml_id, values=None, context=None):\n    #... (rest of the method remains the same)\n    #... (rest of the method remains the same)\n    #... (rest of the method remains the same)\n    #... (rest of the method remains", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n    }\n    private static View createHTMLView(JComponent c, String text) {\n        return createHTMLView(c, text, null);\n    }\n    private static View createHTMLView(JComponent", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename, content=content)\n    assert s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    item = items[0]\n", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t}\n\t\t#endregion\n\t}\n}\nThe code is incomplete. Please complete it.\n\t\t}\n\t\tpublic void Loader(string namedQueryReference)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n\t\t\t{\n\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( m_Members.Count );\n\t\t\t}\n\t\t\twriter.WriteEncodedInt( (int) 0 );\n\t\t\twriter.WriteEncodedInt( (int) 0 );\n\t\t\twriter.WriteEncodedInt( (int) 0 );\n\t\t\twriter.WriteEncodedInt( (int) 0 );\n\t\t\twriter.Write", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        graphQueue.push(invocationQueue.pop());\n    }\n    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.peek().invokeProbability() < 0.0) {\n           ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n            if self.args['sprout']:\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    ValuePhiNode phi = getCachedPhi(key);\n                    if (phi == null) {\n                        phi = getCachedPhi(key);\n                        materializedPhis.put(key, phi);\n                    }\n                    for (int i = 0; i < states.size(); i++) {\n                        Read", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    }\n}\n```\nThis is a Java code snippet for an ImsVideoCallProvider class. The class is used to manage video calls", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\n            from.SendGump(new EodonMapGump(this, from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t\tpublic override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list)\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\n# Define a new model for Bib001x table\nclass Bib001x(BibxxxMixin):\n    __tablename__ = 'bib001x'\n    # Add columns for Bib001x table\n    field1 = db.Column(db.String(10), nullable=False, index=True)\n    field2 =", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_random_password(self):\n    \"\"\"Return a random password of length 16.\"\"\"\n    return ''.join([chr(ord('a') + (ord(c) - ord('a')) % 26 for c in 'abcdefghijklmnopqrstuvwxyz' * 2])  # 16 chars\n    return ''.join([chr(ord('", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', [e.__str__(self.wrap", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n    else:\n      res = self.transClient.setTransformationStatus( transID, 'WaitingIntegrity' )\n    if not res['OK']:\n      gLogger.error( \"Failed", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"POST\")) {\n\t\t\t\t// POST forms are only allowed to /, so we can just return the baseURI\n\t\t\t\treturn baseURI.toASCIIString();\n\t\t\t} else {\n\t\t\t\t// GET forms are allowed to /, /plugins/, /plugins/<plugin>/, /plugins/<plugin", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self, buildResults=[buildResult])\n        gsp.sendCodeReview = Mock()\n        gsp.sendCodeReview.return_value = defer.succeed(None)\n        gsp.sendCodeReview.return_value.addCallback = Mock()\n        gsp.sendCodeReview.return_value", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  \n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'http://www.google.com'\n    self.category.label = 'test'\n    self.assert_(self.category.term == 'test')\n    self.assert_(self.category.scheme ==", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = r1;\n            if (r2!= null) {\n                for (Map.Entry<String, AnnotationMirror> entry : r2.entrySet()) {\n                    AnnotationMirror anno = entry.getValue();\n                    if (anno!= null)", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_subsurface_scattering(MaterialButtonsPanel, Panel):\n    bl_label = \"Subsurface Scattering\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_RENDER'}\n    def draw(self, context):\n        layout = self.layout\n        mat = context.material", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1\n            //Mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            };\n            JMenuItem jMnuOpenDocument = new JMenuItem(\"Open Document\");\n            jMnuOpenDocument.addActionListener(oActionListener);\n            jMnuOpenDocument.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyStroke.CTRL_DOWN_MASK));\n            _jMnuRoot.add(jMnuOpenDocument);\n", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Training\n\t\t//----------------\n\t\tAdd(\"Training\", 70026); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70027); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70028); // Training Scroll [10 Windmill]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (0);\n\t\t}\n\t\tpublic int SizeWidthToFitWithMin (int min)\n\t\t{\n\t\t\treturn SizeWidthToFitWithMin (min, 0);\n\t\t}\n\t\tpublic int SizeWidthToFitWith", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def __init__(self, *args, **kwargs):\n    \"\"\"\n    Initialize the model.\n    :param args: For super()\n    :param kwargs: For super()\n    \"\"\"\n    # Initialize the model\n    super(Announcement, self).__init__(*args, **kwargs)\n    # Initialize the model fields", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer(startinline=True)\n# Add any paths that contain custom static files\n# (that are copied directly from this setup directory to\n# STYLESHEETS_DIR = os.path.join(os.path.dirname(__file__),'stylesheets')\n#html_static_path = [STYLESHEETS", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\n\nHere is the corrected code:\n\n```python\nimport settings\nimport string\nimport datetime\nimport sqlite3\nimport pytz\nfrom datetime import datetime, timedelta\nimport time\n\n# Creates or opens a file called mydb with a SQLite DB\ndb = sqlite3.connect('flogger.sql3')\n#", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        rethinkdb_table = rethinkdb.db('smc-storage').table('projects').get(project_id).update({'last_snapshot': timestamp_to_timestamp(timestamp)}\n        conn.save(rethinkdb_table)\n        conn.close()\ndef time_to_timestamp(tm):\n    return datetime.datetime.strptime(tm, TIMESTAMP_FORMAT).timestamp()\ndef timestamp_to", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"I don't know what you're talking about.\");\n\t\t\t}\n\t\t}\n\t}\n\tpublic override async Task Conversation()\n\t{\n\t\t//... (rest of the code)\n\t}\n}\n} // public class Deian\n} // public class DeianScript\n} // public class Deian", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteDeletedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n\t\tattributes:\n\t\tdata:\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    \"\"\"\n    Data about a host's results for a single task.\n    \"\"\"\n    def __init__(self, host_uuid, name, status, result):\n        self.uuid = host_uuid\n        self.name = name\n        self.status = status\n        self.start = None\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\n//... (rest of the code remains the same)\n```\nPlease complete the code by adding the following lines:\n```java\n//... (rest of the code remains the same)\n```\nPlease complete the code by adding the following lines:\n```java\n//... (rest of the code remains the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #       it should be moved there\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def _byte_compile (self, files):\n        self.byte_compile(files, optimize=self.optimize, dry_run=self.dry_run)\n    # _byte_compile ()\n   ", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tint tableNumber = GetSubclassPropertyTableNumber(lazyPropertyNames[j]);\n\t\t\t\tint[] columnNumbers = subclassColumnNumberClosure[lazyPropertyNumbers[j]];\n\t\t\t\tint[] formulaNumbers = subclassFormulaNumberClosure", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'h_rt=%d' % request['job_max_vmem'],\n        '-l', 'h_vmem=%d' % request['job_max_vmem'],\n        '-l', 'h_cpu=%d' % request['job_max_vmem'],\n        '-", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"Form\", new DelegateViewModel());\n        }\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(int id, int[] items)\n        {\n            var result = service.AddEventDelegate(id, items);\n            return Json(new\n            {\n                Success =", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    if (obj is List<Obj_AI_Spell> || obj is List<Obj_AI_Turret> || obj is List<Obj_AI_Turret> || obj is List<Obj_AI_SuperMinion> || obj is List<Obj_AI_Hero> || obj is List<Obj_AI_M", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\ndef handlePremium(self):\n    self.html = self.load(self.URLS[0])\n    self.html = self.load(self.URLS[1])\n    self.html = self.load(self.URLS[2])\n    self.html = self.load(self.URLS[3])\n    self.html = self.load(self.URL", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If no harvestable resources were found, try to find a resource near the refinery.\n\t\t\tif (path == null)\n\t\t\t{\n\t\t\t\tvar deliveryLoc = harv.LastHarvestedCell;\n\t\t\t\tif (deliveryLoc!= null && harv.CanHarvestCell(self, deliveryLoc.Value))\n\t\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"Failed to restart dhcpd\")\n                    return False\n                elif which_dhcp_module == \"manage_isc\":\n                    self.logger.info(\"restarting dhcpd\")\n                    utils.subprocess_call(self.logger, \"service dhcpd restart\")\n                elif which_dhcp_module == \"manage_dhcp\":\n                   ", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n    @Override\n    public void setLogAllMessages(boolean logAllMessages) {\n        this.logAllMessages = logAllMessages;\n    }\n    @Override\n    public void setSeqNo(AtomicInteger seqNo) {\n        this.seqNo = seqNo;\n    }\n   ", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            for (PpmContext current = context.Suffix; stateIndex < MAXIMUM_ORDER; current = current.Suffix)\n            {\n                if (stateIndex == 0)\n                {\n                    state = state = _allocator.AllocateUnits(1);\n                    if (state == PpmState.ZERO)\n                    {\n                       ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true, 16, true,'', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tSqliteSession.SelectAll(false, Sqlite.Orders_by.DEFAULT);\n\t\t\tSqliteSession.SelectAll(false, Sqlite.Orders_by.DEFAULT);\n\t\t\t//SqliteSession.SelectAll(false, Sqlite.Orders_by.DEFAULT);\n\t\t\t//SqliteSession.SelectAll(false, Sqlite.Orders_by.DEFAULT);\n\t\t\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 4, 9)\n        self.failUnlessRaises(ValueError, self.read, o)\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\x00' * 8, self.read", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n  <tr>\n    <td>Mac OS X</td>\n    <td>\n  <a onClick=\"return onDownload(this)\" id=\"mac-bundle\"\n     href=\"http://dl.google.com/android/adt/<?cs var:sdk.mac_bundle_download?>\"><?cs var:sdk.mac_bundle_download?></", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    ax.plot(cr['combined'][app][test]['durations'], label='%s' % (test))\n    ax.plot(cr['combined'][app][test]['stats']['intervals'][0]['interval'],\n             label='%s (95%% CI)' % (test))\n    ax.plot(cr['combined'][app][", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _FancyEqMixin(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return self.a == other.a\n    def __ne__(self, other):\n        return self.a!= other.a", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 2, controlSize - 2);\n\t\t\t\t}\n\t\t\t\telse if(model.isPressed()){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize -", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef getNumTestPatterns(self, short = 0):\n```\n```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Returns the number of test patterns and the number of classes \"\"\"\n  if short == 0:\n    return 10, 2\n  elif short", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(index, value);\n    }\n    @HOSTED_ONLY\n    public void visitHeader(ObjectCellVisitor visitor) {\n        visitor.visitHeaderField(HeaderField.LENGTH, readLength(visitor));\n    }\n    @HOSTED", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = ResolveFromFolderList(StringCollection.Empty, relativePath);\n            if (assemblyFile!= null) {\n                return assemblyFile;\n            }\n            return null;\n        }\n        /// <summary", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def dict_recursive_fetch_list(d, key):\n    \"\"\"\n    Recursively fetches all values in dict 'd' with key 'key'\n    \"\"\"\n    l = []\n    if key in d:\n        l.append(d[key])\n    if isinstance(d, dict):\n        for k in d:\n            if isinstance(d[k", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i18 + i16 - 1;\n        i20 = i20 + 1;\n        i20 = i20 + i25;\n        i20 = i20 + i25;\n        i20 = i20 + i25;\n        i20 = i20 + i25;\n       ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// A state in the graph. Each state is a clip that can be played in the layer.\n\t/// </summary>\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t}\n}\n```\n\nThe code provided is a JUnit test class for a component that tests the functionality of the model management service. The class is annotated with `@RunWith(CdiRunner.class)` and `@AdditionalClasses` to enable CDI (Context and Dependency Injection) and to include additional classes in the", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['non-existent-command'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        self.assertRaises(subprocess.CalledProcessError, proc.wait)\n    @testlib.with_context\n    def test_popen_returns_correct_returncode(self, context", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (insert code here)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grunwald", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t}\n\t}\n}\n```\nThe final answer is: \n\n```csharp\n}\n}\n``` \nThis is the end of the code snippet. The code is a part of the System.Data namespace in the System.Data assembly. It defines a base class for constraints in a database. The class is abstract and provides", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.settings_project_groupbox)\n        self.verticalLayout_2.addWidget(self.settings_kernels_groupBox)\n        self.settings_project_groupbox = QtWidgets.QGroupBox(self.settings_project_groupbox)\n       ", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            mStationId = stationId;\n            mLastForecast = getTaf( wxs );\n            return true;\n        }\n    }\n    private void showTaf( String stationId ) {\n        SQLiteDatabase db = getDbManager().getDatabase( DatabaseManager.DB_FADDS );\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring query = \"from Continent\";\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(1, stats.GetQueryStatistics(query).ExecutionCount);\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(2, stats.GetQueryStatistics(query).ExecutionCount", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uint)((uiCRCITTSum ^ uiByteValue);\n                uiByteValue = (uint)(uiCRCITTSum & 0x00FF);\n                uiCRCITTSum = (uint)((uiCRCITTSum >> 8);\n                uiCRCITTSum = (uint)((ui", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic static class Bullet extends Projectile {\n\t\tpublic Bullet(ServerLevel level, LivingEntity owner, double x, double y, double z) {\n\t\t\tsuper(level, owner, x, y, z);\n\t\t}\n\t\tpublic Bullet(ServerLevel level, LivingEntity owner, double x,", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] { new JavaHyperlinkDetector() };\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n            new CeylonHyperlinkDetector(editor, controller),\n            new JavaHyperlinkDetector(),\n            new CeylonJavaBackendHyperlinkDetector(),\n           ", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.setSpacing(4)\nself.l.setMargin(0)\nself.l.setContentsMargins(0, 0, 0, 0)\nself.l.setStretchable(0, 0)\nself.l.setStretchable(1, 1)\nself.l", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Text entry\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Stack[ 0 ], m_Stack[ 1 ] );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Previous location", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String valueChoiceStr = selectConverter.convert(valueChoice);\n                        if (valueChoiceStr.equals(String.valueOf(value)))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n               }\n            }\n            else\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0 && i!=j)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the unpriced line\n                                int orderIndex = APIv1EndpointOrgProcurePurchaseOrderESD.getPurchaseOrderIndexFromESDRecordID(unpr", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n} // namespace System.ServiceModel.Dispatcher\n}", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupOwnerId = 1;\n        final int groupMode = 0100;\n        final int groupOwnerGroupId = 2;\n        final int groupMode2 = 0200;\n        final int groupOwnerGroup = 3;\n        final int groupOwnerGroup2 = 4;\n        final int", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Vector2 scale)\n\t\t{\n\t\t\treturn", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_array(XDRStruct):\n    __slots__ = ['endpoint_stats']\n    def __init__(self, endpoint_stats=None):\n        self.endpoint_stats = endpoint_stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        for i in range(len(obj.endpoint_stats)):\n            packer", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// sends a message to all connected clients\n\t\t/// </summary>\n\t\t/// <param name=\"msg\">message to be sent</param>\n\t\tpublic void SendToClient(string msg)\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'                              Class,'\n  for i in xrange(bind_count):\n    print'                              A%d a%d,' % (i, i)\n  for i in xrange(exec_count):\n    print'                              Arg%d arg%d,' % (i, i)\n  print'                              %s", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items],\n            content_type='application/json'\n        ),\n        mimetype='application/json'\n    )\ndef range_json(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(new ConstantNode(searchIV), serviceGraphPattern, null/* c */,\n                        null/* c */, null/* c */, null/* c */,\n                        null/* c */, null/* c */, null/* c */,\n                       ", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if self.request.method == \"POST\":\n            if \"set_is_active\" in self.request.POST:\n                return self._handle_set_is_active()\n            elif \"set_is_active\" in self.request.POST:\n                return self._handle_set_is_active()\n            else:\n                return self._handle_form_submission()\n        return", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of the assemblies that are referenced by this assembly.\n    /// </summary>\n    public virtual IEnumerable<IAliasForType> AliasesForTypes {\n      get { return this.ResolvedAssembly.Ali", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            for (int i = 0; i < matrix.RowCount; i++)\n            {\n                // Precondition the matrix\n                _preconditioner.Precondition(matrix, r);\n                // Initialize the residual\n                d[i] = r[i];\n                // Initialize the unknown\n                uodd[i] = 0", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left].divide(MathUtils.TWO.real()), sortedNumbers[right].divide(MathUtils.TWO.real())};\n\t\t}\n\t}\n} \nThe code provided is a Java class that contains several static", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                for k in range(K):\n                    if reference_set_map[v]!= -1:\n                        A[k, reference_set_map[v]] = 1\n                    if reference_set_map[v] == -1:\n                        reference_set_map[v] = k\n                v = parent[v]\n        for edge in edges_in:\n", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        result = self._test_raw_to_enrich(sortinghat=True, projects=False)\n        self.maxDiff = None\n        self.assertEqual(result['raw'], result['enrich'])\n        self.maxDiff = None\n        self.assertEqual(result['raw'], result['enrich'])\n        self.maxDiff = None\n       ", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.Value!= null && slot.Value.Value.Value!= LobbyPlayerTemplate.EmptyPlayer)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar player = slot.Value.Value;\n\t\t\t\t\t\t\t\t\t\t\tif (player.IsBot)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar botName = botNames.FirstOrDefault(n => n == player.BotName);\n\t\t\t\t\t\t\t\t\t\t\t\tif (botName!= null", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString() + \" (\" + NtStatus.NtStatusMessages[_status] + \")\";\n\t\t}\n\t}\n}\npublic class NtStatus\n{\n    public static int NtStatusUnsuccessful = 0x00000001;\n    public static int NtStatusAccessDenied =", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes + self.data\n    def parse_flags(self, flags):\n        super().parse_flags(flags)\n        if FrameFlag.END_SEGMENT in self.flags:\n            self.length = len(self.data) + self.total_padding\n        else:\n            self.length = len(self.data)\n    def parse(self", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            var rect = cluster.RectangularBoundary;\n            if (rect == null)\n                throw new InvalidOperationException(\"Rectangular boundary is null\");\n            if (rect!= cluster.BoundaryCurve.BoundingBox)\n                throw new InvalidOperationException(\"Rectangular boundary is not equal to the bounding box of the boundary curve\");\n            if (cluster.B", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nbtKinematicCharacterController::~btKinematicCharacterController()\n{\n}\nbtKinematicCharacterController::btKinematicCharacterController()\n{\n}\nbtKinematicCharacterController::btKinematicCharacterController(btKinematicCharacterController* other)\n{\n\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null &&!initializers.isEmpty()) {\n            // If the array is being initialized with a value that is a reference to\n            // \"this\", then the array is being leaked.\n            for (ExpressionTree initializer : initializers) {\n                if (TreeUtils.isExplicitThisReference(initial", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// if the type is a class\n\t\t\t\t\tif (typeAttribute.Value.StartsWith(\"class\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t// get the class name\n\t\t\t\t\t\tstring className = typeAttribute.Value.Substring(5);\n\t\t\t\t\t\t// get the class\n\t\t\t\t\t\t_class =", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tinstrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t}\n\t}\n\tpublic static class AddInstrumentationPointsTest extends ClassCacheInstrumentationTest {\n\t\t@Test\n\t\tpublic void test() {\n\t\t\t// TODO\n\t\t}\n\t}\n\tpublic static class RemoveInstrument", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.isAbstractionActive()!= other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.getTopPostdominator()!= other.getTopPostdominator())\n\t\t\treturn false;\n\t\tif (this.getTopPost", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideRExtent[start][r.leftChild];\n            int min = (min1 < min2? min1 : min2);\n            if (min > end) {\n              continue;\n            }\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude=pg_data', '--exclude=pg_data',\n                '--exclude=pg_data','src', 'dst'\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n```\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid DbgManager_ProcessesChanged(object? sender, ProcessChangedEventArgs e) {\n\t\t\t// UI thread\n\t\t\tUI(() => {\n\t\t\t\tif (dbgManager.Value.Process", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( (float)( 1.0 - ( 1.0 - b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification for the given scene.\n\t *\n\t * @param   scene", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null || this.getClass()!= aThat.getClass() ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact) aThat;\n\t\tif ( this.getContactDate()!= null && that.getContactDate()!= null ) {\n\t\t\tif (!this.getContactDate", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n')\n\t      for j in range(body_types[i]):\n\t\torientation = bodies[body_offset +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        if not cdata:\n            return\n        idx, = cdata\n        if (not hasattr(node, 'ndim') or node in node.fgraph.destroyers:\n            return\n        if (node.inputs[0].ndim!= idx.shape[0]:\n            return\n        if (node.inputs[", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community to be edited\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _get_collection_adapter(self, target, collection, collection_adapter):\n    \"\"\"Receive a collection's collection adapter.\n    :param target: the object receiving the event.\n    :param collection: the collection being modified.\n    :param collection_adapter: the collection's adapter.\n   .. seealso:: :ref:`attribute", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\n# Add <show> tag to the xml object\nself.runtime.add_block_as_child_node(self.show_tag_list, xml_object)\n```\nThis code will add the <show> tag to the xml object. The <show> tag is used to specify the child modules that should be shown when the condition", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis == Axis.SCALAR:\n                self.current_filter = {}\n            else:\n                self.current_filter[change.axis] = change.labels\n            self.update_filter(change.axis, change.labels)\n            self.current_filter = self.current_filter\n            self.current_filter = self", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t\telse if (Class!= null)\n\t\t\t{\n\t\t\t\tif (type!= null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"type attribute is not allowed when class attribute is used\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (Method!= null)\n\t\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 48);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, None)\n        self.assertEqual(c.comments, \"test cases for syncmail parser\\n\")\n        self.assertEqual(c.isdir, 0)\n        self.assertEqual(c.branch,", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isEmpty(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\tpublic int getColor() {\n\t\treturn 0x00FF00;\n\t}\n\tpublic int getMaxMana() {\n\t\treturn 0;\n\t}\n\tpublic int getMana() {\n\t\treturn 0;\n\t}\n\tpublic int getRedstoneSignal() {\n\t\treturn 0;\n\t}\n\tpublic", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(Community com1, Community com2, Node n1, Node n2) {\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2) remove", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void computerMenuConnect_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//connect to computer\n\t\t}\n\t\tprivate void computerMenuDisconnect_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\t//disconnect from computer\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  private Datable<?> toDatable(final Period period, final Datable<?> start, final Datable<?> end) {\n    return new Datable", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t// Set the source event binding to raise the source event when the source property is changed\n\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceProperty = sourceProperty;\n\t\tsourceEventBinding.SourceComponent = DataSource.Component;\n\t\tsourceEventBinding.SourceComponentName = DataSource.ComponentName;\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName);\n            // Add the code here\n        } catch (Exception e) {\n            resultBean.setStatus(false);\n            resultBean.setMessage(e.getMessage());\n        }\n        return resultBean;\n    }\n    @RequestMapping(value", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n\t\t\t{\n\t\t\t\tAlert = new ImageHelper(102150, \"Alerts\",", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setProperties(String[] files) {\n        this.files = files;\n        init();\n    }\n    public void setProperties(String[] files,", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n```\nThis is the start of a new method. The method is called `make_naa_annotations` and it takes two parameters: `project_uuid` and `naa_annotated_project_uuid`. The method", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrinktofit = \").Append(ShrinkToFit)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsLocked  = \").Append(IsLocked)\n               .Append(\"\\n\");\n            buffer.Append(\"         .IsHidden  = \").Append(IsHidden)\n               .Append(\"\\", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x8E00 && ch <= 0x8EFE) {\n\t\t\t\t// Complement Kanji.\n\t\t\t\t++charCount;\n\t\t\t\tcontinue;\n\t\t\t} else if", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"LDMST\" : dst = env.E[a]\n    elif obj.mnemonic==\"ST_A\"  : src = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString key = e.nextElement();\n\t\t\t\tString value = properties", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        public static WorldSettings.GameType getByName(String name)\n        {\n            for (WorldSettings.GameType type : values())\n            {\n                if (type.getName().equals(name))\n                {\n                    return type;\n                }\n            }\n            return NOT_SET;\n        }\n        public", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case for PurgeDefaultDacl\n\t\t}\n\t}\n}\n```\nThe code is a set of test cases for the Mono framework's implementation of the `CommonSecurityDescriptor` class. The test cases cover various scenarios, including the default behavior of the `DiscretionaryAcl`", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __run(self):\n    \"\"\"Run the lookup thread\"\"\"\n    self.__stopped = False\n    self.__thread = AcoustidLookupThread(self.__progress_cb)\n    self.__thread.start()\n    while self.__thread.is_alive():\n        GLib.idle_add(self.__progress_cb, 0", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    protected static void OnGUI()\n    {\n        // this is the main GUI for the Photon Setup Wizard\n        switch (PhotonEditor.Current!= null)\n        {\n            case PhotonEditor.Current!= null:\n                break;\n            default:\n                break;\n        }\n    }\n    protected static void", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(getActivity(), DraftEditor.class);\n                intent.putExtra(\"nodeindex\", message.id);\n                intent.putExtra(\"task\", \"new_in_echo\");\n                intent.putExtra(\"", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, self.symmetry.op_cc[k].T)\n    def get_count(self):\n        \"\"\"Return number of k-point/spin combinations on this CPU.\"\"\"\n        return self.mynks\n    def get_offset(self):\n        \"\"\"Return offset of k-point/spin combinations on this CPU.\"\"\"\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(\"luse\");\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        Response response = utkastController.createUtkast(intygsTyp, utkastRequest);\n        assertEquals(BAD_REQUEST", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tforeach (ILNode child2 in child.Body)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (child2 is ILLabel)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Add a goto to", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll == ragdoll) {\n\t\treturn;\n\t}\n\t    //set the ragdoll to true\n\t    IsRagdoll = ragdoll;\n\t    //if we're going to ragdoll, set the delay\n\t    if (ragdoll) {\n\t\t//set the delay\n\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Geological layer with fracture\"\"\"\n    def __init__(self, config={}):\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.surface = ClassFactory(Surface)\n        \"\"\"Surface of the layer\"\"\"\n        self.surface_id", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter() {\n                public String get( String label )\n                {\n                    PatternNode pNode = objectVariables.get( label );\n                    if ( pNode == null )\n                    {\n                        return null;\n                    }\n                    return pNode.getAssociation().getId().toString();\n                }\n            } );\n        }\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    slice_json['rate'] = transform_value_xml_json_to_json(value)\n    if value == '0':\n        slice_json['is_zero'] = True\n    elif value == '1':\n        slice_json['is_max'] = True\n    elif value == '2':\n       ", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setIcon(false);\n            frameToClose = null;\n            this.revalidate();\n            this.repaint();\n          } else {\n            if (SwingUtilities.isRightMouseButton(e)) {\n              frameToClose = (InternalFrame)buttons.get(btn", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# define our client-side functions\n```\nThis is the beginning of the code that defines the client-side functions. The functions are defined using the `_createFunction` decorator. The functions are defined below the decorator. The functions are used to interact with the server. The functions are used to get the best", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0; x < p.getRasterWidth(); x++)\n      {\n        double", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    cv.clear();\n                    cv.put(Db.Table4.ID_GROUP,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}\n```\nThe code is missing the implementation of the Dispose method in", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# MIDDLEWARE\n# List of middleware classes to use.  For an explanation of how these classes are used by Django, see:\n# https://docs.djangoproject.com/en/dev/topics/http/middleware/\nMIDDLEWARE = (\n   ", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\t// Remove the current item from the queue\n\t\t\tqueue.RemoveAt(0);\n\t\t\t// If we're building a unit, we need to refund the cost\n\t\t\tif (queue.Count > 0)\n\t\t\t\tqueue[0].Remaining", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file\" if numberOfHiddenFiles==1 else \"files", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.env.get(self.mappings[self.ext_in[0]], code)\n        self.outputs[0].write(code)\n        self.bld.install_files(self.install_path, self.outputs)\n    def __init__(self, *k, **kw):\n        self.ext_in = ['.in']\n", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n        else:\n            rospy", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent + 1 ] );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(pattern, timestampLocale));\n                break;\n            case ColumnType.LONG:\n                columnTypes.add(typeManager.nextLongAdapter());\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object[] owner, object value, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdValue(object id, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        if self.key_id_exist:\n            if self.auth_type == 'text':\n                self.password = self.password\n            else:\n                self.password = self.module.params['auth_pwd']\n            if self.auth_type == 'text':\n                self.auth_type = 'encrypt'\n            self.config_ntp_auth_keyid_by_cli", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        # Change the child, then check that the parent has been updated\n        child.display_name = 'new name'\n        child = self.store.update_item(child, self.user_id)\n        # Change the child, then check that the parent has been updated\n        self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) 0);\n        digest.update((byte) 0);\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void processingInstruction(String data) throws SAXException {\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 24)", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict['start'], dict['end'], dict['step'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['type'], dict['value'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['type'], dict['value'])\ndef mkpcre", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        /// <summary>\n        /// Resolves the type of the action parameter or return value.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(path, column, value)\n        elif event.keyval == gtk.keysyms.Return:\n            if isinstance(entry, gtk.Entry):\n                entry.handler_block(entry.editing_done_id)\n            self.set_value()\n        elif event.keyval == gtk.keysyms.KP", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            return beanProperties;\n        }\n        return null;\n    }\n    /*\n     * (non-Javadoc)\n     * @see org.springframework.core.Ordered#compareTo(int)\n     */\n    public int compareTo(int i)\n   ", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            for line in f:\n                if line.strip() == '':\n                    f.seek(0)\n                    lines = f.readlines()\n                    f.seek(0)\n                    f.writelines([line for line in lines if line.strip()])\n                    f.truncate()\n        finally:\n            f.close()\n    if module.params['state']", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventId,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventId2,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidEventId", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Override\n    public EnumSet<Permission> getPermissions() {\n        return EnumSet.of( Permission.READ, Permission.WRITE );\n    }\n    @Override\n    public EnumSet<PrincipalType> getPrincipalTypes()", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        for child in child_elements:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        Arguments:\n        element Element object.\n        \"\"\"\n        expected_tag = self", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tagname(self, node, name):\n    # This is a helper function for getElementsByTagName\n    # It returns a list of elements that match the given name\n    # and are children of the given node\n    rc = NodeList()\n    for n in node.childNodes:\n        if n.nodeType", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionLocationTypeObservationTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSectionLocation", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for (int i = 0; i < ActiveWeapons.size(); i++) {\n            Weapon weapon = ActiveWeapons.get(i);\n            if (weapon.isOffCooldown()) {\n                ActiveWeapons.remove(i);\n                break;\n            }\n        }\n        //Updates the active weapons\n        for (int i = 0", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( colorValue );\n        GameEngine.model().getGame().join( action );\n        hide();\n      }\n    } );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btnOk );\n    m_panel.add( m_btnColorPreview );\n    m_panel.add( m_companyPreview );\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"error\"])\n    if r.status == 200:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"No filename found in", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrder();\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t}\n\t}\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    for rxn in reactions:\n        with model:\n            model.objective = objective\n            model.objective.direction = direction\n            model.objective.reaction = rxn\n            model.objective.sense = \"max\" if direction == \"maximum\" else \"min\"\n            model.slim_optimize()\n            grid", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path__startswith=pootle_path,\n            store__is_locked=False,\n            store__is_deleted=False,\n            store__is_muted=False,\n            store__is_frozen=False,\n            store__is_locked_by_user=user,\n            store__", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('city', models.ForeignKey(to='events.City')),\n            ],\n        ),\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.send_packet(poxpkt, portnum)\n                else:\n                    self.logger.debug(\"Switch {} received ARP request for {}->{} but no port mapping for {}\".format(self.name, srcip, dstip, dstip))\n            elif poxpkt.payload.opcode == pktlib.arp.REPLY:\n               ", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (!m_IgnoreChanges) {\n      m_RecentItems.add(item);\n      m_RecentItems = new ArrayList<T>(new HashSet<T>(m_RecentItems));\n      m_RecentItems = new ArrayList<T>(m_RecentItems);\n      notifyRecentItemListenersOfAdd(item);\n      writeProps();\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return false;\n        }\n    }\n}\npublic class ShadowRevealingAction : Mobile.RevealingAction\n{\n    public ShadowRevealingAction(Mobile m) : base(m) { }\n    public override void OnRevealed(Mobile m)\n    {\n        m.SendLocalizedMessage(500814); //", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic BitArray FirstSet(Node p) {\n\t\tBitArray s = new BitArray(Symbol.nonterminals.Count);\n\t\twhile (p!= null) {\n\t\t\tif (p.typ == Node.any", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tBeginAsyncRead();\n\t\t\t// read the data\n\t\t\tBeginAsyncRead();\n\t\t\t// read the data\n\t\t\tBeginAsyncRead();\n\t\t\t// read the data\n\t\t\tBeginAsyncRead();\n\t\t\t// read the data\n\t\t\tBeginAsyncRead();\n\t\t\t// read the data", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(caseInsensitive, order);\n\t\t}\n\t\tprivate MskJointVoComparator(boolean caseInsensitive, SortOrder order)\n\t\t{\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tthis.direction = -1;\n\t\t\t}\n\t\t}\n\t\tpublic", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyy-MM-dd_HH-mm-ss\" );\n\t\t}\n\t\tprivate static void Send", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N1 + N2 + N3; i++)\n            {\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __getitem__(self, name):  # noqa\n    \"\"\"Get a field by name\"\"\"\n    # Add your code here\n    return self.fields.get(name)\n```\n\nThis code is a part of the CFME (CloudForms Management Engine) project, which is a web-based interface for managing cloud and virtual", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( discardWholeBuffer )\n\t\t\t// {\n\t\t\t// \t// glBufferData\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \t// glBufferSubData\n\t\t\t// }\n\t\t\t// if ( _lockedToScratch )\n\t\t\t//", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\nself.scan_nim = ConfigSelection(choices = self.scan_nim.choices)\n```\nExplanation:\nThis line of code is part of the `createConfig` method in the `Satfinder` class. It is used to create a `ConfigSelection` object for the `scan_nim` variable, which is", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (optval instanceof String) {\n                tcpAcceptFilters.add(new TcpAddress.TcpAddressMask(filterStr));\n                return;\n            }\n            else if (optval instanceof List) {\n                List<TcpAddress.TcpAddressMask> list = (List<TcpAddress.TcpAddressMask>) optval", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                for (int i = 0; i < bpc; ++i) {\n                    if (i == 0) {\n                        for (int j = 0; j < width; ++j) {\n                            curr[j] = 0;\n                        }\n                    }\n                    else {\n                        for (int j", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), 'foo.bar')\n    def test_signature(self):\n        s = lowlevel.SignalMessage('ab', 'foo.bar', 'baz')\n        self.assertEqual(s.get_signature(), 'ab')\n        self.assertEqual(s.get_signature().__class__, types.Signature)\n        self.assertEqual(s.get_signature().", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_cohomology(self, level, position, options):\n    return self.get_E_2_page().get_cohomology(self.options)[level][position]\n    def get_cohomology(self, level, position):\n        return self.get_E_2_page().get_cohomology(self.options", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\");\n        }\n        #endregion\n    }\n} \n```\nThe code is a part of the Google Protocol Buffers library for.NET. It contains a set of test cases for the Text", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Clear() );\n\t\t}\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic int size() {\n\t\treturn map.size();\n\t}\n\t@Override\n\tpublic boolean", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\n@api.constrains('attendance_state')\ndef _check_attendance_state(self):\n```\nPlease complete the code. \n```python\n    @api.constrains('attendance_state')\n    def _check_attendance_state(self):\n        for employee in self:\n            if employee.attendance_state == 'checked", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        #region PInvoke Declarations\n        private static readonly uint LVM_GETITEMCOUNT = 0x1004,\n            LVM_GETITEM = 0x1005,\n            LVM_GETITEMRECT = 0x1006,\n           ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker.make_term(self, cwd, profile, debugtab, _param1, _param2)\n```\nThe final answer is: \n```\nmaker.make_term(self, cwd, profile, debugtab, _param1, _param2)\n```", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    new CustomAttributeBuilder( fieldBuilder );\n                }\n                return t;\n            }\n            return new List<CustomAttributeBuilder>();\n        }\n        private static CustomAttributeBuilder GetCustomAttribute( ParameterInfo parameterInfo ) {\n            return new CustomAttributeBuilder(\n                parameterInfo.Type,\n                new[] {\n                    parameterInfo.Name", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsInterface {\n\t\t\tget {\n\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn attributes.GetMaskedAttributes ((uint)", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the rules and evidence in the engine. The code is written in C# and uses the System.Collections.Generic namespace for the dictionary data structures. The code is well", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._ssl = OpenSSL.SSL.Context(protocol)\n        self._ssl.set_info_callback(self._info_callback)\n        self._ssl.set_verify_callback(self._verify_callback)\n        self._ssl.set_verify(self._verify_method)\n        self._ssl.set_options(self._options)\n        self._ssl.set_cipher_list(self", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label4 = new global::Gtk.Label ();\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural:\");\n\t\t\tthis.label4.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label4);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.reorder_child(child, new_num)\n                conf.set(\"board\", new_num)\n        headbook.connect(\"page_reordered\", page_reordered, headbook)\n    \n    # The dock\n    \n    for panel in pref_sidePanels:\n        dockAlign.pack_start(docks[panel.__name__][0],", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Reload-file\": QKeySequence(Qt.CTRL + Qt.Key_F5),\n    \"Reload-project\": QKeySequence(Qt.CTRL + Qt.Key_F5),\n    \"Reload-all\": QKey", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo{\" +\n\t\t\t\t\"persistenceUnitName='\" + persistenceUnitName + '\\'' +\n\t\t\t\t\", persistenceProviderName='\" + persistenceProviderName + '\\'' +\n\t\t\t\t\", transactionType=\" + transactionType +\n\t\t\t\t\", jtaDataSource=\" + jtaDataSource +\n\t\t\t\t\", non", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IFile file = (IFile)getModel().getAdapter(IFile.class);\n    return file.isReadOnly();\n  }\n  protected void handleZoomChanged()\n  {\n    handleZoomChanged(getViewer().getZoomManager().getZoom());\n  }\n  protected void handleZoomChanged(double zoom)\n  {\n    refreshVisual", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach.Autosize = true;\n\t\t\tthis.butAttach.BtnShape = OpenDental.UI.enumType.BtnShape.Rectangle;\n\t\t\tthis.butAttach.BtnStyle = OpenDental.UI.enumType.XPStyle.Silver;\n\t\t\tthis.butAttach.Location =", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as getting the marked", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (/* test name */, hmac, data, result);\n\t\t}\n\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        case option_3:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String)java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String GetJavaHome(String javaHome)\n    {\n      if (javaHome!= null)\n        return javaHome;\n     ", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n            elif job and l == job:\n                return [comment, l]\n        return None\n    def find_env(self, name):\n        for l in self.lines:\n            if l.startswith('export'+ name):\n                return l\n        return None\n    def _update_job(self,", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\ndef _to_json_spec(cls, modifier_json, modifier):\n    modifier_json['cache_format'] = modifier.cache_format\n    modifier_json['cache_format'] = modifier.cache_format\n    modifier_json['deform_mode'] = modifier.deform_mode\n    modifier_json['deform_mode'] = modifier.de", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                // if no data for this peptide length, use a default likelihood distribution\n                double[] likelihoods = new double[peptideLengths];\n                for(int i = 0; i < peptideLengths; ++i)\n                {\n                    likelihoods[i] =", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[self.choice]\n                    print(self.grn+\"[*] Packet \"+self.choice+\" selected\"+self.blm)\n                    print(self.grn+\"[*] Packet details:\")\n                    print(self.packet.show())\n                    print(self.grn+\"[*] Press enter to continue..\"+self.blk)\n                   ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 57);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 4;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'to': 'auth.User'}),\n            'document': ('django.db", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            } else {\n                return true;\n            }\n    }\n    private void processIncludes(Schema schema) {\n        if (schema.getIncludes()!= null) {\n            processIncludes(schema.getIncludes());\n        }\n    }\n    private void processImports(Schema schema) {\n        if (schema.getImports", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.message_post(cr, uid, ids, body=_('Leave has been approved.'), context=context)\n        self.message_post(cr, uid, ids, body=_('Leave has been approved.'), context=context)\n        self.message_post(cr, uid, ids, body=_('Leave has been approved.'), context=context)\n       ", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a C# class that implements a DataGridView with some custom functionality. The class is called GridBaseWin and it is part of the Habanero framework. The class has several properties and methods that can", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line {0} - {1} - {2}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.dwLineID);\n        }\n    }\n    public enum MixerLineComponentType\n    {\n        /// <summary>\n        /// Undefined\n        /// </summary", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID_CareContext());\n\t\t}\n\t\tdomainObject.setCustomID(domainObject.getCustomID());\n\t\tdomainObject.setArrivalDateTime(domainObject.getArrivalDateTime", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            verbose=verbose)\n        if status:\n            return status\n        if android:\n            # Build the Android APK\n            with cd(path.join(self.android_support_dir(), \"apk-builder\"):\n                status = call([\"cargo\", \"build\"] +", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, n, estP, estN }, true), this.getScore(new double[] { p, n, 0, 0 }, false));\n\t\t}\n\t\t// To keep things simple, the optimistic", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                Stashed.SetStashDiffs(gitStash.Name, gitItemStatuses);\n            }\n        }\n        private void LoadStashes()\n        {\n            Stashes.SelectedItem = null;\n            Stashes.SelectedItem = _currentWorkingDirStashItem;\n            StashedSelectedIndexChanged(null, null);\n        }\n       ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=0,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope other = (AuthScope) o;\n        return this.match(other) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(\n\t\t\tString[] sn", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tSetEType((EGenericType)value);\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpublic override void CSet(", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\ndef decrypt_archive(archive_index, args):\n    #... (rest of the function remains the same)\n```\nThis is the corrected code. The function name was changed to `decrypt_archive` to match the action name in the `decrypt_subparser`. The rest of the function remains the same. \n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.cmd_str = '%s%d' % ('ACMD' if self.is_acmd else 'CMD', self.cmd_name(self.cmd))\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE'\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          limit_backward = v_2;\n          return false;\n        } // (, line 200\n        // (, line 200\n        // (, line 200\n        // (, line 200\n        // (, line 200\n        //", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null) {\n                    System.out.println(\"Unknown channel: \" + channel);\n                    return;\n                }\n                if (cd == null) {\n                    cd = new ChannelData();\n                    channelList.add(cd);\n                    channelMap.put(channel, cd);\n                    channelList.add(cd);\n                    channelTable.addRow", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result, critical\n            return None, False\n    def _get_key_usage(self):\n        # Note that the key usage is not an extension, but a flag\n        # in the certificate\n        result = []\n        for k in [\n            'key_usage',\n            'key_usage_critical',\n            '", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tfor (%sSlots::iterator i = _slots.begin(); i!= _slots.end(); ++i) {\" % typename, file=f)\nprint(\"\\t\\t\\t\\tif (i->first == i->second->signal_object()) {\" % typename, file=f)\nprint(\"\\t\\t\\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    return [Interval(X.begin, X.begin), Interval(X.begin, X.end)]\ndef get_utf16_chunk_n(Begin, End):\n    \"\"\"Returns the number of bytes required to represent the unicode value 'End' in utf16.\n       If the unicode value 'Begin' is not in the same utf16-byte", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tSemText(out sym);\n\t\t\t}\n\t\t\tExpect(27);\n\t\t\tif (t.pos > beg)\n\t\t\t sym.attrPos = new Position(beg, t.pos, col);\n\t\t}\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            edi_doc['delay'] = line.delay\n            edi_doc['product_uom'] = self.edi_m2o(cr, uid, line.product_uom, context=context)\n            edi_doc['product_uom_qty'] = line.product_uom_qty\n            edi_doc['product_uom_id'] = self", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\nPlease complete the code given", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUpTestPermissions();\n        // virtual node permissions should be the same as the virtual", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device is not None\n    def test_list_devices_empty(self, context):\n       ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\nimport HttpUtils\nfrom HttpUtils import App, buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                elif (index_elements[0] == \"Fit\"):\n                    # We have a fit.\n                    #print \"  %s\" % outlines[i]\n                    #print \"  %s\" % outlines[i+1]\n                    #print \"  %s\" % outlines[i+2]\n                    #print \" ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n        public override void GetProperties(ObjectPropertyList list)\n        {\n            base.GetProperties(list);\n            AddCraftedProperties(list);\n            AddNameProperty(list);\n            AddResourceProperty(list);\n            AddQualityProperty(list);\n            AddWeightProperty(list);\n        }\n        public override void", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181103 - Added IP address to TunerHdhr\n            // DRS 20181025 - Added model to TunerHdhr\n            TunerHd", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.PIN_OPT_OUT) {\n      jobs.put(Version.PIN_OPT_OUT, new PinOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.TRIM_BY_LENGTH) {\n      jobs.put(Version.TRIM_BY_LENGTH, new TrimByLengthMigrationJob());\n", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.error(\"RegexNER mapping file has a line with less than 2 arguments: \" + line);\n        continue;\n      }\n      String type = split[1];\n      if (!ignoreCase) {\n        for (int i = 0; i < split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for abspath in sub_path[include[0]]:\n                if os.path.exists(abspath + os.path.sep + n):\n                    return (abspath + os.path.sep + n)\n            # if not, try the path in env['TEXINPUTS']\n            for abspath in path[include[0]]:\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def Wms(**keywords):\n    \"\"\"Create a WMS Datasource.\n    >>> from mapnik import Wms\n    >>> wms = Wms('http://example.com/wms')\n    >>> lyr = Layer('WMS Layer')\n    >>> lyr.datasource = wms\n    \"\"\"\n    keywords['type", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def _set_destination(module, want, have):\n    if want.port is None:\n        want.update({'port': have.port})\n    if want.ip is None:\n        want.update({'ip': have.ip}\n    if want.port == '*':\n        want.update({'port': '*'})\n    if want.ip == '*':\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n        this._config = new ConfigLoader", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = views.delete_thread(\n                request,\n                course_id=unicode(self.course_id),\n                thread_id=\"dummy_thread_id\"\n            )\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(mock_request.called)\n        self.assertEqual(mock_request.call_args[0][0], \"delete\")\n        self.assertTrue", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsShlink(target, source, env, for_signature):\n    \"\"\"Shared library emitter for Windows.\"\"\"\n    SCons.Tool.msvc.validate_vars(env)\n    target, source = windowsShlink(target, source, env, for_signature)\n    return target, source\ndef windowsLdmod(target, source, env", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job.getJobManager().beginRule(null);\n            List resources = getSelectedResources();\n            List resourcesList = new ArrayList(resources);\n            List resourcesList2 = new ArrayList(resources);\n            IStatus result = execute(resourcesList, new ProgressMonitorWrapper(getShell(), resourcesList2));\n            if (result.isOK())", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.outputRowMeta = getInputRowMeta().clone(); // clone the row meta to avoid any changes to the original row meta\n\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new long[meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //Count\n            int count = Utility.ToInt32(snpccount);\n            //HomeRange\n            int shomerange = Utility.ToInt32(shorange);\n            //WalkingRange\n            int swalking", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            logging.info(\"Guest is resumed successfully\")\n        else:\n            raise exceptions.TestFail(\"Guest is not resumed successfully\")\n    def _session_close(self, session, cmd):\n        try:\n           ", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        final Future<Boolean> pub = service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        int received = rc.get();\n        assertThat(received, is(5));\n        service.shutdownNow();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        return;\n    }\n   ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)value;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\treturn 2 + (uint)(value & 0xFF);\n\t\t\telse if (value <= 0x1FFFFFFF)\n\t\t\t\treturn 5 + (uint)((", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(self.line[1:], self.fm.thisdir.path, self.fm.thisdir, self.fm.thisfile, self.fm.thisdir, self.fm.thistab, self.fm.thistab, self.fm.thisfile, self.fm.thisdir, self.fm.thistab, self.fm.thistab", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\t// Add code here\n\t\t}\n\t}\n}\n// The following code is used to test the Activator.CreateInstance method\n// with a COM class\n[ComVisible (true)]\npublic class COMTest : MarshalByRefObject {\n\tpublic int id", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        pl = Locale.objects.get(code='pl')\n        self._setup(pl, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(self._setup(pl, Action.ACCEPTED, None), 2)\n        self.assertEqual(self._setup(pl, Action.ACCEPTED, Action.ACCEPTED), 3", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"name\" in cmd.parameters:\n                userstate.name = cmd.parameters[\"name\"]\n            if \"session\" in cmd.parameters:\n                userstate.session = cmd.parameters[\"session\"]\n            if \"channel_id\" in cmd.parameters:\n                userstate.channel_id =", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new ChangeGroupLeaderEvent(group, player));\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        return player.getPlayerGroup2();\n    }\n    public static PlayerGroup getGroup(int team", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        if align == \"right\":\n            align = (Token.Column, \" \")\n        if align == \"left\":\n            align = (Token.Literal, \" \")\n        if align == (Token.Column, \" \"):\n            align = (Token.Literal, \" \")\n        if colsz is not None:\n            col", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _create_store_map(index, has_children, quantity, count):\n    return {\n        \"index\": index,\n        \"has_children\": has_children,\n        \"quantity\": quantity,\n        \"count\": count\n    }\ndef _setup_column(self, index, has_children):\n    column = QuantityColumn(0)\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tparent.setColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent!= null);\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override\n   ", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                    Dialog = new DialogEntry();\n                    Dialog.Symbol = ReadElement(element, \"Symbol\");\n                    Dialog.Text = ReadElement(element, \"Text\");\n                    Dialog.Sound = ReadElement(element, \"Sound\");\n                    Dialog.Frame = ReadElement(element, \"Frame\");\n                    nl", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t\tfrom.SendLocalizedMessage( 1072678 ); // You have been given the key to the realm!\n\t\t\t\t\tfrom.Send( from, m_key[i] );\n", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tif(beans[x]!= null)\n\t\t\t{\n\t\t\t\tcoll.add(beans[x].buildVo());\n\t\t\t}\n\t\t}\n\t\treturn coll;\n\t}\n}\n// EO Class Definition\n// EO ChangeOfService", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(7, new int[]{6, 18, 28, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = new byte[32];\n\t\t\tpb = kdf.ComputeHash(pb, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t\t\t// Computed using the official b2sum tool", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also checks for IManaDiscountArmor items.\n\t * @param manaToDispatch How much mana is to be sent.\n\t * @param remove If true", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nshould be replaced with the following code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Update the layer blending mode to the queue default\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\tNextFrame.Blending = BlendMode;\n\t\t\t// Add the frame to", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.}\n            */\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseSMS(Parcel p) {\n        int serial, status, status2, status3, status4;\n        int[] pdus;\n        int pdusLen;\n        int[] pdus2;\n       ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x * xPixelsPerTile - 0.5f, y * yPixelsPerTile - 0.5", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\tint testInt3 = rand.nextInt(5000);\n\t\t\tint testInt4 = rand.nextInt(5000);\n\t\t\tint testInt5 = rand.nextInt(5000);\n\t\t\tint testInt6 = rand.nextInt(5000);\n\t\t\tint testInt", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelectionStarts(int[] is)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelectionEnds(int[] is)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void set", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeUTF(\"HTTP/1.0 404 Not Found\\r\\n\");\n        }\n        else {\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static final int MAX_NAME_LENGTH = 256;\n    private static final int MAX_RMI", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n            }\n            /* Draw the fire beam */\n            pixel_x = 0;\n            pixel_y = 0;\n            /* Draw the fire beam */\n            for (i =", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position.To2D()) <= spell.Range &&\n                                    minionPrediction.CollisionObjects.Any(x => x.NetworkId == target.NetworkId))\n                                {\n                                    result.Add(minion);\n                                }\n                            }\n                            break;\n                        case CollisionableObjects.YasuoWall:\n                            if (spell.RangeCheckFrom.To2D", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.getInducedPath(x, y).size() > 0;\n    }\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n    }\n} // end of class DagToPag\n//========================PRIVATE METHODS==========================//\n    private void doFinalOrientation(Graph graph", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public virtual void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null) {\n            if (other.attachmentFile!= null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this.fileId == null) {\n            if (other.fileId!= null", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        if (mobiles[i]!= from && m_Item.GetDamage(mobiles[i]) > 0)\n                        {\n                            from.RevealingAction();\n                            from.Target = new Target(mobiles[i], TargetFlags.None);\n                            from.SendSound(0x20C);\n                            from.SendSound(0x", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool message = true, bool silent = false)\n\t\t{\n\t\t\tif (IsUser(user))\n\t\t\t{\n\t\t\t\tif (message)\n\t\t\t\t{\n\t\t\t\t\tInternalMessage(user, \"You have been kicked", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId) {\n    return mock.getAvailCompoIds(sClientSpaceId);\n  }\n  @Override\n  public String[]", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                    for (", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.channel = null", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                if z_key in z_dict.keys():\n                    z_arr[p_index, kk, :] = [float(d_value_list[1]) for d_value_list in z_dict[z_key].values()\n                    for d_value_list in z_dict[z_key].values():\n                        for d_value in d_value_list:\n                            if d", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceTwo);\n    }\n  }\n}\nPlease complete the code given above. Here is the rest of the code:\n```\n  private static final String TAG = \"IdentityUtil\";\n  private static final Log log = Log.forTag(TAG", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = \":\".join(extra_path) + \":\" + env[\"PATH\"]\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib) + \":\" + env[\"LD_LIBRARY_PATH\"]\n        if self.config[\"tools\"][\"rust-root\"]:\n            # This path is for when", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(obj[\"paths\"]):\n    for test in test_list:\n        if test[\"type\"] == test_type:\n            tests[path].add(test_cls.from_json(test))\n        else:\n            raise ManifestError\n    reftests = defaultdict(set)\n    for path, test_list in", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation(final Node node, final IFreeplaneScriptContext context) {\n        return new Binding(node, context);\n    }\n    private Binding createBindingForCompilation(final Node", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i]\n        grad_Etf = grad_Etf - grad_var*Etf\n        transformed_grad.append(grad_Etf)\n      transformed_grad = np.array(transformed_grad)\n      return transformed_grad\n  def", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(this.id.compareTo(obj) > 0)\n\t\t\treturn 1;\n\t\treturn -1;\n\t}\n\tpublic String toString()\n\t{\n\t\tif(this.isBusy)\n\t\t", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found, asList(stacks[0], stacks[1], stacks[3]));\n    }\n    @Test\n    public void shouldNotThrowAnyExceptionWhenSearchingStacks() throws Exception {\n        stackDao.searchStacks(null, null, 0, 0);\n    }\n    @Test\n   ", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParamName(\"depth\");\n        depthParameter.setParamValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParamName(\"exclusionRegexp", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t//... (rest of the method)\n\t\t}\n\t\t#endregion\n\t}\n}\n```\nThe code is a part of the Loyc project, which is a Loyc (Loyc is a.NET library for working with syntax trees, and this code is an extension of the LNode class", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                int shortenWillHit = MinionManager.GetMinions(shadow.Position).Count;\n                int param = zedMenu.GetParamSlider(\"koreanzed.lan", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.Context context = this.context;\n\t\tims.framework.form.FormInfo formInfo = this.formInfo;\n\t\tims.framework.Control control = this.getForm().getControl();\n\t\tims.framework.interfaces.IAppForm appForm = this.getAppForm();\n\t\tims.framework.Control startControlID = this.get", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\n@task\n@timed\ndef uninstall_node_packages():\n    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "            'name': \"Parent\"\n        })\n        with self.env['test_testing_utilities.parent'].Form(r) as f:\n            with f.subs.edit(index=0) as s:\n                with self.assertRaises(AssertionError):\n                    s.name = \"Parent\"\n    def test_m2o_default(self):\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, 2)\n    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, changedItems, startingIndex, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            writer.close();\n            streamWriter.close();\n            testDocument = parser.parse(writer);\n            objectToXMLDocumentTest(testDocument);\n    }\n    public void testXMLToObject() throws Exception {\n        Object objectToWrite = get", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  width: {0}\", ide.width);\nConsole.WriteLine (\"  height: {0}\", ide.height);\nConsole.WriteLine (\"  colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  bytesInRes: {0}\", ide.bytesInRes);\nConsole.WriteLine (\"  imageOffset: {0}\",", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                l.successors = l.successors;\n            }\n            if ((status & VISITED) == 0) {\n                l.status |= VISITED;\n            }\n            if (l.successors!= null) {\n                Label first = l.successors;\n                Label last = first;\n                while (last.successors!=", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(ptr_of_this", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition.add(\"Inside\");\n\t\t\tcomboLabelPosition.add(\"Outside\");\n\t\t\tcomboLabelPosition.select(0);\n\t\t}\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\n\t\t@Override\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the first image value\n        self._getFirstValue( driver, \"Image\")\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\" )\n        # Find the first image value\n        self._getFirstValue( driver, \"Image\" )\n        #", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._parse_kexgss_gex(self, ptype, m)  # noqa\n        self.transport._parse_kexgss_gex(self, ptype, m)\n        self.transport._parse_kexgss_gex(self, ptype, m)\n        self.transport._parse_k", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(overallNodeName);\n            populateNode(databaseNode, connectionData, populateStateMap, databaseFeatureClassList);\n            treeModel.reload(databaseNode);\n        }\n    }\n    /**\n     * Populate node.\n     *\n     * @param node the node\n     *", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            self.pool = self.env['hr.payslip']\n            self.employee_id = self.employee_id\n            self.localdict = self.localdict\n            self.dict = self.dict\n            self.localdict['categories'] = self.env['hr.contract.category']\n            self.localdict['rules'] = self.env['hr", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin/mmax), np.log(mmax/mmin), mspace)\n        #marr = np.exp(lnmarr).astype(np.float64)\n        #marr = m", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        return getMinimumSize();\n    }\n    @Override\n    public Dimension getMaximumSize() {\n        return getMinimumSize", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='right_triangle',phi=np.pi/2,dr=[0,0,0]):\n        #flag 'right_triangle' means the p2 is the third point of the right triangle\n        #flag'regular_triangle' means", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsLoaded)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowHideWindow(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window == null)\n\t\t\t\treturn;\n\t\t\tShowOrHide(window);\n\t\t}\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n            params[0]['bins'].append(params[0]['low'] + i * step)\n            params[0]['low'] = params[0]['low'] + step\n            params[0]['high'] = params[0]['low'] + step\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getEnd());\n        }\n    }\n    private Query findQuery(String queryId) {\n        synchronized (queries) {\n            for (Query query : queries) {\n                if (query.queryId.equals(queryId)) {\n                    return query;\n                }\n            }\n            return null;\n        }\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im1.convert(\"L\", rgb2I)\n            h1 = im1L.histogram()\n        elif channel == \"R\":\n            im1L = im1.convert(\"L\", rgb2r)\n            h1 = im1L.histogram()\n        elif channel == \"G\":\n            im", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[] aid) {\n\t\tapp.setProperty(SPEC.PROP.APPLICATION_ID, aid);\n\t}\n\tprotected void", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Block of type %u\" % self[\"block_type\"].value\n    def createPath(self):\n        return self[\"block_type\"].value\n    def createPath(self):\n        return self._name\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is a property change event that is fired when the connection state\n\t * changes. This is the only property that is ever fired.\n\t */\n\t@Override\n\tpublic String getPropertyChangeName() {\n\t\treturn \"connected\";\n\t}\n\t/**\n\t", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, a in self.apps:\n            if path.startswith(p):\n                return a(environ, start_response)\n        return [b'404 Not Found']\n    def __init__(self, apps):\n        \"\"\"Initialize PathInfoDispatcher instance.\n        Args:\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, sys.argv[ 2 ] )\n\t\tmodel.score()\n\t\tprint \"Model score = %s\" % model.score()\n\telif len( sys.argv ) == 5 :\n\t\tdata =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n```\nThe final answer is: \n\n```csharp\npublic static void CheckResult(ref EnhanceResult res, int chance)\n{\n    if", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Check for duplicate values\n            if entry_value in entries:\n                self.msg.error(\n                    \"Duplicate value '%s' found in <%s>\" % (entry_value, enumeratedValue.tagName),\n                    self.src_ref\n                )\n            # Add to the list\n            entries[entry_value] = {\n                \"", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (alModules!= null)\n            {\n                for (int i = 0; i < alModules.Count;", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int i = 0; i < this.trianglesUsed[textureHash]; i++)\n                {\n                    if(i == 0)\n                    {\n                        this.vertex_t1.clear();\n                        this.matrixStack.mat.apply(this.vertex_t1,\n                                                 this.vertexArray[textureHash][0]);\n                        this.matrixStack", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    response['Access-Control-Expose-Headers'] = exposedHeaders + ',' + header\n    return response\ndef expose_header(header, response):\n    \"\"\"\n    Add a header name to Access-Control-Expose-Headers to allow client code to access that header's value\n    \"\"\"\n    exposedHeaders = response.get('Access-Control-", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                        break;\n                }\n            }\n            return oldDrivers;\n        }\n\t}\n}\n} \n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if radius is not None and resolution is not None:  # Changed from elif to if\n        # Function 2-A\n        new_shape = (area_extent[0] + area_extent[1], area_extent[0] + area_extent[1])\n        area_extent = _validate_area_extent(area_extent", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n    partyMember = self.getRandomPartyMemberState(player, STARTED)\n    if not partyMember: return\n    st = partyMember.getQuestState(qn)\n    if st:\n        if st.get(\"playing\") == \"1\":\n            st", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)seconds1.GetValueOrDefault() / 100);\n\t\t\t\t\tdouble? seconds2 = this.Seconds;\n\t\t\t\t\tint num3 = (int)Math.Floor(((double)seconds2.GetValueOrDefault() - (double)num2", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            _vertexDataStride = 0;\n            _vertexDataSize = 0;\n            _vertexDataSize = 0;\n            _vertexDataStride", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tif(beans.get(x) instanceof ims.oncology.configuration.vo.TumourGroupListVo)\n\t\t\t{\n\t\t\t\tcoll.add((ims.clinicaladmin.vo.TumourGroupListVo)beans.get(x));\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tdouble cx = lines[selected].getCenterX();\n\t\t\t\tdouble cy = lines[selected].getCenterY();\n\t\t\t\tdouble left = lines[selected].x;\n\t\t\t\tdouble right = lines[selected].x+lines[selected].width;\n\t\t\t\tdouble top = lines[selected].y;\n\t\t\t\tdouble bottom = lines[selected].y+lines", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.setLayoutAnimation(controller);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Category = cmbPPartnerInterestInterestCategory.GetSelectedString();\n            ARow.Interest = cmbPPartner", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tchar[] structure = protein.getStructure();\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tscoresSol[i] = this.addWindowToDatabase(pssm, i, structure);\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset.\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
