{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer pl = p.Players[j];\n\t\t\t\t\tif ( pl!= null )\n\t\t\t\t\t{\n\t\t\t\t\t\tpl.CloseGump( types, defs );\n\t\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v, key=e_key, **data)\n\t\t\tZ_.add_edge(e_v, e_v", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the file for reading\n        a = Sndfile(ofilename, 'r')\n        # Open the file for writing\n        b = Sndfile('tmp.wav', 'w')\n        # Write some data\n        b.write_frames(a.read_frames(1024))\n        # Seek to the beginning", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "def displays_upload_subtitles(self):\n    return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    # Add the following methods to the class\n    def displays_upload_subtitles(self):\n        return self.is_element_visible(self._UPLOAD_SUBTITLES)\n    def displays_upload_subtitles_button(self):\n        return", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyle olStyle = (OLStyle) value;\n\t\t\t\t\twriter.addAttribute(\"ol:default\", olStyle.getDefault());\n\t\t\t\t\twriter.addAttribute(\"ol:default\", olStyle.getDefault());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic void unmarshal(Object value, UnmarshallingContext context) {\n\t\t\t\treturn null;\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "def get_categories_list(self, dbname):    \n    dbconn = sqlite3.connect(str(dbname))\n    dbconn = sqlite3.cursor()\n    dbconn.execute(\"select category from questions\")\n    ret = []\n    for row in dbconn.fetchall():\n        ret.append(row[0])\n    return ret\ndef get_categories", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                case 3:\n                    SR_Rune rune = RuneAcc.RunebookAt(0);\n                    if (rune!= null)\n                    {\n                        RuneAcc.AddRunebook(rune);\n                        RuneAcc.RemoveRune(rune);\n                        RuneAcc.Save();\n                        mob.CloseGump(typeof(SR_Gump", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(\"  \" + cert.getSubjectDN());\n                s.println();\n            }\n            s.println();\n            s.print(\"  \");\n            for (byte[] cert : encodedChain) {\n                s.print(\"Certificate length = \" + cert.length + \", \");\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "            sp = new JESpace(name, path);\n            spaceRegistrar.put(name, sp);\n        }\n        return sp;\n    }\n    public static void registerSpace (String name, Space space) {\n        spaceRegistrar.put(name, space);\n    }\n    public static void unregisterSpace (String name) {\n        space", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t\tRedButton btnInfo = new RedButton(Messages.get(Alchemize.class, \"info\") {\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected void onClick() {\n\t\t\t\t\t\thide();\n\t\t\t\t\t\towner.showInfo(item);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tbtn", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "        response = self.server.dispatcher.dispatch(request, environ['PATH_INFO'])\n        self.send_response(200)\n        self.send_header('Content-type', 'text/xml')\n        self.end_headers()\n        self.wfile.write(response)\n        return\n    def do_GET(self):\n        return self.do_get(self.path)\n    def", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "def __lock_status(self, status_id):\n    self.base.lock_status(self.account_id, status_id)\n    self.statuses = self.base.get_statuses(self.account_id, self.id_, self.last_id)\n    self.statuses = self.base.get_statuses(self.account_id, self.id_, self.last_id)\n    self.status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "            return self.get_process_data(UploadFile, {\n                \"login\": login.decode('UTF-8'),\n                \"password\": password.decode('UTF-8'),\n                \"params\": byte_to_unicode_dict(params),\n                \"session\": byte_to_unicode_dict(session)\n            })\n        except Exception as e:\n            result =", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tIPermission c = a.Union (b);\n\t\t\tAssert.IsTrue (c is ZoneIdentityPermission);\n\t\t\tAssert.IsTrue (c is SecurityPermission);\n\t\t}\n\t}\n} // class ZoneIdentityPermissionTest\n} // namespace MonoTests.System.Security.Permissions\n// Copyright (c) 2004 Nov", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "def _get_composite_trust_manager(ca_certs, ca_certs_trust_manager, ca_certs_trust_manager2):\n    trust_managers = [ca_certs_trust_manager, ca_certs_trust_manager2]\n    return CompositeX509TrustManager(trust_managers)\ndef _get_com", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "        request.setAttribute(\"domain\", domain);\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n        request.setAttribute(\"domainAdmin\", domainInfo.getAdmin());\n        request.setAttribute(\"domainAdmin\", domainInfo.getAdmin());\n        request.setAttribute(\"domainAdmin\", domainInfo.get", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "            self.__tmp_dir, 'datastream')\n        self.__datastream_fd = os.open(\n            self.__datastream_address, os.O_RDWR | os.O_CREAT | os.O_EXCL)\n        self.__data_pump_task = self.__event_loop.create_task(self.__data_pump_main())\n    async def", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tstring [] myStringFull = store.GetValue(iter, 1).ToString().Split(new char[] {' '});\n\t\t\t\t\tstring jumpIDString = store.GetValue(iter, 0).ToString();\n\t\t\t\t\tstring jumpIDString2 = store.GetValue(iter, 1).ToString();\n\t\t\t\t\tstring jump", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            MessageResources resources = getMessageResources(request);\n            String msg = args[i].getBundle();\n            if", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(String string, ConfigurationSection conf)\n\t\t\t{\n\t\t\t\treturn new TimedData();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t\t\t\"Show mini mode dialog\", getFieldEditorParent()));\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "            }\n        }\n        private class InternalTarget : Target\n        {\n            public InternalTarget(Spell spell) : base(spell)\n            {\n            }\n            protected override void OnTarget(Mobile from, object o)\n            {\n                if (o is IPoint3D)\n                {\n                    m_Owner.SpellTarget", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "        self._flushing = True\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n        self._flushing = False\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor (final Map.Entry<String, List<InstanceKey>> entry : nameToKey.entrySet()) { \n\t\t\tfinal List<InstanceKey> named = entry.getValue();\n\t\t\tfinal String name = entry.getKey();\n\t\t\tfinal int size = named.size();\n\t\t\tif (size == 1) { \n\t\t\t\tfield2Name", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "class StaticFileHandler(object):... \nclass StaticFileHandler(object):\n    \"\"\"A request handler for serving static files.\n    This class is used by the `make_static_url` method of the\n    `Application` class.  It is not intended to be used directly.\n    \"\"\"\n    def __init__(self", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n// End of file\n```\nThe code is already complete. It's a C# class that represents a MultiView control in ASP.NET. The code is well-structured and follows the standard ASP.NET naming conventions. The class has several properties and methods that", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "print >> sys.stdout, 'Downloading {0} intervals'.format(len(self.INTERVALS))\n\n# This is the end of the code. Please complete the code given above. \n# The code is a Wigle Downloader written in Python. \n# The code is designed to download AP data from Wigle.net using", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "                }\n                // = SkillGroup3 replace SkillGroup3\n                if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.PossibleSkills)\n                        {\n                           ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "        for platform, platform_info in platforms.items():\n            builds.append({\n                'locale': locale,\n                'locale_pretty': locale,\n                'locale_pretty': locale,\n                'build': build,\n                'build_pretty': build,\n                'platform': platform,\n                'platform_pretty': platform_info", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tTProjectBean projectBean = LookupContainer.getProjectBean(projectID);\n\t\t\tif (projectBean!=null) {\n\t\t\t\tInteger projectTypeID = projectBean.getProjectType();\n\t\t\t\tif (projectTypeID!=null) {\n\t\t\t\t\tstateBeansList = StatusBL.load", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "            foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax invocation && invocation.Expression is IdentifierNameSyntax identifier && memberList.Any( m => m.Identifier.Text == identifier.Identifier.Text )) {\n                    toReplace.Add(argument, SyntaxFactory.Argument(SyntaxFactory.IdentifierName(identifier.Identifier.Text)));\n               ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        self._assert_split_test_instance(self._create_vertical(self.split_test_update_url))\n        # Set to second group configuration.\n        self._update_partition_id(1)\n        self._assert_split_test_instance(self._create_vertical(self.split_test_update_url))\n    def _assert_split_test_instance(self, usage_key):\n       ", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "            PdfIndirectReference cidref = null;\n            PdfIndirectReference toUni = null;\n            PdfIndirectReference fontRef = null;\n            PdfIndirectReference fontRef2 = null;\n            PdfIndirectReference fontRef3 = null;\n            PdfIndirectReference fontRef4 = null;\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn == null) continue;\n\t\t\t\t\t\tif (cgn.depth == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// place at top\n\t\t\t\t\t\t\tcgn.x = 0;\n\t\t\t\t\t\t\tcgn.y = 0;\n\t\t\t\t\t\t\tcgn.yoff =", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        task = new ListenableFutureTask<>(callable);\n        bitmapReference = new SoftReference<>(null);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      try (InputStream is = context.getAssets().open(model.getSprite())) {\n        return BitmapUtil.decodeStream(is, EMO", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Not implemented.\n     *\n     * {@inheritDoc", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "The following code is for the 'Details' view of a Node object. It should be a class that inherits from NodeDetailsView and has a property that returns a boolean indicating whether the view is displayed. The property should check if the current page is the 'Details' page for the given Node object. \n\n```python", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t}\n\t\tfor (IJSequenceListener listener : sequenceListeners) {\n\t\t\tlistener.onSequence(timestamp, getCurrentSequence());\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.onPose(timestamp, skeleton", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "                base.Render(writer);\n            }\n            else\n            {\n                writer.Write(\"<div style='display:none;'>\");\n                base.Render(writer);\n                writer.Write(\"</div>\");\n            }\n        }\n    }\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.saveAllItems(compound, inventory);\n\t\t\n\t\tNBTTagCompound ench = new NBTTagCompound();\n\t\tcompound.setTag(\"", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "        return \"Effect{\" + \"probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    // End of serialization\n    // End of class\n}\n```\nThe final answer is: \n```java\n/**\n *  Copyright (C) 2002-2015   The FreeCol Team\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "    i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i) == 1\n    assert i[0]['indicator", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "        self.assertEqual(doc._delta(), ({'owner': person}, {}))\n        self.assertEqual(doc._delta(), ({'owner': person}, {}))\n    def test_delta_2(self):\n        class Person(Document):\n            name = StringField()\n            friends = ListField(ReferenceField('Person'))\n        Person.drop_collection()\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "```python\ndef _plot_waveform_line(self, x, y, ref_ind=None):\n    \"\"\"\n    Plot a waveform at a given time index.\n    :param x: Name of a 1D-variable\n    :param y: Name of a 1D-variable\n    :param ref_ind: Reference", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "                if (ignored.Contains(path))\n                {\n                    _tempIgnoredPaths.AddOrUpdate(path, 1, (key, value) => value + 1);\n                    continue;\n                }\n                if (path.IsNullOrEmpty())\n                {\n                    continue;\n                }\n                if (path.StartsWith(rootFolder.Path, StringComparison.OrdinalIgnoreCase))\n               ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t@Override\n\tpublic E compute(K key, BiFunction<? super K,? super E,? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, transform(remappingFunction)));\n\t}\n\t@Override\n\tpublic E merge(K key, E value, BiFunction<? super E,", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "        cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.isDiscussable() and canreply(contobj):\n                if viewtype.lower() ==", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t}\n\tpublic class TileList : List<Tile>\n\t{\n\t\tpublic TileList()\n\t\t\t:", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                    // get the channel URI\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri: {1}\", scene.RegionInfo.RegionName, channelUri);\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": channel_uri", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.Text;\n\t\t\t\tDialogResult=DialogResult.OK;\n\t\t\t}\n\t\t}\n\t\tprivate", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        # Read the lines of data.\n    def read_header(file_handle):\n        # Read the header lines.\n        header = {}\n        for line in file_handle:\n            if line.startswith('NAME'):\n                header['NAME'] = line.strip()\n            elif line.startswith('NAME'):\n                header['NAME'] = line.strip", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "def group_member_create(context, data_dict):\n    model = context['model']\n    user = context['user']\n    group_id = data_dict['group_id']\n    group = model.Group.get(group_id)\n    if group is None:\n        return {'success': False,'msg': _('Group not found')}\n   ", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble conf = confidences[resultIndex];\n\t\t\t\tdouble confidence = conf;\n\t\t\t\t// recursively applying the model\n\t\t\t\tperformPredictionRecursivly(node.getChild(example.getAttributes().getLabel()), confidences, outcomes, confidences, depths, depth + 1, node.getPartitionId() + 1);\n", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            return new SearchResults[segments.Length];\n        }\n        #endregion\n        #region Properties\n        /// <summary>\n        /// Gets a value indicating whether the provider supports the <see cref=\"P:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationProviderLanguageDirection.CanReverseLanguageDirection\"/> property.\n        ///", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "            ch = string.charAt(offset++);\n            codePoint = (ch << 10) + ch;\n         }\n         if (_range.contains(codePoint)) {\n            return offset;\n         }\n         return -1;\n      }\n      @Override\n      int match(StringValue string, int strlen, int offset, RegexpState", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "        if (studyFormName == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (accessionNumber == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.getSampleByAccession", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (Settings.Map!= handshake.Map)\n\t\t\t\t{\n\t\t\t\t\tvar message = string.Format(\"Map mismatch: expected {0}, got {1}\", Settings.Map, handshake.Map);\n\t\t\t\t\tSendOrder", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tif(beans[x]!= null)\n\t\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n//#############################################################################\n//EOH\n//EOH\n//EOH\n//", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelif prnum == '': \n    dialog = xbmcgui.Dialog()\n    dialog.ok('Error', 'No parameter given')\nelse:\n    dialog = xbmcgui.Dialog", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary>\n        /// <param name=\"A\">input array</", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```python\ndef getPlotData( self ):\n  try:\n    params = self.__parseFormParams()\n    if not params[ 'OK' ]:\n      return params\n    pD = params[ 'Value' ]\n    repClient = ReportsClient( rpcClient = getRPCClient( \"Accounting/", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPointsForNewProductionBuildings(bot);\n\t\t}\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class BaseBuilderQueueManager\n\t{\n\t\t// Add code here\n\t}\n\tpublic class", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "        catalog.getClusters().get(\"cluster\").getDatabase().getProcedures().get(\"basename\").getStatements().get(\"stmt-0\").getPlan();\n        return plan;\n    }\n    public CompiledPlan getCompiledPlan() {\n        return m_currentPlan;\n    }\n    public void setCompiledPlan(CompiledPlan", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n\t\t\tthis.textBox2.Location = new System.Drawing.Point(59, 144);\n\t\t\tthis.textBox2.Name = \"textBox2\";\n\t\t\tthis.textBox2.Size = new System.Drawing.Size(224, 20);\n\t\t\tthis.textBox2.TabIndex = 2", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (uint)parity;\n\t\t\tdcb.ByteSize = data_bits;\n\t\t\tdcb.StopBits = (uint)bits;\n\t\t\tdcb.Handshake = (uint)hs;\n\t\t\tdcb.ReadTotalTimeoutMultiplier = 0;\n\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "def test_cobranding(self):\n    \"\"\"\n    Test that the user's cobrand is displayed on their profile page.\n    \"\"\"\n    self.user.get_profile().cobrand = Cobranding.objects.create(user=self.user)\n    self.user.save()\n    url = self.user.get_profile().get_url()\n    page =", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "    parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS)\n    args = parser.parse_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"keep_tempdir is\", _keep_tempdir\n    unittest.main(module='tests.functional_tests.test_methods", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tnewList = newList\n\t\t\tnewListIndex = None\n\t\t\tfor i in range(len(newList)):\n\t\t\t\tif newList[i][0] == self.essid:\n\t\t\t\t\tnewListIndex = i\n\t\t\t\t\tbreak\n\t\t\tif newListIndex is not None:\n\t\t\t\tnewList = newList[newListIndex:newListIndex", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "                if (generateChecksum)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                    fCode = \"*\" + fCode + \"*\";\n                if (textAlignment == Element.ALIGN_CENTER)\n                    fontX = fontX / 2;\n                return new Rectangle(fontX, fontY + size", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    return results;\n  }\n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted.\n   */\n  public static String[] getStringArray(Properties props, String key, String defaultValue) {\n    String[] results = MetaClass.cast(props.getProperty(key), String [].class);\n    if", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "```python\n# Define the test class\nclass TestTrajectory(tests.IrisTest):\n    def setUp(self):\n        # Load the cube\n        self.cube = iris.load_cube(tests.get_data_path([\"PP\", \"COLPEX\", \"theta_and_orog_subset.pp\"]))\n        # Define the sample", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "            if (currPacket!= null)\n            {\n                Clipboard.SetDataObject(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (IsFrameModified())\n            {\n                _packets[_index] = _packets[_index].ClonePacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\nNext line of code:\nprint '\\033[0m'\n    else:\n        print '\\033[0m'\n    return 0\ndef get_mfcc_diy(wav_dir):\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "        }\n    }\n} /// <summary> reference-counting set based on a HashMap implementation that stores keys and a reference count for each unique key.\n    /// </summary>\n    public class RefCountedSet<TK, TV> : RefCountedSet<TK>\n    {\n        private readonly IDictionary<TK,", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "            // \n            // treeView1\n            // \n            this.treeView1.Location = new System.Drawing.Point(0, 0);\n            this.treeView1.Name = \"treeView1\";\n            this.treeView1.Size = new System.Drawing.Size(245, 300);\n            this.treeView1.TabIndex", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "```python\ndef copyBaseFunction( self, functionName, dll, resultType, argTypes, extension = None ):\n```\n```python\n    def copyBaseFunction( self, functionName, dll, resultType, argTypes, extension = None ):\n        \"\"\"Create a new base function based on an existing one\n        \n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n            writeUint64(header, 0);\n           ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                    if (System.currentTimeMillis() - start > rampDelay)\n                    {\n                        inRamp = true;\n                        alphaLevel = rampUp? 255 : 0;\n                        start = System.currentTimeMillis();\n                    }\n                }\n                if (rampUp)\n                {\n                    alphaLevel = (int) (shield * ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_idletime_not_configured()\n        {\n            GivenGlobalSeedLimits();\n            PrepareClient", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPineappleBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                }\n           ", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "                     '(1 = no oversampling)\\n']\n        f.writelines(['  F) 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                    i += ((b & 0x08) << 1);\n                    i += ((b & 0x04) << 5);\n                    i += ((b & 0x01) << 2);\n                    i += ((b & 0x02) << 5);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "        return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _configure_course(self):\n        \"\"\"\n        Configure the course with the course details\n        \"\"\"\n        self._configure_course(self._course_dict, self._course_details)\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif ( splitNumber.length == 2 ) {\n\t\t\tchance = Integer.parseInt(splitNumber[1]);\n\t\t}\n\t\treturn (int) (chance/100*Integer.parseInt(splitNumber[0]));\n\t}\n}\npackage de.tink.minecraft.plugin.safari;\nimport org.bukkit.Bukkit;\nimport org.bukkit", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "def download_request(module, name, apiid, apikey, cert_type):\n    # This function is used to download the certificate files from the api host\n    # It is used in the create_meter function\n    # The cert_type is either 'key' or 'cert'\n    # The function returns a boolean", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "            this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(48, 13);\n            this.lblPrivacy.TabIndex = 1;\n            this.lblPrivacy.Text = \"Privacy\";\n            this.lblPrivacy", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "        for (plug, plugname, optname, optparms in self.all_options:\n            plug.set_option(optname, optparms)\n        self.policy.pre_work()\n        self.policy.pre_work()\n        self.policy.pre_work()\n        self.policy.pre_work()\n        self.policy.pre_work()\n        self.policy.pre_work()\n", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "def getSpeakerList(self):\n    \"\"\" Session Speaker List \"\"\"\n    def getSpeakerList(self):\n        \"\"\" Session Speaker List \"\"\"\n    getSpeakerList.result = IConferenceParticipationFossil\n    getSpeakerList.name = \"speakers\"\n    def getSpeakerList(self):\n        \"\"\" Session Speaker List \"\"\"\n    getSpeaker", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                            throw new MessageWriterException(e);\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = MessageImporter.importMessages(fileTextField.getText());\n            }\n            if (result!= null) {\n                messageBrowser.update(result);\n               ", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\tif (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t} else if (value instanceof String) {\n\t\t       \t\t\tlayer = Integer.parseInt((String) value);\n\t\t       \t\t}\n\t\t    \t}\n\t    \t}\n\t    \treturn layer;\n    \t} catch (Exception e", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "        if (currentSession!= null && currentSession.getState() == Session.State.OPENED || currentSession.getState() == Session.State.OPENED_TOKEN_LOADED) {\n            Session.StatusCallback callback = new Session.StatusCallback() {\n                @Override\n                public void call(Session session, SessionState state, Exception exception) {\n                    if", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n\tpublic void setChance(String emotionName, float chance) {\n\t\tfor (Emotion emotion : emotions)\n\t\t\tif (emotion.name.equals(emotion", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                'property1': 2, 'property2': 3},\n               'stages': [\n                    {\n                        'duration': 2,\n                        'finished_at': constants.SPLIT_TIMESTAMP2,\n                        'name':'stage1',\n                       'stages': [\n                            {\n                                'duration': 5,\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "================================================================================================\n#    print \"Lat: \", phi1\n#    print \"Long: \", (LongOrigin + x*k0*(1-(1-eccSquared)*sin(2*mu)/2)\n#    print \"Zone: \", ZoneLetter\n    LongOrigin = (LongOrigin + x*k0", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "```\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:\n        form = ReportUserForm()\n    return render_to_response('accounts/reportuser.html',", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(ReturnToReferrerMixin, ProductConfigureBase):\n    \"\"\"A view to add a project to a product set.\"\"\"\n    label = \"Add a project to a product set\"\n    implements(IProductSet)\n    def __init__(self, context, request):\n        super(ProductAddStepOne,", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n\t}\n#endif\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "                temp >>= 8;\n            }\n        }\n        return arr;\n    }\n} \n```\nPlease complete the code given above. The code is incomplete and has some errors. The code is written in Java and is part of the MusicTag library. The code is for a NumberVariableLength class which is used to", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "            new_positional_tags = []\n            for flag, regex in flag_regex:\n                if flag == constants.isa_tag_type:\n                    if regex not in constants.supported_isa:\n                        raise ValueError('Invalid ISA: %s' % regex)\n                elif flag == constants.variant_tag_type:\n                    if regex not in", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            }\n        }\n    }\n}\n    public class Type\n    {\n        public Type (Type type)\n        {\n        }\n        public Type (string name)\n        {\n        }\n        public Type (string name, Type type)\n        {\n        }\n        public Type (string name, Type type, Type[] genericType", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "class OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_OxygenSensor1\"\n    fields_desc = [\n        ScalingField('data', 0, scaling=1 / 128., unit=\"%\", offset=-100.0)\n    ]\n    #... (rest of the code", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_name.get_object(self.path, 'org.freedesktop.Secret.Service.ListSessions')\n\t\tself.sessions = self.collections = self.prompts = self.collections = self.collections = self.collections\n\t\tself.remove_collection(self, self.path)\n\t\tself.remove_from_connection(self, self.path)\n\t\tself", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "                this.AddSpell(typeof(EnchantedPrism), Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.SulfurousAsh, Reg.Sulfurous", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "        self._after_this_request()\n        self._implicit_app_ctx_stack = None\n        self._implicit_app_ctx_stack = None\n        self._after_request_functions = None\n        self._after_this_request_functions = None\n        self._after_this_request_functions = None\n        self._after_request_functions = None", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "@query_wrapper\ndef pubsub_producer_list(session, cluster_id, topic_name, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs_columns, needs", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "            if (resourceEntityForRelease!= null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public ResourceEntity getResourceEntityForRelease(@NotNull ResourceGroupEntity resourceGroup, @NotNull ReleaseEntity release) {\n        return getResourceEntityForRelease(resourceGroup.getResources(), release);\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "        # Compute the distance from the rotation axis to each pixel\n        det_init = ray_trafo.geometry.det_init\n        det_final = ray_trafo.geometry.det_final\n        # Compute the distance from the rotation axis to each pixel\n        det_init = ray_trafo.geometry.det_init\n        det_final = ray", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "def _get_search_string(self, search_string, search_mode='eponly', epcount=0, season=None, episode=None, season_count=None, episode_count=None, show=None, show_name=None, show_id=None, show_type=None, show_air_by_date=None, show_air_by_date=None, show", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn unit.ToString (fmt);\n\t\t}\n\t\tpublic string ToString (string format)\n\t\t{\n\t\t\treturn unit.ToString (format);\n\t\t}\n\t\tpublic string ToString (string format, IFormatProvider provider)\n\t\t{\n\t\t\treturn unit.ToString (format, provider);\n\t\t}\n\t\tpublic string ToString (", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add the two blocks\n\t\t\tBigInteger crypted = new BigInteger(block1);\n\t\t\tBigInteger", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "Assert.That(((JObject)obj.Properties[0].Value).Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(((JObject)obj.Properties[0].Value).Properties[0].Value.Type, Is.EqualTo(TokenType.String));\n\t\t\tAssert.That(((JObject)obj.Properties[0].Value).", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "                for (int w = 0; w < size; w++) {\n                    edges.add(T2.create(w, h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Collection<T2> getEdges() {\n            return getEdges();\n        }\n        @Override\n        public Collection", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    data = i1.get(col1=\"area_um\",\n                  col2=\"deform\",\n                  channel_width=30,\n                  lut_identifier=\"test-LE-2D-FEM-19\",\n                  add_px_err=False,\n                  px_um=None,\n                  flow_rate=None,\n                  viscosity=None,\n                  channel_width_out", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "        if (args.length!= 2) {\n            System.err.println(\"Usage: java TripleStoreUtility <filename> <filename>\");\n            System.exit(1);\n        }\n        final String filename1 = args[0];\n        final String filename2 = args[1];\n        final File file1 = new File(filename", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "def lowest_spotprice(history, subscription):\n    \"\"\"Return the lowest spot price for a given zone.\"\"\"\n    zone = subscription['zone']\n    region = subscription['region']\n    instance_type = subscription['instance_type']\n    zone_history = [h for h in history if h['AvailabilityZone'] == zone]\n    if", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownloadAndInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Installs the application.\n\t * \n\t * @return\n\t */\n\tpublic boolean uninstall() {\n\t\tboolean hasUI = true;\n\t\ttry {\n\t\t\tint selection = JOptionPane.showConfirmDialog(null,\n\t\t\t\t\tStrings.Inst", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.VertexArrayID);\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._data_container.x_cov_mat_inv\n    @property\n    def x_model(self):\n        \"\"\"1D array containing the model *x* values.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._param_model.x\n    @", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n           ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                  no\n  }\n  private static Function<ObjectInfo, ObjectEntity> objectTransformation() {\n    return new Function<ObjectInfo, ObjectEntity>() {\n      @Override\n      @Nullable\n      public ObjectEntity apply(@Nonnull ObjectInfo walrusObject) {\n        ObjectEntity osgObject = null;\n        try {\n         ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "            add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _intialized += value; }\n            remove { _intialized -= value; }\n        }\n        #endregion\n        #region Folder Explorer Component", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "        final ImportVmTemplateParameters parameters = createParameters();\n        parameters.setVmName(name);\n        parameters.setImportAsCloned(isImportAsNewEntity);\n        final ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        final String expectedMessage = isImportAsNewEntity? EngineMessage.VM_NAME_SIZE", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\t//... (rest of the code)\n\t\t\t// Container child table1.Gtk.Table.TableChild\n\t\t\tthis.labelPercent = new global::Gtk.Label ();\n\t\t\tthis.labelPercent.Name = \"labelPercent\";\n\t\t\tthis.labelPercent.Xalign = 0F;\n\t\t\tthis.labelPercent.LabelProp = global::", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['TOTALSTATUS'] = self.totalstatus\n        self.system['TOTALSTATUS'] = self.total", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[] returnTypes, Type[] typeConstraints, Type[] interfaceConstraints, Type[] genericParameterAttributes)\n\t\t{\n\t\t\treturn DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "      return (Builder) new Builder().MergeFrom(prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"ProtoGen\", \"2.3.0.277\")]\n    public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                    vertices[x] = new Vector3f();\n                int index = getVertIndex(i, x);\n                vertices[x].set(getVertex(index));\n            }\n        }\n    }\n    public void write(JmeExporter e) throws IOException {\n        super.write(e);\n        OutputCapsule capsule = e.getCapsule(this", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "        if (!showDateData.equals(\"true\")) {\n            result.add(COLUMN_NAME_DATECREATED);\n            result.add(COLUMN_NAME_DATEMODIFIED);\n        }\n        return result;\n    }\n    /**\n     * Returns the list of columns that are hidden in the document list.<p>\n     * \n     * Used", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds(0.1f);\n\t\t\tif (selected)\n\t\t\t{\n\t\t\t\tif (inputField.lineType == InputField.LineType.MultiLineNewline)\n\t\t\t\t{\n\t\t\t\t\tinputField.text = \"\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tinputField.text = \"\";\n\t\t\t\t}\n\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    private int GetBestHeight()\n    {\n      SizeF sz = GetLargeTextSizeF();\n      SizeF szS = GetSmallTextSizeF();\n      int h = (int)", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            if (Users.Count > 0)\n            {\n                foreach (string AUser in Users)\n                {\n                    SendEmailToUser(AUser,", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.LastMousePos.X >= Game.Renderer.Resolution.Width - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            if (CriteriaCodesUsed.Count!= 3)\n            {\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TVerificationResult(this, ErrorCodes.GetErrorInfo(PetraErrorCodes.EC_CONFERENCERULES_DISCOUNTS_NOT_ALL_USED);\n                // Handle", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "                stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n} \n```\nThe code is a C# class that handles file loading and serialization in a Phosphorus Five application. It includes methods for", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "```python\ndef _apply_packages(self, packages):\n    #... (rest of the method implementation)\n```\nThis is the implementation of the `_apply_packages` method, which is a callback function that will be called by the `apply` method. The method should iterate over the packages and perform some action on them", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return CopyCustom; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t\t\treturn;\n\t\t\t\t_customRange = value;\n\t\t\t\tNotifyPropertyChanged(\"CustomRange\");\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "            if (bugAnnotation.getLineNumber() == -1) {\n                reportBug(bugInstance);\n            }\n        }\n    }\n    public void reportBug(BugInstance bugInstance) {\n        if (applySuppressions) {\n            if (bugInstance.getPriority() == BugRanker.Priority.LOW) {\n               ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "public class Apple : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Apple() : base( 0x1A1 )\n\t\t{\n\t\t\tthis.Weight = 0.1;\n\t\t\tthis.FillFactor = 1;\n\t\t}\n\t\tpublic Apple( int amount ) : base( amount, ", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                        if (eFarm!= null && eFarm.MinionHitCount >= Menu.GetSlider(\"LaneClearECount\"))\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    else if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && target!= null && target.IsValidTarget(Q.Range", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t *", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "```python\nfb = self._retr_file(filename)\n```\nThis line of code is part of the `DWD` class and is used to retrieve a file from the FTP server. The file is then stored in the `self._buffer` variable, which is a bytearray. The `self._retr", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "        self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Field_parser.field_definitions('testsuite')['title_title']['rules'],\n            Field_parser.field_definitions('testsuite')['title']['rules']\n        )\n        self.assertEquals(\n            Field_parser.field_definitions('testsuite')['title_title']['rules'],\n            Field_parser", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                    new[] {new object[] {\"E1\", \"?E1?\"});\n                // widen to int\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n                // widen to string\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n        c = self.__mul__(other)\n        return c\n    \n    def __mul__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented\n       ", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "def render(self, id_or_xml_id, values=None, engine='ir.qweb', context=None):\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the code remains the same)\n    #... (rest of the", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "            if (oldValue!= null) {\n                oldValue.removeNotify();\n            }\n            if (text!= null) {\n                html = text;\n                html = html.replaceAll(\"<\", \"&lt;\");\n                html = html.replaceAll(\">\", \"&gt;\");\n                html = html.replaceAll(\"&\", \"&amp;\");\n                html = html.replaceAll", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "def test_content_is_testharness():\n    s = create(filename)\n    assert s.content_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    assert len(items) == 1\n    assert items[0].url == \"/html/test", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t}\n\t\t}\n\t\t#endregion\n\t}\n}\npublic class FilterMapper : IFilterMapper\n{\n\tprivate readonly HbmFilter hbmFilter;\n\tpublic FilterMapper(System.Type ownerType, System.Type keyType, System.Type valueType, HbmMap mapping)\n\t{\n\t\thbmFilter = new Hbm", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "writer.WriteEncodedInt( (int) m_Members.Count );\n\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int) m_Members[i].Count", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "        invocationQueue.pop();\n    }\n    private void moveForward() {\n        if (invocationQueue.isEmpty()) {\n            return;\n        }\n        if (invocationQueue.peek().isRoot()) {\n            return;\n        }\n        if (invocationQueue.peek().isRoot()) {\n            return;\n        }\n        if", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                self.args['pytest'] = pytest\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n                self.args['use_wharf'] = True\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "                if (phi) {\n                    materializePhi(key, states, mergeBlock);\n                }\n                states.get(0).readCache.put(key, value);\n            }\n        }\n        private void materializePhis(List<ReadEliminationBlockState> states) {\n            for (Map.Entry<CacheEntry<?>,", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "        if (mCallback!= null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException e) {\n                // Ignore and continue\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public abstract void onSetPauseImage(String", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "```\n            from.SendGump(new EodonMapGump(this, from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void GetContextMenuEntries(Mobile from, List<ContextMenuEntry> list)\n\t\t{\n\t\t\tlist.Add(new ContextMenuEntry(1156705, 1156705, 0", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "```python\nclass Bibxxx(db.Model, BibxxxMixin):\n    \"\"\"Bibxxx table.\"\"\"\n    __tablename__ = 'bib{0:02d}'.format(100)\n    # Add fields here\n```\nThis code is a part of a larger project and is used to define a model for a SQL", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "def get_user_status(self, username, domain):\n    user = '%s@%s' % (username, domain)\n    data = self.module.get(user)\n    if data is None:\n        return None\n    else:\n        return data['last_status']  # <--- HERE IS THE MISSING LINE OF CODE", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "          - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"Return the string representation of the file.\"\"\"\n        return _strjoin('\\n', [e.__str__(self.wrap", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if not res['Value']['Failed']:\n      gLogger.info( \"No problematics found for transformation %s\" % transID )\n      res = self.transClient.setTransformationStatus( transID, 'ValidatedOutput' )\n      if not res['OK']:\n        gLogger.error( \"Failed to update status", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(method.equals(\"POST\")) {\n\t\t\t\t// @see bug #2456\n\t\t\t\tif(action.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif(method.equals(\"GET\")) {\n\t\t\t\t\treturn processURI(action, null, true, false);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        gsp = yield self.setupGerritStatusPush(self.TEST_PROJECT, self.TEST_REVISION,\n                                               self.TEST_BUILD_NUMBER, self.TEST_PROJECT,\n                                               self.TEST_REVISION, self.TEST_BUILD_NUMBER,\n                                               self.TEST_BUILD_NUMBER, self.TEST_PROJECT,\n                                               self.TEST_REVISION, self.TEST_BUILD_NUMBER,\n                                              ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "    self.category = atom.Category()\n  \n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'http://www.google.com'\n    self.category.label = 'test'\n    self.assert_(self.category.term == 'test')\n    self.assert_(self.category.scheme ==", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "                Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = r1;\n            if (r2!= null) {\n                for (Map.Entry<String, AnnotationMirror> entry : r2.entrySet()) {\n                    if (!result.containsKey(entry.getKey())) {\n                        result.put(entry.getKey(),", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```python\nclass MATERIAL_PT_game_settings(MaterialButtonsPanel, Panel):\n    bl_label = \"Game Settings\"\n    bl_options = {'DEFAULT_CLOSED'}\n    COMPAT_ENGINES = {'BLENDER_GAME'}\n    @classmethod\n    def poll(cls, context):\n        return context.material and (context.scene.render.engine in", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "            #region\n            //MAPPER 17\n            if (_engine.Apu.Mapper17!= null)\n            {\n                var map17 = (Mapper17) _engine.Apu.Mapper17;\n                mapper17_latch1 = map17.Latch1;\n                mapper17_latch2 = map17.Latch", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspectorDialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            m_jInspectorDialog.setModal(true);\n            m_jInspectorDialog.setResizable(true);\n            m_jInspector", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t\t// Training\n\t\t//----------------\n\t\tAdd(\"Training\", 70026); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70027); // Training Scroll [10 Windmill]\n\t\tAdd(\"Training\", 70028); // Training Scroll [10 Windmill]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n```\nThe code is a custom RelativeLayout in Android. The method `SizeHeightToFitWithMin` is incomplete. The method is supposed to return the height of the view that fits the content. The method should be completed to return the correct height.\n\n```csharp\npublic", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "def get_announcement_cross_publication(announcement, cross_platform):\n    \"\"\"\n    Return the cross-publication marker for the given announcement and cross-platform.\n    :param announcement: The announcement to be checked.\n    :param cross_platform: The cross-platform to be checked.\n    :return: The cross-publication marker if", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = PhpLexer()\n# Add any paths that contain custom static files\n# (such as style sheets and images) here, relative to this directory.\n# These are copied after the builtin static files, so a file named \"default.css\" will\n# overwrite the builtin \"default.css\".\n#", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "```\nI need help with the following code. I am trying to create a SQLite database and populate it with data from another database. The code is written in Python. The code is incomplete and I need help to complete it. The code is as follows:\n\n```python\nimport settings\nimport sqlite3\nimport datetime", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "        r = rethinkdb.table('projects').get(project_id).update({'last_snapshot': timestamp_to_timestamp(timestamp)}\n        r.execute()\n        log(\"Updated last_snapshot for {project_id} to {timestamp}\".format(project_id=project_id, timestamp=timestamp))\n    # Close the connection\n    conn.close()\ndef", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"You're really something, aren't you?<br/>You're always talking about things you don't know anything about.<br/>You're like a walking encyclopedia of useless information.\");\n\t\t\tbreak;\n\t\t\tcase \"school\":\n\t\t\t\tMsg(\"The School? Ha! You think I'm a teacher?<", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "class VoteRemovedResponse(Response):\n    def __init__(self, cmd, restag, rescode, resstr, datalines):\n        \"\"\"\n        \"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REMOVED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "```python\nclass HostData:\n    \"\"\"\n    Data about a host's results for a task.\n    \"\"\"\n    def __init__(self, host_uuid, name, status, result):\n        self.uuid = host_uuid\n        self.name = name\n        self.status = status\n        self.start = None\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "```java\n//... (rest of the code remains the same)\n```\nThe final answer is: \n```java\n//... (rest of the code remains the same)\n```java\n```java\n//... (rest of the code remains the same)\n```java\n```java\n//... (rest of", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "def xml_parse_repodata(context, path, ns, name):\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be moved there\n    # TODO: this is a copy of the function in common/lib/diff.py\n    #        it should be", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "            build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def _byte_compile (self, files):\n        self.byte_compile(files, optimize=self.optimize, dry_run=self.dry_run)\n    # _byte_compile ()\n   ", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t// NH-2351: we need to use the subclass table numbers\n\t\t\t// to determine which table to use for the lazy property\n\t\t\t// initialization\n\t\t\tint tableNumber = GetSubclassTableNumber(lazyPropertyNames, lazyPropertyColumnNames, lazyPropertyColumnNumbers, lazyPropertyNumbers", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "        '-N', job_name,\n        '-l', 'wall=24:00:00',\n        '-l','mem_free=1G',\n        '-l','mem_total=1G',\n        '-l','mem_free=1G',\n        '-l','mem_total=1G',\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            return View(\"EventDelegate\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(int modelId, int[] items)\n        {\n            var", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                    }\n                    return string.Format(\"{0}\", item.DisplayName);\n                }\n                return string.Format(\"{0}\", item.DisplayName);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n                return string.Format(\"{0}\", item.DisplayName);\n            }\n        }\n        private static void HandleMenu(Menu menu)\n        {\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "```python\ndef handlePremium(self):\n    self.load(self.URLS[1])\n    self.load(self.URLS[1], post={\"username\": self.user, \"password\": self.account.getAccountData(self.user)['password'], \"file_id\": self.file_id})\n    self.load(self.URLS[1], post={\"", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t// If we found a path, return the first harvestable cell on that path.\n\t\t\tif (path!= null)\n\t\t\t{\n\t\t\t\tvar firstHarvestableCell = path[0];\n\t\t\t\tif (harv.CanHarvestCell(self, firstHarvestableCell) && claimLayer.CanClaimCell", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                    self.logger.error(\"failed to restart dhcp service\")\n                    return False\n                elif restart_dhcp == \"1\":\n                    self.settings.restart_dhcp = \"1\"\n                elif restart_dhcp == \"0\":\n                    self.settings.restart_dhcp = \"0\"\n                else:\n                    self.settings.restart_dhcp = \"", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "        return Event.newBuilder();\n    }\n    @Override\n    public void flushEventBuffer() {\n        flushEventBuffer(true);\n    }\n    @Override\n    public void flushEventBuffer(boolean startNewSequence) {\n        flushEventBuffer(startNewSequence);\n    }\n    protected void flushEventBuffer(boolean startNewSequence)", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "            for (PpmContext currentContext = context.Suffix; currentContext!= PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics == 0)\n                {\n                    gotoLoopEntry = true;\n                    break;\n                }\n                PpmState state = currentContext", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "                return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Unsigned Long VR.\n        /// </summary>\n        public static readonly DicomVr ULvr = new DicomVr(\"UL\", false, false, false, 4, true,'', 1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tSqliteSession.DeleteTestType(tFull[3]);\n\t\t\tSqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(tFull[3]);\n\t\t\t//SqliteSession.DeleteTestType(t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00ij', self.read(o))\n    def test_insert_into_empty(self):\n        o = self.file(b'')\n        insert_bytes(o, 8, 0)\n        self.assertEquals(b'\\", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "```\n  <tr>\n    <td>Mac</td>\n    <td>\n  <a onClick=\"return onDownloadNdk(this)\" class=\"ndk\" href=\"http://dl.google.com/android/ndk/<?cs var:ndk.mac_download?>\">\n    <span class=\"ndk\">ND", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    ax.plot(cr['combined'][app][test]['durations'], label=test)\n    ax.plot(cr['combined'][app][VC]['durations'], label=VC)\n    ax.set_xlabel('Run')\n    ax.set_ylabel('Time in ms')\n    ax.set_title('%s, %s' % (app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "class _FancyEqMixin(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __eq__(self, other):\n        return self.a == other.a\n    def __ne__(self, other):\n        return self.a!= other.a", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 2, controlSize - 2);\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.drawLine(x + controlSize / 2, y + controlSize / 2, x", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "```python\ndef getNumTestPatterns(self, short = 0):\n```\n```python\ndef getNumTestPatterns(self, short = 0):\n  \"\"\" Returns the number of test patterns and number of classes for the test \"\"\"\n  if short == 0:\n    return 100, 10\n ", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "        final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        final int index = (offset - headerSize()) / elementKind.width.numberOfBytes;\n        mirror.writeElement(index, value);\n    }\n    @HOSTED_ONLY\n    public void visitHeader(ObjectCellVisitor visitor) {\n        visitor", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "            if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = ResolveFromFolderList(GacCache.GetAssemblyFolders(), fileName);\n            return assemblyFile;\n        }\n        /// <summary>\n        /// Resolves the assembly reference.\n        /// </summary", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "def str_format(*args, **kwargs):\n    \"\"\"\n    A wrapper around str.format() that allows for the use of the following\n    special keys:\n    - %: A placeholder for a value\n    - %a: A placeholder for a value, with the value displayed in bold\n    - %A:", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 = i20 + i16;\n        i20 =", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t/// <summary>\n\t/// A state of the layer. Each state is a clip that can be played in the layer.\n\t/// </summary>\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "            #endregion\n            #region LeeSin\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"LeeSin\",\n                    SpellName = \"LeeSinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}\n```\n\nThe code provided is a JUnit test class for a Java EE application. It uses the CdiUnit framework to run the tests in a CDI (Context and Dependency Injection) environment. The class is annotated with `@RunWith(CdiRunner.class)` to enable CDI support. The `", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "        proc = subprocess.Popen(\n            ['non-existent-command', 'arg1', 'arg2'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=True)\n        self.assertRaises(\n            OSError,\n            proc.wait)\n    @testlib.with_context\n    def test_popen_returns", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t//... (insert code here)\n\t\t}\n\t}\n}\n// </file>\n// </file>\n// <file>\n//     <copyright see=\"prj:///doc/copyright.txt\"/>\n//     <license see=\"prj:///doc/license.txt\"/>\n//     <owner name=\"Daniel Grunwald", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the table of this constraint.\")]\n\t\tpublic virtual DataTable Table {\n\t\t\tget {\n\t\t\t\t// TODO: Implement this method\n\t\t\t\tthrow new NotImplementedException ();\n\t\t\t}\n\t\t}\n\t}\n}\n```\nThe final answer is: \n\n```csharp\n[Browsable (false)]\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "        self.settings_kernels_groupBox = QtWidgets.QGroupBox(self.settings_kernels_groupBox)\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n        self.formLayout_3 = QtWidgets", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "                return false;\n            }\n            // Get the TAF for the station\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs.STATION_ID ) );\n            mStationId = stationId;\n            mLastForecast = getTaf( stationId );\n            return true;\n        }\n        @", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring query = \"from Continent\";\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(1, stats.GetQueryStatistics(query).ExecutionCount);\n\t\t\t\ts.CreateQuery(query).List();\n\t\t\t\tAssert.AreEqual(2, stats.GetQueryStatistics(query).ExecutionCount", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "                uiCRCITTSum = (uint)((uiCRCITTSum ^ (uiCRCITTSum & 0xFF) ^ (uiByteValue ^ (uiCRCITTSum & 0xFF));\n            }\n            return (ushort)(~uiCRCITTSum & 0xFFFF);\n        }\n        private void generate_crc", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic static class Bullet extends Projectile {\n\t\tpublic Bullet(ServerLevel level, LivingEntity owner, double x, double y, double z) {\n\t\t\tsuper(level, owner, x, y, z);\n\t\t}\n\t\tpublic Bullet(ServerLevel level, LivingEntity owner, double x,", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "            return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new JavaHyperlinkDetector(),\n                new CeylonHyperlinkDetector(),\n                new CeylonNativeHeaderHyperlinkDetector(),\n                new CeylonJavaBackendHyperlinkDetector(),\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "self.l.addWidget(self.drawingModeWidget)\nself.l.setStretch(0, 1)\nself.l.setStretch(1, 1)\nself.l.setStretch(2, 1)\nself.l.setStretch(3, 1)\nself.l.setStretch(4, 1)\nself.l.setStretch(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Use current location\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase 4: // Use current location\n\t\t\t\t\t{\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                     for (Object valueChoice : valueChoices)\n                     {\n                        String valueChoiceStr = selectConverter.convert(valueChoice);\n                        if (valueChoiceStr.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     result = chosenObj;\n               }\n            }\n            else\n            {\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (totalChanges[i][j]>0)\n\t\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\t\t\t\t}\n\t\t}\n\t\tsb", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                            foreach (KeyValuePair<int, int> line in unpricedLines)\n                            {\n                                //get the index of the purchase order that contains the line\n                                int orderIndex = line.Key;\n                                //get the index of the line in the purchase order\n                                int lineIndex = line.Value;\n                                //get the", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n} // namespace System.ServiceModel.Dispatcher\n// Copyright (C) 2005 Novell, Inc.  http://www.novell.com\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "        final int groupOwnerId = 1;\n        final int groupMode = 0100;\n        final int groupOwnerId2 = 2;\n        final int groupMode2 = 0200;\n        final int groupOwnerId3 = 3;\n        final int groupMode3 = 0400;\n        final int", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Vector2 viewport)\n\t\t{\n\t\t\treturn", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_type(XDRStruct):\n    __slots__ = ['endpoint_stats_type']\n    def __init__(self, endpoint_stats=None):\n        self.endpoint_stats = endpoint_stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.pack_uint(obj.endpoint_stats)\n    @classmethod", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// sends a message to all connected clients\n\t\t/// </summary>\n\t\t/// <param name=\"msg\">message to be sent</param>\n\t\tpublic void SendToClient(string msg)\n", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            switch (type) {\n                case Step:\n                    notifyStepReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToStepBucketList(list));\n                    break;\n                case Activity:\n                    notifyActivityReceived(FitnessLibrary.IFitnessActivityListener.ExecutionStatus.Ok, requestId, convertToActivityBucketList(list", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "  if is_method:\n    print'   Class* object,'\n  for i in xrange(bind_count):\n    print'   A%d a%d,' % (i, i)\n  for i in xrange(bind_count):\n    print'   A%d a%d,' % (i, i)\n  for i in", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items\n            ],\n        mimetype='application/json'\n    )\ndef range_json(filename, items):\n    \"\"\"\n    \"\"\"\n    return HttpResponse(\n        simplejson.dumps(\n            [range_item_dict(item) for item in items", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                        new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n            whereClause.addChild(new ServiceNode(new ConstantNode(searchIV), null/* c */,\n                    new VarNode(\"subj\"), new VarNode(\"p\"), new VarNode(\"lit\"), null/*", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "        if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs) def _handle_set_is_active(self):\n        return self._handle_set_is_active() def _handle_set_is_active(self):\n        return", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "      get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the assembly identity.\n    /// </summary>\n    public IName PublicName {\n      get { return this.ResolvedAssembly.AssemblyIdentity.PublicName; }\n    }\n    /// <summary>\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "            for (int i = 0; i < input.Count; i++)\n            {\n                d[i] = 0;\n            }\n            _iterator.Status = new CalculationIndetermined();\n            _iterator.Start();\n            _iterator.Status = new CalculationIndetermined();\n            _iterator.Status = new CalculationIndetermined();\n           ", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\tApfloat[] medians = new Apfloat[2];\n\t\t\tmedians[0] = sortedNumbers[left];\n\t\t\tmedians[1] = sortedNumbers[right];\n\t\t\treturn medians;\n\t\t}\n\t}\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "                if reference_set_map[v]!= -1:\n                    A[reference_set_map[v], reference_set_index] = 1\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge\n            v = edge.child\n            while v!= -1:\n                if reference", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "        result = self._test_raw_to_enrich(self.ocean_backend, self.enrich_backend, self.ocean_aliases, self.enrich_aliases, self.enrich_index, self.ocean_index, self.enrich_index, self.ocean_index, self.enrich_index, self.ocean_index, self.enrich_index", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.Value!= null && slot.Value.Value.IsBot)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar bot = slot.Value.Value;\n\t\t\t\t\t\t\t\t\t\t\tvar player = orderManager.LobbyInfo.Slots[slot.Key];\n\t\t\t\t\t\t\t\t\t\t\tif (player!= null && player.Value!= null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar botName = bot.Name;\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\nnamespace WinrtCifs.Util\n{\n\t/// <summary>\n\t/// This class contains the DOS error codes and their corresponding\n\t/// NT status codes.\n\t/// </summary>\n\t/// <remarks>\n\t/// This class contains the DOS error", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "        return frame_header + padding_bytes\n    def parse_flags(self, flags):\n        self.parse_flags(flags)\n    def parse_frame(self, frame):\n        self.parse_flags(frame.raw_flags)\n    def parse_stream_id(self, stream_id):\n        self.stream_id = stream_id\n    def parse_stream_id(self, stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "            var rect = cluster.RectangularBoundary;\n            if (rect == null)\n                throw new InvalidOperationException(\"Rectangular boundary is null\");\n            if (rect!= cluster.BoundaryCurve.BoundingBox)\n                throw new InvalidOperationException(\"Rectangular boundary is not equal to the bounding box of the boundary curve\");\n            if (cluster.B", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "m_maxSlopeCos = btCos(m_maxSlopeRadians);\n}\nbtVector3 btKinematicCharacterController::getGhostObjectPosition()\n{\n\treturn m_ghostObject.getWorldTransform().getOrigin();\n}\nvoid btKinematicCharacterController::setWalkDirection (ref btVector3 walkDirection)\n{\n\tm_walkDirection =", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "        if (initializers!= null) {\n            for (ExpressionTree initializer : initializers) {\n                if (initializer.getKind() == Kind.EXPRESSION) {\n                    AnnotatedTypeMirror atype = atypeFactory.getAnnotatedType(initializer);\n                    if (atype.hasAnnotation(Unique.class)) {\n                        if", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\tif (nbttagcompound1 == null", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute!= null)\n\t\t\t\t{\n\t\t\t\t\t// if the type is a class\n\t\t\t\t\tif (typeAttribute.Value.StartsWith(\"class\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t// get the class name\n\t\t\t\t\t\tstring className = typeAttribute.Value.Substring(5);\n\t\t\t\t\t\t// get the class\n\t\t\t\t\t\t// get", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n} \n```\nThis code is a test suite for the TrackBar control in the System.Windows.Forms namespace. It tests various properties and methods of the TrackBar control, including its size, orientation, and other settings. The test cases cover different scenarios, including setting the track", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\tpublic static class AddInstrumentationPointsTest {\n\t\t@Test\n\t\tpublic void test() {\n\t\t\t// TODO: implement test\n\t\t}\n\t}\n\tpublic static class RemoveInstrumentationPointsTest {\n\t\t@Test\n\t\tpublic void test() {\n\t\t\t// TODO:", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isAbstractionActive() && other.isAbstractionActive())\n\t\t\treturn false;\n\t\tif (this.isImplicit!= other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP!= other.dependsOnCutAP)\n\t\t\treturn false;\n\t\tif (this.pathCache!= null", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "            int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2? min1 : min2);\n            if (min > end) {\n              continue;\n            }\n            int max1 = wideRExtent[start][r.leftChild];\n            int max2 =", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "                'rsync', '--exclude=pg_data','src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec_fn=mock.ANY, close_fds=True\n        )\n        assert not pipe.stdin.write.called\n        assert not pipe", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "```csharp\nprocess.DbgManager.Dispatcher.VerifyAccess();\n```\n\t\t}\n\t\t// DbgManager thread\n\t\tvoid DbgManager_ProcessesChanged(object? sender, ProcessChangedEventArgs e) {\n\t\t\t// UI thread\n\t\t\tUI(() => {\n\t\t\t\t// Remove all processes\n\t\t\t\tprocesses.Clear", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a YafaRay scene specification for the given scene.\n\t *\n\t * @param   scene   Scene to be written.\n\t *\n\t * @throws  XML", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null || this.getClass()!= aThat.getClass() ) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Contact that = (Contact) aThat;\n\t\tif ( this.getContactDate()!= null && that.getContactDate()!= null ) {\n\t\t\tif (!this.getContactDate", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t    if n == 0:\n\t\tstatus = 'w'\n\t    else:\n\t\tstatus = 'a'\n\t    with open(name, 'a') as f_ID:\n\t\tf_ID.write(str(body_types[i]) + '\\n')\n\t\tfor j in range(body_types[i]):\n\t\t  f_ID.write('%s %s", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "        idx, = cdata[0]\n    elif isinstance(node.op, AdvancedSubtensor):\n        idx, = node.op.idx_list\n    else:\n        raise TypeError('Unexpected type of node')\n    # We can't use the shape of the output as it is not known yet\n    # We can't use", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "class EditCommunityForm(ModelFormWithHelper):\n    \"\"\"Form to edit a Community profile\"\"\"\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializes the form with the community to be edited\"\"\"\n        self.community = kwargs.pop('community')\n        super(EditCommunityForm, self).__init__(*args", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "def _get_collection_adapter(self, target, collection, collection_adapter):\n    \"\"\"Receive a collection adapter for a given collection.\n    :param target: the object receiving the event.\n    :param collection: the collection being set.\n    :param collection_adapter: the collection adapter.\n   .. seealso:: :ref:`", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "```python\n            xml_object.set('show', ';'.join(self.show_tag_list))\n```\n```python\n            xml_object.set('show', ';'.join(self.show_tag_list))\n```\n```python\n            xml_object.set('show', ';'.join(self.show_tag_list))\n```\n```python\n           ", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "        for change in data_model_changes:\n            if change.axis == 'bg_value':\n                self.current_filter = {}\n                self.current_filter['bg_value'] = self.bg_value\n            elif change.axis in self.current_filter:\n                self.current_filter[change.axis] = change.labels\n            else:\n                self.current_filter", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"ldtoken: invalid type\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tprivate bool Validate()\n\t\t{\n\t\t\tif (type == null)\n\t\t\t{\n\t\t\t\tif (Class == null)\n\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// objYLabel\n\t\t\t// \n\t\t\tthis.objYLabel.Location = new System.Drawing.Point(16, 48);\n\t\t\tthis.objYLabel.Name = \"objYLabel\";\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(48, 16);\n\t\t\tthis.obj", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "        c = self.getNoPrefix(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(c.files, [\"buildbot/changes/ChangeLog\"])\n        self.assertEqual(c.comments, \"update ChangeLog\\n\")\n        self.assertEqual(c.isdir, 0)\n        self", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "        if (termData == null) {\n            termData = new MultiValuedMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            if (entry.getValue()!= null &&!StringUtils.isBlank(entry.getValue()))", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isItemValidForDropping(ItemStack item) {\n\t\treturn true;\n\t}\n\t@Override\n\tpublic int getMana() {\n\t\treturn 0;\n\t}\n\t@Override\n\tpublic int getMaxMana() {\n\t\treturn 0;\n\t}\n\t@Override\n\tpublic", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "            intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private float getIntrinsicCohesion(Community c) {\n        return this.getIntrinsicCohesion(c);\n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "```python\ndef _fix_recid(recid, logger):\n    \"\"\"Fix a given recid.\"\"\"\n    # 1) remove the bibdoc_bibdoc table\n    run_sql(\"DELETE FROM bibrec_bibdoc WHERE id_bibdoc=%s\", (recid,))\n    # 2) remove", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//computerMgmt.Dispose();\n\t\t}\n\t\tprivate void startProcess(string computer, string process)\n\t\t{\n\t\t\tComputer c=computerMgmt.getComputer(computer);\n\t\t\tProcess p=c.getProcess(process);\n\t\t\tp.start();\n\t\t}\n\t\tprivate void stopProcess(string computer, string process", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "    for (java.util.Date exceptionDate : exceptionDates) {\n      exDateList.add(new Date(exceptionDate));\n    }\n    return new ExDate(exDateList);\n  }\n  private Datable<?> toDatable(final Period period, final EventDetail event) {\n    Datable<?> start = null;\n    D", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t// Set the source event binding to raise the target event when the source property is changed\n\t\tsourceEventBinding.OnEventRaised += new dfEventBinding.EventRaisedHandler( sourceEventBinding_OnEventRaised );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "            Gson gson = new Gson();\n            Map<String, String> config = new HashMap<String, String>();\n            config.put(\"nodeName\", getNodeDesc(request.getParameter(\"nodeId\"), containerName);\n            config.put(\"nodePort\", request.getParameter(\"nodePort\"));\n            config.put(\"spanPort\", request.getParameter(\"spanPort\"));\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate static final ImageHelper genFormEdit = new ImageHelper(RightMenuImages genFormEdit, \"Resources/GenFormEdit.png\", new Integer(16), new Integer(16));\n\t\tpublic final class Core implements java.io.Serializable", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return rnd.nextInt(size);\n    }\n    public void setSeed(long seed) {\n        this.seed = seed;\n        this.rnd = new Random(seed);\n    }\n    public void setProperties(String[] files) {\n        this.files = files;\n        init();\n    }\n    public void setProperties(String[] files,", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "```python\ndef make_naa_annotations(self, project_uuid, naa_annotated_project_uuid):\n```\nThis is the start of a new method. The method is called `make_naa_annotations` and it is a method of the `LinkAnnoManagement` class. The method takes two parameters: `", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "            buffer.Append(\"         .shrink  = \").Append(IndentionOptions)\n               .Append(\"\\n\");\n            buffer.Append(\"         .mergecells = \").Append(IndentionOptions)\n               .Append(\"\\n\");\n            buffer.Append(\"         .adtlformat = \").Append(IndentionOptions)\n               .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t} else if (ch >= 0x2010 && ch <= 0x2010 + 0xFFFE) {\n\t\t\t\t// Complement Kanji.\n\t\t\t\t++charIndex;\n\t\t\t\tcontinue;\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "    if   obj.mnemonic==\"LD_A\"  : dst = env.A[a]\n    elif obj.mnemonic==\"ST_A\"  : src = env.A[a]\n    elif obj.mnemonic==\"ST_B\"  : src = env.D[a]\n    elif obj.mnemonic==\"ST_B\"  : src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = location.getInputStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<String> e = properties.propertyNames(); e.hasMoreElements();)\n\t\t\t{\n\t\t\t\tString propName = e.nextElement();\n\t\t\t\tString propValue =", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "            return this == CREATIVE;\n        }\n        public static WorldSettings.GameType getByID(int id)\n        {\n            return GameType.values()[id];\n        }\n    }\n}\n}\n```\nThe final answer is: \n```java\npublic static WorldSettings.GameType getGameTypeById(int id)\n{\n    return", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\t// Add test case to check that the default Dacl is removed when the user and group are set to null.\n\t\t\t// The test case should be similar to the one in the previous test.\n\t\t\t// The test case should be named something like \"PurgeDefaultDacl\".\n\t\t\t// The", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "```python\ndef __run(self):\n    \"\"\"Run the lookup thread\"\"\"\n    self.__stopped = False\n    self.__thread = AcoustidLookupThread(self.__queue)\n    self.__thread.start()\n    self.__progress_cb = None\n    self.__progress_cb = self.__progress_cb\n    self.__", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "        #endregion\n    }\n    #region\n    public static void OnGuiUpdate()\n    {\n        // this is called when the window is shown\n        if (this.guiState == GUIState.Main)\n        {\n            // if PhotonNetwork is not initialized, show the main menu\n            if (PhotonNetwork.P", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "        rootLayout.findViewById(R.id.full_share).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // TODO: implement here\n            }\n        });\n        return rootLayout;\n    }\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "            return np.dot(psit_G, self.symmetry.op_scc[s])\n    def get_count(self):\n        \"\"\"Return number of k-point/spin combinations on this CPU.\"\"\"\n        return self.mynks\n    def get_offset(self):\n        \"\"\"Return offset of k-point/spin combinations on this CPU.\"\"\"\n       ", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientFornamn(Strings.repeat(\"a\", 256));\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 256));\n        Response response = utk", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body)\n\t\t\t\t{\n\t\t\t\t\tif (child is ILBasicBlock)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Flatten the child\n\t\t\t\t\t\tforeach (ILNode childNode in child.Body)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childNode is ILLabel)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Add a goto to", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll!= ragdoll) {\n\t\t//set the ragdoll state\n\t\tIsRagdoll = ragdoll;\n\t\t//set the delay\n\t\t//if we're going to a ragdoll, we need to make sure the body parts are all set to the same", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class FractureLayer(JsonData):\n    \"\"\"Fracture layer\"\"\"\n    def __init__(self, config={}):\n        self.topology = ClassFactory(Topology)\n        \"\"\"Topology of the layer\"\"\"\n        self.surface = ClassFactory(Surface)\n        \"\"\"Surface of the layer\"\"\"\n        self.regions =", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "        out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff] = (byte)(num);\n    }\n", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "            super( source, new FilterValueGetter() {\n                public String get( String label )\n                {\n                    PatternNode pNode = objectVariables.get( label );\n                    if ( pNode == null )\n                    {\n                        return null;\n                    }\n                    return pNode.getAssociation().getId().toString();\n                }\n            } );\n        }\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "elif key == 'TAUX':\n    slice_json['rate'] = transform_value_xml_json_to_json(value)\n    return slice_json\nelif key == 'TRANCHE':\n    comments.append(value)\n    return transform_slice_xml_json_to_json(slices_xml_json)\nelif key == 'TRANCHE':\n    comments.append", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "            frameToClose = (InternalFrame)buttons.get(btn);\n            frameToClose.setIcon(false);\n            frameToClose = null;\n            this.revalidate();\n            this.repaint();\n          } else {\n            if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "```python\n# Define the functions that we will be using\n#... (rest of the code remains the same)\n```\nThe final answer is: \n```python\n# Define the functions that we will be using\ngetNearestLC = createFunction('getNearestLC',\n                               \"\"\"\nargs:\n    ID", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "    move(out, Util.mm2px(offset.x, dpi), Util.mm2px(offset.y, dpi), Util.mm2px(toolDiameterInPx/2, dpi);\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                    db.update(Db.Table1.TABLE_NAME, ContentValues, Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, ContentValues, Db.Table4.ID_GROUP + \" = \" + deleteId, null);\n                }\n                act.finish();\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "                m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n        }\n        #endregion\n    }\n}\n```\nThe code is almost complete, but there is a small issue with the Dispose method in the WINTRUST_DATA struct. The Dispose method is not properly implemented", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'\n\nPlease complete the code given above. \n\n```python\n# CORE             #\n#-------------------#\nDEBUG = True\n# Whether to send a 500 error page for internal server errors, or a 500 error\n# page with debug information.\n# DEBUG = True\n# Whether to send", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t}\n\t\t}\n\t\tpublic void FinishProduction()\n\t\t{\n\t\t\t// If we're currently building something, we're done\n\t\t\tif (queue[0].Item == queue[0].Item)\n\t\t\t\treturn;\n\t\t\t// If we're not building anything, we're done\n\t\t\tif (", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "infoText += \" file\" if numberOfFiles==1 else \" files\"\ninfoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \" file\" if numberOfHiddenFiles==1 else \" files", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "        code = re_m4.sub(self.env.get(self.group, self.env.get(self.name, self.env.get('subst', '')), code)\n        self.outputs[0].write(code)\n        self.outputs[0].touch()\n    def __init__(self, *k, **kw):\n        self.ext_in =", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "def readKnowledgeBase(self, knowledge_yaml):\n    listOfInput = []\n    try:\n        if os.path.isdir(\"ipa_pars/knowledge/\"):\n            fileObject = open(\"ipa_pars/knowledge/\"+knowledge_yaml, \"r\")\n            yamlfile = load(fileObject)\n            fileObject.close()\n            return yamlfile\n", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 1 ] );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1 ][ idx - reactorExtent ] + chemical[ 1 ][ idx - 1 ]\n\t\t\t\t\t\t\t\t\t- ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "                if (pattern == null) {\n                    throw JsonException.$(position, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(pattern, timestampLocale));\n                break;\n            case ColumnType.STRING:\n                columnTypes.add(typeManager.nextStringAdapter().of(pattern));\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.cti_id;\n\t\t\tqs.Parameters.Add(Param);\n\t\t\treturn true;\n\t\t}\n\t}\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetComposedIdentifier(object component, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object GetCom", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "        xml_str = CE_NC_MERGE_NTP_AUTH_KEYID % (self.key_id, self.auth_type, self.auth_type, self.auth_type, self.auth_type)\n        ret_xml = set_nc_config(self.module, xml_str)\n        self.check_response(ret_xml, \"NTP_AUTH_KEYID_CONFIG\")\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "            self.store.update_item(component, editing_user)\n        # verify that the course has changes\n        self.assertTrue(self.store.has_changes(component))\n        # verify that the course has no changes\n        self.assertFalse(self.store.has_changes(self.course))\n        # verify that the course has no changes\n        self.assertFalse(self.store.has", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "        digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) {\n        digest.update((byte) ((PROCESSING_INSTRUCTION_CODE >> 24));\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "def mkrange(dict):\n    return aetypes.Range(dict['start'], dict['end'], dict['step'])\ndef mkpcrec(data):\n    return aetypes.PCRecord(data)\ndef mkinsertionloc(data):\n    return aetypes.InsertionLoc(data)\ndef mkaealias(data):\n    return a", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "            return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            string typeKey = new HelpPageSampleKey", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "                value = entry.get_active_text()\n            self.on_open_remote(path, column, value)\n        elif event.keyval == gtk.keysyms.KP_Enter:\n            self.set_value()\n        elif event.keyval == gtk.keysyms.KP_Delete:\n            self.on_quit_cell(record, column.name)\n        elif event.key", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "            beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            return beanProperties;\n        }\n        return null;\n    }\n    @Override\n    public int getOrder()\n    {\n        return 0;\n    }\n}\n```java\npackage org.alfresco.repo.management.subsystems;\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            if f.read(1) == \"\\n\":\n                f.seek(0)\n                f.truncate()\n        finally:\n            f.close()\n    if state == 'present':\n        if not os.path.exists(path):\n            if module.check_mode:\n                return (\"File %s does not exist\" % path, False", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "            [In, MarshalAs(UnmanagedType.Interface)] object pUnk\n            );\n    }\n    #endregion\n    #region MediaFoundation\n    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,\n    Guid(\"FA99388F-4383-415A-A930-DD472A8CF6F7", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Override\n    public EnumSet<Permission> getPermissions() {\n        return EnumSet.of( Permission.READ, Permission.WRITE );\n    }\n    @Override\n    public EnumSet<PrincipalType> getPrincipalTypes()", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "        child_elements = element.findall('./*')\n        for child in child_elements:\n            self.verify_element(child)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element.\n        This will check to see if the tag matches what is expected.\n        Returns:\n        True if the", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "def _get_elements_by_tag_name(self, node, name):\n    return NodeList()\nclass NodeList(object):\n    __slots__ = ('_list', 'ownerDocument')\n    def __init__(self, seq=()):\n        self._list = list(seq)\n        self.ownerDocument = None\n    def __len__(", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t* @generated\n\t*/\n\t@Test\n\tpublic void testValidateEMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of the key locator?\n\t\t\t// TODO: Do we need to check the type of", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "        for (int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon w = ActiveWeapons.get(i);\n            if(w.getCD() == 0){\n                ActiveWeapons.remove(i);\n                break;\n            }\n        }\n        //Updates the active weapons\n        for (int i = 0", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "        action.setColor( color );\n        GameEngine.model().getGame().join( action );\n        hide();\n        return;\n        }\n        catch( Exception e )\n        {\n          // TODO: error message\n        }\n        }\n      } );\n    m_panel.add( m_btnCancel );\n    m_panel.add( m_btn", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "        err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            raise RuntimeError(err[\"errors\"][0][\"msg\"])\n    if r.status == 200:\n        filename = get_filename(r.headers)\n        if not filename:\n            raise RuntimeError(\"", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergedOrder();\n\t\t\t\tfailureReason = response.GetFailureReason();\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tfailureReason = e.Message;\n\t\t\t\tmergedOrder = null;\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "    if c_input is None:\n        return\n    else:\n        # Add code here\n        pass\n```python\ndef _find_carbon_sources(model: \"Model\") -> List[\"Reaction\"]:\n    \"\"\"Find carbon sources in the model.\n    Parameters\n    ----------\n    model : cobra.Model\n        The", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "        return self.get_queryset().filter(\n            store__pootle_path__startswith=pootle_path,\n            store__user=user,\n        )\n    def get_for_store(self, store):\n        \"\"\"Returns units that fall below the given store.\n        :param store: A :class:`~pootle_store.models", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('city', models.ForeignKey(to='events.City')),\n            ],\n        ),\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "                    self.pox_switch.process_packet(poxpaket, portnum)\n                else:\n                    self.logger.debug(\"Switch {} can't find port {} for packet {}\".format(self.name, portnum, poxpkt))\n            elif poxpkt.type == poxpkt.ARP_TYPE:\n                self.logger.debug(\"Switch", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "    if (!m_IgnoreChanges) {\n      m_RecentItems.add(item);\n      m_RecentItems = new ArrayList<T>(new HashSet<T>(m_RecentItems));\n      notifyRecentItemListenersOfAdd(item);\n      writeProps();\n    }\n  }\n  /**\n   * Removes the item from the internal list", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "            return false;\n        }\n    }\n}\npublic class ShadowRevealingAction : IRevealingAction\n    {\n        public void OnRevealed(Mobile src)\n        {\n            src.SendLocalizedMessage(500814); // You have been revealed!\n        }\n    }\n}\npublic class ShadowRevealingAction", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "        if (halfTradePeriodDate == null && takeOfferDate!= null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n    }\n    public long getTradePrice() {\n        return tradePrice", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSynchronisedSets() {\n\t\tBitArray s = new BitArray(Symbol.nonterminals.Count);\n\t\tforeach (Symbol sym in Symbol.nonterminals) {\n\t\t\tsym.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tBeginAsyncRead();\n\t\t\t// read the data\n\t\t\tbyte[] buff = new byte[REPORT_LENGTH];\n\t\t\tmStream.Read(buff, 0, REPORT_LENGTH);\n\t\t\t// parse it\n\t\t\tParseInputReport(buff);\n\t\t\t// return the state\n\t\t\treturn mWiimoteState;\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING)? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo instance1, MskJointVo instance2)\n\t\t{\n\t\t\tif (instance1 == null)\n\t\t\t{\n\t\t\t\treturn", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetCrashReportPath()\n\t\t{\n\t\t\tstring root = GetRoot();\n\t\t\tstring path = String.Format( \"CrashReport.log\" );\n\t\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert.AreEqual(3, list.Count);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void SecondLevelCacheWithCriteriaQueries()\n\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "            for (k++; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (i = 0; i < N1 + N2 + N3; i++)\n            {\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "def __init__(self, description, currency=None, fields=None):  # noqa\n    \"\"\"This class represents a Compute rate.\n    Example:\n       .. code-block:: python\n          >>> import cfme.intelligence.chargeback.rates as rates\n          >>> rate = rates.ComputeRate(description='Compute Rate',", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\t// if ( discardWholeBuffer )\n\t\t\t// {\n\t\t\t//     // glBufferData\n\t\t\t// }\n\t\t\t// else\n\t\t\t{\n\t\t\t\tif ( _lockedToScratch )\n\t\t\t\t{\n\t\t\t\t\t// if ( _scratchOffset == 0 )\n\t\t\t\t\t// {\n\t\t\t\t\t//", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "```\ndef __init__(self, session):\n```\nExplanation:\nThe code is a plugin for the Enigma2 media center, which is a Linux-based media center software. The plugin is called \"Satfinder\" and it is used to scan for satellite TV channels. The code is written in Python and uses the", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "            else if (filterStr.startsWith(\"tcp:\")) {\n                String[] parts = filterStr.substring(4).split(\",\");\n                if (parts.length!= 3) {\n                    throw new IllegalArgumentException(\"tcp: filter must be in the form tcp:<ip>:<port>:<ip>\");\n                }\n                String ip1", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "                for (int i = 0; i < a.Length; ++i) {\n                    if (i == 0) {\n                        // first row\n                        for (int j = 0; j < a.Length; ++j) {\n                            a[j] = (curr[j] + (curr[j]", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "self.assertEqual(s.get_interface(), 'foo.bar')\n    def test_message_type(self):\n        s = lowlevel.SignalMessage('ab')\n        self.assertEqual(s.get_signature(), 'ab')\n        self.assertEqual(s.get_signature().__class__, types.Signature)\n        self.assertEqual(s.get_signature().__class__.__name__, '", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "def get_options(self):\n    if self.options == None:\n        self.options = Options(self.get_options().get_case())\n    return self.options\n    def get_cohomology(self, level, position):\n        return self.get_E_2_page().get_cohomology(self.options)[level][position]\n   ", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n            AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field named \\\"nosuchfield", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Object put(Object key, Object value) {\n\t\treturn map.put( key, value );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic int sizeInCache() {\n\t\treturn", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\n@api.constrains('pin')\ndef _verify_pin(self):\n    if self.pin and not self.pin.isdigit():\n        raise exceptions.ValidationError(_('The PIN must be a sequence of digits.'))\n```\nThis code is a constraint on the `pin` field of the `hr.employee` model. It checks", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\t// WDEV-3953\n\t\tif (orderInvestigationLiteVo.getSpecimenLiteIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().getSpecimenLiteDetailsIsNotNull() && orderInvestigationLiteVo.getSpecimenLite().getSpecimenLite().", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The image of this item.\n        /// </summary>\n        public int Image\n        {\n            get\n            {\n                return sw.SendGetItem(index).iImage;\n            }\n            set\n            {\n                sw", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "maker = Factory()\n        self.terminator.new_tab(cwd, profile, debugtab)\n    def on_destroy_event(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        self.set_urgency_hint(False)\n        self.set_urgmented(False)\n        self.set_urgency_hint(False)\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                    toReturn.Add( new StructTypeInfo( nametypeFragments ) );\n                }\n                else {\n                    throw new Exception( \"Invalid struct definition\" );\n                }\n            }\n            return toReturn;\n        }\n        public Variant DllCall( string function, Variant[] paramtypen, Variant dll ) {\n            return Dll", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn base_type!= null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsInterface {\n\t\t\tget {\n\t\t\t\tif (IsClass)\n\t\t\t\t\treturn false;\n\t\t\t\treturn attributes.GetMaskedAttributes ((uint)", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "                return null;\n            }\n        }\n        #endregion\n    }\n}\n```\nThe code is a part of a rule engine. It is used to manage the rules and evidence in the engine. The code is incomplete and needs to be completed. The code is written in C#.\nThe code is a part of", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "        self._ssl = OpenSSL.SSL.Context(protocol)\n        self._ssl.set_info_callback(self._info_callback)\n        self._ssl.set_verify(self._verify_callback, self._verify_depth)\n        self._ssl.set_verify_mode(self._verify_mode)\n        self._ssl.set_verify_flags(self._verify_flags)\n       ", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label4 = new global::Gtk.Label ();\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural:\");\n\t\t\tthis.label4.UseUnderline = true;\n\t\t\tthis.hbox3.Add (this.label4);\n\t\t\tglobal", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "                headbook.set_current_page(old_num)\n        headbook.connect(\"page_reordered\", page_reordered, headbook)\n    \n    # Initing the message area\n    \n    # Initing the center\n    \n    # Initing the docks\n    \n    # Initing the status bar\n    \n    # Initing the main window\n    \n    #", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Reload-File\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_F5),\n    \"Reload-Project\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", jtaDataSource=\" + this.jtaDataSource + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", mapping", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    IEditorPart editor = getEditor();\n    if (editor!= null)\n    {\n      IFile file = ((IFileEditorInput)editor.getEditorInput()).getFile();\n      return file.isReadOnly();\n    }\n    return false;\n  }\n  \n  protected IAction[] doGetActions()\n  {\n    return get", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach = new OpenDental.UI.Button();\n\t\t\tthis.butAttach", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "        if (sb!= null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n```\nThe code is a utility class for the Alfresco Web Editor (AWE) tag library. It provides methods for working with marked content, such as getting the marked", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, result);\n\t\t}\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(this.m_d) {\n\t        case option_1:\n\t        case option_2:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break;\n\t        case option_3:\n\t            current_sum = 4 + CDRSerializer.alignment(current_align, 4);\n\t            break", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "        return null;\n      String javaHome = (String)java.GetValue(\"JavaHome\");\n      if (javaHome == null)\n        javaHome = (String)java.GetValue(\"JavaExe\");\n      if (javaHome == null)\n        return null;\n      return javaHome;\n    }\n    private static String Get", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "                comment = l\n        return None\n    def find_env(self, name):\n        # attempt to find environment variable by name\n        for l in self.lines:\n            if re.match(r'%s' % self.ansible, l):\n                other_name = re.search(r'\\s*(\\w+)\\s*',", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "@classmethod\n    def _to_json_spec(cls, modifier_json, modifier):\n        modifier_json['uv_layer'] = modifier.uv_layer\n        modifier_json['vertex_group'] = modifier.vertex_group\n        modifier_json['vertex_group_weight'] = modifier.vertex_group_weight\n        modifier_json['vertex_group_weight_mask']", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "            if(rankCounts == null)\n            {\n                rankCounts = new double[pepLenRanks.size()];\n                pepLenRanks.put(peptideLength, rankCounts);\n            }\n            for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "        for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(3, neighbors.get(2));\n    }\n    @Test\n    @", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "                    self.packet = self.cap[self.choice]\n                    self.print_packet(self.packet)\n                    self.get_input()\n                except IndexError:\n                    print(self.fatal+\"Invalid packet number\"+self.blk)\n                    self.get_input('...')\n                except ValueError:\n                    print(self.fatal+\"Invalid packet number\"+self.blk)\n                   ", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "            this.rptComboBox.Location = new System.Drawing.Point(91, 57);\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n            this.rptComboBox.TabIndex = 5;\n            this.rptComboBox.SelectedIndexChanged += new System.EventHandler(this.rptComboBox_SelectedIndexChanged);\n            // \n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "            'Meta': {'object_name': 'Scan'},\n            'content': ('editorsnotes.main.fields.XHTMLField', [], {'null': 'True', 'blank': 'True'}),\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "                return false;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n    private void processGlobalAttributes(Schema schema) {\n        if (schema.getGlobalAttributes()!= null) {\n            processGlobalAttributes(schema.getGlobalAttributes());\n        }\n    }\n    private void processGlobalAttributes", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "        self.message_post(cr, uid, ids, 'validate', context=context)\n        self.message_post(cr, uid, ids, 'validate', context=context)\n        return self.write(cr, uid, ids, {'state':'validate'}, context=context)\n    def holidays_refuse(self, cr, uid, ids, context", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "            set { this.Enabled = value; }\n        }\n        #endregion\n    }\n}\n}\n```\nThe code is a part of a larger framework and is used to create a grid that can be used to display business objects. The code is written in C# and uses the.NET framework. The code is well", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "            return string.Format(\"Mixer Line: {0} ({1}) - {2}\", mixerLine.dwLineID, mixerLine.dwLineID, mixerLine.szName);\n        }\n    }\n}\n[Serializable]\npublic enum MixerLineComponentType\n{\n    /// <summary>\n    /// Undefined\n    /// </", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tdomainObject.setCareContext(domainFactory.getDomainObject(ims.core.admin.domain.objects.CareContext.class, valueObject.getCareContext().getID_CareContext());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID());\n\t\tdomainObject", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "            [\"cargo\", \"build\"] + opts,\n            env=env,\n            cwd=base_path)\n        if status:\n            return status\n        if not android:\n            # Build the main Servo binary\n            with cd(base_path):\n                status = call([\"cargo\", \"build\"] + opts, env=", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn this.getOptimisticScore(new double[] { estP, 0 }, new double[] { 0, n });\n\t\t}\n\t}\n\t/**\n\t * @return the number of open nodes.\n\t */\n\tprivate int getOpenNodesSize() {\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "                StashedSelectedIndexChanged(null, null);\n            }\n        }\n        private void StashedSelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (Stashes.SelectedItem is not null)\n            {\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n                Initialize();\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "assert job.has_assign_item(\n    dest_elem_type_id=beam_monitor_type_id,\n    dest_buffer_id=lattice_buffer_id,\n    dest_elem_index=bm2_index,\n    dest_pointer_offset=0,\n    src_elem_type_id=particle_set_type_id,\n    src_buffer_id=output_buffer.cbuffer.n_objects,\n", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "        if (this.getClass()!= o.getClass()) {\n            return false;\n        }\n        final AuthScope other = (AuthScope) o;\n        return this.match(other) == 15;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode()", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                        b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```\nThe code is a C# implementation of a client that uses the Microsoft", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static List<SeriennrChargennrMitMengeDto> erstelleListeAusStringArray(String[] snrs)", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier) value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType) value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbase.CSet(feature, value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tpublic override", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "```python\ndef decrypt_archive(archive_index, args):\n    #... (rest of the decrypt_archive function remains the same)\n```\nThe code is already given in the question. The function `decrypt_archive` is defined in the `decrypt_archive` function. The code is already given in the question. The function", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "        self.cmd_str = '%s%d' % ('ACMD' if self.is_acmd else 'CMD', self.cmd_name(self.cmd))\n        self.state = 'GET RESPONSE R1'\n        self.state = 'IDLE'\n        self.state = 'IDLE'\n        self.state = 'IDLE'\n       ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "          cursor = limit - v_3;\n          limit_backward = cursor;\n          return false;\n        }\n        cursor = limit - v_3;\n        limit_backward = cursor;\n        break;\n      case 2:\n        // (, line 201\n        // or, line 201\n        // (,", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (cls == null)\n                    return;\n                if (cls == null)\n                    return;\n                if (cls == null)\n                    return;\n                if (cls == null)\n                    return;\n                if (cls == null)\n                    return;\n                if (cls == null)\n                    return;\n                if (cls", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "                return result\n            return None\n    def _get_key_usage(self):\n        # The key usage is not an extension, but a bit field\n        result = []\n        for name, value in self.__get_name(self.cert.get_key_usage()).items():\n            if value:\n                result.append(name)\n        return", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "print(\"\\t\\t\\tfor (%sSlots::iterator i = s.begin(); i!= s.end(); ++i) {\" % typename, file=f)\nprint(\"\\t\\t\\t\\tif (i->first == boost::bind (&Signal%d::compositor, this, i->second, %s)) {\" %", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    #     -- The first value is the first value of the interval.\n    #     -- The second value is the last value of the interval.\n    #     -- The first value is the first value of the interval.\n    #     -- The second value is the last value of the interval.\n    #     --", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tint beg = la.pos;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t\tSemErr(\"attribute not allowed here\");\n\t\t\t}\n\t\t\tExpect(29);\n\t\t\tSemText(out sym.attrPos);\n\t\t}\n\t}\n\tvoid Sym(out Symbol sym) {\n\t\tExpect(1);\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "            # force the product_id to be the product_id of the product\n            edi_doc = self._edi_import_product(cr, uid, edi_doc, context=context)\n            # force the product_uom to be the product_uom of the product\n            edi_doc = self._edi_import_product_uom(cr,", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n}\nPlease complete the code given", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermissionAdhereToActualNode() throws Exception\n    {\n        setUpTestPermissions();\n        NodeRef virtualFolderNodeRef", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           .match_subsystem('input')))\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_list_devices(self, context):\n        devices = list(context.list_devices())\n        for device in devices:\n            assert device is not None\n    def test_list_devices_empty(self, context):\n       ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "```\n# -*- coding: utf-8 -*-\nimport HttpUtils\nfrom HttpUtils import App, buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\nfrom HttpUtils import buildOpener\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "                elif (index_elements[0] == \"Mode\"):\n                    rd['mode'] = index_elements[1]\n                elif (index_elements[0] == \"Stokes\"):\n                    rd['stokes'] = index_elements[1]\n                elif (index_elements[0] == \"Stokes\"):\n                    rd['", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            base.InvalidateProperties();\n        }\n        public override void OnItemMove(Mobile from, Item item)\n        {\n            if (item is Key && ((Key)item).KeyRing == this)\n            {\n                item.Delete();\n                from.SendLocalizedMessage(501690); // You removed the key from the keyring.\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (Iterator<String> iter = devices.iterator(); iter.hasNext();) {\n            String device = iter.next();\n            // DRS 20181103 - Added code to get IP address from devices\n            String ipAddress = ipAddressMap.get(device);\n            // DRS 20181025 - Added code to get model from", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "    if (lastSeenVersion < Version.PIN_OPT_OUT) {\n      jobs.put(Version.PIN_OPT_OUT, new PinOptOutMigrationJob());\n    }\n    if (lastSeenVersion < Version.SYSTEM_AVATAR) {\n      jobs.put(Version.SYSTEM_AVATAR, new SystemAvatarMigrationJob());\n    }\n   ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length < 2) {\n        log.warn(\"RegexNER mapping file has line \" + lineCount + \" with less than 2 columns: \" + line);\n        continue;\n      }\n      String type = split[0];\n      Set<String> overwritableTypes = new HashSet<String>();\n     ", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "            for abspath in sub_path[include[0]]:\n                if os.path.exists(abspath):\n                    return (abspath, include[0])\n            # if not, try the path in env['TEXINPUTS']\n            for abspath in path[include[0]]:\n                if os.path.exists(abspath):\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "def _create_datasource(self, **keywords):\n    return CreateDatasource(self, **keywords)\nclass _Symbol(Symbol,_injector):\n    def __init__(self, *args, **kwargs):\n        self._c__init__(*args, **kwargs)\n    def __repr__(self):\n        return self.symbol", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "def _set_destination(self, destination):\n    self._values['destination'] = destination\ndef _set_port(self, port):\n    self._values['port'] = port\ndef _set_ip(self, ip):\n    self._values['ip'] = ip\ndef _set_port(self, port):\n    self", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "class MethodDetailsView(AutomateMethodDetailsView):\n    title = Text('#explorer_title_text')\n    @property\n    def is_displayed(self):\n        return (\n            self.title.text.startswith('Automate Method [') and\n            self.title.text.endswith(']') and\n            self.datastore.is_open", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "            notifyListeners(new EventObject(this), EventStatusType.ERROR,\n                    getClass().toString() + \", getActionObject(), \"\n                    + \"class (\" + className + \") not found.\", null);\n        }\n        return result;\n    }\n    public void setConfig(String config) {\n        this._config = new ConfigLoader", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "            response = self.client.post(\n                reverse(\"update_thread\", kwargs={\"thread_id\": \"dummy\", \"course_id\": unicode(self.course.id)}\n            )\n            self.assertEqual(response.status_code, 400)\n            self.assertTrue(mock_request.called)\n            self.assertEqual(mock_request.call_count, 1)\n            self.assertEqual(mock", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "def windowsLdmodEmitter(target, source, env):\n    return _dllEmitter(target, source, env, 'LDMODULE')\ndef windowsLdmodEmitter(target, source, env):\n    return _dllEmitter(target, source, env, 'LDMODULE')\ndef windowsProgEmitter(target, source,", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "            Job.getJobManager().beginRule(null);\n            List resources = getSelectedResources();\n            IStatus result = execute(resources, new ProgressMonitorWrapper(getShell()));\n            if (result.isOK()) {\n                return;\n            }\n            displayError(result.getMessage());\n        } catch (CoreException e) {\n            displayError", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.fieldnrs = new int[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Double[meta.getFields().length];\n\t\tdata.values = new Object[meta.getFields().length];\n\t\tdata.counts = new Double[meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "def test_parse_bounds():\n    f = utils.parse_date_time_bounds\n    d = datetime\n    last = d(2014, 1, 31,  0, 55,  0, 0)\n    last_rounded_fwd = d(2014,1,31,  ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            else if (smaxtime.Contains(\"h\"))\n                maxtime = TimeSpan.FromHours(dmaxtime);\n            //MaxTime\n            TimeSpan[] spawnintimes = new TimeSpan[Utility.ToInt32(snpccount)];\n            for (int i = 0; i < spawnintimes.Length; i++)\n            {\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if \"Suspend\" in o:\n            return True\n        return False\n    def _session_close(self, session):\n        try:\n            session.close()\n        except Exception:\n            pass\n    def _session_cmd_close(self", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "        final Callable<Boolean> sub = new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call()\n            {\n                ZMQ.Context context = ZMQ.context(1);\n                ZMQ.Socket socket = context.socket(SocketType.SUB);\n                socket.setReceiveTimeOut(3000);\n                socket.bind(\"tcp://", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSendRequestAfter(r);\n            return res;\n        } catch (BodyTerminatedException e) {\n            logger", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t}\n\t\t}\n\t}\n}\n*/\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing dnlib.DotNet;\nusing dnlib.DotNet;\nusing dnlib.DotNet.MD;\nusing dn", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "        self.fm.execute_file(self.fm.thisfile, self.fm.thisdir, self.fm.thisfile, self.fm.thisdir, self.fm.thistab, self.fm.thistab.get_selection(), self.fm.thisdir, self.fm.thisfile, self.fm.thistab, self.fm.thistab.get_selection(), self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t}\n\t\t[Test]\n\t\tpublic void CreateInstance_StringStringType ()\n\t\t{\n\t\t\tObjectHandle", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "        pl = Locale.objects.get(code='pl')\n        self._setup(Action.ACCEPTED, None)\n        self.assertEqual(self.actions[0].locale, da)\n        self.assertEqual(self.actions[1].locale, pl)\n        self.assertEqual(self.actions[2].locale, da)\n        self.assertEqual(self.actions[3", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                userstate.texture = cmd.parameters[\"texture\"]\n            if \"self_texture\" in cmd.parameters:\n                userstate.self_texture = cmd.parameters[\"self_texture\"]\n            if \"self_user\" in cmd.parameters:\n                userstate.self_user = cmd.parameters[\"self_user\"]\n            if \"self_user\" in cmd.parameters:\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "        PlayerGroup group = player.getPlayerGroup2();\n        if (group!= null) {\n            group.onEvent(new PlayerGroupChangeLeaderEvent(group, player));\n        }\n    }\n    public static PlayerGroup getGroup(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        return group;\n    }\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "        return highlight(\n            self.toks,\n            formatter=formatter,\n            outfile=outfile,\n        )\n        if self.rows > 0:\n            if align == \"right\":\n                r = self.toks[0]\n                for t in self.toks[1:]:\n                    r = TokenListJoin(r, t", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "def _setup_column(self, index, model_value):\n    column = QuantityColumn(index, model_value)\n    tree_model = ga_Gtk.ListStore()\n    tree_model.append([model_value])\n    return column, tree_model, tree_model.get_iter(0)\ndef _create_store_map(self, index, model_value", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tparent.setColumn(column);\n\t\tbreak;\n\t    }\n\t} while (parent!= null);\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override\n    public int doEndTag() throws PageException {\n\treturn Tag.EVAL_BODY_INCLUDE;\n    }\n    @Override\n   ", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "                    }\n                    nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                    Dialog = new DialogEntry();\n                    for (int i = 0; i < nl.Count; i++) {\n                        XmlNode n = nl[i];\n                        Dialog.Add((DialogID)Enum.Parse(typeof(DialogID), n.Attributes[\"ID\"].InnerText,", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                    m_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = PeerlessEntry.GetPeerlessKey( m_Peerless );\n\t\t\t\t\tm_key[i].Initialize( from );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic override void OnDeath( Mobile killer )\n\t\t{\n\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n// EO Class Definition\n// EO ChangeOfServiceVoCollection\n// EO ims.careuk.vo.ChangeOfServiceVoCollection", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "                new Version(7, new int[]{6, 18, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = new byte[32];\n\t\t\tpb = kdf.ComputeHash(p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. Note that this method\n\t * does not automatically remove mana from the item which is exporting.\n\t * @param manaToDispatch How much mana is to be dispatched", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n    'django.template.loaders.eggs.Loader'\n)\n```\nshould be replaced with the following code", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Add the frame to the end of the queue\n\t\t\t// FIXME: Revisit queue-wide blend-mode after LED Queue update\n\t\t\tNextFrame.Blending = BlendMode;\n\t\t\tOutputQueue.Enqueue (NextFrame", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "        if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage!= null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList == null)) {\n            if ((other.actionTraceList!= null))\n                return false", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            dc.}\n}\n```\nThe final answer was not provided in the given code snippet. However, I can provide the completion of the code based on the given snippet. Here is the completion of the code:\n\n```java\npublic class DriverCall {\n    public static final int STATE_IDLE = 0;\n    public", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(MetadataEnumType.DOCUMENT)) {\n\t\t\t\t\tfor (Licence licence : availableLicences) {\n\t\t\t\t\t\tif (licence.isDomainDocument())", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                for (int y2 = 0; y2 < ySizeP; y2++)\n                {\n                    int n = y * xSize + x;\n                    int n2 = y * xSize + x;\n", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\tclient = setUpClient(url, username, password);\n\t\t\tclient.setMethodCallTimeout(TIMEOUT_SECONDS * 1000);\n\t\t\tclient.setURL(url);\n\t\t\tclient.setUsername(username);\n\t\t\tclient.setPassword(password);\n\t\t\tclient.setDebug(true);\n\t\t\tclient.setDebug", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setSelectionEnd(int i)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setSelectionStart(int i)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setSelectionStart(int i, int", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "            out.writeUTF(\"HTTP/1.0 404 Not Found\\r\\n\");\n        }\n        else {\n            out.writeObject(found.object);\n        }\n        out.flush();\n        out.close();\n        in.close();\n    }\n    private static class ExportedObject {\n        public Object object;\n        public int identifier;\n    }\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                        16,\n                    0,\n                    pixel_x, pixel_y,\n                    Machine.visible_area, TRANSPARENCY_NONE, 0);\n                pixel_x += 6;\n                pixel_y += 6;\n            }\n            /* Draw the fire beam */\n            pixel_x = 0;\n            pixel_y = ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                       .Distance(position) <= spell.Range &&\n                                    spell.RangeCheckFrom.To2D().Distance(position) <= spell.Range)\n                                {\n                                    result.Add(target);\n                                }\n                            }\n                            return result;\n                        }\n                    }\n                }\n                return new List<Obj_AI_Base>();\n            }\n            return new List<Obj_AI", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        return graph.getInducedPath(x, y).size() > 0;\n    }\n    public static List<Node> getInducedPath(Graph graph, Node a, Node b) {\n        List<Node> path = new LinkedList<>();\n        path.add(a);\n        path.add(b);\n        return getInducedPath", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    plcs.Push(pop[i]);\n                }\n            }\n            return null;\n        }\n        #region i3DMLInitializable\n        public virtual void Initialize()\n        {\n            ScriptManager.Initialize();\n        }\n        #endregion\n        #region IDisposable\n        public void Dispose()\n        {\n            ScriptManager.Dispose();\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "        if (this.attachmentFile == null && other.attachmentFile == null) {\n            return true;\n        }\n        if (this.attachmentFile == null || other.attachmentFile == null) {\n            return false;\n        }\n        if (this.attachmentFile.getFileName().equals(other.attachmentFile.getFileName())) {\n            return true", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                        m_Item.m_From = m_Item.m_From;\n                        m_Item.m_End = m_Item.m_End;\n                        m_Item.m_MinDamage = m_Item.m_MinDamage;\n                        m_Item.m_MaxDamage = m_Item.m_MaxDamage;\n                        m_Item.m_Item = m_Item.m_Item;\n                        m_Item.m_Item", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void MessageTo(PlayerMobile user, PlayerMobile to, string text)\n\t\t{\n\t\t\tInternalMessage(user, \"Message to {0} from {1} - {2}\", to.Name, user.Name, text);\n\t\t}\n", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "    return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAdminGroupIds(String sUserId) {\n    return mock.getAdminGroupIds(sUserId);\n  }\n  @Override\n  public String getAdminComponentId(String sUserId) {\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                            files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALOG);\n                    return true;\n                case R.id.actionrename:\n                    for (", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "public void close() {\n    if (this.channel!= null) {\n        this.channel.close();\n    }\n    this.channel = null;\n    this.l = null;\n    this.preparing = true;\n    this.channel = null;\n    this.channel = null;\n    this.channel = null;\n    this.channel = null;\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "                z_arr = np.array([z_dict[z_key][per])\n                z_arr[kk] = z_arr[kk]\n            for z_key in sorted(z_dict.keys()):\n                if z_key == 'z' or z_key == 't':\n                    continue\n                for t_index, t_dict in enumerate([", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "      return context.getString(resourceOne, name);\n    } else {\n      String name = recipients.size() == 2? \"you and \" : \"you and \" + recipients.size() - 1 + \" others\";\n      return context.getString(resourceTwo, name);\n    }\n  }\n  private static String getPlural", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "            env[\"PATH\"] = path.pathsep.join(extra_path + [env[\"PATH\"]])\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = path.pathsep.join(extra_lib + [env[\"LD_LIBRARY_PATH\"]])\n        if self.config[\"tools\"][\"rust-root\"]:\n            env[\"RUST_ROOT\"]", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "for path, test_list in iteritems(obj[\"paths\"]):\n            self._path_hash[path] = (self._path_hash[path],)\n            self._data[test_type][path] = set(test_list)\n        self._path_hash = {k: v for k, v in iteritems(self._path_hash", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tcompiledScript = null;\n\t}\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBindingForCompilation() {\n        return createBindingForCompilation();\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding();\n    }\n    private Binding createBinding", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "            return 0;\n        }\n        /// <summary>\n        /// Method to override closing for a wrapped server adapter\n        /// </summary>\n        protected abstract void ServerClose();\n        /// <summary>\n        /// Method to override setting a timeout for a wrapped server adapter\n        /// </summary>\n        /// <param", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "      for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i]\n        grad_Etf = np.reshape(grad_Etf, (-1,3))\n        grad_Etf = grad_Etf - grad_var*grad_Etf[0]\n        transformed_grad.append(grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null || obj == null)\n\t\t\treturn -1;\n\t\tif(this.id.equals(obj))\n\t\t\treturn 0;\n\t\tif(this.id.compareTo(obj) > 0)\n\t\t\treturn 1;\n\t\treturn -1;\n\t}\n\tpublic int compareTo(ims.ocrr.vo.OrderInvestigationForStatus", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "        assertEquals(found.size(), 2);\n    }\n    @Test\n    public void shouldThrowExceptionWhenUpdatingStackWithNullName() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.setName(null);\n        stackDao.update(stack);\n    }\n    @Test\n    public void shouldThrowExceptionWhen", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParamName(\"depth\");\n        depthParameter.setParamValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION REGEXP\n        Parameter exclusionRegexpParameter = new ParameterImpl();\n        exclusionRegexpParameter.setParamName(\"exclusionRegexp", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t//... (rest of the code)\n\t\t}\n\t\t#endregion\n\t}\n}\n```\nThe code is a part of the Loyc project, which is a Loyc (Loyc is a.NET library for working with syntax trees, and this code is an extension of the LNode class", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                    if (colisionList.Any())\n                    {\n                        foreach (var minion in colisionList)\n                        {\n                            if (minion.IsMonster)\n                            {\n                                q.Cast();\n                                return;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        foreach (Obj_AI_Base objAiBase in MinionManager.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tims.framework.Context Menus = new ims.framework.Context Menus();\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n\t\t// Context Menus\n", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "\"\"\"\nInstall Python prerequisites\n\"\"\"\n\"\"\"\nInstall Python prerequisites\n\"\"\"\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Install Python prerequisites\n    \"\"\"\n    # Install the requirements\n    for req_file in PYTHON_REQ_FILES:\n        pip_install_req_file(req_file)\n    # Install private requirements\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "            'name': \"Parent\"\n        })\n        with self.env['test_testing_utilities.parent'].Form(r) as f:\n            with f.subs.edit(index=0) as s:\n                self.assertEqual(s.name, \"Parent\")\n                s.name = \"Parent2\"\n                self.assertEqual(s.name, \"Parent2", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, 2)\n    assert Sum(x, (x, 1, 2).change_index(x, y) == Sum(y, (y, 1, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(l,ret);\n\t\t\treturn 2;\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\treturn error(l,e);\n\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeMoveOrReplace(action, changedItems, changedItems, startingIndex, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList newItems, IList oldItems", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "            int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            testDocument = parser.parse(new ByteArrayInputStream(stream));\n            objectToXMLDocumentTest(testDocument);\n    }\n    public void testXMLToXML() throws Exception {\n        Object objectToWrite = getWriteControlObject();\n        XML", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  width: {0}\", ide.width);\nConsole.WriteLine (\"  height: {0}\", ide.height);\nConsole.WriteLine (\"  colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"  planes: {0}\", ide.planes);\n", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "                l.successors = l.successors.next;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null) {\n                l.successors = l.successors.next;\n            }\n            if (l.successors!= null", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCLRTypes(ptr_of_this", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition = new Combo(grpBlockSettings, SWT.READ_ONLY);\n\t\t\tcomboLabelPosition.add(\"Inside\");\n\t\t\tcomboLabelPosition.add(\"Outside\");\n\t\t\tcomboLabelPosition.select(0);\n\t\t}\n\t\tprivate Position getPosition() {return comboLabelPosition.getSelection();}\n\n\t\t@Override\n", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "        # Find the decrement by one button on the Image Animator Tape Deck\n        self._getFirstValue( driver, \"Image\")\n        # Find the decrement by one button on the Image Animator Tape Deck\n        self._getFirstValue( driver, \"Image\")\n        # Find the decrement by one button on the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "        self.transport._parse_kexgss_complete(m)  # noqa\n        self.transport._parse_kexgss_complete(m)  # noqa\n        self.transport._parse_kexgss_complete(m)  # noqa\n        self.transport._parse_kexgss_complete(m)  # noqa\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode!= null) {\n                DefaultMutableTreeNode node = new DefaultMutableTreeNode(overallNodeName);\n                populateNode(databaseNode, node);\n                if (treeModel!= null) {\n                    treeModel.reload(databaseNode);\n                }\n                if", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "            self.pool = self.env['hr.payslip']\n            self.employee_id = self.employee_id\n            self.localdict = localdict\n            self.localdict['categories'] = self.env['hr.contract.category']\n            self.localdict['rules'] = self.env['hr.contract.rule']\n            self.localdict['", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "        #dlnm = np.log(mmax/mmin) / mspace\n        #lnmarr = np.linspace(np.log(mmin), np.log(mmax), mspace)\n        #marr = np.exp(lnmarr).astype(np.float64)\n        #marr = marr * rcrit", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "        d.width = font.getSize() * 2;\n        d.height = font.getSize() + 2;\n        return d;\n    }\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new Dimension();\n        Font font = getFont();\n        d.width = font.getSize() * 2;\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "    def _cal_p2(self,center_point,p0,p1,p2,flag='right_triangle',flag2='off_center',phi=np.pi/2,dr=[0,0,0]):\n        #print self.edge\n        #print self.edge[0,:]\n        #print self.edge[1", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsLoaded)\n\t\t\t{\n\t\t\t\twindow.Hide();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twindow.Show();\n\t\t\t}\n\t\t}\n\t\tprivate void ShowHideWindow(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar window = sender as Window;\n\t\t\tif (window == null)\n\t\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "for i in range(params[0]['nbins']:\n            params[0]['bins'].append(params[0]['low'] + i * step)\n            params[0]['low'] = params[0]['low'] + step\n        elif params[0]['bins'] is not None:\n            params[0]['", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "            contact.setLastMessageTransmitted(query.getReference());\n        }\n    }\n    public void query(XmppConnection connection, long start, long end, Contact contact) {\n        query(connection, start, end, contact, contact.getUID());\n    }\n    public void query(XmppConnection connection, long start, long end", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "            im1L = im1.convert(\"L\", rgb2I)\n            h1 = im1L.histogram()\n        elif channel == \"L\":\n            h1 = im1.histogram()\n        else:\n            raise ValueError(\"Unsuported channel for histogram equalization\")\n        # compute the transform\n        # compute", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.CUR, SPEC.CUR.CNY);\n\t}\n\tprotected void configApplication(Application app, byte[] aid) {\n\t\tapp.setProperty(SPEC.PROP.APPLICATION_ID, aid);\n\t}\n\tprotected void", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "            return \"Block of type %u\" % self[\"block_type\"].value\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description\n    def createDescription(self):\n        return self._description", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter = null;\n\t}\n\t/**\n\t * This is a property change event that is fired when the connection state\n\t * changes. This is the only property that is ever fired.\n\t */\n\t@Override\n\tpublic String[] getPropertyChangeNames() {\n\t\treturn new String[] { CONNECTED };\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "        path = bton(environ['PATH_INFO'])\n        for p, a in self.apps:\n            if path.startswith(p):\n                return a(environ, start_response)\n        return [b'404 Not Found']\n    def __init__(self, apps):\n        \"\"\"Initialize path info WSGI dispatcher.\n       ", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.setnetwork( model.network, sys.argv[ 2 ] )\n\t\tmodel.score()\n\t\tprint \"Model score = %s\" % model.score()\n\telif len( sys.argv ) == 5 :\n\t\tdata =", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "            if (chance < 0)\n                res = EnhanceResult.Failure;\n            else if (chance > 100)\n                res = EnhanceResult.Success;\n            else if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "            # Create a new component to represent the enum entry\n            entry = self.instantiate_field(\n                self.create_field_definition(),\n                entry_name, None, d['value']\n            )\n            # Collect properties and other values\n            if 'displayName' in d:\n                self.assign_property(entry, \"name\", d", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                }\n            }\n        }\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (alModules.Count > 0)\n            {\n                for (int i = 0; i < alModules", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "                for(int i = 0; i < this.trianglesUsed[textureHash]; i++)\n                {\n                    if(i == 0)\n                    {\n                        this.beginTriangle(this.textureArray[textureHash]);\n                    }\n                    else\n                    {\n                        this.endTriangle();\n                        this.beginTriangle(this.textureArray[texture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "    response['Access-Control-Expose-Headers'] = exposedHeaders + ','+ header\n    return response\ndef get_course_info(request, course_key):\n    \"\"\"\n    Helper function to get course info\n    \"\"\"\n    course_key = CourseKey.from_string(course_key)\n    return course_info(request, course_key)\ndef", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                    Driver driver = idlePool.Dequeue();\n                    if (driver.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else\n                    {\n                        EnqueueIdle(driver);\n                    }\n                }\n            }\n            return oldDrivers;\n        }\n        #endregion\n    }\n} \n```\nThis code is", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "    if radius is not None and resolution is not None and radius[0] == resolution[0] and radius[1] == resolution[1]:\n        # Function 3-A\n        radius = _round_shape(radius, radius, resolution, resolution)\n        # Function 3-B\n        radius = _convert", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "```\ndef onKill(self, npc, player, isPet):\n```\n# StolenDignity.py\n# by DrLecter\n# StolenDignity.py\n# by DrLecter\n# StolenDignity.py\n# by DrLecter\n# Stolen", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Format(\"{0:D2}:{1:D2}:{2:D2}\", num, num1, (int)Math.Floor((double)seconds1.Value));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tempty = \"Empty\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception exception)\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "            _attributes = new List<AttributeInfo>();\n            _attributes.Add(new AttributeInfo(this, \"position\", 0, 3, 0, 0, VertexAttribPointerType.Float));\n            _attributes.Add(new AttributeInfo(this, \"color\", 0, 4, 0, 0, Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "def __init__(self, id=None, name=None, **kwargs):\n    \"\"\"Initialize a new Model object\n    id: str\n        The id of the model\n    name: str\n        The name of the model\n    \"\"\"\n    self.id = id\n    self.name = name\n    self._", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.TumourGroupListVo ref = (ims.clinicaladmin.vo.TumourGroupListVo)beans.get(x);\n\t\t\tcoll.add(ref);\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\twhile(selectedLine<selected.length){\n\t\t\t\t\tcurrent.width = current.width + current.width;\n\t\t\t\t\tcurrent.height = current.height + current.height;\n\t\t\t\t\tcurrent.x = current.x + current.x;\n\t\t\t\t\tcurrent.y = current.y + current.y;\n\t\t\t\t\tcurrent.width = current.width + current.width;\n\t\t\t\t\tcurrent.height = current.height", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "        new LayoutAnimationController(set);\n        mListView.startAnimation(set);\n    }\n    \n    private void doNavigationBack() {\n    \tif (mNavigationList.size() > 1) {\n    \t\tmNavigationList.remove(mNavigationList.size() - 1);\n    \t\tfillData();\n    \t}\n    }\n    \n    private", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "                if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Category = cmbPPartnerInterestInterestCategory.GetSelectedString();\n            ARow.Interest = cmbPPartner", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tthis.addWindowToPredictions(pssm, i, protein.getStructure());\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a window of attributes to the dataset for training.\n\t * \n\t * @param", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
