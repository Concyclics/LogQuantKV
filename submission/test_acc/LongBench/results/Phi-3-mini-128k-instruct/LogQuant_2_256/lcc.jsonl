{"pred": "\t\t\tif ( !m_Registered && !m_Started && m_StartedBeginCountdown( null )\n\t\t\t}\n\t\t\tm_Arena = null;\n\t\t\tm_StartedBeginCountdown = false;\n\t\t\tm_", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\tif e_u not in roots:\n\t\t\t\troots.append(e_u)\n\t\t\tif e_v not in roots:\n\t\t\t\troots.append(e_v)\n\t\t\t\n\t\t\tA", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000, 0)\n        a.write_frames(np.zeros(1000, dtype='int16'))\n        a.seek(0, ", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_visible(self._SUBTITLE_OK)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\twriter.addAttribute(\"name\", OLStyleValue.class, \"name\");\n\t\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class, \"value\");\n\t\t\t\t}\n    \t\t}\n    \t\t\n    \t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n        self.model = None\n        self.selected_categories_model = None\n        self.anagrams_type = None\n        self.questions_type = None\n        self.anagrams_type = None\n    #for the_ = None\n       \n       \n        w", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Rune rune = SR_Utilities.FetchInfo(mob.Account).Runes[0];\n                    SR_Rune runeAcc = RuneAcc.ChildRune;\n                    if (runeAcc != null)\n                    {\n                       ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n    }\n    }\n    }\n    @Override\n    void send(HandshakeInMessage(Handshake)\n    {\n        // TODO:\n    }\n    }\n    @Override\n    void print(PrintStream s)\n    {\n    //\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       sp = new JESpace (name, path);\n        spaceRegistrar.put (name, sp);\n        return sp;\n    }\n        return sp;\n    }\n    public static synchronized JESpace getSpace (String name) {\n        return spaceRegistrar", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\towner.setFocus(this);\n\t\t\t\t}\n\t\t\t\tpos = btnEnergize.bottom;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   self.send_response = self.dispatcher.dispatcher.dispatcher.dispatcher.dispatcher.wsdl = self.dispatcher.wsdl\n        self.dispatcher.dispatcher.dispatcher.wsdl.\n        return self.dispatcher.dispatcher.dispatcher.", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.statuses.append(status)\n    def lock_status(self, status_id):\n        self.statuses.append(self.get_status_by_id(status_id))\n    def unlock_status(self, status_id):\n        self.", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n            \"message\": \"Operation\",\n        }\n    }\n    def action_id.\n        except Exception.format(\n        Process.\n        self.\n        chmod_get_ch_move_id,\n        return_ =\n       ", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Trusted-Untrusted\");\n\t\t}\n\t}\n\t}\n}\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       for trust_manager in self.trust_managers:\n            return trust_manager.getAcceptedIssuers()\n        return None\n\ndef _get_trust_manager(trust_manager):\n    return trust_manager\ndef _get_trust_manager", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Gets the mail manager for the current user.\n     *\n     * @return the mail manager\n     */\n    public MailManager", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   await self.__datastream_stream_writer.\n    def __setup_writer_stream_data_stream)\n        #:data_stream:asyncio.DataStreamWriter\n            #data_handler = None:\n        #:\n            self.data_writer.wait.", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpsNormal[jumpID] = store.GetValue (iter, \"uniqueID\") + \":\" +\n\t\t\t\t\t\t\tstore.GetValue (iter, \"text\") + \" \" +\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else if (args \net", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(Firm.get(stringId).getId(), DataManager.getLoadedData().get(stringId).serialize());\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void save()\n\t\t{\n\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\t\taddField(new FieldEditor(AUTO_SAVE, \"Auto save\", getFieldEditorParent()));\n\t\t\taddField(new FieldEditor(AUTO_SAVE_TIME, \"Auto save time (in\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.SpellTarget = null;\n            }\n        }\n        private class InternalTarget : Target\n        {\n            public InternalTarget( int val )\n            {\n                m_Value = val;\n            }\n            public void SetValue( int val )\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._assert_identity_map(\n        \"\"\"\n        \"\"\"\n        def _sess.\n        \"\"\"\n        def _get_session_context_engine.\n        \"\"\"\n        def _get_bind(self,\n        \"engine:\n            \"\n        def _connection_", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t}\n\t\t\n\t */\n\t\n\t}\n\t\n\t/**\n\t * @return a map from each InstanceKey in the given set to a unique name.\n\t * @return a map from each InstanceKey toKey. \n\t\t\t\n\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   self._request_url = urlparse.urlparse.urlparse.urlparse.urlencode\n    def wrapper(self):\n        self.set_header(\"X-RequestHandler.set_header(self.request.url.path, \"GET, POST, self.request.path,", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewActiveViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View v in Views)\n\t\t\t\t", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.download()\n    wigle_downloader.download()\n    wigle_downloader.download()\n    wigle_download", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod == 151)\n                {\n                    if (mod == 10)\n                {\n                    if (i.WeaponAttributes.HitFireBonus)\n                    {\n                    if (i.GemAmount)\n                \n", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(platforms)\n    else:\n        builds.extend(android_builds(build, platforms))\n    # Build the button\n    if small:\n        size = 'small'\n    else:\n        size = 'medium'\n    if force_direct:\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID, null);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\treturn stateBeansList.get(", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is MethodCallExpressionSyntax ) {\n                    MethodCallExpressionSyntax methodCall = ( MethodCallExpressionSyntax ) argumentSyntax.Parent;\n                    if ( methodCall.IsByRef ) {\n                ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test_usage_key_children\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        #\n        self.assert_xblock_component_component_usage_key\n        \"\"\"\n        #\nrequest.\n        #\n", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           PdfIndirectReference toUnicode = new PdfIndirectReference(writer.DirectContentUnderlying);\n            PdfDictionary descendant = new PdfDictionary();\n            PdfDictionary fontDesc = new PdfDictionary();\n            PdfDictionary cidFont = new PdfDictionary();", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth++;\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap bitmap) {\n            BitmapDrawable bitmapDrawable = new BitmapDrawable(getResources(), bitmap);\n            bitmapDrawable.set", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: Add a way to add new policy profiles\n    # TODO: Add a way to remove policy profiles\n    # TODO: Add a way to save and reset the form\n    # TODO: Add a way to navigate to the details of a policy\n    # TODO: Add a way to navigate", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor (IJPoseListener listener : poseListeners) {\n\t\t\tlistener.", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n        }\n        }\n    }\n}\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n    if (compound.hasKey(\"Damage\"))\n    {\n        damage = compound.getInt(\"Damage\");\n    }\n\nI'm trying to add a new line of code to read the damage value from the NBT data, but I'm not", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (probability=\" + probability + \")\";\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn', 'groups': 'everyone'})\n    assert len(i) == 0\n    i = store.handle_indicators_search(t, {'itype': 'f", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(name=\"owner\")\n        o = Organization.objects.get(name=\"company\")\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.employees[0], p)\n        self", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if self._interactive:\n        if self._interactive:\n            self.save(self._inspector, z_value\n        if z_name(z_value, z_if z_name: z_name_value(z_name=z_value, z_", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (IsIgnoredPath(path, ignored))\n                {\n                    _logger.Trace($\"Path {path} is being ignored\");\n                    return;\n                }\n                toScan.Add(path);\n            }\n            _scanDebouncer.Dispose();\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key, k -> write(k, remapping", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       return self.addnewcomment(self,replydict,viewtype,view,replyid,replycount,lastcommentid,lastcommentid,reply\n        if replydict is not None:\n                    return replydict = 'onkeywords = 'inreply = '", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t}\n\t\t}\n\t\tpublic byte m_TileType\n\t\t{\n\t\t\tif ( m_ID & \n\t\t\t{\n\t\t\t.Set( x )\n\t\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = land.GetChannelUri(land.GetLandData(scene, avatar, scene.GetParcelVoice\n                m_UUID\n                //\n                //\n                //\n            // - ParcelVoiceInfo.RegisteredCap\n            // Free", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodEditPayPeriod.Edit(textDateStart.Text,textDateStop.Text,textDatePaycheck.Text);\n\t\t\tDialogResult=DialogResult", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       column_headings = column_heading\n   \n    time_heading\n    \"\"\"\n   \n   \n    time_column_\n    (Name about\n   \n    time_\n   \n    time_data\n   \n   \n    about\n   \n   \n   \n   ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return {'success': True}\ndef group_member_create(context, data_dict):\n    user = context['user']\n    if not user:", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\tint outcome = node.getPartitionId() + 1;\n\t\t\tint depth = depth + 1;\n\t\t\t// assigning outcomes\n\t\t\toutcomes[parentIndex] = outcome;\n\t\t\t// assigning confidences\n\t\t\tconf", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResult[] { new SearchResult() };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param>\n        /// <param", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (ch, offset, strlen, int, value) {\n      @Override\n      @Override\n      @Override\n      @Override\n      boolean match(StringValue string, int, int, int, int match(String, int offset, int match(StringValue string, int, int", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       SampleDAO sampleDAO = new SampleDAOImpl();\n        Sample sample = sampleDAO.getSampleByAccessionNumber(accessionNumber);\n        if (existingRequired && studyFormName == null) {\n          return ValidationResults.USED_FAIL;\n       ", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Rejecting client {0}: {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tnewConn.Socket.Close();\n\t\t\t\t\tDropClient(newConn);\n\t\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif(beans.length == 0)\n\t\t\treturn coll;\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify(localtxt1, local", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plot data\n  if not 'granularity' in pD:\n    return S_ERROR( \"Missing granularity!\" )\n  if not", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var defense in Info.DefenseQueues)\n\t\t\t\tbot.SetRallyPointsForNewProductionBuildings(defense, Info.BuildingFractions, Info.BuildingLimits, Info.BuildingDelays);\n\t\t}\n", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setParent(db);\n        catalogStmt.setParent(proc);\n        catalogStmt.setParent(catalog);\n        catalogStmt.setParent(stmt);\n        catalogStmt.setParent(catalog.getClusters().get(\"cluster\").get", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 20);\n\t\t\tthis.comboBox1.TabIndex = 1;\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (bits == 1)", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       # TODO:\n        # TODO:\n        # TODO:\n        # TODO:\n        # TODO:\n        # TODO\n       \n    def_name_context\n       \n    def\n        #\n        self.check_user_\n    def\n    # TODO:\n    #", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, remaining_argv = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\n    #print \"Keep tempdir:\", _keep_tempdir\n    sys.argv = [sys.argv[0]] + remaining_argv\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tif self.WlanList.append(self.buildEntry(self.buildList,\n\t\t\t\t\"WlanList\",\n\t\t\t\"List\",\n\t\t\"List\",\n\t\t\"List\",\n\t\t\"List\",\n\t\t\"WlanList\",", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = fontX * x + barWidth * n;\n                if (textAlignment == Element.ALIGN_CENTER)\n                    size += font.GetFontDescriptor(BaseFont.DESCENT, baseline).Height * 2;\n                return new Rectangle(0", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.copyOf(results, results.length);\n  \n  }\n  \n  /**\n   * Load a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   * The list can include quoted strings, e.g. \"a,", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 15)\n        # The latitude trajectory is a regular slice of the latitude coordinate.\n        # The longitude trajectory is a regular grid.\n        x_points = [\n            -180.0", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (!ReadOnly)\n            {\n                toolStripButtonSave.Enabled =", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # get_mf\n    # get_mfcc_vectors\n    mfcc_vectors = []\n    mfcc_vectors_link = []\n    mfcc_vectors_file = 'wav'\n    # mfcc_vectors", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns a copy of the set as an array.\n        /// </summary>\n        /// <returns>\n        /// an array of the set\n        /// </returns>\n        public TK[] ToArray()\n        {\n            return (TK[])", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n            this.SuspendLayout();\n        }\n        }\n        }\n        }\n        }\n        /// </form:\n        ///\n        treeNode\n            treeNode44, \n        treeNode\n        treeNode", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   GLUT = None\n    GLUT_GUARD_CALLBACKS = False\n    GLUT_ERROR_CHECKING = False\n    GLUT_LOGGING = False\n    GLUT_CONTEXT_CHECKING = False\n    GLUT_CONTEXT_", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.kUint64(NID.kUint64);\n        }\n    }\n    private void writeStream(SevenZer,\n    private void writeFileInfo(SevenZArchive.\n    }\n   ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 * (System.currentTimeMillis() - start) / rampDelay);\n                if (alphaLevel < 0)\n                    alphaLevel = 0;\n                if (alphaLevel > 255)\n                   ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            }\n        }\n        }\n        }\n        }\n        }\n        [Test]\n        public void GetItems()\n        {\n            var item = Subject.GetItems().Should().Should().BeTrue();\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinaberry);\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, maxReviveCount, ItemId.ItemMaxRe", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       ConfigIter.SersicMainFit(1)\n        SersicMain' + '     ' to \n        ]\n        SersicMain' + ' \n        ]\n        f.close(1)\n        if(1\n        f.\n        if(1", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) >> 3);\n                    i += (((b & 0x01) >> 5) << 5);\n                    i &= ", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course_key(self):\n        \"\"\"\n        Create the course key for the course.\n        \"\"\"\n        if self._course_key:\n            raise FixtureError(\n                u\"Course key already set.  You", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\telse if(chance < 0) chance = 0;\n\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # Download both cert files from the api host\n        #types = ['key', 'cert']\n        #for type in types:\n        #    rc = download_request(module, name, apiid, apikey, type)\n        #    if rc == False:\n       ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           // \n            // \n            // \n            // \n            this.chkPrivacy\n            this.chkPrivacy.\n            this.chkPrivacy.TabIndex = \n            this.chkPrivacy.Size = new System.AutoSave\n            Auto", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.build = self.build\n    self.archive.get_archive_path()\n        self.archive.add_archive_path(self.archive.add_archive(self.archive.set_archive_path()\n            self.archive_name = self.archive.set_", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionLinkFossil(ISessionFossil, ILinkMinimalFossil):\n    def getType(self):\n        \"\"\" Session Type \"\"\"\n    getType.produce = lambda s: \"session\"\n    getType.name = \"type\"\n    def get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing messages: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImportUtil.importMessages(userPreferences, channelId, fileTextField.getText().toString(), result);\n", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof String) {\n\t\t       \t\t\t\tlayer = Integer.parseInt((String)value);\n\t\t       \t\t\t}\n\t\t    \t}\n\t    \t}\n    \t}\n    \treturn layer;\n    \t}", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            userInfoSession = currentSession;\n            if (userInfoSession == null) {\n                userInfoSession = new Session.Builder(currentSession).build();\n            }\n            if (userInfoSession != null", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tif (sum > 0){\n\t\t\tfor (Emotion emotion : emotions){\n\t\t\t\temotion.strength = (int) (em", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at': constants.SPLITED_TIMESTAMP_FINISHED,\n            'name': 'stage2',\n            'started_at': constants.SPLITED_ATTIMSTAMP2,\n            'job':\n        #\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        phi = phi1 - (e*x/e)\n    else:\n        phi = phi1\n    # Compute the footpoint latitude\n    phi = phi - (500000.0*e", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile-user', args=[user.username]))\n    else:", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    @property\n    @property\n    @property\n    def _validate_license_approved(self):\n        return self.validate_license_approved\n        )\n    def _validate_license_approved\n    def _license_approved", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= MAXIMUM_NO_OF_DIGITS;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return the number of bytes required to write this to a file\n     */\n    public int getByteArraySize()\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, flag))\n            new_positional_tags_list.append(TagRegex(regex, not flag))\n            new_positional_tags_list.append(TagRegex(regex, not flag))", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n            }\n        }\n    }\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer:\nfrom scapy.packet import Packet\nfrom scapy.fields import ShortField, ScalingField, ScalingField, BitEnumField, BitField, XByteEnumField, X3BytesField\n\nclass OBD_PID00(Packet):", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe\n\t\t\treturn\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            }\n            {\n                AddSpell(typeof(Reg.NightWing, Reg.Nightshade, Reg.MandrakeRoot, Reg.Garlic, Reg.Garlic, Reg.MandrakeRoot, Reg.Garlic, Reg.", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.pop(exc)\n        if self.preserved:\n            self.pop(exc)\n        if self.request.view_args is not None:\n            del self.request.view_args\n        if self.request.flashes:\n            del self.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef pubsub_consumer_id(session, cluster_id, needs_columns_columns=", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByRelease(ResourceEntity resource, ReleaseEntity release) {\n       ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n    else:\n        rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # Compute source to line distance\n    source_to_line", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.url = self.url\n    def _buildURL(self, url):\n        \"\"\"\n        Builds the URL for the given URL\n        \"\"\"\n        if self.isEnabled():\n        if self.url\n    def _doSearch(self):\n        \"\"\"\n        \"\"\"", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic static Font", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for decryption.\\n\");\n\t\t\t\t\t}", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tAssert.That(obj.Properties[0].Value[\"The outermost value\"].ToString(), Is.EqualTo(\"It is an object.\"));\n\t\t\tAssert.That(rootArr.Items[0].ToString(), Is.EqualTo(\" \"));\n\t\t\tAssert.That", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    edges.add(new T2(\"vertex-\"+w, \"vertex-\"+h));\n                }\n            }\n            return edges;\n        }\n        @Override\n        public Topic get", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                  col2=\"deform\",\n                  channel_width=20,\n                  flow_rate=0.04,\n                 \n                 \n                ", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.compareGraphs(args[0], args[1]);\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 56, 18,\n                                                     tzinfo=tzutc()),\n                    u'ProductDescription': 'Windows',\n                    u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * @return\n\t */\n\tprivate boolean performInstallation() {\n\t\tboolean success = false;", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.glDeleteFramebuffers(1, ref window.FrameBuffer);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref window.VertexArray);\n\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_error\n    @property\n    def project_cov_mat(self):\n        \"\"\"\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat\n    @property\n    def\n        data_x", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       ReflectionToStringBuilder toStringBuilder = new ReflectionToStringBuilder(this, ToStringStyle.DEFAULT_STYLE);\n        return new CmsLink(toStringBuilder.toStringRepresentation());\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n    ", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = accountId = Accounts.get(accountIdAccounts.getAccounts.getAccounts(osgBucket.getCanonicalIdAccounts.getAccounts.getAccounts.getAdminUser = getUser.getUserId());\n            if (", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           #region Application Component\n        public override IApplicationComponent ApplicationComponent\n        {\n            get { return _owner; }\n        }\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n\t\t#region Implementation\n\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       VmTemplate template = new VmTemplate();\n        template.setName(name);\n        VmTemplate importedTemplate = new VmTemplate();\n        importedTemplate.setName(name);\n        VmTemplate importedTemplateCloned = new VmTemplate();\n        importedTemplateCloned", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw9.XAlign = 0F;\n\t\t\tw9.YAlign = 0F;\n\t\t\tw9.XOptions = (global::Gtk.AttachOptions.FILL | global::Gtk.AttachOptions.FILL_", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set_database = self.set_database\n        # self.set_database = self.system\n        # self.set_database\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldnull);\n\t\t\t//ilgen.Emit(OpC", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder() {\n      return this;\n    }\n    }\n    Builder Merge\n    int\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n    public static\n   \n   \n     \n   \n   \n   \n   \n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = this.vertices.get(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex in the <code>vertices</code> array\n     * that corresponds to the <code>i", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showLanguage(getProperty(PROPERTY_COLUMNS_FOLDER_TYPE_DOCUMENT_LIST_COLUMNS_HIDE_LANGUAGE_FOLDER_TYPE\n        }\n        }\n        }\n        return the defaultTypeTypeDocType", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tif (dynamicHeight)\n\t\t\t\t{\n\t\t\t\t\ttextRect.sizeDelta = new Vector2 (placeholderRect.sizeDelta.x, placeholderRect.sizeDelta.y);\n\t\t\t\t}\n\t\t\t\tyield return new WaitFor", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = (int)GetSmallTextSizeF().Width;\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    #endregion\n    //--------------------------------------------------------------------------------\n    //--------------------------------", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            if (!string.IsNullOrEmpty(lastUser))\n            {\n                Users.Add(lastUser);\n            }\n            else\n            {\n                Users.Add(r[\"UserID\"].ToString());\n           ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\tif (Viewport.LastMousePos.X > Game.Renderer.Resolution.Width - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y > Game.Renderer.Resolution.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (VerificationControlsControls.AdditionalCostsPerformers.Checked, AddAccommodationCosts,\n            }\n            {\n                // get the data from dataset\n                GetDataFromControls(ref FMainDS, ref\n                if (\n                GetData\n                //", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Appending file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n    PayloadRequirement = namedtuple('PayloadRequirement', ['id', 'reasons'])\n    PayloadRequirements = namedtuple('Payload", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget\n\t\t\t{\n\t\t\t\treturn CopyRangeMinimum != int.MinValue;\n\t\t\t\tNotifyPropertyChanged(\"CopyRangeMinimumEnabled);\n\t\t\t}\n\t}\n\t}\n\t\t\t\t\t\t\tEnabled;\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: BugAnnotation with null source line: \" + bugAnnotation);\n            }\n        }\n    }\n    /**\n     * @param bugInstance\n     *            the BugInstance to", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\t{\n\t[Constructable(Construct( int FillFactor]\n\t\t{\n\t\t{\n\t\t\t\n\tConstructable(int( int)\n\t{\n\t\t\t[Constructable\n\t}\n\t}\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n\n        }\n        }\n        {\n            if (Menu.GetSlider(\"LaneClearR\")\n            {\n                var minions = Minions.GetMinions(minions.GetMinions(minions.Minions.Minions.Count)\n               ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, DEFAULT_ANCHOR, DEFAULT_FILL, DEFAULT_ANCHOR, DEFAULT_ANCHOR);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        warnings = []\n        for item in tree.findall(\"{http://www.wmo.int/data/xml/ns/advisory", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.model_definitions('testsuite'),\n            Model_parser.model_definitions('testsuite')\n        )\n        clean_field_model_definitions", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               env.CompileDeployFAF(namedWindow\n            {\n                var path = new RegressionPath();\n                var stmtTextCreate\n                var stmtTextCreate\n                var compiledDeployDeploy(\n                    \"create table MyInfraMyInfraWInfraCreate", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def add_orbit\n       \n       \n       \n        if isinstance(self, Particle)\n       \n        if other is a float\n            other = other\n        if isinstance.last_part or simulation.last_orbit = other.x, if otherB\n       \n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view(cr, uid, [], context=context)\n\nTypeError: 'NoneType' object is not iterable\n\nI am trying to get a list of all the views that inherit from a given view.\n\nThe error I get is:\n\n    'NoneType' object", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           if (oldValue != null) {\n                c.setClientProperty(BasicHTML.propertyKey, oldValue);\n            }\n            c.setClientProperty(BasicHTML.propertyKey,\n                                 getHTMLView(c, text));\n        } else {\n            if (old", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_testharness\n    assert s.name_is_reference\n    assert s.name_is_reference\n    assert s.name", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\t#endregion\n\t}\n}\n}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Tithe ); // <-- this line throws an exception\n\t\t\twriter.WriteEncodedInt( (int) m_Faction.State.Silver );\n\t\t\twriter.WriteEnc", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n    private void popGraphs(MethodInvocation methodInvocation methodInvocation = new MethodInvocation(graphQueue);\n    }\n    private void popGraphs(int graphCount);\n    popGraphs(methodInvocation);\n    }\n    private void popGraph();\n   \n    {\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.create_log_path = self.args['log_path']\n        self.log_path = self.args['log_path']\n        self.log_path = self.log_path\n        self.pytest_name = self.args['pytest_name", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(virtual, stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(virtual, stamp);\n                    }\n                    phi.setPhiValue(value", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(MSG_SEND_SESSION_MODIFY_REQUEST, null);\n    }\n    /** @see Connection.VideoProvider#onSetCamera */\n    public void onSetCamera(String cameraId) {\n        onSetCamera(cameraId);\n", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendLocalizedMessage( 1019001, \"\", 0x22 ); // You are too far away to use the map.\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic KotlPowerCore.KotlPowerCore", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.bibrec_bibxxx_0 = Bibxxx0\n    Record.bibrec_bibxxx_1 = Bibxxx1\n    Record.bibrec_bibxxx_2 = Bibxxx2\n    Record.bibrec_bibxxx_3 = Bibxxx3\n    Record.bib", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set(user, data)\n        self.module.set('all_users', all_users)\n        self.module.set('all_sessions', all_sessions)\n        self.module.set('all_users', all_users)\n        self", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrapwidth = 7\n    \"\"\"\n    _BaseFile {\n    MOFile {\n   \n   \n    msg\n    MOFile\n    MOFile\n    MOFile.header_entry:\n    ...\n    (for the MOFile.append(self.\n    \"\"\"", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine problematics for transformation %s\" % transID )\n      return S_OK()\n    if not res['Value']:\n      gLogger.info( \"No problematics found for transformation %s", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\t\n\t\t\t\n\t}\n\t}\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// RESP\n\t\t\n\t\t\n\t\tif(method.equals(\"GET\")\n\t\t\t// Allowing", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(expected, result)\n        defer.returnValue(result)\n\n    @defer.inlineCallbacks\n    def check_single_build_deferred(self, buildResult, verifiedScore):\n        yield self.setupGerritStatusPush(summaryCB", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'term'\n    self.category.set_href('href')\n    self.assert_(self.category.term == 'term')\n    self.assert", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror>\n        p\n        Map<String, AnnotationMirror>\n        AnnotatedTypeMirror\n        Pair<AnnotatedTypeMutability\n        ImmutabilityAnnotations\n        //qual\n        visitType\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       col.\n        col.prop(mat.use_shader = mat.use_shader = mat.use_transparen = mat.use_transparency = mat.use_transparency\n    @classmethod\n        mat.layout.layout.layout.render.prop", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            mapper64_command1 = map64_command10 = map6;\n            mapper6_command = map6 =\n                mapper6_IRQEnabled =\n       \n            if (engine.Memory.Latch", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(m_jPopupMenu.add(new JMenuItem(sTDocUrl)));\n            m_jPopupMenu.addSeparator();\n            m_jPopupMenu.add(new JMenuItem(sTDocUrl, \"Open Document", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Math.Max (min, Frame.H);\n\t\t}\n\t\tpublic override void LayoutSubviews ()\n\t\t{\n\t\t\tif (Frame.W > 0) {\n\t\t\t\tAnimateX (new Frame (Frame.X, 0", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   from django.utils.translation import ugettext_lazy as _\n    from apps.announcements.models import AnnouncementTwitterCrossPublication\n    class Meta:\n        verbose_name = _('Twitter cross-publication')\n        verbose_name_", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['.php'] = PhpLexer(startinline='^[ \\t]*<?(require_once.*)', rex\n\n# vim: set noet tw=100\n\n#\n# The documentation for Ktoto can be generated from this very\n#", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   '''INSERT INTO flight_log(sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration)\n                    VALUES(:sdate,:stime,:edate,:etime,:duration, :src_callsign", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_drop('projects').run()\n        conn.table_create('projects').run()\n        conn.table('projects').insert({'id':project_id, 'last_snapshot':timestamp}).run()\n    # Close the connection\n    conn.close().run()", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\t// Deian's skill_\n\t\t\t\t// I'm not sure if you're interested in the skill_instrument\n\t\t\tbreak;\n\t\t// Deian's skill_instrument\n\t\t\t// Deian's skill_r", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__\n        self.codestr = 'VOTE\n        self.codestr = 'EPI\n        self.codetail = 'E\n        self.coderep = ()\n        self.coderep = ()\n        self.codet", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, start, finish, status, task_uuid, task_data, host_data):\n        self.uuid = uuid\n        self.name = name", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary) == 0):\n    else:\n        raise AssertionError(\"primary.xml contains additional packages:\")\n    for key in primary.keys():\n        pkg = primary.items[key]\n        print(\"\\t\" + build_nevra(pkg", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       if self.optimize > 0:\n            inputs.extend(self._bytecode_filenames(inputs))\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -------------------------------------------------\n    # (called by outsiders)\n    def", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--output=' + log_name,\n        '--qsub_time', str(request['sge_submit_time']),\n        '--sge_submit_time', str(request['sge_submit_time']),\n        '--job_jobname', job", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        //[RolesRequired(\"Admin,SaveEventDelegate\")]\n        [RolesRequired(\"Admin,SaveEventDelegate\")]\n        [ValidateAntiForgeryToken]\n        [OutputCache(Duration = 0,", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} {1} {2}\", item.DisplayName, item.Value, item.ValueText));\n                }\n            }\n            return string.Empty;\n        }\n    }\n}\n#endregion\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"show\", \"downloadLink\": \"show\"}, decode=True)\n\n\n    def _get_download_link(self):\n        return self.url\n\n    def _get_download_link_chunk(self, chunk", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count == 0)\n\t\t\t\treturn null;\n\t\t\t// Find the closest harvestable cell:\n\t\t\tvar closestHarvestableCell = new Cell(self.Location, self.World, self.World.WorldActor.Tra", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcpd service failed\")\n                       return False\n                    self.logger.info(\"restarting dhcpd service\")\n                    self.tftpd.restart_dhcp_service(self.settings.dhcp", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder(EventSeverity.INFO, \"\");\n    }\n}\n\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           state = state.Suffix;\n        }\n        {\n        }\n        {\n            state.\n        }\n        }\n        {\n            state.\n        }\n        }\n        {\n            state = state;\n        }\n            _runLength = (uint", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Time String VR.\n        /// </summary>\n        public static readonly DicomVr TMvr = new DicomVr(\"TM\", true, true, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,\n\t\t\t\ton_start(", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.assertRaises(BitReaderError, BitReader(b\"\")\n\ndef test_insert_bytes(self, b\"abc\")\n\n\n\n\n\n\n    def test_into_into_be(self.\n        insert_bytes(10(16,", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    plt.plot(cr['combined'][app][test]['stats']['intervals'][0]['interval'],\n             cr['combined'][app][test]['stats']['intervals", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self.assertEqual(self.mockos.seteuid, self.mockos.seteuid, self.mockos.seteuid\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        self.setUIDGid\n   \n        self.\n   \n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.fillRect(x + 1, y + 1, controlSize - 3, controlSize - 3);\n\t\t\t\t\tg.set", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef getNumPatterns(short):\n  \"\"\"Returns the number of patterns and classes for the given shortness\n     short: 0, 1, or 2\n  \"\"\"\n  if short == 0", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset, value);\n    }\n    @Override\n    public Kind kind() {\n        return elementKind;\n    }\n    @Override\n    public Kind kindOfValue(Value value) {\n        return value.kind().elementKind();\n    }\n   ", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(ProjectTask.Project.Directory, relativePath);\n            if (File.Exists(assemblyFile)) {\n                return", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n    return string % args\ndef str_format_dict(string, **kwargs):\n    \"\"\"\n    A slightly modified version of str.format() that supports formatting of dictionaries\n    \"\"\"\n    return string % kwargs()\ndef str", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        Dlasd.dlasdq.dlasd.dlasdq.dlasd1; \n    i6)\n    }\n      i7 = 14 + i14 - 1 - 1\n      i6, i6, i21,", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name;\n\t\t\tstr += \"\\n\";\n\t\t\tstr += \"Transitions: \\n\";\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData,\n                Slot = SpellSlot.R,\n                Type = Spell.Del = 250,\n                Range = 150,\n                    MissileSpeed = 150,\n                    MissileSpeed = 150,", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE,\n                          close_f", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t// TODO: Add the code to start the core services here.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/// <summary>\n\t/// Initializes the AddIns.\n\t/// </summary>\n\tpublic static void Run", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tpublic override void Init (DataSet dataSet)\n\t\t{\n\t\t\tbase.Init (dataSet);\n\t\t\tif (dataSet != null)\n\t\t\t{\n\t\t\t\tif (dataSet.Tables.Count == 0)\n\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.retranslateUi(self, self.ui_groupBox)\n        self.retranslateUi(self)\n        self.retranslateUi(self)\n\n        self.retranslateUi(self)\n\n        self.retranslateBot)\n        self", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               setTafText( stationId, \"No TAF found for this station\" );\n            }\n            return super.onResult( result );\n        }\n    }\n    private void setTafText( String stationId, String text ) {\n        String textViewId = R.", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tQueryStatistics queryStats = stats.GetQueryStatistics(s.GetSessionCriteria());\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, queryStats.ExecutionCount, \"", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            if (refin != 0)\n            {\n                uiCRCITTS", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t/**\n\t*\n\t* @return the sentry's disguise module\n\t */\n\t\treturn getDisguiseModule();\n\t}\n\t/**\n\t* @return the sentry's", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller) };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller),\n                new Ceylon", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.drawingModeButtonGroup = self.drawingModeWidget\n        self.setDrawingMode()\n    def setDrawingMode(self, \n        self.setDrawingMode\n        self.l\n        self.lineS)\n        self.l)\n        self.set(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tif ( shouldSend )\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.SendGump( new SetPoint2DGump( toSet, m_Object, m_Object, m_Object, m_Object, m_Page ) );\n\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                  }\n                  else\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\t\tsb.append(array[i][j]+\" \"+\n\t\t\t\t\n\t\t\t}\n\t\tif (sb.append(line);\n\t\t\t\t\n\t\t\n\t\t\t\n\t\t\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //check that the order can be found that contains the unpriced line\n                                if (unpricedLine.Key < orderPurchaseESD.data", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic Type TaskTException {\n\t\t\tget { throw new NotImplementedException", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       assertEquals(0, \n        // TODO\n        //ACETarget.getACETarget(0);\n        //ACE_ACETarget.USER,\n        //ACE_ACCESS_TYPE.ACCESS_TYPE.\n        //ACE_ACCESS_TYPE.\n        //", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 origin)\n\t\t{\n\t\t\treturn v.ToVector2 () - origin.ToVector2 ();", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_stats(XDRUnion):\n    __union_type__ = endpoint_stats\n    @classmethod\n    def unpack_from(cls, unpacker):\n        return endpoint_stats.unpack_from(unpacker)\n    @classmethod\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tif (sending_data.Contains", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                List<ActivityBucket> list = convertToActivityBucketList(list);\n                notifyActivityReceived(FitnessLibrary.IFitnessLibrary.ExecutionStatus.Success, requestId, list);\n            }\n            if", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " print '                               %s%s>' % (function_name, ptr_name)\n  print '  }'\n  print ''\n  # The single use helper function\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A helper function to create", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='text/json')\n    response['Content-Disposition'] = (\n        'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    json_data = []\n    for item in items:\n       ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n            }\n            whereClause.addChild(whereClause);\n            whereClause.addChild(whereClause);\n            whereClause.addChild(", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        if self.request.POST.get(\"set_is_active\"):\n            return self.handle_no_permission(", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public key used to encrypt the hash value of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte> PublicKey {\n      get { return this.", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.StartIteration(matrix, result, d, r, uodd, ueven, v);\n            // Solve the system\n            _hasBeenStopped = false;\n            for (int k = 0; k < matrix.RowCount; k++)\n            {", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left].add(sortedNumbers[right]);\n\t\treturn new Apfloat[] {median};\n\t} else if (left == right) {\n\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t} else {\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if k in range(ts.num_edges_out_order\n            if self.parent\n            if __in_\n\n    k = \n           \n   \n    if = \n        in_ = \n        -1\n   \n        k = parent\n        while_", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for mapping in csv_mapping:\n            if mapping['name'] not in mapping_json['mappings']:\n                result[mapping['name']] = False\n            else:\n                result[mapping['name']] = True\n        return result\n    def test_enrich_sort", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && !slot.Value.LockTeam.IsBot)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" (\" + _status + \")\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tpublic static string GetMessageByWin32(int errcode)\n\t\t{\n\t\t\treturn GetMessage", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass TextFrame(DataFrame):\n    frame_type = FrameType.TEXT\n    defined_flags = Frame.defined_flags.copy()\n    def __init__(self, stream_id, data, *, end_stream=", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull() != cluster.RectangularBoundary)\n                throw new InvalidOperationException(\"Cluster boundary curve and rectangle do not match\");\n        }\n        /// <summary>\n        /// Returns the bounding box of the graph\n        ///", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double m_stepDown = (double (m_currently,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tnbttagcompound.setKey(\"color\", 0);\n\t\t\t\tnbttag", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\t_class,\n\t\t\t\t\t\t_methodHeader,\n\t\t\t\t\t\t_class,\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t\t\n\t\t[Test]\n\t\tpublic void SizeTestVerticalTrackBar ()\n\t\t{\n\t\t\tIntPtr handle;\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrack", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t}\n\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers.any());\n\t\tverify(instrumentationApplier());\n\t\taddInst", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn false;\n\t}\n\t\n\t\n\t@Override\n\tpublic AccessPath getAccessPath()\n\t\t\n\t\n\t\treturn accessPath;\n\t\n\t\n\t@Override\n\t\t\n\t\t\t\t\n\t\n\t\t:\n\t\n\t\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > narrowL) {\n              continue;\n            }\n            int max2 = wideRExtent[end][r.leftChild];\n            int max = (max2 > narrowR);\n            if (max) {\n              int min2 = wideLExtent", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync_build_file_list_file_invocation_list_file_list_file\n        ]\n        ]\n        pipe.assert_called_once_with_stdin.close_called_once_with()\n        popen.assert_called_fn\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tdbgManager.Value.SetProcesses(processes.ThreadsChanged(ThreadsVM.Invoke(\n\t\t\t\tthreadThreads();\n\tThreadsThreads_Processes_ThreadsThreads.UI.ThreadsChanged(Threads_Threads.Threads", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", String.valueOf( \"color\" );\n\t}\n\twriter.attribute( null\n\tvalue\n\tvalue(\n\t}\n\tvalue\n\tvalue( null\n\tvalue( )\n\t@\n\t<string>\n\n\t\t", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\nif n == 0:\n  status = 'w'\nelse:\n  status = 'a'\nwith open(name, status) as f_ID:\n  f_ID.write(str(reject_wall) + '\\n')\n  f_ID.write(", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if node.outputs[0].ndim,\n        # This is a Subtensor(node.inputs[1], node.op.idx_broadcastable(node.inputs[1].ndim\n        if node.ndim(node.ndim)\n            if", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   def save(self, commit=True):\n        \"\"\"Override save to add user and community to the instance\"\"\"\n        instance = super(EditCommunityPageForm, self).save(commit=False)\n        instance.content_developer = self.user\n        instance.community = self.", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               return value of the :meth:`.Query`\n                return value.\n        \"\"\"\n        def before_compile(query)\n        def wrap(query)\n        \"\"\"\n        query = event.\n        \"\"\"\n        def wrap(query):\n            if not retval=True\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   ConditionalDescriptor.module_class = ConditionalModule\n    ConditionalDescriptor.module_kwargs = {}\n    ConditionalDescriptor.module_kwargs['scope'] = Scope.content\n    ConditionalDescriptor.module_kwargs['sources_list'] = 'show_sources'\n   ", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            if isinstance(change, ArrayValueChange):\n                self.update_filter(self.data, change.old_value, change.axis, change.indices)\n                self.update_filtered_data()\n    def get", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\tCodeEmit(CodeEmitter, CodeEmitter\n\t\t{\n\t\t\t{\n\t\t\t{\n\t\t\t{\n\t\t\t\tif(Type == null)\n\t\t\t{\n\t\t\t{\n\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objActiveBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new MultiValuedMap<String>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n    }\n}\n</pre>\n\n<pre>\n *\n * @return", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isValidBinding() {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic boolean isValidBinding(IBlockEntity collector) {\n\t\treturn false;\n\t}\n\t@Override\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        intrinsicCohesion /= c.getComponents().size();\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                   v1 = minfo['flags'][flagname][version][docformat]\n                    v2 = flags[flagname][version][docformat]\n                    if v1 != v2:\n                        are_equal = False\n                        logger.info(\"ERROR: Document %", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  /**\n   * Converts a java.util.Date to a Datable.\n   * @param date the java.util.Date to convert.\n   *", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = SourceComponent;\n\t\tsourceEventBinding.SourceProperty = SourceProperty;\n\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindSourceEvent()\n\t{\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        }\n        }\n        }\n        List<String> nodePorts = new ArrayList<String>();\n        }\n        }\n        // AuthorizationName = containerNameName\n        List\n        // AuthorizationName.getContainerName\n       \n       \n       ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tpublic CoreForms()\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tCoreForm;\n\t\t\tpublic Form", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n    public static void main(String[] args) {\n        OMEData data = new OMEData();\n        OMEData data2 = new OMEData();\n        data.get(propertyKey);\n        data2.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement.objects.filter_uri_if_if_obj_for_obj_type_obj = None_if_if_obj_uri\n                if.if_obj_obj.filter_id_obj_obj_uuid = 'naa_uuid = None\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\");\n            }\n            buffer.Append(\");\n            buffer.Append(\");\n            buffer.Append(\n                buffer.Append(\");\n            buffer\n       \n        }\n       \n        //\n", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width katakana\n\t\t\t\tbytes[byteIndex++] = (ch & 0x1F) | 0x80;\n\t\t\t\tbytes[byteIndex++] = (ch & 0x3F) | 0", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, b, a)\n\n\ndef tricore_ld(obj, a)\n    dst = env.D[a]\n    obj.operands = [dst]\n    obj.operands = [src1, src2]\n   ", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties props = new Properties();\n\t\t\tprops.load(new java.io.InputStreamReader(new java.io.FileInputStream(location.getFilePath()), \"UTF-8\"));\n\t\t\t\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public static int getID()\n        {\n            return id;\n        }\n        /**\n         * Returns the ID of this game type\n         */\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (1, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (ControlFlags.DiscretionaryAclProtection, csd.Control", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, *args, **kwargs)\n    def __idle(self, func, *args, **kwargs):\n        def delayed():\n            func(*args, **kwargs)\n        GLib.timeout_add_seconds(1, delayed)\n   ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.Current.ReappSettings.ReLoadSettings();\n        if (PhotonEditor.Current.photonSettings = ServerSettings.Current.ServerSettings.ReapplySettingsToast(PhotonEditorGUI.SetupSettingsSaving.SetupStateLabel = photonSetup", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       View rootView = inflater.inflate(R.layout.message_view, container, false);\n        return rootView;\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (transport != null) {\n            transport", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cd = np.exp(2j * np.pi * self.ibzk_kc[k, :, s, :])\n            psit_G = np.einsum('ijk,klmn,njm->imn', phase_cd, a_Ux,", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       utkastController.createUtkastController.createUtkastRequest.setPatientReferens(PATI\n\n        }\n        utkastController.createUtkastRequest.setPatientRe\n        utkastRequest.setPatientFornamnFor", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tforeach (ILNode)\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t= block = null\n\t\t\t\t\t\n\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.isKinematic = rb.isKinematic = rb.Rotation = SmoothRotation = O\n\t\tFixedMovement\n\t\t\tvoid.SetBodyMovement\n\t\t\t\n\t\tfloat.Rotation;\n\t\t", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"\"\n        self.top = ClassFactory(InterfaceNodeSet)\n        self.mesh_step =", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 0] = (num & 0xff000000) >> 24;\n        out[outOff + 1] = (num & 0xff000000) >> 16;\n        out[out", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final PatternNode match;\n\t    private final PatternNode startNode;\n\t    private final PatternNode[] optional;\n\t    private final", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['from'] = value\n    elif key == 'fin':\n        node_json['to'] = value\n    elif key == 'node':\n        pass\n    elif key == 'parameters", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n      }\n      });\n      btn.addMouseListener(new MouseAdapter() {\n        public void mousePressed(MouseEvent e) {\n          if (btn.isSelected()) {\n            btn.", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport matplotlib.gridspec as gridspec\nimport matplotlib.ticker as ticker\nimport matplotlib.patches as mpatches\nimport", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.mm2px(0, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y += toolDiameterInPx)\n    {\n      for (int x = 0; x < p.getR", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n\t\t\t\t\tcv.put(Db.Table1.GROUP_NAME, newId);\n\t\t\t\t\tcv.put(Db.Table1.ID_GROUP, newId);\n\t\t\t\t\tdb.update(", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(IntPtr).BaseType);\n                m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n\n\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL = '/accounts/login/'\nLOGIN_REDIRECT_REDIRECT_REDISTRICT\n#\n####################\n# MIDDLEWARE #\n############\n############\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue.RemoveAll(q => q.Item == itemName);\n\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.showCurrentDirInfo()\n    \n    def treeView(self.clickedFileOrDir, self.clickedFileOrDir)\n    \n    def treeView(self.clicked.\n        self.currentDir = self.clickedDir.set.setVisible()", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.target\n    def create_method_gen_feature_name:\n    def:post_mappings.set(self.c.task_gen.\n        self.cdefs, feats_gen(self.c.append_before_source:", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        rospy.loginfo(\"Succeeded the LogicSolverServer!\")\n        self._as.s", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + 1 ] - chemical[ 0 ][ idx + reactorExtent ]\n\t\t\t\t\t, hdiv0 );\n\t\t\t\t\tdelta[ 1 ][ idx ] += MULT( chemical[ 1", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnType = typeManager.nextTimestampAdapter().of(timestampFormatFactory.getType(pattern));\n                if (columnType == null) {\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tpublic HbmPropertyMapping(MemberProperty mapper, MyPropertyMapping mapping, MyAccessorMapper\n\t\t{\n\t\t\tpublic HbmColumn(ColumnMapping column)\n\t\t{\n\t\t\t{\n\t\t\tColumn(cm => cm.Name(\"column1\");\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_enable = self.authentication\n        self.config_ntp_auth_enable = self.authentication\n        self.key_id = self.key_id\n        self.auth_mode = self.authentication\n        config_keyid\n       \n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.get_item(self.store.get_item_location(self.user_id)\n            self.assertEqual(self.store.get_item(self.user_id)\n        # Verify that the revision_key, self.", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((TEXT_CODE & 0xff) & 0xff));\n\n        updateWithCharBuff();\n        digest.update((byte) ((ELEMENT_CODE >> 24) & 0xff));\n        digest.update", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkinsertionloc(desc):\n    record = desc.AECoerceDesc(desc.type)\n    return aetypes.InsertionLoc(unpack(record, 'reco'))\ndef mk", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           formatters = new Collection<MediaTypeFormatter>();\n            if (api.ParameterDescriptions.Any())\n            {\n                formatters.AddRange(api.ParameterDescriptions.Select(p => p.Formatter));\n            }\n            if (api.ReturnType != null)", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            if self.on_create_line(record, value):\n                return True\n        return False\n    def", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegAL_PROPERTY_LOCATIONS, newLocations);\n        }\n        return beanFactory.getBean();\n    }\n    /**\n     * @author dward\n     */\n    @Override\n    public int getOrder() {\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if not line.strip():\n                    raise FatalError(\"Blank line found in %s\" % path)\n        except FatalError as exc:\n            module.fail_json(msg=str(exc))\n        finally:\n            if", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetService(\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid riid,\n            [Mar", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = ROLES + { USER_ID + \"/\" + ROLE_ID },\n            produces = MediaType.APPLICATION_JSON_VALUE,", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        This verifies the.\n        Returns:\n        True", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.nodeType == Node.node = nodeType == Node.nodeType == Node.nodeType == Node.nodeType == Node.nodeType == Node.DOCUMENT_NODE\n        if node.nodeType == Node.DOCUMENT_NODE\n", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\treturn EMSScenaSection#getLocationTypeObservation(objectToTest, diagnostician, map)\n\t\t\t}\n\t\t\t{\n\t\t\t\t}\n\t\t\t\t\t\t\t<Object,\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\tencoder.getLength() = decoder.getLength(encoder);\n\t\t\t\tencoder.setTypeAndLength(encoder.getOffset(decoder.getOffset(decoder)\n\t\t\t \n\t\t\n\t\t\t\n\t\t\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the player's location on the server\n        if (myWeapons.length > 0", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getTeam( GameEngine.model().getGame().getMaxNumberOfPlayer() )\n            .setColor( color );\n        GameEngine.model().getGame().getTeam( GameEngine.model().getGame", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"GET %s returned %d\" % (url, r.status))\n    if r.status != 200:\n        raise RuntimeError(\"GET %s returned %d\" % (url, r.status))\n    filename = get_filename(r.headers", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tfailureReason = e.Message;\n\t\t\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) != 1:\n        raise ValueError(\n            \"Reaction contains more than one carbon source.\"\n            \"Cannot compute yield.\"\n        )\n    return [\n        met.elements.get(\"C\", 0)\n        for met", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.filter(path__startswith=pootle_path)\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella and are\n       ", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='singletraining',\n            name='language',\n           ", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"Switch {} setting dstmac {} for {} on port {}\".format(self.name, dstmac, dstip, port_num))\n                self.dstmac_cache[dstip] = arp.hwsrc\n                self.add_link(self.name", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    m_RecentItems.add(item);\n    if (m_RecentItems.size() > m_MaxCount)\n      removeRecentItem(m_RecentItems.size() - 1);\n    update", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Skills[SkillName.DetectHidden].Value > 0 && target.Skills[SkillName.Hiding].Value > 0)\n                return false;\n            return true;\n        }\n        private static bool CanDetect(Mobile src, Mobile", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   // TODO:\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    public Date getTradeDate() {\n    //\n    //\n    //\n    //\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tmSize = 0);\n\t\t\t\tmWriteReport(mReadReport(mReadReportType);\n\t\t\t\t\tmReadData = true;\n\t\t\t\tmReadData.SetReportType(OutputReportType)\n\t\t\t{\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic MskJointVoComparator(int direction)\n\t\t{\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tdirection = SortOrder", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyy-MM-dd HH:mm:ss\" );\n\t\t}\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueFree()\n        }\n        }\n    }\n    }\n}\n    }\n       \n        int(N_units2BeglcText.allocNu = 0)\n        {\n            _glue\n            ExpandUnits.Alloc", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       navigate_to(rate, 'Edit')\n        navigate_to(rate, 'Add')\n        navigate_to(rate, 'Edit')\n        navigate_to(rate, 'Add')\n        navigate_to(rate, 'Edit')\n        navigate_to(rate, 'Add", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( _lockedToScratch )\n\t\t\t{\n\t\t\t\tthrow new AxiomException( \"Cannot write to a buffer that is locked to scratch buffer\" );\n\t\t\t}\n\t\t\tif ( _scratchToScratch )\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.tuning_type.value = self.orbital_position.value = self.scan_entry.value = self.scan_entry.value\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tself.create_entry.value.system.value.typeOf", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n        case ZMQ.ZMQ_TCP_KEEPALIVE_INTERVAL:\n            tcpKeepAliveIntvl = (Integer) optval;\n           ", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (PdfNumber = new byte[0];\n                for (int i = 0;\n                int i = 0;\n                for (int i = 0;\n                break;\n                }\n                break;\n            }\n            }\n            break;\n            break", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), 'foo.bar')", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        if not self.get_dual_flag(self.get_E2(self.get_options().get_resolution_dual_no_mat_list(self.get_options().get_options().get_options().get_E2_2_flag_no", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.ParseError\n        }\n        }\n        }\n        ///\n        [Test]\n        ///\n        ///\n        [Test]\n        public(0,\n        [\n        {\n        }\n        }\n        [TestMessage(123: '[1", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object remove(Object value) {\n\t\tfinal Object key = (Object) value;\n\t\treturn remove( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t}\n\t/// <summary>\n\t/// Records the end of the auction\n\t/// </summary>\n\t/// <param name=\"auction\">The auction</param>\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client'}\n        #return {'type': 'ir.actions.client', 'target': 'self'}\n        #return {'type': 'ir.actions.client', 'application': 'action_attendance'}\n        #return {'type': 'ir", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(0);\n\t\tif (parentRow == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\tif (parentRow.getColTestName() != null)\n", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = c.ReadStruct<POINT>();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The index of this item.\n        /// </summary>\n        public int Index { get { return index;", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_tab(maker.new_tab(cwd, profile))\n        self.set_title(self.title.get_title())\n        self.set_position(self.get_position())\n        self.set_skip_taskbar_hint", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               managedType = managedType = GetManagedType( structPart, managedType, arraySizeFragmentsFragments[0].ToArray.GetStructType = GetStructType = GetStructTypeInfo.GetConstructor.Array.MakeStruct( GetStructInfo().GetCon.Make.GetterAttributes", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null;\n\t}\n\t\t}\n\t\tset {\n\t\t\t// TODO:\n\t\t}\n\t}\n\t}\n\tpublic bool IsNotNullable {\n\t\tget {\n\t\t\treturn false;\n\t}\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n        #endregion\n        #endregion\n        #region private methods\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = _openssl_versions[protocol]\n        self.protocol_version = _openssl_versions[protocol]\n    def load_verify_locations_custom(self, ca_certs=None, capath=None):\n        \"\"\"\n        Load the CA bundle", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox2 = new global::Gtk.Gtk.\n\t\n\t\n\t.Gtk.Gtk.Gtk.VBox.Gtk.\n\t.\n\t.Gtk.VBox+Gtk.Label+Gtk.VBoxChild.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.connect_child_size_hint_child_size_text_size_hbox\n\n    for notebook.show_page_alignment.\n   \n    #\n    #\n        #\n        for sidePan\n        for panel in centerPan\n        notebook", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_N),\n    \"Go-to-definition\": QKey_D,\n    \"Go-F1\n    \"Go-line\": \"Go_CTRL + Qt.Key_F3 +", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileEditable()\n  {\n    return true;\n  }\n  \n  protected boolean isFileNew()\n  {\n    return false;\n  }\n  \n  protected boolean isFileVisible()\n  {\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(882, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n\n## Your task:\nExtend the `AlfrescoTagUtil` class by adding a new method `writeMarkedContentToHtml` that takes a `ServletRequest` and an `HttpServletResponse` as parameters. This method", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t}\n\t\tbyte[] data = new byte[] { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += current_sum;\n\t    \n\t    if (this.intVal != 0) {\n\t\tsum += 4;\n\t    }\n\t    \n\t    if (this.stringVal != null) {\n\t\tsum += this.stringVal.length", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if re.match(r'%s' % job, l):\n                    return True\n        return False\n    def find_env(self, name, lines):\n        for l in lines:\n            if re.match(r'^%s' % (name), l):", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier(mesh_json['mask_vertex_group_vertex_group_name\n        modifier_vertex_group_a\n        modifier_json['vertex_group'] = modifier_json\n        modifier.mask_text_map_\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                    rankCounts[i] = minLikelihoodRankCounts(minLikelihood, minRank", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               else:\n                    print(self.warn+\"[!] Invalid input. Try again..\"+self.blk)\n                    self.print_packets(self.packet_number)\n            except (EOFError, KeyboardInterrupt):\n                self.print_pack", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Location = new System.Drawing.Point(92, 137);\n\nA:\n\nYou have a line of code that is commented out.\n// \n// rptComboBox\n// \n\nYou need to uncomment it.\n\nA:", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'),\n            'django.None',\n            'True'}),\n            'db.fields.ForeignKey', 'auth.User'\n            'Meta'})\n           ", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n       \n        }\n        }\n        }\n        }\n        }\n        if (itemNameToXSD) {\n            }\n            returnSDOTypeName;\n        }\n        }\n        }\n        }\n        }\n        }\n       \n       ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       #+holiday_type.\n        #\n       \n        \"\"\"\n       \n        = self.write(self.holes_holid:\n       \n        , self.\n        ['get_by_holidata_id\n        = self.message(self.get_id", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set {\n        /// <summary>\n        /// <returns the grid\n        /// </summary>\n        /// <returns>\n        /// <returns>\n        /// <returns>\n        ///\n       \n       \n        ///\n        ///\n        ///\n       \n        ///\n        public", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name;\n        }\n    }\n    /// <summary>\n    /// Enumerates the controls on a Mixer Line\n    /// </summary>\n    public static class MixerControl\n    {\n        /// <summary>\n       ", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tif ( domainObject.getCareContext()\n\t\t\t\n\t\t\n\t}\n\t}\n\t\t\n\t}\n\t}\n\t\n\tif (valueObject\n\t{\n\t\t\t\t\n\t\t\t\t\t\n\t\t\n\t\t\n\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            notify_build_done(elapsed)\n        return status\n\nif __name", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\t//\t\treturn score;\n\t\t\t// This is the score for the best.getLabel.\n\t\treturn score.getP.get() = this.getP.getP(int(label.getP.getScore(true, getP =\n\t\tget", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Revision, gitStash.Message, gitStash.Status, gitStash.StashName, gitStash.StashId, gitStash.StashMessage, gitStash.StashMessage, gitStash", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n    # --------------------------------------------------------------------------\n    # Check that the job has assigned", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n        }\n        }\n        }\n        {\n            }\n    }\n    }\n    }\n    }\n    }\n    ///\n    if (System.WebService\n    }\n    {\n    }\n    }\n    }\n   ", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \", \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s;\n\t\t} else {\n\t\t", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.func == 'list':\n        args.func(archive_index, args)\n    elif args.func == 'encrypt':\n        args.func(archive_index, args)\n    elif args.func", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.putc(self.cmd_ss, self.bit_ss)\n        self.bit_ss, self.bit_ss, self.bit_ss = self.cmd_index, self.bit, self.bit_1\n        self.put(1)\n        self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n      // (, line 169\n      // (, line 1:\n      v_1:\n      do {\n        // (, line 17\n      do {\n        // (, line 18\n        // (, line 19\n        // (", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception e) {\n                System.err.println(\"Error creating object: \"+e);\n            }\n            if (o != null) {\n                cd.min_interval = 0;\n                cd.max_interval =", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_subject_key_ordered_subject_key_identifier:\n        def _get_subject_1\n       \n       \n        result\n       2500.get_certificate\n        n\n        self.\n       \n       \n       \n        super_module.c", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (s.find (i->second) != s.end ()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\\t\\", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # -- The first value is the first word of the interval.\n    #     The second value is the last word of the interval.\n    #\n    #     The first word is the first byte of the interval.\n    #     The second word is the last byte of the interval.\n   ", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tExpect(30);\n\t\t\t\tif (la.kind == 31) {\n\t\t\t\t\tSemErr(31);\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_qty\n            edi_doc['product_uom_id'] = line.product_id.uom_id.id", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions.setService.setReadOnly());\n        }\n        }\n        assertEquals(vf2,\n                     PermissionService.setPermission(virtualFolderRef,\n                     PermissionService.CREATE_CHILDR);\n        assertEquals(AccessStatus.\n        }\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_subsystem('input')\nThis line of code is expected to filter the devices to only those that match the subsystem 'input'. However, the test is failing with the following error:\n\n    AttributeError: 'list' object has no attribute 'match_subsystem'\n\n", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(token)\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device.main()\n    device", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    if uvmeasures(0,\n    (\n    uvfstat = []\n    rdset = \n    rd['ant = \n        outlines[i]\n    rd['\n    rd = ant\n   \n    cal\n   \n    r", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = new uint();\n        }\n    }\n}\n\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String deviceName : devices){\n            TunerManager.tunerList.addDevice = true;\n        }\n        return;\n        //\n        //\n        return tunerList;\n        return tunerList;\n        return;\n        returned;\n        if", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.STORAGE_CAPACITY) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER: line \" + lineCount + \" in mapping file is missing a regex or type\");\n      }\n      // log.info(\"PATTERN: \" + split[0]);\n     ", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #env.AppendENVPath('BIBINPUTS', os.path.join(env['BIBINPUTS'], n))\n            #env.AppendENVPath('BSTINPUTS', os.path.join(env['BSTINPUTS'], n))\n            #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   return\n    def features(self, self,\n    features = None\n    def features(self,\n        return_type\n    \"\"\"\n        \"\"\"\n        return Feature(\n        \"\"\"\n        \"\"\"\n        def features(self,\n        \"\"\"\n        \"\"\"\n        def features -", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       return self.destination, self.port,\n        return self.port\n    def interval\n   \n    from\n    @state:\n    state_info\n    def apply\n    if\n        if_name\n       \n       \n    if\n       \n       \n        if_init\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.is_displayed and\n            self.title.text == 'Automate Method' and\n            self.script.is_displayed and\n           ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n        return result;\n    }\n    public void subscribe(IAction subscribeTo) {\n        this.getConfig().subscribe(subscribeTo);\n    }\n    public void unsubscribe(IAction unsubscribe", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   def test_update_thread_id(self):\n        self.create_thread_id\n    @patch.object(self, \"create_sub_comment_id\"\n    def test_create_request.assert_request_request.request_makes.assert_request_error", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           if not env.get('WINDOWS_EMBED_MANIFEST', 0):\n                raise SCons.Errors.UserError(\"Manifest file %s exists, but WINDOWSTEMFLAG is not set to 1\" % manifestSrc)\n        else", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           MultiStatus errors = execute(getSelection(), getShell().getDisplay());\n            if (errors != null) {\n                MessageDialog.openError(shell, getProblemsTitle(), getProblemsMessage(), getProblemsMessage(), errors);\n            }\n        } catch (OperationCanceled", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\tif (meta.getAggregateType().length!=meta.getFieldName().length)\n\t\t{\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"AggregateRows.Init.AggregateType.Length\", meta", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regressions\n    # regressions\n    assert f('..-5..', last) == (d(2014,1, 12, 12, 30),\n    assert f('..', last)\n    assert f('..12:", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int x, int y, int z, int map = int(sint3.\n            {\n            {\n                   \n                    intm\n                    m_\n                    {\n                    }\n                    s[\n                   \n                   \n                    s,\n", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = session.sendline(suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest suspend log is not supported\")\n    @error_context.context_aware\n    def verify_guest_s", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       final Future<Boolean> rc = service.submit(pub);\n        assertThat(rc.get(), is(true));\n        service.shutdown();\n        try {\n            rc.get();\n        } catch (Exception e) {\n            e.printStackTrace();\n       ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestBefore(r);\n            }\n            return res;\n        } catch (BodyTerminatedException e", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn 1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t{\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t\telse if (", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.path:\n        self.fm.reload_content\n        self.fm.vcs.stage(self.fm.vcs.stage(self.fm.path)\n        \"\"\"\n        \"\"\"\n        #path\n        (self.\n        self.path", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringType ()\n\t\t{\n\t\t\t// TODO: Implement\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (MissingMethodException))]\n\t\tpublic void CreateInstance_StringType", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, None)\n        self.assertEqual(repo.changesets.count(), 3)\n        self.assertEqual(Signoff.objects.filter(appversion=self.", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", self.Log.debug(cmd)\n        self.send_message(self.control:\n       \n        #TODO:\n        # send_control_send.set_buffer\n        #TODO\n        #\n       ", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n/**\n * @param group\n * @param player\n */\npublic static void", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\nclass tokenrow(object):\n    def __init__(self, toks=None):\n        if toks is None:\n            toks = []\n        self.toks = [(t, s) for (t, s) in toks]\n        self.align = \"<\"", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        self.assertEqual(1, tree_model.get_iter_count())\n        self.assertEqual(1, tree_model.get_iter_count(tree_iter))\n", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof Grid) {\n\t\tGrid grid = (Grid) parent;\n\t\tGridColumn gridcolumn = (GridColumn) grid.getTag();\n\t\tgridcolumn.setValues(values);\n\t\tgridcolumn.setValuesDisplay(valuesdisplay);\n\t   ", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = ReadElement(element, \"ImageIndex\");\n                GrayImageIndex = ReadElement(element, \"GrayImageIndex\");\n                XmlNodeList nl = element.SelectSingleNode(\"Inventory\").ChildNodes;\n                Inventory = new InventoryEntry[nl.Count];", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\t\n\t\t\tfor(int i = 0; i < beans.length; i++)\n\t\t\t{\n\t\t\t\tcoll.add(beans[i]);\n\t\t\t}\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic ChangeOf", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Blake2b, 0x40, 0x3C, 0x3F, 0x3, 0x3C, 0x41, 0x32, 0, 0, \n\t\t\t.\n\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\t/**\n\t * Returns the full discount for tools.\n\t * @return The full discount for tools.\n\t */\n\tpublic static float getFull", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t\t\t\n\t\t\t\t\tLayer NextFrameClone = NextFrame.Clone ();\n\t\t\t\t\tLayer NextFrameBlendMode", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.getContextSnapshot() != null) {\n            if ((this.getContextSnapshot()).equals(other.getContextSnapshot())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    @Override\n    public boolean equals(Object obj)", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            responseVoice(p);\n        }\n        }\n        return response;\n    }\n    }\n    @Override(\n    case\n    }\n    }\n    }\n    }\n    ret = null;\n    }", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isAppLicence()) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + 0] = new Vector3(-0.5f, 0.5f, 0.5f);\n            newVertices[y * xSizeP + 1] = new Vector3(xPixelsPerTile -", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, testInt1, testInt2);\n\t\t\t\n\t\t\tLog.i(TAG, \"", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic int getBlock", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Object not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeObject(found.object);\n        }\n        out.close();\n        outs.close();\n   ", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           }\n            if (stati\n                stactics_videc_ptr,\n                stactics_vide_ptr,\n                stactics_vide_ptr,\n                stactics_v_select,\n                stactics_vide, 1,", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                var result = spell.CollisionCheckFrom.To2D().\n\n\n            {\n                .\n               ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isAdjacentTo(x, y)) {\n            return true;\n        }\n        return false;\n    }\n    private void doFinalOrientation(Graph dag) {\n        if (completeRuleSetUsed) {\n            if (verbose) {\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop.Children[i]);\n                }\n            }\n            return null;\n        }\n        #region Constructors\n        #endregion\n        #region Methods\n        /// <summary>\n        /// Initializes the element.\n        /// </summary", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentId == null) {\n            if (other.attachmentId != null) {\n                return false;\n            }\n        } else if (this.attachmentId != null) {\n            if (other.attachmentId == null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            continue;\n                        if (mobiles[i] == m_Item.From)\n                            continue;\n                        if (mobiles[i] == m_Item.From)\n                            return;", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\treturn true;\n\t\t\t}\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<SpaceInstLight> getSpaceInstLightsOfComponent(String componentId) {\n    return mock.getSpaceInstLightsOfComponent(componentId", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       final File file = (File) mListView.getItemAtPosition(key);\n                        if (file.isDirectory()) {\n                            final String[] children = file.list();\n                            if (children != null && children.length > 0) {\n                                final ArrayList", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.channel.close();\n\nBut I get the error:\n\n    java.lang.NullPointerException: Cannot invoke \"io.netty.channel.Channel.close()\" because \"this.channel\" is null\n\nI'm not sure how to fix this.\n\n\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               tipper_dict = self._j_dict = np.reshape(self.t_dict = None\n                tipper_dict = None\n                \n        # read_data_array = np.reshape(self.Z_array = None\n                # get_z_dict =", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getResources().getString(resourceOne, name);\n    }\n    return context.getResources().getString(resourceMany,\n                                                    String.format(context.getString(resourceTwo),\n                                                    getUnverifiedSendDialogDescription(context, recipients)));", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if g:\n            env[\"GONK_BIN\"] = self.get_bin_path(self.gonk", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    if isinstance(test, dict):\n                        test = test_cls.from_json(tests_root, test)\n                    tests[path].add(test)\n            self", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n            return;\n        }\n        compiledScript = null;\n    }\n    private ScriptingSecurityManager createScriptingSecurityManager() {\n        return new ScriptingSecurityManager();\n    }\n    private", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n        /// <summary>\n        /// Method to override whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n            throw new NotImplementedException();\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     transformed_grad = grad_E * self.y_stds[0] + self.y_means[1:]\n      transformed_grad = grad_E * self.y_stds[0] + self.y_means[1:]\n      transformed_grad = grad", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(this.id == null)\n\t\t\treturn 0;\n\t\tif(obj.id == null)\n\t\t\treturn 0;\n\t\tif(this.id.equals(obj.id))\n\t\t{\n\t\t\tif(this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[2], stacks[3]));\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        final StackImpl stack = createStack(\"stack-id\", \"stack", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depth = new ParameterImpl();\n        depth.setParameterCode(\"depth\");\n        depth.setParameterValue(Integer.valueOf(depth));\n        pf.addParameter(depth);\n        crawlParameters.add(pf);\n        //EXCLUSION REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tLNodeFactory(candidate, sub, out (LNode _)\n\t\t\t(Symbol name, out LNode _);\n\t\t\t\t\n\t\t\t\tif (kind == null)\n\t\t\t\t\treturn VList<LNode>\n\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = 1;\n                        extendedFarmLocation = objAiBase.Position;\n                        break;\n                    }\n                }\n                if (extendedWillH", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setControl(control, ims.getControl(1, \n\t\t)\n\t{\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t// This is to avoid\n\t\t\n\t\t\n\t\n\t\t\n\t\n", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   print(\"Uninstalled the following packages: {}\".format(\", \".join(PACKAGES_TO_UNINSTALL)))\n@task\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r.subs.new().value = 1\n        with self.assertRaises(AssertionError):\n            r.subs.new().value = 1\n    def test_o2m_readonly(self):\n        \"\"\" Tests that readonly modifiers work as", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, t, (x, t, (x, t, t, x)) == Sum(x, t, x, t)\n    assert Sum(x, x, x)) == Sum(x, x, x)) == Sum(x, x, x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tSystem.String a2;\n\t\t\tcheckType(l,3,out a2);\n\t\t\tvar ret=UnityEngine.WWW.", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._oldStartingIndex = startingIndex;\n\n            this._newStartingIndex = startingIndex;\n\n            this.InitializeAdd(action, changedItems, startingIndex);\n\n        }\n        private void InitializeAddOrRemove(NotifyCollectionChangedAction action, IList changed", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           XMLStreamReaderReader reader = XMLStreamReaderReader = new XMLStreamReader = new ByteArrayInputStream(objectToXMLStreamReaderReader;\n        }\n        class = null;\n            if(objectToo\n        }\n        XMLStream = null(desc);\n        {\n        }\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                break;\n                case Param.CampusId:\n                    c.CampusId = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.Campus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t// read the iconDir.\n\t\t\t\t\t\tif (bitmap.Width;\n\t\t\t\t\tbitmap.Width = iconSize;\n\t\t\t\t\tbitmap.Height = iconSize;\n\t\t\t\t\n\t\t\t\tif", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.status & VISITED) {\n           \n    \n *is this a)\n    \n    \n   \n     this label to subroutine this basic block of this of the subroutine the method\n     the number of this basic_1\n    return a label\n", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __domain, __mStack);\n            var result_of_this_method = ILIntepreter.ToStringObject(ptr_of_this_method", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t}\n\t\n\tprivate void setBlockOutline(LineStyle lineStyle) {btnShowOutline.setSelection(lineStyle == null);}\n\t\n\tprivate int getPosition() {return btnShow", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self._getCurrentValue( driver, \"Image\"\n\n    def test_getCurrentValue( driver, \"Image\"\n        self, \"Image\"\n        # Go\n        self, \"\n        self.\n       \nvalue\n        \"\n       \n\nvalue)\n\n\n        #", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport._parse_kexgss_continue(m):\n        return self.transport._parse_kexgss_kexgss_kexgss =\n        self.\n        \"\"\"\n        return\n       \n        hostkey\n        self.x.\n       ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = new DefaultMutableTreeNode(\n                    new DefaultTreeModel(tree, true));\n            if (node.getParent() != null) {\n                DefaultTreeModel parentModel = (DefaultTreeModel) node.getParent().getParent();\n                parentModel.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code))\n                return result\n            \"\"\"\n            \"\"\"a class that will be used to create the payslip\"\"\"\n            class SalaryRuleCategory(BrowsableObject):\n                def __init__(self, code", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = MfracToMfrac(mvir, zi, frac=200.0)\n    #MfracToMfrac\n    #Mfrac\n    mfracToMfrac\n    mfrac_arr = MfracToR, h,\n   \n   \n", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (font.getStringBounds(\"A\", getTextFont()).getWidth() + \n                font.getStringBounds(\" \", getTextFont()).getWidth());\n        d.height = font.getSize();\n        return d;\n    }\n    \n    @", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,y,ref_p", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)\n\t\t{\n\t\t\t// TODO: add code to save settings\n\t\t\t// TODO: add code to close windows\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self,\n                params[0], params[1], params[1], params[2])\n    if not in):\n        self.__bins(self.SetContent\n       \n       \n        return\n        self.dim(index)\n    if type(index)\n        if", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getAllMessages(), query.getPagingOrder());\n        }\n    }\n    public Query next(XmppConnection connection, Query query) {\n        synchronized (queries) {\n            for (Query query", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\tif (ret.size() == i)\n\t\t\t\t\tbreak;\n\t\t\t\tfinal byte[] l = new byte[23];\n\t\t\t\tret", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield RawBytes(self, \"body_data\", self[\"body_size\"].value, \"Body data\")\n    if self[\"body_size\"].value > 0:\n        yield RawBytes(self, \"body_data\", self[\"body_size\"].value, \"Body data\")\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called by the engine when a message is received.\n\t * \n\t * @param message\n\t *          the message received\n\t */\n\t@Override\n\tpublic void reportMessage(String message) {", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       req = Request(environ)\n        if req.path.startswith(b'/'):\n            req.path = req.path[1:]\n        for path, app in self.apps:\n            if req.path.startswith(path):\n                req.path = req.", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\tmodel = Model( data )\n\tmodel = Model( self.hashed[ \n\t( self.hashes[ xset , ( xsetfield\n\tself.probs[ xset = self.data.evaluate( ysetfields[ xsetfields = self\n\t\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) < chance)\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a list of enumerated values\n            # Create a single addressMap or addrmap_el\n        return_value\n        return_value\n        # Create a register\n        reg_value = None\n        #\n       \n        #\n        #\n        #\n        #\n", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                MessageBox.Show(\"No modules found!\");\n            }\n        }\n    }\n}\n\n\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                object obj = (object)\n                {\n                return (obj)\n                {\n                }\n            }\n            }\n        }\n        }\n        }\n        [Description]\n        [\n        }\n        {\n        }\n        [DefaultValue>\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(textureHash = textureHash)\n                {\n                    return this.texCoordArrayBuffer.length\n                float.\n                floatBuffer.length);\n                floatBuffer.length.length;\n                this.texCo\n                return\n                return this.texCo.float", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        d.Close();\n                        oldDrivers.Add(d);\n                    }\n                    else\n                    {\n                        old", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if crs, units, center, resolution, upper_left_extent, area_extent, units, units, center, upper_left_extent, units, upper_left_extent, units,\n    if units\n    \"\"\"\n    \"\"\"\n   \n    \"\"\"\n   ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.setInitialState(QUEST.start)\nQUEST.addTalkId(WK_ROMP)\n\n# Quest items\nQUEST.ingot = SI_ORE\nQUEST.chosen = \"? ? ?", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t}\n\t\treturn string.Empty;\n\t\t}\n\t}\n\t\t}\n\tpublic", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           Attributes = new AttributeCollection(new List<AttributeInfo>\n            {\n                new AttributeInfo(\"Position\", 0, 0, VertexAttribPointerType.Float, false, 0, 0, VertexAttribFormat.Position | VertexAttribFormat.Normalized", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.metabolites._reaction = set()\n        self.reactions._reaction = set()\n        self.genes._reaction = set()\n        self.solution =", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x++)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(x);\n\t\t\tif(vo != null)\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\n\t\t\t\tif(current.y\n\t\t\t\t\t\treturnValue[i]\n\t\t\t\t\t\t\t\tint current.x,x,\n\t\t\t\t\tint x,y,\n\t\n\t\t\t\n\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setInterpolator(new DecelerateInterpolator());\n        mListView.setLayoutTransition(set);\n    }\n\t\n\t@Override\n\tpublic void onBackPressed() {\n\t\tif (mNavigationView != null) {\n\t\t\tif (", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.IsFieldKeyNull())\n                {\n                    if (HighestNumber < PartnerInterestRow.FieldKey)\n                    {\n                        HighestNumber = PartnerInterestRow.FieldKey;\n                    }\n                }\n           ", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(i);\n\t\t}\n\t\t\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
