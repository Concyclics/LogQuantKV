{"pred": "\t\t\tm_Registered = true;\n\t\t\tm_Registered = true;\n\t\tif ( addNew = true );\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif ( addNew )\n\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        a.seek(0)\n        buff = a.read_", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    # Open the video page\n    video_page = VideoPage(self.browser)\n    video_page.open_video_page(video_id)\n\nThe error I get is:\n\n    Traceback (most recent call last):\n      File \"test_video_page.", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"name\", OLStyleValue.class.getName(), \"name\");\n\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class.getName(), \"value\");\n\t\t\t\twriter.addAttribute(\"type\", OLStyleValue.", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef _start_requested(self):\n        self.start_btn = w.start_btn\n        if self.start_btn.isChecked():\n            self.start_btn.setChecked(False)\n            self.start_btn.setChecked(False)\n            self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map, SR_Utilities.GetRandomInt(1, 1000000));\n                    if (loc != null)\n                        mob.SendMessage(", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       for (int i = 0; i.length();\n        }\n        for (int i = 0; i < 0;\n        encodedChain = new X509,\n    }\n    }\n    }\n    }\n    @Override\n    CertificateMsg.", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       sp = new JESpace(name, path);\n        spaceRegistrar.put(name, sp);\n        return sp;\n    }\n    public static <K,V> JESpace<K,V> getSpace (Class<K> keyType, Class<V>", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   return self.help(self.make_response)\n    def do_get(self, environ,\n        # return self.dispatcher.wsdl(self.dispatcher.name\n        if self.path(self.dispatcher.wsdl(self.dispatcher.name.path", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.mark_status_as_repeated(status_id)\n    def lock_status(self, status_id):\n        self.webview.lock_status(status_id)\n    def unlock_status(self, status_id):\n       ", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n        }\n    }\n    def action_extract_archive(self,\n        return self.get_process_data(status_id,\n        \"login\": login.decode('UTF-8'),\n        \"status\": Operation.load(status_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Equals\");\n\t\t}\n\t}\n#endif\n\t}\n}\n#endif\n}\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return self.trust_managers.getAcceptedIssuers()\n    def getClientAliases(self, kwargs):\n        aliases = []\n        for trust_manager in self.trust_managers:\n            aliases.extend(trustManager.", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       request.setAttribute(\"domainInfo\", manager.getDomainInfo(domain));\n        // FIXME: This is a hack.  We should be able to get the domain info from the\n        // mail manager.\n        request.setAttribute(\"domainInfo\", new DomainInfo(domain));\n    }", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__datastream_protocol = self.__encoder.get_datastream_protocol\n        self.__datastream_protocol = self.__datastream_protocol.datastream_protocol\n    def __data_stream_protocol = self.__datastream_protocol = self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\n\t\t\t\tif (iter.Path.ItemAt(0).ToString() == \"0\") {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, column1));\n\t\t\t\t\toption1 = (", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n               \n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tpersons.put(id, create(id, serialize(id)));\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic String getSavePath()\n\t\t{\n\t\t\treturn Capitalism.SAVE_PATH;\n\t\t}", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\taddField(new FieldEditor(AUTO_SAVE, \"autoSave\", getFieldEditorParent()));\n\t\taddField(new FieldEditor(AUTO_SAVE_TIME, \"autoSaveTime\", getFieldEditor(\t\t(\t(\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.RemoveEntry( from );\n            }\n        }\n        public override void OnSphereCast()\n        {\n            Caster.SendAsciiMessage(\"Target selected\");\n            FinishSequence();\n        }\n\t}\n}\n}\n\n\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_for_session.\n        \"\"\"\n        \"\"\"\n        @classmethod\n        \"\"\"\n        def _connection_for_session.get_bind(self, mapper,\n        \"\"\"\n        @classmethod\n        def _connection_for_session.\n        \"\"\"\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn instanceNames.get(name = name;\n\t}\n\t\n\t}\n\t\n\t\t\t\n\t\t\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   classmethod = stream_request_body.\n    return wrapper\n    @stream_request_body_execute_request.\n    @asynchronous\n    return self.request.path=add_request.path=addslash(method.execute_request.path=method.execute_request.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag (\"div\");\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View v in Views)\n\t\t\t\tv.", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   args = parser.parse_args()\n    user = args.user\n    password = args.password\n    coordfile = args.coordfile\n    outpath = args.outpath\n    wigle_downloader = WigleDownloader( user, password, coordfile,", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i)\n                {\n                    if (i.SkillBonuses.HitPhysicalAttack)\n                    {\n                    if (i.SkillBonuses.GetSkill(i.SkillBonuses.GetSkill(i)\n", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.extend(android_builds(build, platforms))\n    else:\n        builds = android_builds(build)\n    # Build the button\n    if simple:\n        if check_old_fx:\n            if l_version:\n                return jinja2.", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID);\n\t\tif (stateBeansList!=null && !stateBeansList.isEmpty()) {\n\t\t\tstateBean = stateBeansList.get(", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Parent is MethodCallExpressionSyntax ) {\n                    MethodCallExpressionSyntax methodCall = ( MethodCallExpressionSyntax ) argumentSyntax.Parent;\n                    if ( methodCall.Arguments.Count > 0 )", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.assert_children(self.split_test_usage_key, self.split_test_usage_key, self.assert_children(self.split_test_usage_key, self.split_test_usage_key, self.split_test_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfName(\"Encoding\", encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = cell.getNumUsagesIn()", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       return new ListenableFutureTask<>(callable);\n      }\n      return null;\n    }\n    @Override\n    public void set(ListenableFutureTask<?> task) {\n      this.task = task;\n    }\n    @Override\n    public void cancel() {", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # TODO: add table for policy profiles\n    # TODO: add table for policy profiles\n    # TODO: add table for policy profiles\n    # TODO: add table for policy profiles\n    # TODO: add table for policy profiles\n    # TODO: add table for policy profiles\n    # TODO:", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles, sequences);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tnotifyPoseListeners(timestamp, skeleton);\n\t}\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           writer.AddAttribute(\"onclick\", Page.ClientScript.GetPostBackEventReference(this, \"\"));\n            base.Render(writer);\n            }\n        }\n    }\n}\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tsetDamage(damage);\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\tItemStackHelper.write", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + super.toString() + \", probability=\" + probability + \", scopes=\" + scopes + '}';\n    }\n    /**\n     * Add a scope.\n     *\n     * @param scope The scope to add.\n     */\n    public void addScope", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(t, {'itype': 'fqdn'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n    assert len(i)", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(pk=1)\n        o = Organization.objects.get(pk=1)\n        p.owns.append(o)\n        o.employees.append(person)\n        o.save()\n        p.save()\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if self._interactive:\n        self._interactive\n                self._figure_writer.save_name_var_name\n    def _plot_im(z_name, z_min=z_min, z_max=z_max, z_max=z_value,", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (path.Contains(\"\\\\\"))\n                {\n                    path = path.Substring(0, path.LastIndexOf(\"\\\\\"));\n                }\n                if (!_rootFolderService.IsValidRootFolder(rootFolder, path))\n                {\n                    _rootFolderService", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid'):\n            if self.request.has_key('inreply'):\n            if self.request.has_key('inreplyindex):\n            if self.request.has_key('inreply):\n            if", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset {\n\t\t\t\tm_LandBlock = m_LandTile[x][y] = m_LandTile[][][][][] = null;\n\t\t\tm_LandPatches = new Tile[][BlockWidth][];\n\t\t\t}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = String.Format(\"sip: {0}\",\nanswers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart = new DateTime(int.Parse(textDateStart.Text), DateTimeFormatInfo.InvariantInfo.GetAbbreviatedMonthName(", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       column_headings = column_headings = column_headings\n        column_headings = column_headings = column_headings = column_headings\n        column_headings = column_headings = column_headings\n        # Skip the blank line\n        #\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return {'success': True}\ndef user_create_rest(context, data_dict):\n    model = context['model']\n    user = context['", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble confidence = confidences[parentIndex] / (numberOfPartitions - 1);\n\t\t\t\t// setting outcome\n\t\t\t\tnode.getChildren().get(predictionAttribute.getMapping().get(outcomes[parentIndex])).setOutcome(", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (ch, offset, int value = _category;\n      }\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override\n      @Override", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired && !StringUtil.isBlank(studyFormName)) {\n            return ValidationResults.REQUIRED_FAIL;\n        }\n        if (StringUtil.isBlank(studyFormName)) {\n            return ValidationResults.SA", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Dropping client {0} because {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingE", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'views':\n    views()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    print 'merdaa'\n    x", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get unique key values\n  retVal = self.__getUniqueKeyValues( typeName )\n  if not retVal[ 'OK' ]:\n    return ret", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot);\n\t\t}\n\t\tvoid IBotRespondToAttack.RespondToAttack(IBot bot, Actor self, AttackInfo e)\n\t\t{", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutput_columns(plan.columns.getColumns());\n        catalogStmt.setOutput_columns_size(plan.columns.getColumns().size());\n        catalogStmt.setOutput_columns_type(plan.columns.getColumns().get(0).get", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(226, 20);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// comboBox1\n\t\t\t// \n\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.StopBits = (byte)bits;", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_edit_profile(self.user)\n    def test_user_with_cobrand(self.user)\n    def test_user_with_cobranding(self.user)\n    def test_user_with_cobranding_test_", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, remaining_argv = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\n    if len(remaining_argv) == 1:\n        # print \"Running tests\"\n        unittest.main(argv=[sys.argv[", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself.updateAPList = self.getAPList(self.list, self.list, self.list, self.getAPList, self.getAPList, self.getAPList, self.list, self.list, self.list, self.apList, self.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = font.GetFontDescriptor(BaseFont.DESIGN_NEW, BaseFont.DESIGN_NO_BROKEN_LINKS).GetWidthPoint(fCode, fontX, fontY, fontX + font.GetWidthPoint(fCode, fontY),", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results).toArray(new String[results.length]);\n  }\n  \n  /**\n   * Load a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   *\n   * @param key The key to", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-89.99, 89.99, 18.987)\n        # Test points are on a regular grid, but with a different number of\n        # points in each dimension.\n        x_points = x_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            if (toolStripButtonConvertToBytes.Enabled)\n            {\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    return 0\n    return 0\n\ndef load_wav_dirs(wav_dir):\n    sample_rate = scipy.io.wav.shape = sample_rate, sample_rate = \n    data = scipy.io.from_wav", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Returns the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public int GetRefCount(TK", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n        }\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout();\n        this.ResumeLayout();\n        this.SuspendLayout(\n        }\n        this.", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   GLUT = _NullPlatform()\n    GLUT.install( top_level_module.GLUT )\n    GLUT.install( top_level_module.GLUT_GUARD_CALLBACKS )\n    GLUT.install( top_level_module.GL", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.kEnd);\n        }\n    }\n    private void writeUint64(final DataOutput header) {\n    }\n    private void writeUint64(final DataOutput header)\n    private void writeUint64", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 * (float) (System.currentTimeMillis() - start) / (float) rampDelay);\n                if (animation.isInterrupted())\n                    break;\n                repaint();\n                try {\n                    Thread", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.DownloadItems().Single().\n        }\n        }\n        }\n        }\n        [Test]\n        public void\n        public void\n        {\n            GivenGlobalSeedLimits()\n        }\n        }\n    }\n    }\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, wepar, ItemId.ItemWeparBerry);\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       SersicMain(1)\n        Sersic(1)\n        # Add\n        #Add(1)\n        #Add(1)\n        #Add(2)\n        #Add(2)\n        f.writelines(['A) #0) \n        #", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x10) >> 1);\n                    i += ((b & 0x08) << 4);\n                    i += ((b & 0x", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key\n    def _create_course_updates(self):\n        \"\"\"\n        Create course updates.\n        \"\"\"\n        course_details = self._course_details\n        course_details['start_date'] = self._course_start_date\n        course", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\tif(chance < 0) chance = 0;\n\t\treturn", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # If the config directory doesn't exist, create it\n        # If it does exist, we should check to see if the meter is there\n        # If it is, we should delete it\n        # If it isn't, we should create it\n        # If the config directory doesn'", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy.\n\n        this.chkPrivacy = true;\n        this.chkPrivacy.Size = new System.Drawing.Size(new System.Drawing.Size(\n        this.chkPrivacy.Size = new System.Drawing.Size(new", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.archive.add_file(self.archive.new_director()\n        self.log_plugin.info(\"\")\n        self.archive.setup_director()\n        self.archive.archive.add_log_plugin_name = self.archive.add_", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionBasicFossil):\n    def getSessionId(self):\n        \"\"\" Session Id \"\"\"\n    getSessionId.produce = lambda s: s.getId()\n    def getSessionTitle(self):\n        \"\"\" Session Title \"\"\"\n    get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.out.println(\"Error importing message: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().toString(), subfoldersCheckbox.isSelected(), messageWriter", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\t\tif (value instanceof Integer) {\n\t\t\t\t\t\t\tlayer = ((Integer)value).intValue();\n\t\t\t\t\t\t}\n\t\t    \t}\n\t    \t}\n\t    \treturn layer;\n\t\t}\n    \t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void willBeExecuted(GraphObject object) {\n                GraphUser user = (GraphUser) object.getProperty(RESPONSE_OB", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.strength = emotion.strength / sum;\n\t}\n}\n\n\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at': constants.SPLITED_FINIS_STARTED,\n            'JOE_JOE_AT_JOE_JOE_JOE_JO_JOE_JO_JOE_JOE_", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        if ZoneLetter < 'N':\n            return (0,0)\n    # Compute longitude\n    if NorthernHemisphere:\n        if ZoneLetter < 'N':\n            return (0,0)\n        else:\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[user.username]))\n    else:", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @action(self.field_names = self,\n        field_names = [\n        'license_approved,\n        'license_approved_url,\n        self.is_project_reviewed_whiteboard_url,\n        return self.is_license", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach(KPFormCustomization kpfc in m_vForms)\n\t\t\t\t{\n\t\t\t\t\tif(kpfc.TypeName == str", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public String getIdentifier()\n    {\n        return identifier;\n    }\n    /**\n     * @param identifier\n     */\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           if flag == 'include':\n                new_positional_tags_list.append(TagRegex(regex, True))\n            elif flag == 'remove':\n                new_positional_tags_list.append(TagRegex(regex, False))\n            else:\n                raise", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer:\nfrom scapy.fields import FlagsField, ShortField, XByteField, X3BytesField\nfrom scapy.layers.obis import OBIS, OBIS_Prefix\nfrom scapy.packet import Packet\nfrom scapy.config import conf\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\t\n\t\t\t\t\tself.add_to_connection_key, self.add_to_connection, self.add_to_connection)\n\t\t\tself.items.add_to_connection(self.items)\n\t\tself.add_to_connection", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           {\n                AddSpell(typeof(Reg.Garlic, Reg.Nightmoss, Reg.MandrakeRoot, Reg.Garlic, Reg.MandrakeRoot, Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot, Reg.", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.pop(exc)\n        if self.request:\n            self.request.close()\n        if self.session:\n            self.session.close()\n        if self.flashes:\n            self.flashes.clear()\n        if self.preserved:\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, needs_columns=False)\ndef _pubsub_consumer(session, cluster_id, needs_columns=False)\ndef pubsub_consumer_id,\n    def_id, cluster_id,\n    def_id,", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        rot_dir = rot_dir / np.sqrt(np.dot(rot_dir, rot_dir))\n        # Compute the weighting\n        w = np.exp(-q *", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.providerType = self.providerType\n    self.url = self.url\n    self.url = self.url\n    self.url = self.url\n    def _buildURL(self, url):\n        if self.url:\n            return self.url\n    def", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (CultureInfo.CurrentCulture);\n\t\t}\n\t\t\n\t\tpublic static Font", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value.Properties.Count, Is.EqualTo(1));\n\t\tAssert.That(obj.Properties[0].Value.Properties[\"In this test it is an object.\"], Is.EqualTo(\"It is an object.\"));\n\t", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, null, null);\n                Topic b = getVertexTopic(h, null, null);\n                edges.add(new T2(a, b));\n            }\n            return edges;\n        }\n        @Override\n       ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    d1 = ds.get(col1=\"deform\",\n                  col2=\"volume\",\n                  col_rate=0.04,\n                 lut_identifier=\"LE-2D-ana-2D\n    \"\"\"", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.compareGraphs(args[0], args[1]);\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.105200',\n                    u'AvailabilityZone': 'us-east-1b'}]\n        assert not alert.lowest_spot_price(history, 'g2.2xlarge', 'Windows', '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the consistency of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t\tboolean", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Dispose();\n\t\t\tOpenGL.glDeleteVertexArrays(1, vao);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteBuffers(1, vertexBuffer);\n\t\t\tOpenGL.Check", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_error\n    @property\n    def project_error(self):\n        return self._project_cov_mat_error_mat_cov_mat_inverse\n        return self._project_cov_mat\n    @property\n    def x_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n     */\n    @Override\n    public String toString() {\n        return new ReflectionToStringBuilder(", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = accountId = Accounts.getAccounts.get(walrusBucket.getBucket.getBucket = Accounts.getBucket.getOwningAccounts.getCanonicalyAccount.getOwnerAccount.getOwnerAccounts", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           {\n                if (this.IsDisposed)\n                    throw new ObjectDisposedException(\"FolderExplorerComponent\");\n                if (value == null)\n                    return;\n                if (value.IsChanged)\n                    return;\n                if (value == _selectedFolderChanged", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       CanDoActionTestUtils.runAndAssertCanDoActionFailure(\n                setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Sparse, StorageType.ISCSI),\n                EngineMessage.VM_TEMPLATE_NAME_TOO_LONG);\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.StepChange = 1D;\n\t\t\tthis.spinbuttonCheckPeriod.Numeric.NegativeButton.Clicked += (object sender, System.EventArgs e) =>\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.logger.log(\n        self.logger.log(\n        )\n        #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldnull);\n\t\t\t//ilgen.Emit(OpC", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   Builder MergeFrom(byte[] data, pb::bnet.System.IO.Stream input;\n    }\n    }\n    public static Builder BuildParsing {\n      return new Builder();\n    }\n    public Builder MergeFrom(byte[] data;", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = this.vertices.get(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code> in the index buffer.\n     * \n     * @param i", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (m_useLanguages)\n        if (m_useLanguages)\n        }\n        String m_useLanguages = m_useLanguages;\n        }\n        String m_useLanguages =\n        String m_useTypes = \"\n        String useTypes =", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tif (dynamicHeight)\n\t\t\t\t{\n\t\t\t\t\ttextRect.sizeDelta = new Vector2 (placeholderRect.sizeDelta.x, 0f);\n\t\t\t\t\tyield return new WaitForSeconds (animationDuration);\n\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = (int)GetLargeTextSizeF().Width;\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n    }\n    }\n    }\n\n\n### Response: The provided C# code", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            Users.Add(lastUser);\n        }\n        private static void SendEmailsToUsers(DataTable AErrors)\n        {\n            foreach (string user in Users)\n            {\n                SendEmailForUser(", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Game.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // get the row\n            if (Row.Discounts.Discounts.AddAccommodationCosts.Value = 0;\n            }\n            {\n                if (Row.Discounts.Count == 0)\n                {\n                    if (Row.Dis", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementsRequirementReason = namedtuple('PayloadRequirementReason', ['reason', 'strong'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t{\n\t\t\t}\n\t\t}\n\t\t\t\tNotifyPropertyChanged(\"CustomCustomEnabled\");\n\t\t}\n\t}\n\t\t\t\tNotifyPropertyChanged(\"CopyRange\");\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\t\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalArgumentException(\"BugInstance \" + bugInstance + \" has a null source line\");\n            }\n        }\n    }\n    /**\n     * @param bugInstance\n     *            the BugInstance", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\t}\n\tpublic override void Serialize( GenericReader reader )\n\t{\n\t\t}\n\tpublic override void Deserialize( GenericWriter )\n\t{\n\t\t}\n\tpublic override void Deserialize( GenericReader )\n\t{\n\t}", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"LaneClearR\")\n        {\n            }\n        }\n        }\n        private void\n        {\n            if (Menu.GetBool(\"JungleClearQ\")\n            {\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        for child in tree.findall('./gds:Ort'):\n            if child.attrib['{http://www.w3.org", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.resolve_models('testsuite')['test_model'],\n            field_model_def\n        )\n        clean_field_model_definitions()\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var fields = new[] {\n                    {\n                    \"create window MyInfraWidening\",\n                    :\n                    namedWindow\n                    :\n                    {\n                    \"create window MyInfraW#keepall\n                    :\n                    \"\n                ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def add_orbit\n       \n        return self._simulation.copy()\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        if other is a float\n       \n        if other isinstance(Particle):\n            if other == Particle\n            other = other\n        if other == Part", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = self.browse(cr, uid, view_id, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setClientProperty(BasicHTML.propertyKey, value);\n        } else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n        if (oldValue != null) {\n            c.removeClientProperty(oldValue);\n        }\n    }", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_worker", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmapping.SqlLoader.NamedQuery = namedQueryReference;\n\t\t}\n\t}\n\t#endregion\n\tpublic HbmMap", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\twriter.WriteEncodedInt( (int)", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n        return invocationQueue.peek()\n        }\n        pushGraphQueue();\n        pushGraph(null);\n        invocationDepth()\n        return inliningData.\n        }\n        inliningData.\n        pushGraphs();\n    }\n   ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        self.log_path = self.args['log_path']\n        self.pytest_name = self.args['pytest_name']\n        self.pytest_name = self.args.get('pytest_name', self.args.get('pytest_con", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValuePhiNode phi = getCachedPhi(states.get(0), key.getLocationIdentity(), stamp);\n                    if (phi == null) {\n                        phi = getCachedPhi(states.get(0), key.get", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(MSG_SET_CALLBACK, this);\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public void onSetPauseImage(String uri) {\n        if (mCallback != null) {\n           ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\n\t\t\t\tBaseCreature.Teleport(from, Moonstone.GetWorldLocation(), Moonstone.Map);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.metadata.create_all(bind=db.engine)\nfor model in models:\n    model.metadata.create_all(bind=db.engine)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.set('all_users', set())\n        self.module.set('all_sessions', set())\n\n    def datetime_to_timestamp(self, dt):\n        return int(pytz.utc.localize(dt).timestamp())\n    def timestamp", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrapwidth = _Base._Base.\n    \"\"\"\n    MOFile {\n    msgid = 'msgid = 'msgid = 'msgstr = 'msgstr = '\n    msgid = 'msgid = ''\n    msgstr = ''\n    msgid = ''\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine problematics for transformation %s\" % transID )\n      return S_ERROR( \"Failed to determine problematics for transformation %s\" % transID )\n    if not res['Value']:\n", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\treturn null;\n\t}\n\t}\n\t}\n\t\n\t// REDICT\n\treturn null;\n\t}\n\t}\n\t\n\t}\n\t\n\t// REDICT\n\treturn null;\n\t}\n\t\n\t// REDI", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            self.buildbot_results,\n            [\n                {\n                    'build': self.build,\n                    'build_number': 1,\n                    'builder': 'Builder0',\n                    'change': 1,\n                   ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.scheme = 'http://www.google.com/schemas/atom/core'\n    self.category.term = 'test'\n    self.assert_(self.category.scheme == 'http://www.google.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: this.\n        // TODO: this\n        // TODO: this is not yet resolved\n        // type\n        // type variables\n        // are resolved\n        // TODO\n        // TODO: this is a type, if the type, the type of the type\n        // is a", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = mat.use_shadeless = mat.use_shadeless\n        if mat.use_shadeless = mat.use_shadeless = False\n        if mat.use_transparency = mat.use_transparency.text = \"use_transpar", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            //MAPPER 16\n            mapper64_command1 = map64 = map64;\n            mapper4 = mapper4_command = mapper4 = mapper4_prg_IRQEnabled = map4_IRQEnabled = map4", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopupMenu.add(new JMenuItem(sTDocUrl, oActionListener));\n        }\n        private JMenuItem getInspectorMenuItem(String sInspectorPanelTitle){\n            JMenuItem oInspectorMenuItem = new JMenuItem(sInspectorPanel", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Giant Wolves]\n\t\tAdd(\"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = Frame.H;\n\t\t\tif (height < min) {\n\t\t\t\theight = min;\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic int SizeWidthToFit ()\n\t\t{\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   # FIXME AutoSlugField\n    slug = unique_slug(AnnouncementTwitterCrossPublication, self, 'slug', 'slug', self.announcement)\n    # Save the model\n    super(AnnouncementTwitterCrossPublication,", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers['php'] = (PhpLexer, {})\n# Enable highlighting for Python code not between def and indent by default\nlexers['py'] = (sphinx_material.highlighting.MatlabLexer, {\n    'startsymbol': '[%", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   GROUP BY src_callsign, max_altitude, registration\n                    ORDER BY sdate, stime''', (groupID,))\n    \n    cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table('projects').insert({'project_id': project_id, 'last_snapshot': timestamp}).run()\n    # Close connection\n    conn.close()\ndef db_get_last_snapshot(project_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\t// Deian's shop_\n\t\t\t\t// I'm not sure if you're going to be able to get a job.\n\t\t\t// I'm not sure if you're going to be able to get a job.\n\t\t\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__\n        self.codestr = 'BUDDY_ACCEPTED -\n        self.codetail = ()\n        self.coderep = ()\n        def __init__(self,\n        Response.__init__(self, cmd, restag", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, name, status, duration, result):\n        self.name = name\n        self.status = status\n        self.duration = duration\n        self.result = result\n       ", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(context, CrappalinksActivity.class);\n                intent.putExtra(\"url\", uri);\n                startActivity(intent);\n            }\n        }\n    }\n}\n}\n\n\n## Your task:Improve the code by adding a feature", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        raise AssertionError(\"primary.xml contains additional metadata:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_outputs = self._bytecode_filenames(self.get_outputs())\n        inputs.extend(ext_outputs)\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -----------------------------------------------\n    # (called by out", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t\t\t\t\tlazyPropertyLazy", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--qos=veryslow',\n        '--qos_peakmem=1000000000',\n        '--qos_peakvmem=1000000000',\n        '--qos_peak", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventDelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        [RolesRequired(\"Admin\",\"ListEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} {1} {2}\", prefix, menu.DisplayName, GetMenuItemValueText(menu.Items)));\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }\n       ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"show\", \"downloadLink\": \"show\"}, decode=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (pathFinder.IsPathValid(path))\n\t\t\t\treturn pathFinder.GetStartCell(path);\n\t\t\treturn null;\n\t\t}\n\t\tprivate CPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"restarting dhcp service failed\")\n                       return False\n                    else:\n                       self.logger.info(\"restarting dhcp service\")\n                       return True\n                    return False\n                else:\n                    self.logger", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                state.\n                state.Successor = (state.Suffix;\n                state.Frequency = (state.Frequency;\n            }\n            }\n            {\n                state.Frequency = state.Frequency;\n                state.\n                state", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQ VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, true, true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\t\n\t\n\t\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   def test_insert_after_middle(self):\n        self.failUnlessRaises(self.failUnless(self.read(b\"abcdef\")\n\n\n\n\n    self.failIf(self.read(b\"abcdefgh\")\n\n\n\n   ", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    plt.plot(cr['combined'][app][test][stat]['durations'])\n    plt.show()\nif __name__ == '__main__':\n    parser", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_euid(self, uid, gid, gid, uid, gid, gid, uid, gid, uid, gid, uid, gid, uid, gid, seteuid, euid, gid, gid,", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\tg.setColor(MetalLookAnd", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  failures = \"\"\n  LOGGER.info(msg)\n  for i in patternDict:\n    category = patternDict[i]['category']", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset - headerSize(), value.asValue(elementKind));\n    }\n    @INLINE\n    public final Value headerValue(Offset offset) {\n        if (offset == headerSize()) {\n            return IntValue.from(readLength(lengthOffset));\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            return FileUtils.CombinePaths(Path.GetDirectoryName(this.File), relativePath);\n        }\n    }\n}\n\n\n", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\n\ndef str_format(*args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format('{a}', a", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i17 = i6;\n        i17 = i17;\n      }\n      if (i != \n    {\n        i6 != 1 : \n    }\n      {\n        i16 = i6;\n      }\n      else\n     ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name;\n\t\t\tstr += \"\\nTransition: \" + _current_transition.ToString();\n\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                {\n                    Slot = SpellSlot.R,\n                    Type = SpellSlot.\n                    Delay = SpellSlot.R,\n                    Delay = 250,\n                    Range = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE)\n    @testlib.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataCategory (\"Data\")]\n\t\t[DataCompilationCondition (typeof (ConstraintCollection).IsDefined(typeof (ConstraintCollection), false))]\n\t\t[Browsable (false)]\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalLayout = QtWidgets.QVBoxLayout(self.settings_kernels_groupBox)\n        self.formLayout = QtWidgets.FormLayout()\n        self.verticalLayout = QtWidgets.\n        self.verticalLayout(self.settings_kernels_", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               setText( R.string.taf_no_taf_found, layout );\n            }\n            if ( wxs.moveToFirst() ) {\n                // We have a station with TAF\n                stationId = wxs.getString( wxs.getColumnIndex( T", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionRowCount, \"unexpected row count\");\n\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxTime,", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[(uiCRCITTSum & 0xff) ^ uiByteValue];\n            }\n            uiCRCITTSum = reflect(uiCRCITTSum, 1", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t/**\n\t *\n\t * @returnItem\n\t */\n\tpublic void getDisguiseModule() {\n\t\treturn getDisp\n\t}\n\t/**\n\t *\n\t*\n\t* @", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, sourceViewer)\n            };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller,", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.drawingModeWidget)\n        self.setDrawingMode(self.getDrawingMode())\n    def _setDrawingMode(self, event = None):\n        if DEBUG:", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tif ( shouldSend )\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.SendGump( new SetPoint2DGump( toSet, shouldSet, shouldSend ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int i=0; i<numStates &&i<numStates; i\n\t\t\tfor (int j=0; j<numStates; j<numStates<numChanges>\n\t\t\t\tsb.append\n\t\tsb.append\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                                    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[lineIndex].productCode + \" a price could not be found\");\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic IParameterInspector Inspector {\n\t\t\tget { throw new Not", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // TODO\n        //\n        // TODO\n        //ACLPermission.getACETarget(\n        //\n        //ACETarget(ACE_ACETarget.\n        //ACETarget(ACE_ACETarget(ACE_ACETarget.\n        //\n        //get", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t\t{\n\t\t\treturn v.RelativeTo (viewport);\n\t\t}\n\t\tpublic static", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t(XDREnum):\n    __members__ = [\n        ('endpoint_key_vlan', endpoint_key),\n        ('endpoint_key_mac_hi', endpoint_key),\n        ('endpoint_key_mac_lo', endpoint_key),", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                return convertToActivityBucketList(list);\n            }\n            if(type == RequestType.Step) {\n                return convertToStepBucketList(list);\n            }\n            if(type == RequestType.", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %sCallback%d_%d* callback) {' %\n                (parent_class, exec_count, exec_count))\n  if is_method:\n    print '    return new %s(object, callback);' % (ptr_name)\n", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        mimetype='application/json'\n    )\n    return response\n\ndef range_item_dict(item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode(VarNode", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n        if self.object.is_active:\n            return HttpResponseRedirect(self.get_success_url())\n        else:\n            return HttpResponseRedirect(self.get_success_url", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the SHA1 hash of the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte>", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           //_iterator.SetConvergenceLimit(1e-10);\n            //_iterator.SetConvergenceLimit(1e-12);\n            //_iterator.SetConvergenceLimit(1e-14);\n            //_iterator.SetConvergenceLimit", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\tApfloat median = sortedNumbers[left];\n\t\treturn new Apfloat[]{median};\n\t} else {\n\t\tApfloat median1 = sortedNumbers[left];\n\t\tApfloat median2 = sortedNumbers[right];\n\t\tApfloat median = median1.add", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if k in reference_counts.size_of_parent\n    # This is the same as the original code as_\n    # This is the same as_left\n    # The same as_right_as\n    # the same as\n    # the same as\n    # the same", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for c in csv_mapping.columns:\n            if c in mapping_json['mappings']['properties']:\n                result[c] = True\n            else:\n                result[c] = False\n        return result\n    def _test_enrich(self, sortinghat=False", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.Locked)\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\tvar bot = new LobbyBotInfo(orderManager.LobbyInfo.Client, slot.", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn _status.ToString();\n\t\t}\n\t\tpublic override object Clone()\n\t\t{\n\t\t\treturn this.MemberwiseClone();\n\t\t}\n\t\tpublic", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass SettingsFrame(Frame):\n    frame_type = FrameType.SETTINGS\n    defined_flags = FrameFlag.create_flag_set('END_PUSH_PROMISE')\n    def __init", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull() != cluster.RectangularBoundary)\n                throw new InvalidOperationException(\"Cluster boundary curve and rectangle are inconsistent\");\n            foreach (var node in cluster.Nodes)\n                if (node.UnderCluster != cluster)", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKin\n\t\t\tm_jumping()\n\t\t\t\t\t//\n\t\t\t\tm_jumpSpeed(m_jumpSpeed = m_jump(double)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            if (canBeLeaked(initializers.get(i))) {\n                checker.report(Result.failure(\"unique.leaked\"), initializers.get(i));\n            }\n", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tnbttagcompound.setInt(\"tag\", 1);\n\t\t\t\tnbttag", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(Context, this, typeAttribute.Value, CommentXmlNode);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_returnType", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t}\n\t\t}\n\t\t\n\t\t[Test]\n\t\tpublic void SizeTestVerticalTrackBar ()\n\t\t{\n\t\t\tIntPtr handle = new IntPtr();\n\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t}\n\t\t\tverify(classCache, times(Matchers.any());\n\t\t\tverify(Matchers.any());\n\t\tverify(instrumentationApplier());\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit() && !isImplicit()\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > wideLExtent[end][r.leftChild]) {\n              continue;\n            }\n            int min2 = wideLExtent[end][r.leftChild];\n            if (min2 > min1) {\n              continue;\n            }\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync_file_list_file_processor_loop\n        pipe_stdin.\n        pipe.stdin.write.called_once_file.\n        pipe.stdin.close.\n        ]\n        assert not pipe.stdin.write.close_called_once", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvoid DbgThreads(object thread) {\n\t\t\t\tif (process.IsRunning)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tInitializeThreadsWindowThreads();\n\t\t}\n\t\t\t}\n\t\tvoid InitializeThreads", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"color\", \"color\", String.valueOf( \"color\", \"color\", \"sval\", \"rgb\", \"1.0\"\n\t\twriter.attribute( null, \"color\" \"\n\t\t\"\n\t\twriter.endTag( null, \"", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n# Read in the initial configuration\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # This isinstance(node, node.op, node.owner.ndim, node.owner.ndim, node.ndim == ndim, node.inputs[1]\n                                                                                                                                                    node.inputs[1]\n            if node", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = True\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple\n    self.fields['groups'].help_text = \"Select the groups you want to add to this Community.\"\n    self.fields['groups'].label = \"Groups\"", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               return value of the :meth:`.Query.\n        event.\n        \"\"\"\n        def before_compile(query)\n        def before_compile(self, query:\n        if not raw=False\n        def wrap(*arg:\n        def _wrap(\n            def before_", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(self.data, self.current_filter, self.current_filter.get_axes_filtered_data(), self.current_filter)\n\n# +\n# %%writefile larray_editor/adapter.py\nimport numpy as np\nfrom lar", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t\tTypeWrapper type = null;\n\t\t\t{\n\t\t\t{\n\t\t\t}\n\t\t\t{\n\t\t\t{\n\t\t\tpublic sealed class Lderef : Instruction\n\t\t{\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objYLabel.Size = new System.Drawing.Size(100, 20);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            this.data.put(row.get(ID_KEY), new ArrayList<>());\n            termData = this.data.get(row.get(ID_KEY));\n        }\n        for (Map.Entry<String, String> entry", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos()))\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\t@Override\n\tpublic void onBlockStateChange(IBlockState state) {\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : c.getComponents()) {\n                intrinsicCohesion += this.getRepresentativity(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intr", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if flags[flagname][docformat] != minfo['flags'][flagname][docformat]:\n                                logger.info(\"ERROR: Document %s: Expected flag %s but got %s\" % (docid, str(minfo['flags'][flagname][doc", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the date of the start of the specified period.\n   * @param period the period for which the start date has to be generated.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t\tsourceEventBinding.SourceComponent = sourceEventBinding.SourceComponent;\n\t\tsourceEventBinding.TargetEventName = TargetEventName;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTarget", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        }\n        // Authorization check\n        // Authorization check\n        if (containerName) {\n            if (containerName) {\n            if (containerName) {\n            // Authorization check = DaylightWebUtil.getContainerPrivilegeName()", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n/*\n * \n * @author Joshua\n * @version 1.0\n */\npublic class SqlPropertiesParser {\n    private static final String PROPERTY_KEY = \"property_key\";\n    private static", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_from_equivalence(old_pred_uuids.append(old_uuid)\n\n\n\n\n\n\n\n\n\n        \"\"\"\n        \"\"\"\n        # make_from_uri = l_obj_man_obj_man_obj_man_obj_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           if (XFON\n            {\n                buffer.Append(\"\n                buffer.Append\n                buffer.Append(\"\n                buffer.Append(\"\n                .set\n                buffer\n                .Append\n                buffer\n                .set\n                .Append\n                .Append(\"\\n\")\n                .", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes[posn++] = ch;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Character is not in the JIS set.\n\t\t\tthrow new ArgumentOut", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, b(4) ]\", mnemonic=\"LD_B\", mnemonic=\"LD_B\", mode=\"Long-offset\")\n@ispec(\"32<[ c(4) ]\", mnemonic=\"LD_B\", mode=\"Long", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name.equals(name);\n        }\n        /**\n         * Returns the ID of this game type\n         */\n        public int getID()\n        {\n            return this.id;\n        }\n        /**\n         * Returns the name of this game type\n        ", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl.Purge();\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t\tAssert.AreEqual (ControlFlags.SelfRelative, csd.ControlFlags);\n\t\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, *args, **kwargs)\n    def __idle(self, func, *args, **kwargs):\n        def delayed():\n            func(*args, **kwargs)\n        GLib.idle_add(delayed)\n    def __", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.CurrentSettings.cloudAppId = null;\n        if (PhotonEditor.Current.photonAddress = string.Empty;\n        {\n            GUILayout.SetEditorUtility.keySettings = PhotonEditor.ServerSettings.ServerSettings.RpcList.", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       TextView full_repto = rootLayout.findViewById(R.id.full_repto);\n        full_repto.setText(Html.fromHtml(message.repto));\n        full_repto.setMovementMethod(LinkMovementMethod.getInstance());\n        full", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis])\n            psit_k = np.tensordot(psit_G, phase_cc, axes=([1], [1]))\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       // CreateUtkastRequest.setPatientEfternamn(intygsTyp, \"luse\");\n        utkastService.createNewDraft(new UtkastRequest.new UtkastRequest(anyString);\n        // This line is not needed\n    }", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\tforeach(ILNode bb) {\n\t\t\t\t\tforeach(ILNode block) {\n\t\t\t\t\tILNode block.FlattenBasicBlocks(ILNode)\n\t\t\t\t\tILNode\n\t\t\t\t\t\t\t\n\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.isKinematic = rb.isKinematic = rb.rb.isKinematic = Vector3\n\t    SmoothPosition = SmoothPosition\n\t    SmoothRotation = Quaternion Rotation\n\t    rb.isKinematic", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   _not_serialized_attrs_ = ['fracture_type']\n    def __init__(self, config={}):\n        self.fracture_type = ClassFactory(FractureType)\n        \"\"\"Fracture type\"\"\"\n        super().__init__(", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)((num >>> 16) & 0xff);\n        out[outOff + 2] = (byte)", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    FilteredPatternFinder( Iterable<PatternMatch> source,\n\t        Map", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['from'] = value\n    elif key == 'fin':\n        node_json['to'] = value\n    elif key == 'NODE':\n        for child_xml_json in", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n        public void mouseExited(MouseEvent e) {\n          if (SwingUtilities.isLeftMouseButton(e)) {\n            btn.setSelected(false);\n            this.revalidate", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n%matplotlib inline\ndef getLC(ID):\n    filename, red", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y++)\n    {\n      for (int x = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   expenses.update(Db.Table1.TABLE_NAME, Db.Table1.TABLE_NAME + \" = \" + newId + \" AND \" + Db.Table1.ID_GROUP + \" = \" + deleteId, null, null);\n                    //Update budget items\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(IntPtr));\n                m_ptr = IntPtr.Zero;\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_URL_HANDLER_MIDDLE\n# List of middleware classes that will be applied in the middleware.\n#\n#   #\n#   #\n#   #\n#   #\n####################\n#\n#   #\n#\n#   #\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue.RemoveRange(0, numberToCancel);\n\t\t}\n\t\tpublic bool BuildUnit(string unitString)\n\t\t{\n\t\t\tvar unit =", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.treeView.setRootIndex(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.fileSystemModel.setRootIndex(self.file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re.sub(self.rule = re.sub_in_file\n        for x in self.ext_in:\n        if self.always_run = True\n        if self.always_run = True\n        if self.always_run = True\n        if self.", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        if result.success:\n            rospy.loginfo(\"Successfully executed the action plan!\")\n            rospy.loginfo", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + 1 ] - chemical[ 0 ][ idx + 2 ]\n\t\t\t\t\t\t\t\t\t+ 2 * chemical[ 0 ][ idx + 1 ] - chemical[", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"DATE format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextDateAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            case Column", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\tParam = qs.NewParameter();\n\t\tParam.DbType = DbType.Int32;\n\t\tParam.ParameterName = \"@obj_id\";\n\t\tParam.Size = 4;\n\t\tParam.Value = 0;\n\t\tqs.", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tpublic H\n\t\t{\n\t\t\t\t\n\t\t\t{\n\t\t\t\tget {\n\t\t\treturn null;\n\t\t}\n\t\t}\n\t\tpublic TypeMapping GetPropertyMapping\n\t\t{\n\t\t\tget {\n\t\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.authentication == 'enable':\n        self.ntp_auth_enable_id = 'true'\n        if self.state == 'enable':\n        \"\"\"\n        \"\"\"\n        self.config_ntp_auth_auth_keyid = self.key_id\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assert_item_location,\n            # item_location)\n            self.assert_item_location\n            # item_location.course_key,\n            # item_location,\n            component.edit_info_location,\n            self.store.collection,\n            self", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) (TEXT_CODE & 0xff));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['log", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (api.ActionDescriptor.ActionName == null)\n            {\n                throw new ArgumentException(\"Action name cannot be null or empty\", \"api.ActionDescriptor.ActionName\");", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, DateEntry):\n                entry.date_get()\n            else:\n                entry.get_active_text()\n            keyval = event.keyval\n            entry.handler_unblock(callback=callback)\n            if keyval in (gtk.", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.setPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanFactory.getBeanDefinition(beanName).getPropertyValues();\n    }\n    /**\n     * Returns a <code>PriorityOrdered", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f.readlines():\n                if not line.strip():\n                    raise ValueError(\"Blank lines are not allowed in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e))\n        finally:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n            );\n        [PreserveSig]\n        int GetService(\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid riid,\n            [Mar", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        return userDirectoryService.addPrincipalToPrincipal( directedAclKeys );\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = UPDATE,\n            consumes = MediaType.APPLICATION_JSON_VALUE )", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag matches what is expected.\n        This verifies the tag of the element matches what is expected.", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if nodeType = Node.cloneNode(node = node.node = node.node = node = node.nodeType = Node.cloneNode = node.nodeType = node.nodeType\n    node.ownerDocument = None\n    def _get_nodeType(node.nodeType\n   ", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\tvalidateEMSSc\n\t\t\t\t\t(EMSSc\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscenePatient\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\tencoder.writeTypeAndLength(encoder.getLength()\n\t\t\t\tencoder.writeTypeAndLength(encoder.getLength(encoder.getLength = encoder.getLength = keyLocator.getType(type = keyLocator.getType", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the player's weapons\n        myWeapons = myPlayer.getWeapons();\n", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setTeam( null );\n        GameEngine.model().getGame().addPlayer( action );\n        hide();\n      }\n    } );\n    m_btnOk.addClickHandler( new ClickHandler()\n    {\n      @", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error %d in %s\" % (r.status, url))\n    if r.status != 200:\n        raise RuntimeError(\"Error %d in %s\" % (r.status, url))\n    filename = get_filename(r.get", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRunMergedOrder == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailureReason = SR.Mer", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction has more than one metabolite.\")\n    return [elem for elem in elements]\ndef _find_carbon_sources(model: \"Model\") -> List[\"Reaction\"]:", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return (\n            super(UnitManager, self).get_query_set().filter(\n                path__startswith=pootle_path,\n            )\n        )\n    def get_for_path(self, pootle_path, user):\n        \"\"\"Returns units", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"ARP request: {} -> {}\".format(arp.protosrc, arp.protodst))\n                self.logger.debug(\"ARP table: {}\".format(self.dstmac_cache))\n                self.dstmac_cache[arp", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_MaxCount > 0)\n      m_RecentItems.subList(m_MaxCount, m_RecentItems.size()).clear();\n    m_RecentItems.sort(null);\n    if", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Skills[SkillName.Hiding].Value > src.Skills[SkillName.DetectHidden].Value)\n                return false;\n            return true;\n        }\n    }\n}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   // TODO: Implement this\n    //\n    //\n    //\n    //\n    //\n    //\n    public void\n    //\n    public void\n    }\n    public void\n    //\n    public void\n    //\n    public void\n    //\n    //\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tmReadData(int)ReadData(ReadReportType, int reportType, byte[] buff = null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t@Override\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)\n\t\t{\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueUnits2Units(i1);\n            _loUnit = _loUnit;\n        }\n        }\n        }\n        public int PText\n        }\n        public override int PText\n        {\n            _unitsStart(i1)\n        }", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = self.create_view(navigator.get_class(self.ENTITY))\n        view.assert_no_error()\n        return rate\n    def instantiate(self, description, currency=None, fields=None):\n        \"\"\"Create a new rate in the UI\n       ", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( _lockedToScratch )\n\t\t\t{\n\t\t\t\tif ( _scratchSize == 0 )\n\t\t\t\t{\n\t\t\t\t\tthrow new AxiomException( \"Cannot write to scratch buffer, it is not locked.\" );", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_sat.value = self.scan_s.value = self.tuner.value = self.tuning_type.value = self.tuning_type.value = \"single_transponder\"\n\t\tself.list.append(self.tuning", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_RECV_DELAY_ON_DISCONNECT:\n            delayOnDisconnect = (Boolean) optval", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (obj.IsNumber()\n                    {\n                    if (obj.IsNumber()\n                    {\n                    obj.IsNumber()\n                    {\n                    if (obj.IsNumber()\n                    {\n                        int n = 0;\n                   ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        if self.get_dual_resolution()\n        self.get_options().get_options().get_degree_bounds()\n        if_index = self.get_options().get_degree_dual_flag\n       \n        for index in range(len(", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n            // This is a test\n            // This is a test\n            // This is a test\n            // This is a test\n            // This is a test\n            [Test]\n            [Test]\n            [Test]\n            [Test]\n            [", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Set keySet() {\n\t\treturn map.keySet();\n\t}\n\t@Override\n\tpublic Collection values() {\n\t\treturn map.values();\n\t}\n\t@Override\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the end of the auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The au", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client_multi'}\n        #return {'type': 'ir.actions.client_multi', 'domain': \"[('id', '=', \" + str(self.id) + \")]\"}\n        #return {'type': 'ir.actions.", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow r = form.grdResults().getRows().get(orderInvestigationLiteVo.getSpecimenIndex());\n\t\tif (r == null)\n\t\t{\n\t\t\tr = new grdResultsRow();\n\t\t\tform.", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(c.X, c.Y);\n            }\n        }\n        /// <summary>\n        /// The index of this item.\n        /// </summary>\n        public int Index { get { return index; } }\n        /// <summary>\n        /// The state", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_new_tab(cwd, profile)\n        self.set_title(self.get_title())\n        self.set_position(self.get_position())\n        self.set_zoom_data(self.get_zoom_data", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo typeInfo = typeArraySize,\n                    MarshalInfo,\n                    MarshalInfoType\n                    };\n                    MarshalAttribute\n                    }\n                    StructTypeInfo = new StructTypeInfo( managedType = managedType,\n                    arraySize = arraySize", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null;\n\t}\n\t\t}\n\t\tset {\n\t\t\treturn false;\n\t}\n\t}\n\t}\n\tpublic bool IsNotResolved {\n\t\tget {\n\t\t\treturn false;\n\t}\n\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        /// <param name=\"dependentEvidence\"></param>", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self._context = OpenSSL.SSL.Context(OpenSSL.SSL.SSLv_METHOD, protocol)\n        self._context.set_options(\n            OpenSSL.SSL.OP_NO_SSLv2 |\n            OpenSSL.SSL.OP_NO_SSLv", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox5\n\t\t\tthis.vbox5;\n\t\t\tthis.vbox5.Spacing = 6;\n\t\t\tthis.vbox5.Position = 1;\n\t\t\tthis.vbox5.Add (this.v", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.vbox.pack_start(gtk.notebooks[0], gtk.props.visible = True\n    notebooks[\"board\"].pack_start_tab_area.pack_start(gtk.hbox)\n    gtk.hbox.set_row", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_C,\n    \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab +\n    \"", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected boolean isFileEditable()\n  {\n    return true;\n  }\n  \n  protected boolean isFileNew()\n  {\n    return false;\n  }\n  \n  protected boolean isFileVisible()\n  {\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(10, 10);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(82, 2", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        return sb.toString();\n    }\n}\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t// (\n\t\t\t//\t\t\t\t\n\t\t\t\t//\t\t0x0a, 0x0b, 0x0b, 0x0f, 0x0b, 0x0e,", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += SerializerImpl.getI32Size(current_align, intVal);\n\t    \n\t    current_align += SerializerImpl.getStringSize(current_align, stringVal);\n\t    \n\t    current_align += SerializerImpl.getFloat", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               # FIXME: this is a bit of a hack, but it works for now.\n                # This should be fixed by using the _read_execute and _write_execute functions.\n                # FIXME: this should be two non-shell calls.\n                (rc, out,", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifierVERTEX_WEIGHT_PROX_EDIT(vertex_group_a\n\nclass MeshModifier(vertex_group_a\n\n\nclass MeshModifierVERTEX_WEIGHT_EDIT(mesh,\n\nclass MeshModifier", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                    rankCounts[i] = minLikelihood;\n                else if(rankCounts[i] ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(\"one\",", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               self.parser(self.choice, cap=self.cap)\n            except KeyboardInterrupt:\n                self.print_usage()\n                return\n            except EOFError:\n                self.print_usage()\n                return\n            except KeyError:\n                print(self.", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'ordering': 'django.db.models.Meta', [], {'object_name': 'django.db.models.fields.related.ForeignKey', [], {'to': 'orm['main.Document']}},\n            'project': ('django.db.models.fields.Foreign", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n            }\n            }\n        return;\n        }\n    }\n        return false;\n    }\n    }\n    }\n    returnImport(imports, include, returnImport, returnImportOrInclude, returnImportProcessor, returnImports, returnImports, return", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n        self.onchange.\n        if ids:\n            self.holidates\n        self.message_create(cr, uid, ids, context=None)\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        if ids:\n       ", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           this.GridBaseManager.Grid\n        ///\n        ///\n        /// <param name=\"gridLoader\">\n        ///\n        /// <returns>Returns the grid base\n        /// <returns>\n        ///\n        ///\n        /// <param name=\"grid\n        /// <c>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return \"MixerLine: \" + this.Name;\n        }\n    }\n}\n\n}\n}\n\nCan someone help me to complete the code?\n\nA: I've added the missing code.\n\nA: I've added the missing code.\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t}\n\t}\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t}\n\t\t\t}\n\t\t// CareContext\n\t\t//\t\n\t\t//\t}\n\t\t//\t\n\t\tims.emergency.att", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 env=env,\n                 verbose=verbose)\n        elapsed = time() - build_start\n        if android:\n            notify_build_done(elapsed)\n        return status\n\n    def build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estPn = pn = pnEstimated = estPnEstimatedEstPn = pnEstimatedEstP = pnEstimated = pnEstimatedPnEstimatedScore = pnEstimatedPn\n\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashes.Items.Clear();\n                Stashes.Items.AddRange(gitStash.DiffItems.Select(item => new GitItemStatus(item.Status, item.Path)));\n                Stashes.SelectedIndex = 0;\n            }\n        }\n       ", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item_to_out_buffer_id.out_address\n    assert lattice.cbuffer.get_object(bm0_index).out_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) > 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public class AddNumbersService : System.Web.WebServices.WebServices.WebServices.WebServiceProxy;\n    {\n        public AddInts\n        {\n            AddInts = new AddNumbers();\n            }\n    }\n    }\n   ", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleString", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t_eType = value;\n\t\t\t\t\tif (CNotificationRequired(ECoreMeta.cINSTANCE.Package.ETypedElement_EType)) {\n\t\t\t\t\t\tCNotify(new CAction(this, CActionType.SET", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.subcommand is not None:\n        args.subcommand(args, archive_index)\n    else:\n        parser.print_help()\n        sys.exit(1)\nif __name__ == '", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_token = self.cmd_token\n        self.cmd_ss, self.cmd_ss, self.cmd_es = 0, 0\n        self.cmd_ss, self.cmd_es = 0, 0\n       ", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    v_1 = r_1;\n    v_2 = lab1:\n    // (, line 8:\n    // (, line 8\n    // (, line 8\n    // (, line 8\n    // (, line 9\n    v_", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = dins.readObject();\n            } catch (IOException ex) {\n                System.out.println(\"IO error: \"+ex);\n            } catch (ClassNotFoundException ex) {\n                System.out.println(\"Class error: \"+ex);\n            }\n            if (", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   self.cert.set_key_usage_value\n    def _get_all_names(self):\n    return self._get_subject_key_ordered_list\n    def _get_ocsp_extensions_critical\n    def _get_ocsp_ext\n    def", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i->second.find (this) != i->second.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t/*", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # -- The first value is the first word of the utf16-encoded value.\n    #     The second value is the second word of the utf16-encoded value.\n    #     The second word is always a surrogate.\n    first_word_seq = [X.", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tGet();\n\t\t\t\twhile (la.kind == 29) {\n\t\t\t\t\tGet();\n\t\t\t\t}\n\t\t\t}\n\t\t\tExpect(2", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_qty'] = line.product_uom_id.compute_quantity(line.product_uom, line.product_uom_qty)\n            ed", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openHAB\", httpSSLPort, serviceProperties);\n    }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<VirtualUserPermissions>();\n        }\n        }\n        permissions.add(v2);\n        vf2NodeRef.setPermissions(vf2);\n        vf2NodeRef.setPermissions(user1);\n        }\n    }\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices.match_subsystem('input')\n\nThe test is expected to filter the devices to only those that are input devices, but the code seems to be missing the part where the filtered list of devices is actually used. Can you complete the test to ensure it's checking the filtered list of devices?", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    data = user.login()\n    data = user.mainmenu()\n    data = user.exploration.explore(areaId, floorId)\n    data = user.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    print \"    calibrator_array_stations = array_stations\n    rd = {\n    'antpos': { 'telescope': 'array_stations': array_stations\n    'antennas': antpos[i]\n    'antennas", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011;\n        }\n    }\n}\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> tunerList = tunerList.getTuners.getDevice(addDevice);\n        }\n        }\n        return tunerList\n        }\n        // DRS 2019\n        // DRS 2019\n        //", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file is malformed. Line \" + lineCount + \" is missing a regex or a type.\");\n      }\n      String regex = split[0];\n      String type = split[1", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #return [SCons.Node.Path(os.path.join(source_dir, n)) for n in try_names]\n            #return [SCons.Node.Path(os.path.join(source_dir, n)) for n in try_names]\n            #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, features):\n        def features(self, features -- a list of features\n        def features -- a list of features\n        \"\"\"\n        \"\"\"\n        >>> from mapnik.Feature(Layer, features()\n        >>> def features(self, features -- features()\n        >>>", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.port = port\n        self.port = port\n        self.port = None\n        self.description = self.description\n        self.interval = self.interval\n        self.interval = self.interval\n        self.interval = self.interval\n        self.interval = self.", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className, null);\n    }\n    public IAction getAction", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.test_create_thread_id\n    self.test_update_thread_id)\n    self.assert_thread_id\n    self.assert_thread_id\n    self.assert_thread_id\n    self.assert_thread_id\n    self.assert_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           return SCons.Util.ComputeNode(embedManifestDllAction,\n                                        [target[0], source[0], manifestSrc],\n                                        env=env,\n                                        func=embedManifestDllCheck,\n                                        funcargs=['", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IStatus status = execute(getSelectedResources(), getMonitor());\n            if (status != null) {\n                recordError(status);\n            }\n        } catch (OperationCanceledException e) {\n            // The user canceled the operation\n            return;\n        }", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts=new int[meta.getFieldCount()];\n\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic boolean processRow(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\treturn true;\n\t}\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regr\n\n\n\n@freeze_time\n    assert f(2014,1, 12,12, 12,30,12,15, 1,12,12, 12,31,12,", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int\n            {\n                int x = x;\n                int y = y;\n                int z = z = z;\n                int m_MinTime = dmaxtime;\n            }\n            }\n            //[\n            {\n                int smin = int.Parse", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest doesn't support suspend\")\n    @error_context.context_aware\n    def verify_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(\"[SUB]\");\n        Future<Integer> rc2 = service.submit(pub);\n        System.out.println(\"[PUB]\");\n        service.shutdown();\n        System.out.println(\"[SHUTDOWN]\");\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestParameters(res, destination, r);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedValue = value;\n\t\t\tvar compressedBytes = new byte[2];\n\t\t\tcompressedBytes[0] = (byte)(compressedValue & 0xFF);\n\t\t\tcompressedBytes[1] = (byte)((compressed", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.is_directory(self.fm.thisdir.path\n        if self.fm.thisdir.path.path.path.\n        self.fm.thisdir.reload_content()\n        self.fm.thisdir.path\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_Type()\n\t\t{\n\t\t\tCOMTest objCOMTest = (COMTest)Activator.CreateInstance (typeof (COMTest));\n\t\t\tAssert.AreEqual (typeof (COMTest), objCOMTest.GetType", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 4)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.type\n        self.control_message\n        self.Log.debug(\"sending %s\", self.control_message\n        self.Log.debug(\"message: %s\", message)\n        self.Log.debug", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Send group event to all group members\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    class tokenrow(list):\n        def __init__(self, toks=None):\n            if toks is not None:\n                self.toks = [(Token.Column, t) for t in toks]\n            else:\n                self.toks = []\n\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       self._assert_column_value(self.column, True, \"22\")\n    def test_update_cell_based_on_data_updates_cell_when_row_has_no_children(self):\n        self._run_cases(self._setup_cases", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\treturn parent.doStartTag();\n\t    }\n\t} while ((parent = parent.getParent()) != null);\n\treturn super.doStartTag();\n    }\n    /**\n     * set the value values\n     *", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry[] Inventory = new InventoryEntry[0];\n                InventoryEntry[] Inventory = new InventoryEntry[nl.Count];\n                for (int i = 0; i < nl.Count; i++) {\n                    InventoryEntry invEntry = new In", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(ChangeOfServiceVoBean.buildVo((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]));\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 20, 23, 26, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// TODO\n\t\t\t\th.Init(pb, 0, 0, 0x00, 0x32, 0x6, 0x3C, 0x3F, 0x4, 0x8, 0x", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, false) / multiplier);\n\t}\n\t/**\n\t * Returns the discount applied to the player's armor.\n\t * @return The discount applied to the player's armor.", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# -*- coding: utf-8 -*-\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" should have {0})\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount\n\t\t\t\t\t));\n\t\t\t\t\t// Lock the layer and the queue\n\t\t\t\t\tlock (L", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.setState(ret);\n            if (voiceRegistrant.get(p);\n        }\n        }\n        }\n        if (num == 0) {\n            responseInts(p);\n            }\n        }\n        }\n        else {\n           ", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.isApplicable()) {\n\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType().equals(\n\t\t\t\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = newVertices[y * xSizeP + x];\n            newNormals[y * xSizeP + x] = newNormals[y * xSizeP + x];\n            newUV[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\trawResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\t// Check if the returned value is the expected value\n\t\t\t\tif (rawResult", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void setCaretPosition(final int i", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name + \" not found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0;\n            pixel_y = 0;\n            sx = 0;\n            pixel_y = 0;\n            pixel_x = 0;\n            stactics_vide_vide\n            {\n                stactics_f", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n\n\n\n\n\n\n            }\n            }\n            }\n            {\n                var collision = spell.CollisionObject\n            {\n                var collision = spell.To2D().To(position);\n                var collisionObjects = _castPosition.To2D\n            {\n               ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(y);\n        Node a = path.get(0);\n        Node b = path.get(1);\n        Node c = path.get(2);\n        if (graph.isDefCollider(a,", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   plcs.Push(pop.Children[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        /// </summary>\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment otherAttachment = (FinancialEntityAttachment) other;\n        if (this.attachmentId == null) {\n            if (otherAttachment.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            return;\n                        if (mobiles[i] == null || !mobiles[i].Map == m_Item.Map)\n                            return;\n                        if (mobiles[i].Can", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, bool message = true)\n\t\t{\n\t\t\treturn Message(user, text", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {\n    return mock.getAvailCompoIds(s", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File file = (File) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final ArrayList<File> files = new ArrayList<>(checkedItemSize);\n                    for (int i = 0; i < checkedItemSize; i++)", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.channel.close();\n\nBut I get the error:\n\n    java.lang.NullPointerException: Cannot invoke \"io.netty.channel.Channel.close()\" because \"this.channel\" is null\n\nI'm not sure why channel is null.\n\n\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if find_tipper.append\n                tipper = self._get_data_array = np.zeros\n                tipper_dict = dict_key = self._get_j_value_index = \n                \n                \n            # get_periods\n            # get_period", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              DatabaseFactory.getIdentityDatabase(context).getUnverifiedRecipientCount(recipients));\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_lib + extra_path + env[\"PATH\"].split(\":\"))\n        env[\"CC\"] = \"ccache %s\" % (self.config[\"build\"][\"ccache\"]) if self.config[\"build\"][\"ccache\"] else \"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    if isinstance(test, dict):\n                        test = test_cls.from_json(tests_root, test)\n                    source_file = source_files.get(path", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            compiledScript = (Script) script;\n        } else {\n            compiledScript = null;\n        }\n    }\n    private BindingContext createBindingContext() {\n        return new BindingContext(new ImportCustomizer(), new ModuleNode(new Module", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n            WrappedNetworkLayer<T, R> _networkLayer;\n            WrapperClientDataAdapter _clientDataAdapter;\n            WrapperServerDataAdapter _serverDataAdapter;\n        }\n    }\n}\n\n\n// Error: The following code was not formatted according to the C", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     grad_Etf = grad_E.flatten()\n      grad_E = grad_E.flatten()\n      grad_Etf = grad_E.flatten()\n      grad_E = grad_E.flatten()\n      grad_Etf = grad_E.", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t{\n\t\t\tif(obj instanceof ims.ocrr.vo.OrderInvestigationForStatusChangeVo)\n\t\t\t{\n\t\t\t\tims.ocrr.vo.OrderInvestigationForStatusChangeV", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, stacks);\n    }\n    @Test\n    public void shouldFindStacksWithSpecifiedTags() throws Exception {\n        final StackImpl stack = stacks[0];\n        stack.getTags().addAll(asList(\"search-tag1\", \"search", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(\"DEPTH\");\n        parameter.setParameterValue(depth);\n        pf.addParameter(parameter);\n        crawlParameters.add(pf);\n        //EXCLUSION REGEXP\n        if", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == null)\n\t\t\t\treturn true;\n\t\telse\n\t\t\t\t\tsub\n\t\t\t\tif (sub == null)\n\t\t\t\t\t\t\t\t(\n\t\t\t)\n\t\t{\n\t\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit = colisionList.Count;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                    break;\n                }\n               ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\t}\n\t\t\n\t\tprotected boolean supportsRecordedInError, getRecordedInError, ims.pci.vo.GpContractID, ims.framework.interfaces.IAppFormBridge, UI.getFormBridge.getControl(form, form,", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.search(pattern, frozen_output) is not None\n\n\n@task\n@timed\ndef install_python_packages():\n    \"\"\"\n    Installs Python packages\n    \"\"\"\n    if no_prereq_install():\n        print(NO_PRERE", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs, self.env['test_testing_utilities.sub2'])\n        self.assertEqual(r.subs.value", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, t, (x, t, (x, t, (x, t, b), (x, t, b, t, b, t, t, b, t, t, b, t, t, b, t, b, t, t", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tSystem.String a2;\n\t\t\t", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._oldStartingIndex = startingIndex;\n\n            this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n            this._newStartingIndex = startingIndex;\n        }\n        else\n        {\n            this._oldStart", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToOutputStream(stream);\n        }\n        }\n        }\n        }\n        }\n    }\n    public void testObjectToOutputStream(OutputStream stream = new ByteArrayOutputStream());\n    }\n    }\n    }\n    public void testObjectToOutputStream();\n    public void", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               case Param.Campus2:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Campus3:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.Camp", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t\t//read the size = reader.Read (\n\t\t\t\t\t\t\t\t\t// read the iconDirSize;\n\t\t\t\t\treader.Read (bitmap.Width = iconSize = reader.ReadIconDir.idEntries = reader.ReadByte", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.inSameSubroutine(this)\n            if (l.next) {\n                l.add(this)\n                if (l.next == null) {\n                l.addToSubroutine(id, nbSubroutine);\n                l.", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack, __domain);\n            var result_of_this_method = (UnityEngine.Ray)ptr_of_this_method->", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getPosition(position));\n\t\t}\n\t\t\n\t\tprivate void setTitleColor(String color) {labelShowColor.setBackground(new Color(this.getDisplay(), color));}\n\t\t\n\t\tprivate void setTitle", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self.assertEqual( currImageValue = self._getCurrentValue( driver, \"Image\")\n        self._getCurrentValue( driver, \"Image)\n        self._getFirstValue( driver, \"Image)\n        self._getFirstValue( driver, \"Image\")\n        self._get", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.gss_kexg = self.transport.kexgss_continue\n        self.gss_token = self.gss_kex = self.p = self.x = self.x\n        m = self.x_gss_contin\n", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode databaseNode = new DefaultMutableTreeNode(connectionData.getDatabaseName());\n            if (treeModel != null) {\n                treeModel.insertNodeInto(databaseNode, tree.getRootNode(), 0);\n            }\n        }\n    }\n}", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code)\n                result = 0.0\n                self.cr.execute(\"SELECT sum(number_of_hours * number_of_days) as number_of_hours\\\n                            FROM smart", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = MfracToMfracToMfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #Mfrac\n    #M\n    #Mfrac\n    #", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (getBounds().getWidth() * 1.1);\n        d.height = (int) (getBounds().getHeight() * 1.1);\n        return d;\n    }\n    /**\n     * Construct text fig\n     *", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container.append(share_edge(self.edge)\n        self.share_edge(p0,p1)\n        self.share_face(self.edge,flag='off_center',p0,p1,p2,p1,0,p2,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void _securitiesWindow_Loaded(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar securities = _securitiesWindow.SecurityPicker.Securities;\n\t\t\t_se", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register(self, _Hist3D)\n    def __init__(self, *args):\n        _Hist3D.__init__(self,\n        params[0]\n        # ROOT.TH3D(self,\n        self.GetNbins, params[0][", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addToRoster(protocol, contact, query.getPagingOrder() == PagingOrder.NORMAL ? query.getFirst() : query.getLast());\n        }\n    }\n}\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", \"RGB\", (0.333333, 0.333333, 0.333333))\n                im1L = im1L.convert(\"L\", \"RGB\", (0", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++)\n\t\t\t\tret.add(new byte[0]);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected byte[] getLog(int i) {\n\t\tfinal ArrayList<", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(self, \"signature\", \"Signature, normally '**ACE**'\")\n    yield textHandler(self, \"unknown[]\", \"Unknown field, probably 0\", hexadecimal)\n    yield RawBytes(self, \"body_data\", \"Body data,", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n\t/**\n\t * This method is called when the connection is lost.\n\t */\n\t@Override\n\tpublic void connectionLost(Throwable cause) {\n\t\tlog.error(\"Connection lost: \" + cause.getMessage(), cause);", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       return environ, wsgi_app\n        # The WSGI app must be a callable that accepts two arguments:\n        # 1. environ dict\n        # 2. start_response callable\n        # The WSGI app must return an iterable of strings.\n        #", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model( data = None )\n\t\t\t\n\n\n\n\n\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (chance < 100)\n                chance = 100 + chance;\n            if (chance > 100)\n                chance = 100;\n            if (chance <", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a list of the enumerated values\n            # Create a list of the enumeratedValues\n            # Create a register\n        if 'bit_width'\n        # Create a register\n        return the enum_type\n        \"\"\"\n        # Create a field\n        \"\"\"\n        # Create", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                MessageBox.Show(\"No modules found!\");\n            }\n        }\n    }\n}\n\n\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                return (this.Items.Count;\n            }\n            }\n            }\n        }\n        }\n        /// <summary>\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        ///\n        [Meta]\n       ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.vertexArray[this.currentTextureHash]\n                this.vertexBuffer.length()\n            }\n            this.vertexBuffer.length()\n            }\n            if(this.vertexBuffer.length();\n            this.vertexBuffer.length();\n", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                    else\n                    {\n                        break", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if name in 'radius in meters, resolution in meters, or center in degrees.\n        shape, center, units, units, or center, upper_left_extent, units, units, units, units, list_of_list_of_list, list_of_list, list_", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.set(\"intro_options\", \"1,2,3,4,5,6,7,8,9\")\nQUEST.addStartNpc(WK_ROMP)\nQUEST.createDefaultItems(forPlayer", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t}\n\t\t\t\t\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\treturn empty;\n\t\t}\n\t\t}\n\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            VertexDataSize = VertexDataStride * VertexDataSize;\n            Attributes = new AttributeCollection();\n            _sCurProgram = this;\n        }\n        public Shader", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.metabolites._reaction = set()\n        self.reactions._metabolites = set()\n        self.reactions._genes = set()\n        self.genes", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic static Tum", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       LayoutAnimationController.setFactoryTransformationsEnabled(true);\n    }\n\t\n\t@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n    \tswitch (item.getItemId()) {\n    \tcase MENU_SYNC:\n    \t\tdoSync", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (row.FieldKey == 0)\n                {\n                    row.FieldKey = HighestNumber + 1;\n                    break;\n                }\n                else\n                {\n                    HighestNumber = (int)row.FieldKey;\n                }\n            }", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(i);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
