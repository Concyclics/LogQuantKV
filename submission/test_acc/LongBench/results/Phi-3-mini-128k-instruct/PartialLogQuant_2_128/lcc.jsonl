{"pred": "\t\t\tm_Registered = false;\n\t\t\tm_Finished = false;\n\t\tm_Started = false;\n\t\t\tm_StartedBeginCountdown = false;\n\t\t\tm_Registered = false;\n\t\t\tm_Started", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\n\t\t\tif len(roots) == 1:\n\t\t\t\troots = roots\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+')\n        a.seek(1000)\n        a.write_frames(np.zeros(1000, dtype='int16'))\n        a.seek(0)\n        a.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    self.wait_for_element_visible(self._SUBTITLE_OK)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\twriter.addAttribute(\"value\", OLStyleValue.class, \"value\");\n\t\t\t\t\n\t\t\t\tif (value instanceof OLBaseClass) {\n\t\t\t\t\tOLBaseClass ol = (OLBaseClass) value;\n\t\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef _handle_question(self):\n        pass\n    def _enable_start(self, *args):\n        self.start_requested\n    def _enable_start(self):\n        self.start_requested = False\n        self.stop_request\n    def _", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   SR_Utilities.Location loc = SR_Utilities.GetLocation(mob.Location, mob.Map);\n                    SR_Utilities.Location newLoc = SR_Utilities.GetLocation(loc, mob.Map);\n                    mob.SendMessage(String.Format", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "       }\n    }\n    }\n    }\n    @Override\n    void send(HandshakeInMessage(CertificateMsg)\n    {\n        // TODO:\n    }\n    }\n    @Override\n    void\n    print(PrintStream) {\n    }\n}", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       synchronized (sp) {\n            if (sp == null) {\n                sp = new JESpace(name, path);\n                spaceRegistrar.put(sp);\n            }\n        }\n        return sp;\n    }\n}\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "   wsg\n        if environ.method == 'POST':\n            return self.dispatcher.do_get(environ, self.dispatcher.help(environ, start_response\n            self.dispatcher.wsdl()\n            self.dispatcher.wsdl\n    def do_get", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.statuses = [s1]\n        self.update_statuses([s1])\n        self.conversation_root_id = s1.conversation_root_id\n        self.webview.update_conversation(s1, s1.con", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "\n        return {\"error\": False,\n    return {\n            \"status\": Operation.set_attributes(op_id,\n        }\n        }\n    def action_upload_file(self,\n        return self.get_process_data(operation.set_attributes(operation.data", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).Equals (b), \"Union-Equals\");\n\t\t}\n\t}\n}\n#endif\n}\n}\n#endif\n}\n#if NET_2_0\n\t[Test]\n\t[ExpectedException", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return self.trust_managers[0].getAcceptedIssuers()\n\ndef _get_ca_certs_trust_manager(ca_certs):\n    trust_manager = X509TrustManager()\n    trust_manager.setParentTr", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       Map<String, String> info = new HashMap();\n        info.put(\"domain\", domain);\n        info.put(\"domainInfo\", manager.getDomainInfo(domain).toString());\n        request.setAttribute(\"domainInfo\", info);\n    }\n    /**\n     * Finds the", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "   self.__datastream_protocol = self.__encoder.get_datastream_protocol\n    def __init__(self)\n        raise NotImplemented\n        raise NotImplemented\n    def __data_stream_address = self.__datastream_address\n    def __", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\n\t\t\t\tif (iter.Path.ItemAt(0).ToString() == \"0\") {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue(iter, column1));\n\t\t\t\t\toption1 = (", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null;\n            } else {\n               \n\n\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\taddField(new FieldEditor(AUTO_SAVE, \"autoSave\", getFieldEditorParent()));\n\t\taddField(new FieldEditor(AUTO_SAVE_TIME, \"autoSaveTime\", getFieldEditor(\t\t(\t(\t\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               ArchProtectionSpell.RemoveEntry( from );\n            }\n            public override void OnFinish()\n            {\n                base.OnFinish();\n                if ( m_Owner.SpellTarget != null )\n                {\n                    m_Owner.SpellTarget.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self._connection_for_default_table\n        # no_autoflash\n        \"\"\"\n        \"\"\"\n        @classmethod\n        def begin_transaction(self, self._assert_engine, self._connection_callable, self.\n        \"\"\"\n        def _connection_call", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\n\t\t\n\t\t\n\t\t\n\t\treturn instanceNames(IField keyToField(IField key);\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   if self.set_body(self.get_argument(self, self.get_body(self.set_auto_finish(self, *args, self.set_body.path, self.path, self.path.rstrip\n    return self.redirect(self, self", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\twriter.AddAttribute (\"_MultiViewIndex\", viewIndex.ToString ());\n\t\t\twriter.RenderBeginTag(HtmlTextWriterTag.MultiView);\n\t\t\twriter.RenderEndTag();\n\t\t\t\n\t\t\tforeach (View view in Views)\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wigle_downloader = WigleDownloader( user, password, coordfile, outpath )\n    wigle_downloader.download()\n    wigle_downloader.download()\n    wigle_downloader.download()\n    wigle_download", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i)\n                {\n                    if (mod == 13)\n                    {\n                    if (i)\n                    {\n                        if (i.SkillBonuses.GetSkillBonuses[0]\n                    }\n                    }", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = [builds or [] for _ in range(len(platforms))]\n    for build, build_info in zip(platforms, builds):\n        if build == 'aurora':\n            build_info['download_link'] = make_aurora_link(\n                product", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeIDs(projectID, issueTypeID);\n\t\t}\n\t\tif (stateBeansList!=null && !state", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if ( argument.Parent is MethodCallExpressionSyntax ) {\n                    var methodCall = ( MethodCallExpressionSyntax ) argument.Parent;\n                    if ( methodCall.IsByRef ) {\n                        ArgumentSyntax argumentToReplace", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       self.assertEqual(self.test_split_test_module, self.assert_key = self.response_usage_key = self.response_usage_key = self.assertEqual(split_test_module.children, self.assert_key, 'Group 0, self.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           tmp.Add(new PdfName(\"Encoding\"));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));\n            tmp.Add(new PdfName(encoding));", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = cell.getNumUsagesIn()", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return new ListenableFutureTask.ListenableFutureTaskListener<Bitmap>() {\n          @Override\n          public void onSuccess(Bitmap bitmap) {\n            if (bitmap != null) {\n              bitmapReference = new Soft", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # less than ideal button duplication between classes\n    save_button = Button('Save')\n    reset_button = Button('Reset')\n    cancel_button = Button('Cancel')\n    @property\n    def is_displayed(self):\n        return (\n            self.in_", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tnotifyRecognitionListeners(timestamp, sequenceTitles, sequences);\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralSkeleton skeleton) {\n\t\tnotifyPoseListeners(timestamp, skeleton);\n\t}\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           base.Render(writer);\n            if (Enabled)\n            {\n                writer.AddAttribute(\"onclick\", Page.ClientScript.GetClickEvent(this));\n            }\n            else\n            {\n                writer.AddAttribute(\"onmouseover\", Page.ClientScript.GetMouse", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n    if (compound.hasKey(\"display\"))\n    {\n        NBTTagCompound display = (NBTTagCompound) compound.getCompound(\"display\");\n        if (display != null)\n        {\n            this.displayName = display.getString(\"text", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \" (Probability: \" + probability + \")\";\n    }\n}\n\n/**\n * @param <T>\n */\npublic class Scope {\n    private static final String SCOPE_TAG = \"scope\";\n    private static final String S", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   assert store.handle_indicators_search(t, {'itype': 'fqdn'})\n@pytest.mark.skipif(DISABLE_TESTS, reason='need to set CIF_ELASTICSEARCH_TEST=1 to run')\ndef", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       p = Person.objects.get(pk=1)\n        o = Organization.objects.get(pk=1)\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   if self._interactive:\n        self.line(x=x, y=None, sel_dim=None, sel_dim_value=None)\n        else:\n        self.y = y_\n        if sel_dim_ind=None\n        if self.interactive", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!_rootFolderService.IsIgnored(rootFolder, path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            if (toScan.Any())\n            {\n                _commandQueueManager.Enqueue(new ScanPathsCommand", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key, BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform(remappingFunction));\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       if self.request.has_key('inreplyid'):\n            if self.request.has_key('inreply'):\n            if self.request.has_key('inreplyindex):\n            if self.request.has_key='inreply_commentcount)", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\tset\n\t\t{\n\t\t\t\tTile[] tiles = ReadLandBlock;\n\t\t\t}\n\t}\n\t}\n\tpublic static Tile[][] GetStaticTile\n\t\t{\n\t\t\tget;\n\t\t{\n\t\t\tget", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   channel_uri = String.Format(\"sip: {0}\",\nanswers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart = textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop = textDateStop.Text;\n\t\t\tPayPeriod", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       time_avg_heading\n        # Read the lines of the file\n        time_series_column_headings = column_headings\n        column_headings = column_headings = _parse_column_headings = _build_time_column_headings\n        #", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    else:\n        return {'success': True}\ndef user_create_rest(context, data_dict):\n    model = context['model']\n   ", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tdouble confidence = Math.pow(1d, 1.0 / depths[parentIndex]);\n\t\t\t\t// setting outcomes\n\t\t\t\tnode.getChildren().values().iterator().next().getModel().apply(example, predictionAttribute, confidence);\n\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           lock (this.locker)\n            {\n                return new SearchResults[] { new SearchResults() };\n            }\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           if (ch, offset, int match, int state) {\n         if (ch, offset, int match(StringValue string, int offset, int match(String, int match(StringValue, int offset, int match(String, offset, int match(StringValue string, int min, int", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "       if (existingRequired && !StringUtil.isBlank(studyFormName)) {\n          return ValidationResults.REQUIRED_FAIL;\n        }\n        if (StringUtil.isBlank(studyFormName)) {\n          return ValidationResults.SU", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tLog.Write(\"server\", \"Dropping client {0} because {1}\", newConn.Socket.RemoteEndPoint, message);\n\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n\tpublic CatsReferralPendingEmer", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'views':\n    views()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    print \"Invalid parameter\"\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get report type\n  if not 'reportType' in pD:\n    return S_ERROR( \"Missing report type!\" )\n  reportType = pD", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (playerResources.HasExcessPower(playerPower, Info.MinExcessPower, Info.MaxExcessPower))\n\t\t\t{\n\t\t\t\t// If we have excess power, build a new production building\n\t\t\t\tforeach (var building in Info.", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       catalogStmt.setOutput_columns(plan.columns.getColumns().size());\n        catalogStmt.setOutput_columns(catalogStmt.getOutput_columns());\n        catalogStmt.setOutput_columns(plan.columns.getColumns().size());\n        catalogStmt", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);\n\t\t\tthis.comboBox1.Text = \"Select a peer to connect to:\";\n\t\t\tthis.comboBox1.FormattingEnabled =", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.ByteSize = (ByteOrder)data_bits;\n\t\t\tdcb.fBinary = false;\n\t\t\tdcb.fDtrControl = (DtrControl)SetR", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.check_edit_profile(self.user.get_profile().edit_url)\n        self.check_profile(self.user)\n    def test_user_with_cobranding(self.user)\n        self.assert_profile(self.user)\n", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args, _ = parser.parse_known_args()\n    _keep_tempdir = args.keep_tempdir\n    if args.help:\n        parser.print_help()\n        return\n    if args.version:\n        print(\"Fetchphotos version {}\".format(", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself.updateAPList = self.newAPList = self.getAPList(self.list, self.list, self.list, self.list, self.rescanList = self.APList = self.list\n\t\t\t\t\t\n\t\tself.rescan", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float size = font.GetWidthPoint(fCode, size) + fontX + fontY;\n                if (generateChecksum && checksumText)\n                    size += font.GetWidthPoint(GetChecksum(fCode), size);\n                return new iTextSharp.text", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return Arrays.asList(results);\n  }\n  \n  /**\n   * Load a comma-separated list of strings from Properties.  Commas may be quoted if needed.\n   * @param key The key to the property to load\n   * @return A list of strings", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-80, +80, 10)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        x_points = x_points.flatten()\n        y_points =", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetData(DataFormats.Text, currPacket.ToString());\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(SavePack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "\n    # get_mf\n    # get_mfcc_vectors\n    mfcc_vectors = []\n    mfcc_vectors_link = []\n    mfcc_vectors = []\n    mfcc_vecto_vect\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        /// <summary>\n        /// Gets the number of references for a key.\n        /// </summary>\n        /// <param name=\"key\">The key.</param>\n        /// <returns>The number of references for the key.</returns>\n        public virtual int GetNumReferences", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.SuspendLayout();\n        }\n            this.SuspendLayout();\n            this.ResumeLayout();\n            this.SuspendLayout();\n            this.ResumeLayout();\n        }\n        }\n        this.SuspendComponent(false);\n       ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   _nullFunction = self.nullFunction\n    _nullFunction.__name__ = 'nullFunction'\n    _nullFunction.__module__ = 'OpenGL.platform.base'\n    _nullFunction.__doc__ = \"\"\"\n    A null function that does nothing.\n    \n    This function", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, NID.getFolder(NID.compressedCodersUnicode(header);\n    }\n    }\n    private static void writeUint64(DataOutput\n    private void writeUint64(DataOutput\n        writeFileEmpty", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n                alphaLevel = (int) (15.0 + (System.currentTimeMillis() - start) / rampDelay * 100.0);\n                repaint();\n                try { Thread.sleep(100); } catch (InterruptedException e) { e", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.DownloadItems().Single().\n\n                .Should().Be(true);\n        }\n        }\n        }\n        }\n        [Test]\n        [Test]\n        public void\n        {\n        [Test]\n        public void\n        {\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n    await RecycleItems(session, cancellationToken, ultraPotionCount, ultraPotion);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       if c.write(str(c.line)\n        f.write(str(str(c.center_constrain_c. + ' to ' + str(c.c. + c.n + ' to ' + str(c.U.Re. + c.r\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x02) << 4);\n                    i += (((b & 0x01) >> 1) << 3);\n                    i += ((", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_key.make_usage_key('course', self._course_key)\n\n    def _install_course_updates(self):\n        \"\"\"\n        Install course updates.\n        \"\"\"\n        if self._updates:\n            course_details = self._", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) chance = Float.parseFloat(splitNumber[1]);\n\t\tif(chance > 100) chance = 100;\n\t\telse if(chance < 0) chance = 0;\n\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       if not os.path.exists(cert_file):\n            download_request(name, apiid, apikey, cert_type)\n        else:\n            module.exit_json(msg=\"Meter \" + name + \" already exists\")\n        # Download the certificate\n        cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.chkPrivacy = new System.Windows.Forms.TabControl();\n        }\n        }\n        this.tbPrivacy = new System.Windows.Forms.TabControl();\n        }\n        // \n        // \n        // \n        this.tbP", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.archive.archive.add_file(self.archive.new_file)\n        self.ui_log.log_plugin_name\n        self.archive.add_file(self.archive.log_plugin_name, self.archive.log.info(self.sos", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class ISessionFossil(ISessionBasicFossil):\n    def getSessionId(self):\n        \"\"\" Session Id \"\"\"\n    getSessionId.produce = lambda s: s.getId()\n    def getSessionTitle(self):\n        \"\"\" Session Title \"\"\"\n    get", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           System.out.println(\"Error importing message: \" + e.getMessage());\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText().trim(), subfoldersCheckbox.isSelected(), result);", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\tif (value instanceof Integer) {\n\t\t\t\t\tlayer = ((Integer)value).intValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn layer;\n\t}\n}\n\nprotected SortObject getSortObject(Object options", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       GraphRequest request = GraphRequest.newMeRequest(currentSession, new GraphRequest.GraphJSONObjectCallback() {\n            @Override\n            public void willBeExecuted(GraphObject object) {\n                GraphUser user = (GraphUser) object.getProperty(REQUIRED_FI", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tfor (int[] influence : emotion.influences) {\n\t\t\t\tsum += influence[0] * influence[1];\n\t\t\t}\n\t\t}\n\t\tfor (Emotion em", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "           'finished_at':\n            '\n            'started_at':\n            'stage': {\n            'name': 'stage2\n            'job': {\n            'duration': '2,\n            'property2': 2,\n            'name': 'stage2,", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if NorthernHemisphere:\n        #if the point is in northern hemisphere\n        #calculate longitude\n        C = (1-eccSquared)/2\n        M = M*(1-eccSquared/eccPrimeSquared)\n       ", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\n        form = ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Report submitted successfully!\")\n            return HttpResponseRedirect(reverse('profile_user', args=[user.username]))", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   @property\n    @property\n    \"\"\"A list of SeriesReleasePair(self, self.field_names = self.field_names = [\n        self.field_names = [\n        self.field_names = [\n        @property\n        field_names = self.field_", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach(KPFormCustomization kpfc in m_vForms)\n\t\t\t\t{\n\t\t\t\t\tif(kpfc.TypeName == str", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    /**\n     * @return\n     */\n    public String getIdentifier()\n    {\n        return identifier;\n    }\n    /**\n     * @param identifier\n     */\n   ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "           new_positional_tags_list.append(TagRegex(regex, True))\n    def test_tags_as_int(test_tags):\n        if test_tags is not None:\n            return [test_tags[0]]\n    def test_tags_as_", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "\n            return new object[0];\n\n            }\n            public override bool Equals (object obj)\n            {\n                return false;\n            }\n            public override int GetHashCode ()\n            {\n                throw new NotImplementedException ();\n            }\n            public override string", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# Answer:\nfrom scapy.fields import FlagsField, ShortField, XBitField, XByteField, XShortField, XIntField, X3BytesField\nfrom scapy.layers.obd import OBD_PID00, OBD_PID10,", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\tself.sessions = {\n\t\t\tself.items = {\n\t\t\t\t\t\"Item %s\",\n\t\t\tself.path, dbus.glib.dbus.dbus.", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           {\n                this.AddSpell(typeof(Reg.Garlic, Reg.Garlic, Reg.Ginseng, Reg.MandrakeRoot, MandrakeRoot, Garlic, MandrakeRoot, MandrakeRoot, Sulf, Reg.Garlic,", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       self.pop(exc)\n        if self.preserved:\n            self.pop()\n        self.pop()\n        self.pop()\n        self.pop()\n        self.pop()\n        self.pop()\n        self.pop()\n        self.pop()", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return session.query.filter(PubSubConsumer.id, needs_columns=needs_columns=False)\n    )\n    )\ndef _pubsub_consumer(session, cluster_id, needs_columns=False):\n    return session.query.filter(PubSub", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesForRelease(ResourceEntity resource, ReleaseEntity release) {\n       ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       rot_dir = _axis_in_detector(ray_trafo.geometry)\n        # Compute the distance from the source to the rotation axis\n        source_to_axis_distance = src_radius * np.cos(angles * np.pi / 180)\n", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   self.providerType = self.providerType\n    self.url = self.url\n    self.url = self.url\n    self.url = self.url\n    def __init__(self):\n        \"\"\"\n        Initialize the proxy\n        self.url = self.url\n       ", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn string.Format (fmt, \"{0} {1}\", type, unit);\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn ToString (null);\n\t\t}\n\t\t\n\t\tpublic override string ToString (I", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t{\n\t\t\t\tthrow new InvalidCipherTextException(\"BlockLength too large for Naccache-Stern cipher.\\n\");\n\t\t\t}\n\t\t\t// check for correct", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\tAssert.That(obj.Properties[0].Value.Properties.Count, Is.EqualTo(1));\n\t\tAssert.That(obj.Properties[0].Value.Properties[\"In this test it is an object.\"].Type, Is.EqualTo(TokenType.String));\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               Topic a = getVertexTopic(h, null, null);\n                Topic b = getVertexTopic(h, null, null);\n                edges.add(new T2(a, b));\n            }\n            if(isToroid) {\n                edges.", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   i1 = iso.get_default()\n    d1 = ds.get(col1=\"deform\",\n                  col2=\"volume\",\n                  col_rate=0.04,\n                 lut_id=LE-2D\n    channel_width=15", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       TripleStoreUtility.compareGraphs(new File(\"file1.nt\"), new File(\"file2.nt\"));\n    }\n}\n", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "                   u'SpotPrice': '0.102200',\n                    u'AvailabilityZone': 'us-east-1a'}]\n        assert not alert.lowest_spot_price(history, 'us-east-1a', 'g2.", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Checks for the consistency of the files.\n\t * \n\t * @return\n\t */\n\tprivate boolean checkFilesConsistency() {\n\t\tboolean", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\twindow.Window.Destroy();\n\t\t\tOpenGL.glDeleteProgram(0);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tOpenGL.glDeleteVertexArrays(1, ref vao);\n\t\t\tOpenGL.CheckGLE", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       return self._project_cov_mat_inv,\n        \"\"\":rtype:\n        \"\"\"\n        return self._project_model.x_cov_mat_inverse\n        \"\"\"\n        \"\"\"\n        return self._x_data_cov_mat_data_cov_mat_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(this);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n     */\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.toString", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "               if (accountId = Accounts.getAccountId(walrusBucket.getUser(walrusObject.get(walrusBucket.getOwnerAccount.getAccountId.getAdminAccountStorage.getOwnerId) = Accounts.getAccounts.getAccounts.get", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           {\n                if (this.IsDisposed)\n                    return null;\n                if (this.IsInitialized)\n                    return null;\n                if (value == null)\n                    return null;\n                if (value.IsDisposed)\n                    return null;", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       CanDoActionTestUtils.runAndAssertCanDoActionFailure(\n                command,\n                assertInvalidTemplateName(name, isImportAsNewEntity));\n    }\n    private static void mockGetTemplatesFromExportDomainQuery(VolumeFormat volumeFormat,\n            VolumeType volumeType,\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.spinbuttonCheckPeriod.Adjustment.StepChange = 1D;\n\t\t\tthis.spinbuttonCheckPeriod.Numeric.Numeric.NegativeButtonPress.Connect(this.OnNegativeButtonPress);\n\t\t\tthis.sp", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       environ['NZBPROC_FILENAME = 'NZBLOCK_RE.\n        if self.parstatus = self.status\n        self.status = self.status\n        # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t\t//ilgen.Emit(OpCodes.Ldarg_0);\n\t\t\t//ilgen.Emit(OpCodes.Ldnull);\n\t\t\t//ilgen.Emit(OpC", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "   }\n    public static Builder ParseParsable {\n      return this.ParseFrom(byte[] data, pb::System.Arrays.BinarySerializer;\n    }\n    }\n    public static Builder BuildParsing;\n    public Builder {\n    Builder {", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = this.vertices.get(getVertIndex(i, x));\n            }\n        }\n    }\n    /**\n     * Returns the index of the quad <code>i</code> in the index buffer.\n     * \n     * @param i", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (m_useLanguages)\n        if (m_useAttachment\n        boolean m_useLanguages\n        }\n        String[] m_columnsToHide = new String[] {\n            COLUMN_NAME_SORTABLE_TYPE,\n            COLUMN_NAME_", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\t\tif (dynamicHeight)\n\t\t\t\t{\n\t\t\t\t\ttextRect.sizeDelta = new Vector2 (placeholderRect.size.x, placeholderRect.size.y);\n\t\t\t\t\tyield return new WaitForSeconds (animationDuration);\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       base.Width = (int)GetLargeTextSizeF().Width;\n        base.Height = (int)GetLargeTextSizeF().Height;\n      }\n      Invalidate();\n      base.OnSizeChanged(e);\n    }\n    #endregion\n    }", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "               lastUser = r[\"CreatedBy\"].ToString();\n            }\n            Users.Add(lastUser);\n        }\n        // ...\n    }\n}\n", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Verify that the conference data\n            if (VerificationResultCollection.VerificationResults.Any(PcConferenceOption, PcConferenceDataRow.Row.Row.Discount, Discount, VerificationControls, VerificationResult, VerificationControls, VerificationControls, Verification", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int)stream.Length);\n                // Adding file content as string.\n                args.Add (filename, null, buffer);\n            }\n        }\n    }\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    PayloadRequirementsRequirement = namedtuple('PayloadRequirementRequirement', ['requirement', 'reason', 'strong'])\n\nclass PayloadRequirements(object):\n    \"\"\"A container for payload requirements.\n    \"\"\"\n    def __init__(self):", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\t\n\t}\n\t\t\t\t\n\t\t\t\tNotifyPropertyChanged(\"CustomRangeCustom\");\n\t\t\t\tNotifyPropertyChanged(\"CustomRangeStart\");\n\t\t}\n\t\t\t\tNotifyPropertyChanged\n\t\t}\n\t}\n\t\t}\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tif (value != dataDir) {\n\t\t\t\t\tif (Directory.Exists (value))\n\t\t\t\t\t\tDirectory.Delete (value", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation.getSourceLine() == null) {\n                throw new IllegalStateException(\"BUG: BugInstance \" + bugInstance + \" has a bug annotation without a source line\");\n            }\n        }\n    }\n    /**\n     * @return\n     */\n   ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t}\n\tpublic class Coffee :\n\t{\n\t\tget {\n\t\t\t{\n\t\t}\n\t\tset {\n\t\t\treturn 0.1;\n\t}\n\t}\n\t}\n\tpublic override bool CheckHunger\n\t{\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n        }\n        }\n        {\n            if (Menu.GetBool(\"JungleClearW\")\n            {\n                var minions = minions.GetMinions.GetMinions();\n                if (minions.Any()\n                    if (minions.", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn GridBagConstraints.createConstraints(x, y, width, height, 0.0, 0.0, fill, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        tree = xml.etree.ElementTree.fromstring(fb)\n        for child in tree.findall('./s_b31fg'):\n            if child.attrib['Ort'] == 'DE':\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        self.assertEquals(\n            Model_parser.resolve_models('testsuite')['test_model'],\n            Model_parser.resolve_models('testsuite')['test_model'])\n        clean_field", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               var fields = new[] {\n                    {\n                    \"create table MyInfraWidening\",\n                    namedWindow\n                    :\n                    bool namedWindow\n                    :\n                    \"create table MyInfraWidening\n                    :\n                    {\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   #rebound.add_orbit\n   \n    # of particles\n   \n    a\n    c_double\n    P\n   \n    def __rmul__(self, other):\n       \n    if isinstance(other):\n        return NotImplemented \n        return Not", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n    view = self.pool.get('ir.ui.view')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.setViewFactory(new ViewFactory() {\n                public View create(Object parent) {\n                    return new Renderer(parent, getFactory(), null);\n                }\n            });\n        }\n        if (oldValue != null) {\n            c.putClientProperty(", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = SourceFile(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.name_is_test\n    assert s.name_is_manual\n    assert s.name_is_visual\n    assert s.name_is_worker", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t}\n\t\t#endregion\n\t}\n}\n}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t}\n\t\tpublic void RegisterBroadcast()\n\t\t{\n\t\t\tfor ( int i = 0; i < m_LastBroadcasts.Length; ++i", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   popInvocationDepth = \n        invocationQueue.addGraphQueue.add(null);\n        invocationQueue.add(new InlineInfo(methodInvocation);\n        invocationContext.setReplacements(methodInvocation.getReplacements(methodInvocation.getInliningContext", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n        if self.args['pr']\n    def create_log_path:\n            self.log_path = self.args.log_path\n                self.log_path = self.log_path\n                self.container_id\n                self.container_id.\n                self", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    states.get(0).readCache.put(merge.getStamp(), states.get(0).getCacheEntry(key).getValue());\n                } else {\n                    states.get(0).readCache.put(key, value);\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       mProviderHandler.send(event);\n    }\n    /** @see Connection.VideoProvider#onSetPauseImage */\n    public void onSetPauseImage(String uri) {\n        mProviderHandler.send(MSG_SET_PAUSE_IMAGE, uri);\n   ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\t\n\t\t\t\tBaseCreature.Teleport(from, Moonstone.GetWorldLocation(), Map.TerMur);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.metadata.create_all(db.engine)\nfor model in models:\n    model.metadata.create_all(db.engine)\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "       self.module.pop(user, None)\n        if self.module.get('all_users'):\n            self.module.pop('all_users', None)\n        self.module.pop('all_sessions', None)\n    def datetime_to_timestamp(self,", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       self.wrapwidth = _BaseFile(self, wrapwidth = _BaseFile.wrapwidth\n    _Base.wrap = _Base.wrapwidth = _BaseFile.wrapwidth,\n    def __str__str__\n    def __repr__str__\n    _BaseFile {", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine integrity of transformation %s\" % transID )\n      return S_ERROR\n    if not res['Value']:\n      gLogger.info( \"No integrity problems found for transformation %s\" % transID", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\treturn null;\n\t}\n\t}\n\t}\n\t\n\t// FIXME\n\t// FIXME\n\t//\n\t// FIXME\n\treturn null;\n\t\n\t}\n\t\n\t// FIXME\n\treturn null;\n\t}\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       self.assertEqual(\n            yield self.run_fake_single_build(gsp, buildResult, resultText),\n            msg)\n        result = yield gsp.sendCodeReview(self.TEST_PROJECT, self.TEST_REVISION,\n                                ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n    self.category.scheme = 'http://schemas.google.com/g/2005#event.calendarCategory'\n    self.category.label = 'Meeting'\n    self.assert_(self.category.scheme ==", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       // TODO: @I\n        // TODO: this\n        // TODO: this is not needed\n        // TODO:\n        // type variables\n        // TODO: @I\n        // TODO: this is a bit of a wildcard\n        // TODO: a wildcard\n        if (type", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "       mat = active_node_mat = active_node_mat = mat.use_sh_only = mat.use_shader = mat.use_shad = mat.use_shadeless = mat.use_shadeless = mat.use_shadeless\n        if mat", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           }\n            if (_engine.Pu\n            _spriteClip\n            = _engine.spriteClip\n            _spriteCrossed = map6.SpriteCrossed;\n            _spriteCli\n            _spriteCrossed = map6", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           m_jPopMenu.add(new JMenuItem(sTDocUrl, sTDocUrl, oActionListener));\n        }\n        private JMenuItem getInspectMenu(String _sMenuText){\n            JMenuItem oInspectorMenuItem = new JMenuItem(_sMenuText);", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70025, \"You can buy the scroll for 700 gold coins.\");\n\t\t// AddItem(70025, 700, 700, 0x0000000", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = (int)child.GetType ().GetProperty (ChildProperty).GetValue (child, null);\n\t\t\tint newHeight = Math.Max (height, min);\n\t\t\treturn newHeight;\n\t\t}\n\t\tpublic override void LayoutSub", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   from django.utils.timezone import now\n    self.tweet_id = now().strftime('%Y-%m-%dT%H:%M:%S')\n    self.save()\n    # FIXME This is not a good idea.\n    # FIXME", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.by_name['php'].startstring = r'\\bv'\nlexers.by_name['php'].releasenote_format = r'New in release \\#%v of %s'\n# Enable the \"API Documentation\" output view type\nhtml_", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   cursor.execute('''SELECT sdate, stime, edate, etime, duration, src_callsign, max_altitude, registration \n                    FROM flight_log_final WHERE groupID=?''', (i,))\n                    #cursor.execute('''", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table_create('projects').run()\n        conn.table('projects').insert({'project_id': project_id, 'last_snapshot': timestamp}).run()\n    \"\"\"\n    conn = rethinkdb_connection()\n    return conn\ndef db_get_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t\t// Deian's skill_\n\t\t\t\t// I'm not sure if you're interested in sheep.\n\t\t\t// Deian's skill_deian_01\n\t\t\t// Deian's skill_deian_01\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "   def __init__init__init__\n    def __init__\n    def __init__\n    def __init__\n    def __init__\n        \"\"\"\n        \"\"\"\n        Response.__init__(self, restag, rescode, resstr, resstr, resstr, resstr", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "class HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, name, status, result):\n        self.name = name\n        self.status = status\n        self.result = result\n        self.start = self.finish =", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               if (toastType.equals(TOAST_DETAILED))\n                    Toast.makeText(context, getString(R.string.toast_message_done) + uri, Toast.LENGTH_LONG).show();\n                else\n                    Toast.makeText(context,", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.keys()) > 0):\n        raise AssertionError(\"primary.xml contains additional metadata:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_outputs = self._bytecode_filenames(inputs)\n        inputs.extend(ext_outputs)\n        return inputs\n    # get_inputs ()\n    # -- Utility functions -----------------------------------------------\n    # (called by outsiders)\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tList<string>\n\t\t\t{\n\t\t\t\tList<string>[] closureClosure = propertyColumnSpans[];\n\t\t\t\tstring[] lazyProperties = new List<object> lazyProperties = new List<object>[] lazyProperties = new List<string", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--output=' + log_name,\n        '--log', log_name,\n    ]\n    return sge_cmd_arg\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [RolesRequired(\"Admin,ListEventDelegate\")]\n        [RolesRequired(\"Admin,SaveEventDelegate\")]\n        [R", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\nBuilder.AppendLine(string.Format(\"{0} {1} {2}\", prefix, menu.DisplayName, prefix.Length * 3));\n                        foreach (var child in menu.Children)\n                        {\n                            HandleMenu(child, indent + 1);\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\nself.download(self.url, post={\"download\": \"show\", \"downloadLink\": \"show\"}, decode=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path == null)\n\t\t\t\treturn null;\n\t\t\tvar closestHarvestableCell = path.FirstOrDefault(loc =>\n\t\t\t\t\tharv.CanHarvestCell(self, loc) && claimLayer.CanClaimCell(self", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                      self.logger.error(\"service restart failed\")\n                       return False\n                    self.logger.info(\"service restarted\")\n                    return True\n                else:\n                    self.logger.info(\"dhcp module not installed\")\n                    return True\n            else:\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\n", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           {\n            {\n                state = (cf = state.Frequency < MAXIMUM_FREST\n        {\n            }\n            }\n        }\n        {\n            state.Frequency\n            state.Symbol = _foundState.Symbol;\n            state.\n            {", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The SQ VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, true, true", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\n\t\t\n\t\n\t\tif(testOrDeleteType = true;\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\n\tprotected void on_", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   self.failUnlessEqual(b\"\\x00\"\n\n\n    self.assertRaises(BitReaderError, b\"\n    self.failUnlessEqual(8)\n    def test_insert_bytes(self, \n\n\n    self.file(self.", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n    <td>Linux 32-bit</td>", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.ylim(csi_95[0], csi_95[1])\n    plt.plot(cr['runs'], [cr['combined'][app][test][stat] for app in cr['combined'] for test in cr['combined'][app", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   test_uidGID\n        self.assertTrue(Derived)\n    \"\"\"\n    L{util.runAsEffectiveUser)\n    \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        test_euid=0, gid, uid, gid,", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlHighlight());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t\tg.setColor(MetalLookAnd", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " failures += simulateKMoreThanOne()\n  return failures\ndef simulateClassifier(knn, patternDict, msg):\n  failures = \"\"\n  for i in patternDict:\n    category = patternDict[i]['category']\n    knn.learn(patternDict", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset, value);\n    }\n    @INLINE\n    public final int getElementOffset() {\n        return headerSize();\n    }\n    @INLINE\n    public final int getElementOffsetUnscaled() {\n        return headerSize();\n    }", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Path.GetDirectoryName(this.FilePath), relativePath);\n            if (File.Exists(assemblyFile))", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string % kwargs\n    else:\n        raise TypeError('Invalid arguments for str.format()')\n\ndef str_format(*args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "\n        i17 = i6;\n        Dlasd(i, i1, i - 1, i, paramArrayOfInt2, i31, i3, i4, i5, i31, i1, i3, i3, i1, i1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name;\n\t\t\t\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t///", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               SpellData\n                {\n                    Slot = SpellSlot.R,\n                    Type = SpellSlot.\n                Delay = SpellSlot.R,\n                    Radius = 100,\n                    SpellType = SpellSlot", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"testUser\", \"testPassword\"));\n\t}\n}\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(OSError, subprocess.Popen, ['/some/command'],\n                          stdin=subprocess.PIPE,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.PIPE,\n                          close_f", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t[DataSysDescription (\"Indicates the index of this constraint.\")]\n\t\t[DataObjectMethodAttribute (FillMode = DataSpanSpanFillMode.OverwriteExistingData, ReadMode = DataSpanSpanReadMode.Updating)]\n\t\t[DataObjectMethod(\"Fill\",", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.retranslateUi_ui.setTabify(self.settings_kernels_groupBoxes_groupBox.setWidget(self.settings_kernels_groupBoxes)\n        self.settings_kernels_groupBox.setLayout(self.settings_kernels_", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               setRefreshItemVisible( false );\n            }\n            if ( wxs.moveToFirst() ) {\n                // We have a station with TAF\n                String stationName = wxs.getString( wxs.getColumnIndex( Awos1.STATION_NAME ) );\n               ", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"unexpected execution count\");\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionMaxTime, \"unexpected max time\");\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecution", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crctable[(uiCRCITTSum & 0x00ff) ^ uiByteValue];\n            }\n            if (refin == 0)\n            {\n                uiCRC", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn getDisguiseModule();\n\t}\n\t}\n\t/**\n\t*\n\t* @returnItemStack.getItem()\n\t*\n\t*/\n\tgetDisp\n\t\treturn entityData.getDisp\n\t}\n\t/**\n\t*/\n\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector(controller, sourceViewer)\n            };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonHyperlinkDetector(controller,", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.mainLayout.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self.drawingModeWidget)\n        self.mainLayout.addWidget(self.button)\n        self.mainLayout.setEnabled(True)\n        self.connect(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tif ( shouldSend )\n\t\t\t\t{\n\t\t\t\t\tm_Mobile.SendGump( new SetPoint2DGump( toSet, shouldSet, shouldSend ) );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        if (valueChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                        }\n                     }\n                     if (chosenObj != null", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (numChangesRecorded)\n\t\t\tsb.append(mesquete\n\t\t\tsb.append(array);\n\t\t}\n\t\t\n\t\treturn sb.toString();\n\t}\n\t\t\n\t}\n\t}\n\t\n\t\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                                    foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                                    {\n                                        //get the index of the line that could not be priced\n                                        int lineIndex = unpricedLine.Value;\n                                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic IMessageInspector MessageInspector {\n\t\t\tget { throw new", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // TODO\n        //read(mockSecurityManager, mockDatabase, mockDatabase, mockCurrentSubject,\n    }\n        //expect(mockSecurityManager, mockDatabase, mockCurrentSubject);\n        //expect(mockCurrentSubject, hasDbaRole()).andReturn(ACE_ACCESS_T", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v * viewport.ScaleFactor ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 center)\n\t\t{\n\t\t\treturn v.RelativeTo (viewport) + center;\n\t", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\nclass endpoint_key_t(XDREnum):\n    __members = {\n        endpoint_key(1, endpoint_value(1), endpoint_stats(1, 1)): 1,\n        endpoint_key(2, 1, 1): 2,\n       ", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\n\t\t\t\tif (workerSocket.", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Activity) {\n                return convertToActivityBucketList(list);\n            } else if(type == RequestType.Step) {\n                return convertToStepBucketList(list);\n            }\n        }\n        notifyListReceived(F", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s)' % (function_name)\n  print ''\n  # The single use helper function\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief A helper function to create a new %s with %d create-time arguments", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(\n        simplejson.dumps([\n            range_item_dict(item)\n            for item in items\n        ]),\n        content_type=\"application/json\"\n    )\n    return response\n\ndef range_item_dict(item", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */, DEFAULT_CONTEXTS));\n                }));\n                whereClause.addChild(whereClause);\n            }\n        }\n        final AST2BOpContext context = new AST2BOpContext();\n        context", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n    def get_success_url(self):\n        return reverse(\"shoop_admin:user.list\")\n    def get_context_data(self, **kwargs):\n        context = super", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The public part of the key used to encrypt the SHA1 hash of the persisted form of the referenced assembly.\n    /// </summary>\n    public IEnumerable<byte>", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           _iterator.SetConvergenceLimit(1e-12);\n            _iterator.SetConvergenceLimit(1e-12);\n            _iterator.SetConvergenceStatus(DefaultStatus);\n            _iterator.SetConvergenceStatus(DefaultStatus);\n            _", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[]{median};\n\t\t} else if (sortedNumbers.length % 2 == 0) {\n\t\t\tApfloat median1 = sortedNumbers[left];\n\t\t\tApfloat median", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if k in reference_counts.size_id\n\n    # Note that this is a bit more\n    # the right\n    # Right\n    # Left\n    # Right\n    # node\n    # parent\n    # parent\n    # left\n    # Right\n    # left", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for c in csv_mapping.columns:\n            if c in mapping_json['mappings']['properties']:\n                result[c] = True\n            else:\n                result[c] = False\n        return result\n    def _test_enrich(self, sortinghat=False", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tif (slot.Value.Locked)\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\tif (slot.Value.Value.IsBot)\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn _status.ToString();\n\t\t}\n\t\tpublic override object GetObjectData(SerializationInfo info, StreamingContext context)\n\t\t{\n\t\t\tif (_rootC", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\nclass HeaderFrame(Frame):\n    frame_type = FrameType.HEADERS\n    frame_size = 0\n    defined_flags = FrameFlag.create_flag_set('END_STREAM')\n    def __", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.BoundaryCurve.RectangularHull() != cluster.RectangularBoundary)\n                throw new MsaglException(\"Cluster boundary is not rectangular\");\n            foreach (var node in cluster.Nodes)\n                if (node.UnderCollapsedCluster())", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "double btKin\n\t\t\tm_jumping()\n\t\t\t\t//falling\n\t\t\tm_jumpSpeed = m_jump = m_jump = m_jump = m_jump = (double)m_jump = m_j", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (int i = 0; i < initializers.size(); i++) {\n            AliasingVisitor.commonAssignmentCheck(initializers.get(i),\n                    AliasingVisitor.canBeLeaked(initializers.get(i)),\n                    \"unique.", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tnbttagcompound.setTag(\"tag\", nbttagcompound);\n\t\t\t", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\tif (typeAttribute != null)\n\t\t\t{\n\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\tCommentItemContext,\n\t\t\t\t\tCommentXmlNode,\n\t\t\t\t\t_class,\n\t\t\t\t\t_", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{\n\t\t\tif (real != expected1 && real != expected2)\n\t\t\t{\n\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\tresult = instrumentation.addInstrumentationPoints(classType);\n\t\t}\n\t\t(Collections.singleton(classType));\n\t\tverify(instrumentationApplier());\n\t\tverify(instrumentationApplier);\n\t\tverify(instrumentationApplier", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicitlyCopied = true;\n\t\tif (this.isImplicit :\n\t\t\t\t&& this.isImplicitly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           if (min1 > narrowL) {\n              continue;\n            }\n            int min2 = wideLExtent[end][r.leftChild];\n            if (min2 > narrowL) {\n              continue;\n            }\n            int max1 = wideRextent[", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "           'rsync_pipe_processor_loop_invocation_failed_invocation_file_list_file\n        ]\n        pipe.assert_called_once_stdin.close.\n        pipe.stdin.write.assert_called_once_\n        ]\n        pipe.", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvoid DbgThreadsChanged(object sender, DbgManagerChangedEventArgs e) {\n\t\t\t\t\t{\n\t\t\t\t\t\tvoid() {\n\t\t\t\t}\n\t}\n\t\tvoid DbgProcess_DbgThreads_UIThreads_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"type\", String.valueOf( \"color\", \"color\", \"color\", \"s\"\n\t\twriter.attribute( null, \"texture\"\n\t\t{\n\t\t\twriter.endTag( null, \"name\", \"texture\" );\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact) proxyThat;\n\t\t\tif ( this.getId().equals( that.getId() ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\n# Read in the initial configuration\n#structures = read_clones_file.read_clones_file('./data/initial_config.clones')\n\n# Create the multi-body system\n#bodies = [Body(loc, orient) for loc, orient in structures", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       # We can't_make_opt(node,\n                                                                                                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].required = False\n    self.fields['groups'].widget = forms.CheckboxSelectMultiple()\ndef save_m2m():\n    \"\"\"Save the many-to-many field\"\"\"\n        self.fields['groups'].widget = forms.CheckboxSelect", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "               return value\n                event.\n                return value\n                    def before_compile(query)\n                    return query.with_compile(query.\n        def before_compile(self, query.\n        \"\"\"\n        def wrap(query.compile(query.with(query.compile(", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return super(ConditionalDescriptor, self).definition_to_xml(xml_object)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.update_filter(self.data, self.current_filter, self.data, self.get_axes_filtered_data())\n        self.update_filter(self.data, self.current_filter, self.data, self.get_axes_filtered", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t{\n\t\t\t{\n\t\t\tthrow new UnknownTypeException : Type : Instruction\n\t{\n\t\t\tpublic sealed class\n\t\t{\n\t\t{\n\t\t\tinternal sealed class Ldref : Instruction\n\t\t{\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\n\t\t\tthis.objTypeBox.Items.AddRange(new object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/mail/syncmail.py\"]))\n        self.assertEqual(c.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            this.data.put(row.get(ID_KEY), new ArrayList<>());\n            termData = this.data.get(row.get(ID_KEY));\n        }\n        for (Map.Entry<String, String> entry", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(wand.getItemStackType() == Item.ITEM_TYPE_MAGMA_WAND) {\n\t\t\tif(supertile.getWorld().isBlockLoaded(supertile.getPos())) {\n\t\t\t\tsupertile.getWorld().", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           for (Node n : c.getComponents()) {\n                intrinsicCohesion += this.getRepresentativity(n, c);\n            }\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intr", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "                           if flags[flagname] != minfo['flags'][flagname]:\n                                are_equal = False\n                                logger.info(\"ERROR: Document %s: Expected flag %s but got %s\" % (docid, str(minfo['flags'][flagname", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t{\n\t\t\tupdateListViews.Columns.Clear();\n\t\t\t\n\t\t\t\n\t\t\tupdateListView.Columns.Columns.Clear();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   exDateList.addAll(exceptionDates);\n    return new ExDate(exDateList);\n  }\n  private Datable<?> endingAt(Datable<?> startDate) {\n    return startDate.with(Datable.END_OF_DAY);\n  }", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceComponent = SourceComponent;\n\t\tsourceEventBinding.SourceProperty = SourceProperty;\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       }\n        }\n        }\n        // Authorization check\n        if (containerName) {\n            // Authorization check\n            if (containerName) {\n                if (containerName) {\n                String userName) {\n                    nodeName = nodeName, containerName) {", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tpublic class CoreForms;\n\t\t\tpublic static class CoreForms\n\t\t\t\t\n\t\t\tpublic static class CoreForms;\n\t\t\tpublic static class grdAlertsGrid", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n/*\n * \n */\npublic class SqlPropertiesParser {\n    public static Map parse(String sql, String... keys) throws Exception {\n        Map result = new HashMap();\n        List l = runSql(sql);", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam.make_von_den_hierarchy_uri = 'http://' + uri\n\n\n\n\n\n\n        for_pred_uri = 'http://opencontext.org\n                    .\n                    .filter(Q\n\n        \"\"\"\n        \"\"\"\n        for new_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           if (XFON\n            {\n                buffer.Append(\"\n                buffer.Append\n                .Append(\"\n                .Append(\"\n                .Append(\"\\n\");\n            }\n            buffer.Append\n                .Append(\"\\n\");\n            {\n                buffer.Append\n                buffer.", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tbytes[posn++] = cjkToJis [ch - 0xFF60];\n\t\t\t\tbytes[posn++] = cjkToJis [ch - ", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\ndef tricore_ld(obj, b(4) ]\", mnemonic=\"LD_B\", mnemonic=\"LD_B\", mode=\"Long-offset\")\ndef tricore_ld(obj, mode=\"Long-offset)\n@ispec(\"32<1(", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this.name.equals(name);\n    }\n    /**\n     * Returns the ID of this game type\n     */\n    public int getID()\n    {\n        return this.id;\n    }\n    /**\n     * Returns true if this game type is the same", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd.DiscretionaryAcl = null;\n\t\t\tAssert.AreEqual (0, csd.DiscretionaryAcl.Count);\n\t\t}\n\t\t[Test]\n\t\tpublic void DefaultDaclIsAllowed ()\n\t\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__idle(self.__process, *args, **kwargs)\n    def __idle(self, func, *args, **kwargs):\n        def delayed():\n            func(*args, **kwargs)\n        GLib.idle_add(delayed)\n    def __", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       PhotonEditor.CurrentSettings.cloudAppId = null;\n        if (PhotonEditor.Current.cloudAppId = null;\n        GUILayout.SetText(CurrentLang.OkButton;\n        GUILayout.SetSettings.ServerSettings.photonAddress = this.", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       }\n    }\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                Intent homeIntent = new Intent(getActivity(), MessageView.class);\n                home", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           phase_cc = np.exp(2j * np.pi * self.ibzk_kc[k, :, np.newaxis])\n            psit_k = np.tensordot(psit_G, phase_cc, axes=([1], [1]))\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       Response response = utkastController.createUtkast(intygsTyp, \"luse\");\n        assertEquals(OK, intygsutk.createUtkastService.createNewUtkastRequest(intygsTyp, intygsTyp, intygsTyp,", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\tforeach(ILNode bb) {\n\t\t\t\tforeach(ILNode block) {\n\t\t\t\t\tforeach(ILNode block.Body.AddRange = i =>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tforeach(ILBlock", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (rb.IsKinematic = true;\n\t    }\n\t    }\n\t\n\t\n\t\n\t\n\t//\tBodyPart\n\t    //\n\t    //\n\t//    if (rb.IsRagdoll) {\n\t    if (rb", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   _not_serialized_attrs_ = ['fracture_type']\n    def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.fracture_type =", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff] = (byte)((num >>> 24) & 0xff);\n        out[outOff + 1] = (byte)((num >>> 16) & 0xff00);\n        out[outOff + 2] = (", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           this.objectVariables = objectVariables;\n        }\n\t    private final Map<String, PatternNode> objectVariables;\n\t    private final Iterable<PatternMatch> source;\n\t    FilteredPatternFinder( Iterable<PatternMatch> source,\n\t\t   ", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   if key == 'code':\n        pass\n    elif key == 'deb':\n        node_json['from'] = value\n    elif key == 'fin':\n        node_json['to'] = value\n    elif key == 'NODE':\n        for child_xml_json in", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           this.revalidate();\n            this.repaint();\n          }\n        }\n        public void mousePressed(MouseEvent e) {\n          if (btn.isSelected()) {\n            btn.setSelected(false);\n            this.revalidate();\n            this.repaint();", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.table import Table\nfrom astropy.io import fits\nimport matplotlib.animation as animation\n%matplotlib inline\ndef getLC(ID):\n    filename, redshift, data = getNearestLC", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterHeight(); z += toolDiameterInPx)\n    {\n", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   expenses.updateExpenses(newId, deleteId);\n                    //Update budget items\n                    expenses.updateBudgetItems(newId, deleteId);\n                }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(result == ", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               Marshal.DestroyStructure(m_ptr, typeof(IntPtr));\n                m_ptr = IntPtr.Zero;\n            }\n            if (disposing && (m_ptr != IntPtr.Zero))\n            {\n                Marshal.FreeHGlobal(m_", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = None\n\n# Uncomment the following line if you want to use a custom login backend.\n#\n####################\n#                             #\n####################\n#    #\n####################\n#\n####################\n#\n#    #\n############\n#", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t\tqueue.RemoveRange(0, numberToCancel);\n\t\t\telse\n\t\t\t\treturn;\n\t\t}\n\t\tpublic bool BuildUnit(string unitString", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    self.treeView.clicked.clicked.setCurrentDir.setFilter(self.fileSystemModel.setFilter(self.filter)\n        self.fileSystemModel.setFilter(self.fileSystemModel.setNameFilters(self.fileSystemModel.setNameFil", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re.sub(self.bld.post_rule\n        if self.bld.path = self.path\n        #.\n        # TODO\n        \"\"\"\n        def _before_method(self)\n        def _before_rule('m4\n        @taskgen", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.wait_for_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        rospy.loginfo(\"Result: %s\", result)\n        if result.success:\n            rospy.log", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t+ chemical[ 0 ][ idx + 1 ] - chemical[ 0 ][ idx + reactorExtent ] ) ) ) * hdiv0 * dt;\n\t\t\t\t\tdelta[ 0 ][ idx ] = delta[ 0 ][ idx ]", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"DATE format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextDateAdapter().of(timestampFormatFactory.getFormat(pattern), timestampLocale));\n                break;\n            case", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Direction = ParameterDirection.Output", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\t{\n\t\t\treturn new MyCompositeType(new MyCompositeType(new HbmProperty(member, mapping, member, property, column, value, column, column, column, column.length, column.type, column.Type, column.Type, column.", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       if self.key_id\n        if self.key_id\n        if self.state = self.authentication_enable:\n            if self.authentication = 'enable'\n        if self.authentication = self.ntp_auth_conf_enable = self.module.config_ntp", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.assertEqual(self.store.subtree_edited_on, component.subtree_edited_on)\n        self.assertEqual(component.subtree_on, edited_on, self.user_id, component.edit_on, self.user_id,", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "digest.update((byte) ((TEXT_CODE & 0xff) >> 0));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['comparison'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['log", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           if (api.ParameterDescriptions.Count == 0)\n            {\n                return null;\n            }\n            // If the action has a single parameter, we can use it to get the type.\n            if (api.ParameterDescriptions.Count == 1)\n           ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "           if isinstance(entry, DateEntry):\n                entry.date_set(value)\n            else:\n                entry.handler_unblock(entry.editing_done_id)\n                entry.handler_block(entry.editing_done_id)\n                callback()\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.setPropertyValues(new Object[] {\n                new PropertyValue(LegacyConfigPostProcessor.PROPERTY_PROPERTIES, new PropertyValue(\n                        LegacyConfigPostProcessor.PROPERTY_LOCATIONS, new Locations(newLocationList))),\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f.readlines():\n                if not line.strip():\n                    raise ValueError(\"Blank line found in %s\" % path)\n        except ValueError as e:\n            module.fail_json(msg=str(e))\n        finally:\n            f", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.IUnknown)]\n            IMFMediaEventDescriptor[] ppEventDescriptors,\n            ref int pnEventDescriptors\n            );\n        [PreserveSig]\n        int", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       return authorizations.addAuthorizedObject(\n                SecurablePrincipal.of( directedAclKeys ),\n                PrincipalType.ROLE,\n                EnumSet.of( Permission.READ ) );\n    }\n    @Override\n    public void setUp() {\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag matches what is expected.\n        This verifies the element tag matches what is expected.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.nodeType == Node.node\n        node.parentNode = None\n        node = self.nodeType = Node.nodeType, node.nodeType = node.nodeType\n        if node.nodeType == Node.ELEMENT_NODE_NODE\n        node.", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t}\n\t\t\tvalidateEMSSceneSection#validateEMSSceneSectionPatientCount\n\t\t\ttestEMSSceneSectionMassCasualty#\n\t\t\t\tupdateToFail\n\t\t\t\t\tupdateToPass\n\t\t\t\ttest", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\t\tencoder.writeTypeAndLength(encoder.getLength()\n\t\t\t\t\tencoder.getLength = encoder.getLength = encoder.getLength(encoder.getLength = encoder.getLength();\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the player's weapons\n        myWeapons = myPlayer.getWeapons();\n", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        // send join request\n        EbRegistration registration = GameEngine.model().getGame().getRegistrationByColor( color );\n        if( registration != null )\n        {\n          EbRegistration.sendJoinRequest( registration, GameEngine.model", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error %d in %s\" % (r.status, url))\n    if r.status != 200:\n        raise RuntimeError(\"Error %d in %s\" % (r.status, url))\n    filename = get_filename(r.get", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\t\tif (response.DryRunMergedOrder == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfailureReason = SR.Mer", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Reaction contains more than one metabolite.\")\n    return [elem for elem in elements if elem != 0]\n\n    elements = [elem for elem in elements if elem != 0]\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return (\n            super(UnitManager, self).get_queryset().filter(\n                path__startswith=pootle_path,\n            )\n        )\n    def get_for_path_and_user(self, pootle_path, user):\n        \"\"\"", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='course',\n            name='course_category',\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "               self.logger.debug(\"ARP request {}->{} on port {}\".format(arp.protodst, arp.protosrc, portnum))\n                self.dstmac_cache[dstip] = arp.opcode\n                self.logger.debug(\"Switch {}", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_MaxCount > 0)\n      m_RecentItems.subList(m_RecentItems.size() - m_MaxCount, m_RecentItems.size()).clear();\n    m_Recent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Skills[SkillName.Hiding].Value > src.Skills[SkillName.DetectHidden].Value)\n                return false;\n            return true;\n        }\n    }\n}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "   @Nullable\n    public Date getHalfTradePeriodState.getTradePeriodState() {\n        return state;\n    }\n    }\n    public void\n    //\n    // Getter\n    // Getter\n    //\n    //\n    //\n    //\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\tif (Node.down)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tmReadData(byte[] buff)\n\t\t\t\t\tbuff[0] = (byte)OutputReport.Read(buff)\n\t\t\t\t\tbuff[1] = (byte)((int) | (int) | (int)0);\n\t\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = direction;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif(o1 == null ||", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t\t\treturn DateTime.Now.ToString( \"yyyyMMdd_HHmmss\" );\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(NHibernate.Expression.Expression.Gt(\"Id\", 1))\n\t\t\t\t\t.Add(NHibernate.Expression.Expression.Gt(\"Children", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           _glueUnits2Units(i, _indx2Units(i1);\n        }\n        }\n    }\n    }\n        public override int PText {\n            get;\n            set {\n                get {\n                    return _pText;\n           ", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       view = self.create_view(navigator.get_class(self.ENTITY),\n                                   self.ENTITY.fields,\n                                   self.ENTITY.currency)\n        view.fill_with(\n            {\n                'description': rate.description,\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( _lockedToScratch )\n\t\t\t{\n\t\t\t\tif ( _scratchSize == 0 )\n\t\t\t\t{\n\t\t\t\t\tthrow new AxiomException( \"Cannot write to index buffer that is not locked.\" );\n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.scan_type.value = self.tuning_type.value\n\t\tself.scan_sat.system.value = self.scan_s.system)\n\t\tself.list.append(self.scan_sat.value = self.scan_sat", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                throw new IllegalArgumentException(\"tcpKeepAliveFilter \" + optval);\n            }\n            return;\n        case ZMQ.ZMQ_TCP_KEEPALIVE_CMD:\n            tcpKeepAliveCmd = (Integer) optval", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               if (tokens.StringValue.StartsWithin(PdfObject.Length = 0;\n                    for (int i = 0;\n                    }\n                    while (tokens.StringValue.\n                }\n                }\n                in\n                break;\n               ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assertEqual(s.get_interface_decomposed(), ['foo', 'bar", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n        if self.get_dual_resolution():\n        self.get_options().get_options().get_degree_bounds()\n        self.get_options().get_degree_bound()\n        for_degree_bound in self.get_options().get_", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(\n        public void ParseExponent\n        {\n            Assert.AreEqual(\n            {\n                TestAllTypes.Builder builder = TestTypes.Builder();\n            {\n            {\n                Assert.AreEqual(\n            {\n            }\n            }\n       ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic Object set(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Object old = readElementByIndex( key );\n\t\t\tif ( old !=", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\tm.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'type': 'ir.actions.client_multi'\n                 , 'res_id': self.id,\n                 'target': next_action}\n\n    @api.model\n    def attendance_action_change(self, employee_id, check_in=True,", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow r = form.grdResults().getRows().get(orderInvestigationLiteVo.getSpecimenIndex());\n\t\tif (r == null)\n\t\t{\n\t\t\tr = new grdResultsRow();\n\t\t\tr.", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Get the index of this", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       self.terminator.add_new_tab(cwd, profile)\n        return True\n    def on_destroy(self, window, event):\n        \"\"\"Handle the window being destroyed\"\"\"\n        if self.terminator.do_destroy_window(self.uuid):\n           ", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               TypeInfo structTypeInfo = new TypeInfo(\n                    }\n                    TypeInfo = StructTypeInfo(\n                    StructTypeInfo,\n                    TypeInfo = {\n                        TypeInfo = new[] {\n                    TypeInfo = new StructType(\n                    TypeInfo(", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\treturn base_type != null;\n\t}\n\t\t}\n\t\tset {\n\t\t\t}\n\t}\n\t}\n\t}\n\t}\n\tpublic bool IsNotPublic {\n\t\tget {\n\t\t\t}\n\tset {\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"evidence\"></param>\n        /// <param name=\"dependentEvidence\"></param>", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self._context = OpenSSL.SSL.Context(protocol)\n        self._context.set_options(\n            OpenSSL.SSL.OP_NO_SSLv2 |\n            OpenSSL.SSL.OP_NO_SSLv3 |\n            OpenSSL.SSL.OP_NO", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.vbox1\n\t\t\tthis.vbox1;\n\t\t\t// Container child vbox1\n\t\t\tthis.vbox1\n\t\tthis.vbox1;\n\t\t\tthis.vbox1.Add (this.vbox1);", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\n    gtk.vbox.pack_start(gtk.hsep, gtk.HAlign.\n\n    gtk.set_property_visible = True\n    gtk.hbox.show_all()\n    gtk.hbox.show_all()\n    g", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Go-to-definition\": QKeySequence(Qt.CTRL + Qt.Key_Tab),\n    \"Go-to-definition\": QKey_C,\n    \"Go-to-definition\": QKey_C_Tab_C_R\n    \"Go-to-definition", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return false;\n  }\n  \n  protected void createDesignPart(EditPart parent, Rectangle bounds)\n  {\n    super.createDesignPart(parent, bounds);\n    if (getFigureFactory() != null)\n    {\n      getFigureFactory().", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\n\t\tthis.butAttach.Location = new System.Drawing.Point(10, 863);\n\t\tthis.butAttach.Name = \"butAttach\";\n\t\tthis.butAttach.Size = new System.Drawing.Size(82, ", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n        if (sb != null)\n        {\n            string = sb.toString();\n        }\n        else\n        {\n            string = null;\n        }\n        return string;\n    }\n}\n\n/**\n * Marker class for content that has been marked for editing,", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t// TODO:\n\t\t\t// (\n\t\t\t//\t0x91, 0x9F, 0x0A, 0x0F, 0x02, 0x0E, 0x01, 0x0E", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    current_align += SerializerCDRImpl.getI32Size(current_align, intVal);\n\t    \n\t    current_sum += current_align;\n\t    \n\t    return current_sum;\n\t}\n\t\n\t/*\n\t * This method returns", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               # FIXME: this is a hack to get around the fact that the cron module does not support\n                #        the 'comment' parameter.  This should be fixed in the cron module.\n                if comment == name:\n                    return [comment, l]\n                comment = None\n", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# MeshModifier_vertex_group\n\nclass MeshModifier_vertex_group(modifier_vertex_vertex_vertex_group\n\n\n\nclass MeshModifier_vertex_group(modifier)\n\n\nclass MeshModifier_vertex_", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           for(int i = 0; i < rankCounts.length; ++i)\n            {\n                if(rankCounts[i] == 0)\n                    rankCounts[i] = minLikelihood;\n                else if(rankCounts[i] ==", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       assertEquals(3, neighbors.size());\n        assertTrue(neighbors.contains(1));\n        assertTrue(neighbors.contains(2));\n        assertTrue(neighbors.contains(3));\n        val neighborIterator = vertex.neighb", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "               else:\n                    print(self.packet)\n                    self.inspect = self.parser(self.choice, cap)\n            except (KeyboardInterrupt, EOFError):\n                self.print_usage()\n                return\n            except (ValueError, IndexError", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "this.rptComboBox.Items.AddRange(new object[] {\n            \"Money Received Report (Payments Received)\",\n            \"Money Received Report (Documents Created)\",\n            \"Items Sold/Issued Report\",\n            \"Rooms Needing Cleaning\"", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'meta': {'unique_t", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               return;\n            if (isReturnAllTypes()) {\n                return;\n            }\n        }\n    }\n        }\n        return false;\n    }\n        return;\n    }\n    }\n    }\n    private void processImportIncludeInternal(Include(Include) {", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if ids:\n            self.add_follower_id.\n        if ids:\n            self.onchange_holidays_invalidate_date_from_date_to_from:\n        return self.onchange_validate: self.write(cr, uid, ids", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           Setup the grid\n        /// <summary>\n        /// <returns>\n        /// <param name=\"gridBaseManager.GridBase\n        ///\n        /// <returns>Returns the number of rows selected\n        ///\n        ///\n        ///\n        ///\n        /// <c>", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return string.Format(\"MixerLine<{0}>\", mixerLine.szShortName);\n        }\n    }\n}\n\n\n# + dotnet_interactive={\"language\": \"csharp\"}\n// Create a new mixer line\nvar mixerLine = new", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tif ( value1\n\t{\n\t\t\tvalue5 = null;\n\t\t\t}\n\t\t}\n\t\t\t}\n\t\t// CareContext\n\t\tif ( null\n\t\t{\n\t\t\tvalue1 = null;\n\t\t}\n\t\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           call([\"cargo\", \"build\"] + opts + params,\n                 cwd=base_path,\n                 env=env)\n        if android:\n            # Build the APK\n            status = call(\n                [\"cargo\", \"build\", \"--release\", \"--bin", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble optimisticScore = this.getOptimisticScore(rule, score);\n\t\t\t\treturn optimisticScore;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               StashMessage.Text = gitStash.Message;\n            }\n        }\n        private void LoadGitItemStatuses(object sender, LoadGitItemStatusesEventArgs e)\n        {\n            var gitStash = Stashes.SelectedItem as GitStash;\n            if", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == out_buffer0_to_bm0_addr_item_to_item_0_to_0.out_address\n    assert lattice.cbuffer.get_object(bm0_index).", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return this.match(that) == 0;\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "\n        }\n    }\n    public class AddNumbersService\n    {\n        public AddInt(int a, int b)\n        {\n            return AddInt(int a, int b);\n        }\n    }\n    }\n    //\n    [System.Web.Services.", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \",\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static String erstelleString", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "   archive_index = load_archive_index(args)\n    if args.func is not None:\n        return args.func(archive_index, args)\n    else:\n        parser.print_help()\n        sys.exit(1)\nif __name__ == '__", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.cmd_ss, self.cmd_token = self.cmd_token\n        self.cmd_ss = self.cmd_ss\n        self.cmd_ss, self.cmd_es = self.cmd_ss, self.state = 'IDLE'\n        self.state", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    v_1 = r_1;\n    do {\n      // (, line 8;\n      // (, line 9:\n      // (, line 10:\n      // (, line 10:\n      // (, line 11:\n     ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = dins.readObject();\n            } catch (IOException e) {\n                System.err.println(\"Error reading message: \"+e);\n            }\n            if (o != null) {\n                ChannelData cd = new ChannelData(channel, o, fingerprint);\n               ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   self.cert.set_key_usage_type\n    def _get_all_names(self):\n        return self.cert.get_subject_key_cert_ext_key_extended_key_algorithm_name_cert.get_extension_name_value_ext =", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tif (i->second.find (this) != i->second.end()) {\n\t\t\t\t\tstill_there = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t/*", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   return [unicode_to_utf16(X)]\n    #   This is wrong, because it does not take into account the fact that\n    #   the interval may be split into multiple intervals.\n    return [unicode_to_utf16(X)]\n\n", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tif (la.kind == 29) {\n\t\t\t\tGet();\n\t\t\t\twhile (la.kind == 29) {\n\t\t\t\t\tif (la.kind == 29) {\n\t\t\t\t\t\tGet();\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom'] = line.product_id.uom_id.id\n            edi_doc['product_qty'] = line.product_uom_id", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<PermissionService.PermissionService.PermissionService.createPermissions());\n        }\n        permissions.add(virtualFolderNodeRef.getChildRefs());\n        vf2 = vf2NodeRef.getChildRef.getChildRef();\n        assertNotNull(", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           devices = list(devices.match_parent(parent))\n\nWhy is the second line of code using 'match_parent' and 'list'? It seems like the 'devices' variable should be directly passed to 'match_parent'. Can someone explain this? I'm a bit confused", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    data = device.check_inspection()\n    print(data)\n    data = device.notification_postDevicetoken(loginId, password)\n    print(data)\n    data = device.exploration.explore(areaId", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "\n    # We find the fit parameters.\n    rd = { 'fit': 'uvf,\n        'antennas': '\n            freq': 'freq': 'channels': [\n            'st': { 'antennas': [ 'stations': [ 'ant':", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = ???;\n        }\n        public override int ItemID\n        {\n            get { return ItemID; }\n            set { ItemID = value; }\n        }\n    }\n}\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> tunerList = tunerList.getTuner.getAnalogTuners.getTuner.getAnalogTunerHdrsync.getDeviceList.getAnalogDevices.getDeviceListPaths.getPaths();\n", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length < 2) {\n        throw new IllegalArgumentException(\"RegexNER mapping file has a line with less than two columns: \" + line);\n      }\n      String regex = split[0];\n      String type = split[1];\n      Set<String", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "           #return [SCons.Node.Path(p) for p in include[1]]\n            #return [SCons.Node.Path(p) for p in include[1]]\n            #return [SCons.Node.Path(p) for p in include[1]]\n           ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, *args, **kwargs):\n        self.datasource = PythonDatasource\n        self.datasource = PythonDatasource\n        return self.datasource\n        >>> from mapnik.Layer\n        >>> from mapnik\n        >>> lyr = Layer(datas", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "       self.up = self.port\n        self.port = self.port\n        self.description = self.description\n        self.interval = self.interval\n        self.interval = self.interval\n        self.manual_resume = self.manual_resume\n        self.manual", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read()\n    self.read", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n    }\n    public IAction getActionObject(String className) throws Exception {\n        return (IAction) getActionObject(className, null);\n    }\n    public IAction getActionObject(String className,", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "   self.assert_equal(self.course_id,  # pylint: disable=unused-imports\n    self.assert_thread_id)\n    @patch.set_request_store_id,\n    def test_create_thread_id\n    @patch.", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           SCons.Tool.Tool.add_action(target, source, env, embedManifestDllAction, embedManifestDllCheck, 'LDMODULE')\n    return 0\ndef embedManifestCheck(target, source, env, for_signature):\n    \"\"\"", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           IStatus result = execute(getShell().getSelection(), new SubProgressMonitor(new ProgressMonitorDialog(getShell(), \"Executing action...\", true), 100));\n        } catch (OperationCanceledException e) {\n            // Do nothing\n        } catch (", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tdata.counts=new int[meta.getFieldCount()];\n\t\t\n\t\treturn super.init(smi, sdi) && this.isOK();\n\t}\n\t\n\tpublic boolean isGloballyFiltered(String tag)\n\t{\n\t", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   # regr\n\n\n\n@freeze_time\n    assert f(2014,1, 1, 12:30)\n    )\n    assert f(2014,1,12,1, 12,1, 12", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //int\n            {\n                PlaceNPC(int x, int, string y, string z, int, string s, string s, string, string, string s, string s, string s, string, string, string, string, string, string, string, string s, string, string", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\n                \"Guest doesn't support suspend\")\n    @error_context.context_aware\n    def verify_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       System.out.println(\"[SUB]\");\n        System.out.println(\"[UNSUB]\");\n        System.out.println(\"[UNSUB]\");\n        System.out.println(\"[UNSUB]\");\n        System.out.println(\"[UNS", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestParameters(res, destination, r);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedValue = value;\n\t\t\tuint compressedValueBytes = (uint)0;\n\t\t\tuint compressedValueBytesIndex = 0;\n\t\t\twhile (value > 0) {\n\t\t\t\tcompressedValueBytes = (uint)(", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.thisdir.path.refresh_content()\n        self.fm.reload_copy\n        self.fm.thisdir.path)\n        self.fm.thisdir.path.\n        self.fm.fm.vcs.stage_dir.get_directory.", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t\t// The following test case is left incomplete.\n\t\t\t// You need to complete the test case by providing the missing code.\n\t\t\t[Test]\n\t\t\tpublic void CreateInstance_NonCOMType ()\n\t\t\t{\n\t\t\t\t// TODO: Add", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       locale = Locale.objects.get(code='fr')\n        repo = self._setup(locale, None, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 4)\n        self.assertTupleEqual(\n            _actions4", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"sending command: %s\", cmd.type, self.control_message.send_control_messages.send_control_messages.parse_control_messages.parse(self.control_messages\n        self.Log.debug(\"sending command : %s\",", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "   PlayerGroup group = player.getPlayerGroup2();\n    if (group != null) {\n        group.onEvent(new PlayerGroupLeaderChangedEvent(group, player));\n    }\n}\n    /**\n     * Send a message to all group members\n     */\n   ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    def show(self, raw=False, **params):\n        if raw:\n            return self\n        C = self.cols\n        if colsz := params.get(\"colsize\"):\n            C = [c for c in C if c < len(colsz)]\n       ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       tree_model.iter_children(tree_iter)\n        self.assertEqual(tree_model.iter_n_children(tree_iter), 0)\n    def _create_store_map(self, row, col):\n        store_map = ga_Gtk.", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent instanceof GridColumn) {\n\t\tGridColumn gridColumn = (GridColumn) parent;\n\t\tif (gridColumn.getValues() != null) {\n\t\t    if (StringUtil.isNotEmpty(values)) {\n\t\t\tString values = StringUtil", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               InventoryEntry invEntry = Inventory[0];\n                invEntry.ItemSign = \"ItemSign\";\n                invEntry.CountMin = 0;\n                invEntry.CountMax = 0;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tims.careuk.vo.ChangeOfServiceVo[] voArray = new ims.careuk.vo.ChangeOfServiceVo[beans.length];\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           new Version(1, new int[]{0, 203, 245, 210, 200}, new ECBlocks[]{\n                new ECBlocks(1, new ECB[]{new ECB(1, 1)}),\n                new ECBlock", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t// Blake2b, 0x3C, 0x3C, 0xC1, 0x2, 0x3C, 0x3C, 0xF, 0xF, 0x9A, 0xC", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, false) / multiplier) == cost;\n\t}\n\t/**\n\t * Returns the discount applied to the player's mana.\n\t * @return The discount applied to the player's", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Uncomment the next line to enable the admin:\n#INSTALLED_APPS += ('django.contrib.admin',)\n# Uncomment the next line to get profile for non-superusers\n#INSTALLED_APPS += ('django.contrib.auth.backends.AllowN", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but this queue has {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\t\t\t\n\t\t\t\t\tLayer NextFrameClone = NextFrame.Clone ();\n\t\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.getActionTraceListJPA() != other.getActionTraceListJPA())) {\n            return false;\n        }\n        if ((this.screenshots != null)) {\n            if ((other.screenshots == null))\n                return false;\n", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.state = DriverCallState.VOICE_CALL_STATE_ACTIVE;\n            dc.setVoiceState(ret.getInts(p);\n            dial = new Object;\n            num = p.readInt();\n            num = p.read", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\tif (licence.getName().equals(\"CC-BY-4.0\")) {\n\t\t\t\t\t\t\trelevantLicences.add(new LicenceImpl(LicenceImpl.LicenceType.CC_BY_4_0,\n\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           newVertices[y * xSizeP + x] = newVertices[y * xSizeP + x];\n            newNormals[y * xSizeP + x] = newNormals[y * xSizeP + x];\n            newUV[y * x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\trawResult = client.call(\"add\", testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\t// Check if the returned value is the expected value\n\t\t\t\tif (rawResult", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[]{0, 0};\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[]{0, 0};\n\t\t\t}\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name + \" not found\");\n        }\n        else\n        {\n            out.writeBoolean(true);\n            out.writeObject(found);\n        }\n        out.flush();\n        out.close();\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           pixel_x = 0,\n                bitmap_w[offs] = 0,\n                bitmap_w[offs] = 0,\n                    bitmap_w = 0,\n                    stactics_vide,\n                    stactics_vide,\n                ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            }\n            {\n                var target = spell.To\n                :\n                    {\n                    : CollisionObject\n                    : CollisionObject\n                    .Where(\n                    :\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isAdjacentTo(x, y)) {\n            return true;\n        }\n        return false;\n    }\n    private void doFinalOrientation(Graph dag, Graph graph) {\n        if (completeRuleSetUsed) {\n            if (verbose", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (plcs[i] != null)\n                        plcs[i] = plcs[i].Parent;\n                    else\n                        plcs[i] = pop.Children[i];\n                }\n            }\n            return null;\n        }\n        ///", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment otherAttachment = (FinancialEntityAttachment) other;\n        if (this.attachmentId == null) {\n            if (other.attachment", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       m_Item.OnAfterDelete(mobiles[i]);\n                    }\n                }\n            }\n            protected override void OnAfterDelete()\n            {\n                base.OnAfterDelete();\n                m_Timer.Stop();\n            }\n            protected override void OnMove", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, DateTime.Now);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual bool Message(PlayerMobile user, string text, params object[] args)\n\t\t{\n\t\t\tif (!CanMessage(user", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getComponentIds(String sUserId, String sComponentName) {\n    return mock.getComponentIds(sUserId, sComponentName);", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final File file = (File) mListView.getItemAtPosition(key);\n                            if (file.isDirectory()) {\n                                final ArrayList<File> filesInDir = new ArrayList<File>();\n                                for (String s : file.list()) {\n                                   ", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    this.channel.close();\n\n    if (this.preparing) {\n        this.preparing = false;\n    }\n    if (this.channel != null) {\n        this.channel.close();\n    }\n    if (this.channel != null", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               tipper_array = self._j_dict = None\n                \n        # check to see if there is a tipper_dict = None\n        # get the period_index = \n            z_dict = dict\n            # z_dict = dict\n            # z_values = z", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    return context.getString(resourceMany,\n                              DatabaseFactory.getIdentityDatabase(context).getUnverifiedRecipientCount(recipients));\n  }\n}\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_lib + extra_path)\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        return env\n    def get_build_dir(self, release=False, dev=False, android=", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, items in iteritems(type_paths):\n                for item in items:\n                    if isinstance(item, dict):\n                        # This is a Stub\n                        item = Stub(**item)\n                    elif isinstance(item, dict):\n                ", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (script instanceof Script) {\n            throw new ClassCastException();\n        }\n    }\n    private Binding createBindingForCompilation() {\n        return new Binding() {\n            @Override\n            public Object getProperty(String name, Bindings bindings, Object[] args, int", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n            WrappedNetworkLayer<T, R> networkLayer = new WrappedNetworkLayer<T, R>(_networkLayer, _networkLayer.Description);\n\nI'm not sure what to put in the place of the <code>_networkLayer</code> parameter.\n\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     grad_Etf = grad[i].flatten()\n      grad_E = grad[i].flatten()\n      grad_Etf = grad_Etf.flatten()\n      grad_E = grad_E.flatten()\n      grad_E = Etf*grad", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif(caseInsensitive)\n\t\t\treturn this.id.compareToIgnoreCase(((ims.ocrr.vo.OrderedInvestigationVo)obj).getId();\n\t\treturn this.id.compareTo(obj.getId());\n\t}\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.get(0).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(1).getTags(), asList(\"search-tag1\", \"search-tag2\"));\n        assertEquals(found.get(", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new ParameterImpl();\n        parameter.setParameterCode(\"DEPTH\");\n        parameter.setParameterValue(depth);\n        crawlParameters.add(parameter);\n\n        //EXCLUSION REGEXP\n        parameter = new ParameterImpl();\n        parameter.", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tif (kind == \"pattern\")\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t)\n\t\t{\n\t\t\t\t\n\t}\n\t\t\t\tif (sub == null)\n\t\t\t\t\t\n\t\t{\n\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\n                    if (colisionList.Count > 0)\n                    {\n                        extendedWillHit += colisionList.Count;\n                        extendedFarmLocation = colisionList.First().To2D();\n                    }\n                }\n                if (extendedWill", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t}\n\tprotected void setContext(\n\t\t\n\t\tsuper.setContext(loader, form, getFormFields, getFormFields, this.getFormReferences, this.getContext, skipContext, new FormLoader(loader, formLoader, loader, skipContext, skipContext,", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return sh(\"pip freeze\", capture=True)\n    # Uninstall the packages\n    for package_name in PACKAGES_TO_UNINSTALL:\n    if package_in_frozen(package_name, frozen_output):\n        sh(\"pip uninstall --", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           r.subs.new().value = 2\n        self.assertEqual(r.value, 2)\n        self.assertEqual(r.v, 2)\n        self.assertEqual(r.subs, [('2', 2)])\n        self.", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert Sum(x, (x, t, (x, t, (x, t, (x, b, (x, t, b), t, t, b, t, a, t, b, t, a, t, t, b, t, a, t, b", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tUnityEngine.WWW self=(UnityEngine.WWW)checkSelf(l);\n\t\t\tSystem.String a1;\n\t\t\tcheckType(l,2,out a1);\n\t\t\tUnityEngine.WWW a2;", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "           this._newStartingIndex = startingIndex;\n            this._oldStartingIndex = -1;\n            this.InitializeAdd(action, null, -1);\n        }\n        else\n        {\n            this._newStartingIndex = startingIndex;\n            this._old", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           objectToOutputStream(objectToWrite(objectToWrite);\n        }\n        }\n        }\n    }\n    public void testObjectToOutputStream();\n    }\n    }\n    }\n    public void testObjectToOutputStream() throws Exception {\n        Object objectToWrite = null;", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               c.Campus = Token2Csv();\n                break;\n                case Param.Country:\n                    c.Country = Token2Csv();\n                    break;\n                case Param.Gender:\n                    c.Gender = Token2Csv();\n                   ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "\t\t\t\t\t//if (bitmap.\n\t\t\t\t\t\t\t\t\tbitmap.Width;\n\t\t\t\tbitmap.Height = iconSize;\n\t\t\t\t\tbitmap.Width;\n\t\t\t\tbitmap.Save (bitmap.Width", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "           if (l.successor) {\n                l.addToSubroutine(l, jsr);\n            }\n        }\n        }\n            // This method is called when the basic block\n            // @see\n            // @see\n            // is this basic block\n            //", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method, __mStack, __domain, __intp);\n            var result_of_this_method = ILIntepreter.ToString(ptr_of_", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "comboLabelPosition.setSelection(PageSupport.getLabelPosition(position));\n\t\tcomboLabelPosition.setSelection(position);\n\t}\n\t\n\tprivate void setTitleColor(String color) {labelShowLabel.setBackground(new Color(this.getDisplay().getDisplay", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "self.driver, timeout, \"Test that the channel_to_get_value\n        self.assert_frame_value\n        self, curr_imageValue\n        self._getCurrentValue( driver, \"Image\")\n        self, \"Image\"\n        currImageValue\n        currImageValue", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.host_key = self.kexgss_kex_continue\n        m.send_kexgss_hostkey = self.gss_init_kex_init\n        self.old_kex_continue\n        self.kexgsex_", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getRoot().getChildAt(0);\n            if (node.getUserObject() == null) {\n                node.setUserObject(new DefaultTreeNode(connectionData, overallNodeTitle));\n            }\n            if", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                           (self.employee_id, from_date, to_date, code)\n                        )\n                return result\n        \"\"\"\n        \"\"\"        def sum(self, code, from_date, to_date=None):\n            if to_date is None:\n                to_", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mfrac = MfracToMfrac(mvir, zi, rvir, rc0.M200)\n    #MfracToMfrac\n    mfrac = MfracToMfrac(m, zi, frac=200.0)\n    #", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = (int) (Math.ceil(getText().length() * font.getSize() / \n                font.getMaxExtent())) + 10;\n        d.height = 20;\n        return d;\n    }\n    \n    @Override", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.container.cal_p2=0,self.p0_point\n        self.center_point\n        self.share_face=share_edge(self.flag='right_face')\n        self.flag='right_edge'\n        phi,phi,phi_", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)\n\t\t{\n\t\t\tShowOrHide(_portfoliosWindow);\n\t\t\tShowOrHide(_portfolios", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "register_to_edges(self, index, index)\n    def __init__(self, *args):\n        _Hist3D\n        _Hist3D\n        if index == 3D, index, index)\n        if index == None:\n            if index == None", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterHelper.addPresence(protocol, contact, RosterHelper.Presence.AVAILABLE);\n        }\n    }\n}\n\n\n## Your task:Without altering the existing code structure, refactor the `getQueryMessageArchiveManagement` method to include a new parameter", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", \"RGB\", (0.333333, 0.333333, 0.333333, 0, 0, 0, 0, 0, 0, ", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++)\n\t\t\t\tret.add(null);\n\t\t\treturn ret;\n\t\t}\n\t}\n\tprotected byte[] getLog24(int i) {\n\t\tfinal byte[]", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield self\n    if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data\")\n    else:\n        yield None\n        yield None\n        yield None\n        yield None\n        yield None\n       ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t\n\t\t\n\t}\n\t/**\n\t * This method will return the TL1 language engine.\n\t */\n\t@Override\n\tpublic TL1LanguageEngine getTL1LanguageEngine() {\n\t\treturn this;\n\t}\n\t/**\n\t * This method", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       req = self.req\n        if req.path.startswith('/'):\n            req.path = req.path[1:]\n        for p, app in self.apps:\n            if req.path.startswith(p):\n                return self.dispatch(req, app, start", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\tmodel = Model( data = None )\n\t\t\t\n\t\t\n\t\t\n\t\t[ ].\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (chance < 0)\n                return;\n            if (chance > 100)\n                chance = 100;\n            if (chance < 0)\n                chance = 0;\n            if (chance > 0)\n            {", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create a list of addresses\n            #\n            # Create a list of addresses\n            # Create a bit-width\n            if 'bitWidth' in ('bitWidth'\n            if 'type' in 'enum_type\n            if 'range' in 'range'\n        # Create a", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n                MessageBox.Show(\"No modules found!\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"No modules found in the current directory!\");\n            }\n        }\n        private void btnDone_Click(object sender, EventArgs e)\n        {\n           ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "           {\n                return this.SelectedItems.Count;\n            }\n            }\n            set\n            {\n                this.SelectedItems = value;\n            }\n        }\n        }\n        }\n        {\n            get\n            {\n                return (string)this.SelectedItems", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int i = 0; i = \n                {\n                    if(this.trianglesUsed[textureHash[textureHash]\n                    int vi = this.vertexArray[textureHash][vi]\n                    vi = vertex_t1\n                ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + header\n    return response\n", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        d.Close();\n                    }\n                    else\n                        break;\n                }", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   if name in ['center', 'upper_left_extent, 'center', 'upper_left_extent in (list of numbers, 'radius', 'center', 'units', 'units, 'upper_left_extent, 'upper_right_extent, radius, units", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.set(\"cr\", \"0\")\nCREATED,OBTAINED = QUEST.createAndLoad(NPC[WK_ROMP])\nQUEST.set(QUEST_SET_ST, OBTAIN", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t}\n\t\t\t\t\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\ttry\n\t\t{\n\t\t\tdouble;\n\t\t}\n\t\tempty;\n", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            VertexDataPointer = 0;\n            VertexDataNormalize = false;\n            VertexDataLength = 0;\n            VertexDataOffset = 0;\n            Vertex", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "       self._model = self\n        # this should already be the case. Is it necessary?\n        self.metabolites._reaction = set()\n        self.reactions._gene = set()\n        self.genes._reaction = set()\n    def remove_metabol", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(ims.clinicaladmin.vo.beans.TumourGroupListVoBean bean : beans)\n\t\t{\n\t\t\tcoll.add(bean.getBean());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\tif(current.x,lines.getTop,\n\t\t\t\t\tcurrent.y,return current.y,\n\t\t\t\t\t}\n\t\t\t\tif(current.getHeight()\n\t\t\t\t\tif(current.y,\n\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       LayoutAnimationController.setLayoutAnimation(mListView, set);\n    }\n    */\n\t\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\tif (resultCode == RESULT_CANCELED) {\n", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (row.FieldKey == 0)\n                {\n                    row.FieldKey = HighestNumber + 1;\n                    break;\n                }\n                else\n                {\n                    HighestNumber = HighestNumber > row.FieldKey ? HighestNumber : row", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tscoresSol[i] = this.classify(i);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
